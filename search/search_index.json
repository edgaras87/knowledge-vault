{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83e\udde0 Knowledge Vault \u00b6 Two modes, one brain: Cheatsheets \u2192 quick reference while coding Concepts \u2192 deeper understanding and architecture \ud83d\udd0e How to Use \u00b6 Tip Use the search bar for method names, error snippets, or concepts (e.g., @Transactional , N+1 , Content-Type ).","title":"Knowledge Vault"},{"location":"#knowledge-vault","text":"Two modes, one brain: Cheatsheets \u2192 quick reference while coding Concepts \u2192 deeper understanding and architecture","title":"\ud83e\udde0 Knowledge Vault"},{"location":"#how-to-use","text":"Tip Use the search bar for method names, error snippets, or concepts (e.g., @Transactional , N+1 , Content-Type ).","title":"\ud83d\udd0e How to Use"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/","text":"\ud83d\udd34 Redis: From Basics to Real-World Usage \u00b6 Redis (Remote Dictionary Server) is a lightning-fast in-memory data store used as a cache, message broker, and lightweight database. It stores data as key-value pairs , keeps it in RAM for near-instant access, and can optionally persist it to disk. It\u2019s often used alongside PostgreSQL: Postgres for durability, Redis for speed. \u2699\ufe0f 1. What Redis Actually Does \u00b6 Redis keeps everything in memory but optionally syncs to disk (snapshots or append logs). It supports complex data types, pub/sub messaging, and atomic operations \u2014 all with sub-millisecond latency. Use Case Example Cache Store frequently accessed DB results. Session Store Track logged-in users. Queue / Stream Background jobs, real-time feeds. Rate Limiter Count requests per user/IP. Pub/Sub Event notification between services. \ud83d\udc49 In short: Redis trades persistence for speed , but can be configured for both. \ud83e\uddf1 2. Core Concepts \u00b6 Concept Description Key Identifier for a piece of data (string). Value Data stored under a key \u2014 can be string, hash, list, set, etc. TTL Time-to-live (expiration). Persistence Data saved to disk (RDB snapshots or AOF logs). Pub/Sub Publisher sends messages to channels; subscribers receive them. Database index Redis has logical DBs numbered 0\u201315 by default. \u26a1 3. Basic Commands (Quick Reference) \u00b6 redis-cli # Start CLI ping # \u2192 PONG set key \"value\" # store get key # retrieve del key # delete exists key # check if exists expire key 60 # expire after 60s keys * # list all keys (use with caution) flushall # delete everything ```` --- ## \ud83e\udde9 4. Data Structures and Examples ### Strings ``` bash set greeting \"Hello\" get greeting incr counter decr counter Hashes (key \u2192 fields) \u00b6 hset user:1 name \"Alice\" email \"alice@example.com\" hgetall user:1 hget user:1 email Lists (ordered queue) \u00b6 lpush queue job1 rpush queue job2 lrange queue 0 -1 lpop queue Sets (unique values) \u00b6 sadd users \"edgaras\" \"alice\" smembers users sismember users \"bob\" Sorted Sets (ranking) \u00b6 zadd leaderboard 100 \"alice\" 95 \"bob\" zrevrange leaderboard 0 -1 WITHSCORES Pub/Sub \u00b6 SUBSCRIBE news PUBLISH news \"Server update complete!\" \ud83e\udde0 5. Persistence Modes \u00b6 Redis can persist data in two main ways: Mode Description RDB (Snapshot) Saves full dataset at intervals (default). Fast, minimal overhead. AOF (Append Only File) Logs every operation \u2014 safer but slower. Hybrid Combines both for speed + durability. Example in redis.conf : save 900 1 save 300 10 save 60 10000 appendonly yes \ud83e\uddf0 6. Running Redis with Docker \u00b6 docker run -d \\ --name redis \\ -p 6379 :6379 \\ -v redis_data:/data \\ redis:7 Check connection: docker exec -it redis redis-cli ping With password: docker run -d \\ -p 6379 :6379 \\ -e REDIS_PASSWORD = secret \\ redis:7 \\ redis-server --requirepass secret \ud83e\udde9 7. Docker Compose Example \u00b6 version : \"3.9\" services : redis : image : redis:7 ports : - \"6379:6379\" volumes : - redis_data:/data command : redis-server --appendonly yes healthcheck : test : [ \"CMD\" , \"redis-cli\" , \"ping\" ] interval : 5s retries : 5 backend : build : ./backend environment : REDIS_HOST : redis REDIS_PORT : 6379 volumes : redis_data : \ud83d\udcbe 8. Redis + Application Integration (Spring Boot Example) \u00b6 application.properties : spring.data.redis.host = redis spring.data.redis.port = 6379 spring.data.redis.password = secret Simple cache usage with Spring: @Cacheable ( \"users\" ) public User getUserById ( Long id ) { return userRepository . findById ( id ). orElseThrow (); } Make sure caching is enabled: @EnableCaching @SpringBootApplication public class App {} \ud83d\udce1 9. Monitoring and Admin Commands \u00b6 info # show metrics dbsize # number of keys monitor # live command log config get * # view config config rewrite # persist config changes slowlog get # show slow commands For real-time dashboards: RedisInsight redis-exporter for Prometheus / Grafana metrics. \ud83d\udd12 10. Security & Performance Best Practices \u00b6 Set a password ( requirepass secret ) \u2014 Redis is open by default. Bind to localhost or internal networks ( bind 127.0.0.1 ). Disable FLUSHALL and CONFIG commands in production. Use connection pooling for app clients. For persistence: prefer AOF + fsync every second . Enable maxmemory and maxmemory-policy allkeys-lru for safe eviction. Example snippet: maxmemory 512mb maxmemory-policy allkeys-lru \ud83d\udcbb 11. IDE & Tool Integration \u00b6 JetBrains IDEs \u00b6 Use built-in Database Tool Window \u2192 Add Data Source \u2192 Redis. Visualize keys, TTLs, and values directly. Supports EVAL and Lua scripting. VS Code \u00b6 Recommended extensions: Redis Explorer \u2192 browse keys, TTLs, and memory usage. REST Client \u2192 test APIs that interact with Redis. .env files \u2192 store connection secrets. Example .env : REDIS_HOST=localhost REDIS_PORT=6379 REDIS_PASSWORD=secret \ud83d\ude80 12. CI/CD Integration Example \u00b6 GitHub Actions \u2014 Redis as test dependency: services : redis : image : redis:7 ports : [ '6379:6379' ] options : >- --health-cmd=\"redis-cli ping\" --health-interval=5s --health-retries=5 steps : - uses : actions/checkout@v4 - name : Run integration tests env : REDIS_HOST : localhost REDIS_PORT : 6379 run : ./gradlew test \ud83e\udde9 13. Real-World Patterns \u00b6 Pattern Description Example Cache-Aside App reads from Redis; on miss, fetches DB + stores in Redis. Common with Spring or Django. Write-Through Writes go to Redis and DB simultaneously. Ensures consistency. Pub/Sub Services communicate via Redis channels. Real-time notifications. Streams Event queue with consumer groups. Great for jobs, analytics. Example stream usage: XADD jobs * type \"email\" user \"alice\" XREADGROUP GROUP workers 1 COUNT 1 STREAMS jobs > \ud83e\udde0 14. Troubleshooting \u00b6 Issue Fix Redis not reachable Check port 6379 and container health. Keys disappear TTL expired or memory eviction triggered. \u201cNOAUTH\u201d error Set password in config and client. High latency Tune maxmemory + eviction policy. Data not persistent Enable appendonly yes . \u2705 15. Summary \u00b6 Redis = speed and simplicity \u2014 an in-memory data store with persistence options. Ideal for caching, pub/sub, queues, and rate limiting. Use Docker for easy setup and Compose for multi-service integration. Always secure, monitor, and limit memory. Combine with PostgreSQL for the best of both worlds: durability + velocity. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 redis/ \u2514\u2500 quick-refresher.md","title":"quick-refresher"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#redis-from-basics-to-real-world-usage","text":"Redis (Remote Dictionary Server) is a lightning-fast in-memory data store used as a cache, message broker, and lightweight database. It stores data as key-value pairs , keeps it in RAM for near-instant access, and can optionally persist it to disk. It\u2019s often used alongside PostgreSQL: Postgres for durability, Redis for speed.","title":"\ud83d\udd34 Redis: From Basics to Real-World Usage"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#1-what-redis-actually-does","text":"Redis keeps everything in memory but optionally syncs to disk (snapshots or append logs). It supports complex data types, pub/sub messaging, and atomic operations \u2014 all with sub-millisecond latency. Use Case Example Cache Store frequently accessed DB results. Session Store Track logged-in users. Queue / Stream Background jobs, real-time feeds. Rate Limiter Count requests per user/IP. Pub/Sub Event notification between services. \ud83d\udc49 In short: Redis trades persistence for speed , but can be configured for both.","title":"\u2699\ufe0f 1. What Redis Actually Does"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#2-core-concepts","text":"Concept Description Key Identifier for a piece of data (string). Value Data stored under a key \u2014 can be string, hash, list, set, etc. TTL Time-to-live (expiration). Persistence Data saved to disk (RDB snapshots or AOF logs). Pub/Sub Publisher sends messages to channels; subscribers receive them. Database index Redis has logical DBs numbered 0\u201315 by default.","title":"\ud83e\uddf1 2. Core Concepts"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#3-basic-commands-quick-reference","text":"redis-cli # Start CLI ping # \u2192 PONG set key \"value\" # store get key # retrieve del key # delete exists key # check if exists expire key 60 # expire after 60s keys * # list all keys (use with caution) flushall # delete everything ```` --- ## \ud83e\udde9 4. Data Structures and Examples ### Strings ``` bash set greeting \"Hello\" get greeting incr counter decr counter","title":"\u26a1 3. Basic Commands (Quick Reference)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#hashes-key-fields","text":"hset user:1 name \"Alice\" email \"alice@example.com\" hgetall user:1 hget user:1 email","title":"Hashes (key \u2192 fields)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#lists-ordered-queue","text":"lpush queue job1 rpush queue job2 lrange queue 0 -1 lpop queue","title":"Lists (ordered queue)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#sets-unique-values","text":"sadd users \"edgaras\" \"alice\" smembers users sismember users \"bob\"","title":"Sets (unique values)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#sorted-sets-ranking","text":"zadd leaderboard 100 \"alice\" 95 \"bob\" zrevrange leaderboard 0 -1 WITHSCORES","title":"Sorted Sets (ranking)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#pubsub","text":"SUBSCRIBE news PUBLISH news \"Server update complete!\"","title":"Pub/Sub"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#5-persistence-modes","text":"Redis can persist data in two main ways: Mode Description RDB (Snapshot) Saves full dataset at intervals (default). Fast, minimal overhead. AOF (Append Only File) Logs every operation \u2014 safer but slower. Hybrid Combines both for speed + durability. Example in redis.conf : save 900 1 save 300 10 save 60 10000 appendonly yes","title":"\ud83e\udde0 5. Persistence Modes"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#6-running-redis-with-docker","text":"docker run -d \\ --name redis \\ -p 6379 :6379 \\ -v redis_data:/data \\ redis:7 Check connection: docker exec -it redis redis-cli ping With password: docker run -d \\ -p 6379 :6379 \\ -e REDIS_PASSWORD = secret \\ redis:7 \\ redis-server --requirepass secret","title":"\ud83e\uddf0 6. Running Redis with Docker"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#7-docker-compose-example","text":"version : \"3.9\" services : redis : image : redis:7 ports : - \"6379:6379\" volumes : - redis_data:/data command : redis-server --appendonly yes healthcheck : test : [ \"CMD\" , \"redis-cli\" , \"ping\" ] interval : 5s retries : 5 backend : build : ./backend environment : REDIS_HOST : redis REDIS_PORT : 6379 volumes : redis_data :","title":"\ud83e\udde9 7. Docker Compose Example"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#8-redis-application-integration-spring-boot-example","text":"application.properties : spring.data.redis.host = redis spring.data.redis.port = 6379 spring.data.redis.password = secret Simple cache usage with Spring: @Cacheable ( \"users\" ) public User getUserById ( Long id ) { return userRepository . findById ( id ). orElseThrow (); } Make sure caching is enabled: @EnableCaching @SpringBootApplication public class App {}","title":"\ud83d\udcbe 8. Redis + Application Integration (Spring Boot Example)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#9-monitoring-and-admin-commands","text":"info # show metrics dbsize # number of keys monitor # live command log config get * # view config config rewrite # persist config changes slowlog get # show slow commands For real-time dashboards: RedisInsight redis-exporter for Prometheus / Grafana metrics.","title":"\ud83d\udce1 9. Monitoring and Admin Commands"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#10-security-performance-best-practices","text":"Set a password ( requirepass secret ) \u2014 Redis is open by default. Bind to localhost or internal networks ( bind 127.0.0.1 ). Disable FLUSHALL and CONFIG commands in production. Use connection pooling for app clients. For persistence: prefer AOF + fsync every second . Enable maxmemory and maxmemory-policy allkeys-lru for safe eviction. Example snippet: maxmemory 512mb maxmemory-policy allkeys-lru","title":"\ud83d\udd12 10. Security &amp; Performance Best Practices"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#11-ide-tool-integration","text":"","title":"\ud83d\udcbb 11. IDE &amp; Tool Integration"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#jetbrains-ides","text":"Use built-in Database Tool Window \u2192 Add Data Source \u2192 Redis. Visualize keys, TTLs, and values directly. Supports EVAL and Lua scripting.","title":"JetBrains IDEs"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#vs-code","text":"Recommended extensions: Redis Explorer \u2192 browse keys, TTLs, and memory usage. REST Client \u2192 test APIs that interact with Redis. .env files \u2192 store connection secrets. Example .env : REDIS_HOST=localhost REDIS_PORT=6379 REDIS_PASSWORD=secret","title":"VS Code"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#12-cicd-integration-example","text":"GitHub Actions \u2014 Redis as test dependency: services : redis : image : redis:7 ports : [ '6379:6379' ] options : >- --health-cmd=\"redis-cli ping\" --health-interval=5s --health-retries=5 steps : - uses : actions/checkout@v4 - name : Run integration tests env : REDIS_HOST : localhost REDIS_PORT : 6379 run : ./gradlew test","title":"\ud83d\ude80 12. CI/CD Integration Example"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#13-real-world-patterns","text":"Pattern Description Example Cache-Aside App reads from Redis; on miss, fetches DB + stores in Redis. Common with Spring or Django. Write-Through Writes go to Redis and DB simultaneously. Ensures consistency. Pub/Sub Services communicate via Redis channels. Real-time notifications. Streams Event queue with consumer groups. Great for jobs, analytics. Example stream usage: XADD jobs * type \"email\" user \"alice\" XREADGROUP GROUP workers 1 COUNT 1 STREAMS jobs >","title":"\ud83e\udde9 13. Real-World Patterns"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#14-troubleshooting","text":"Issue Fix Redis not reachable Check port 6379 and container health. Keys disappear TTL expired or memory eviction triggered. \u201cNOAUTH\u201d error Set password in config and client. High latency Tune maxmemory + eviction policy. Data not persistent Enable appendonly yes .","title":"\ud83e\udde0 14. Troubleshooting"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#15-summary","text":"Redis = speed and simplicity \u2014 an in-memory data store with persistence options. Ideal for caching, pub/sub, queues, and rate limiting. Use Docker for easy setup and Compose for multi-service integration. Always secure, monitor, and limit memory. Combine with PostgreSQL for the best of both worlds: durability + velocity. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 redis/ \u2514\u2500 quick-refresher.md","title":"\u2705 15. Summary"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/","text":"\ud83d\udc18 Postgre-SQL: From Basics to Full-Stack Integration \u00b6 PostgreSQL (often just Postgres ) is a powerful, open-source relational database known for reliability, standards compliance, and extensibility. It\u2019s the database behind everything from small apps to enterprise-scale systems. Think of it as the \u201cdeveloper\u2019s Swiss army knife\u201d for data \u2014 solid, flexible, and endlessly scriptable. \u2699\ufe0f 1. What PostgreSQL Actually Does \u00b6 At its core, Postgres: - Stores structured data in tables (rows and columns). - Enforces relations via keys and constraints. - Lets you query and transform data using SQL . - Runs as a daemon/service on your system or inside a Docker container. - Manages concurrent access safely with MVCC (multi-version concurrency control). \ud83d\udc49 In short: PostgreSQL is a transactional data engine \u2014 designed for consistency, safety, and complex queries. \ud83e\uddf1 2. Core Concepts \u00b6 Concept Description Database Logical container for schemas, tables, and users. Schema Namespace inside a database (like a folder for tables). Table Structured data collection (rows = records, columns = fields). Row / Column Individual data unit / attribute. Primary key Unique identifier per row. Foreign key Relationship link between tables. Transaction Atomic unit of work \u2014 all or nothing. MVCC Allows simultaneous reads/writes safely via versioning. \ud83e\udde9 3. PostgreSQL in Action \u00b6 Start / Stop (Linux) \u00b6 sudo systemctl start postgresql sudo systemctl status postgresql sudo -u postgres psql Quick DB shell commands \u00b6 \\ l -- list databases \\ c mydb -- connect to database \\ dt -- list tables \\ d tablename -- describe table structure \\ q -- quit Create a user and database \u00b6 CREATE USER devuser WITH PASSWORD 'secret' ; CREATE DATABASE devdb OWNER devuser ; GRANT ALL PRIVILEGES ON DATABASE devdb TO devuser ; \ud83e\uddf0 4. SQL Basics Refresher \u00b6 -- Create table CREATE TABLE users ( id SERIAL PRIMARY KEY , name VARCHAR ( 100 ), email TEXT UNIQUE NOT NULL , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); -- Insert data INSERT INTO users ( name , email ) VALUES ( 'Alice' , 'alice@example.com' ); -- Query data SELECT * FROM users ; SELECT name FROM users WHERE email LIKE '%@example.com' ; -- Update UPDATE users SET name = 'Alicia' WHERE id = 1 ; -- Delete DELETE FROM users WHERE id = 1 ; \ud83e\udde9 5. PostgreSQL with Docker \u00b6 Simplify local setup \u2014 run everything isolated and disposable. docker run -d \\ --name postgres \\ -e POSTGRES_USER = devuser \\ -e POSTGRES_PASSWORD = secret \\ -e POSTGRES_DB = devdb \\ -p 5432 :5432 \\ -v pg_data:/var/lib/postgresql/data \\ postgres:16 Now you can connect from your host or app via: Host: localhost Port: 5432 Database: devdb User: devuser Password: secret Docker Compose Example \u00b6 services : postgres : image : postgres:16 environment : POSTGRES_USER : devuser POSTGRES_PASSWORD : secret POSTGRES_DB : devdb ports : - \"5432:5432\" volumes : - pg_data:/var/lib/postgresql/data pgadmin : image : dpage/pgadmin4 environment : PGADMIN_DEFAULT_EMAIL : admin@example.com PGADMIN_DEFAULT_PASSWORD : admin ports : - \"5050:80\" depends_on : - postgres volumes : pg_data : Access pgAdmin at http://localhost:5050 \u2192 connect to host postgres , port 5432 . \ud83e\udde0 6. Common Data Types \u00b6 Type Example Notes INTEGER 42 Whole numbers SERIAL auto-increment Shortcut for integer + sequence VARCHAR(n) 'Hello' Variable-length string TEXT Long article Unlimited string BOOLEAN TRUE / FALSE Logical flag DATE , TIMESTAMP 2025-10-15 Temporal data JSONB '{\"x\":1}' Binary JSON \u2014 queryable! ARRAY '{1,2,3}' PostgreSQL supports array columns \ud83e\udde9 7. User & Access Management \u00b6 -- Create user CREATE USER api_user WITH PASSWORD 'apipass' ; -- Grant permissions GRANT CONNECT ON DATABASE devdb TO api_user ; GRANT USAGE ON SCHEMA public TO api_user ; GRANT SELECT , INSERT , UPDATE ON ALL TABLES IN SCHEMA public TO api_user ; -- Future tables ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT , INSERT , UPDATE ON TABLES TO api_user ; \ud83d\udc49 Keep app-level users least-privileged \u2014 don\u2019t give them superuser rights. \ud83e\udde9 8. Useful CLI Commands \u00b6 psql -U devuser -d devdb # connect to DB psql -h localhost -U devuser # specify host pg_dump -U devuser devdb > dump.sql # backup psql -U devuser -d devdb < dump.sql # restore Check service status: sudo systemctl status postgresql \ud83e\uddf0 9. Troubleshooting \u00b6 Issue Fix Can't connect (local) Check pg_hba.conf and open port 5432. \u201crole does not exist\u201d Create user via CREATE USER . Permission denied Ensure grants on database and schema. Docker container forgets data Add a volume: -v pg_data:/var/lib/postgresql/data . Encoding issues Use UTF8 during DB creation. \ud83e\udde9 10. PostgreSQL Configuration Essentials \u00b6 Main config files (Linux or container): /etc/postgresql/16/main/postgresql.conf /etc/postgresql/16/main/pg_hba.conf Common tweaks: listen_addresses = '*' max_connections = 100 shared_buffers = 256MB work_mem = 16MB logging_collector = on log_directory = 'log' Reload without restart: sudo systemctl reload postgresql \ud83d\udcbb 11. PostgreSQL in IDEs (JetBrains / VS Code) \u00b6 JetBrains (DataGrip, IntelliJ Ultimate) \u00b6 Open \u201cDatabase\u201d panel \u2192 \u201c+\u201d \u2192 \u201cPostgreSQL\u201d. Set host/port/user/password. Can run SQL scripts directly, browse schema, or diff databases. Integration with .env variables and Docker Compose services . Shortcut magic: Alt+Enter \u2192 run query under cursor Ctrl+Enter \u2192 run entire script Ctrl+Shift+F10 \u2192 execute file VS Code Setup \u00b6 Extensions to install: SQLTools SQLTools PostgreSQL Driver vscode-database-client (optional GUI) Example .sqltools.json : { \"connections\" : [ { \"name\" : \"Local Postgres\" , \"driver\" : \"PostgreSQL\" , \"previewLimit\" : 50 , \"server\" : \"localhost\" , \"port\" : 5432 , \"database\" : \"devdb\" , \"username\" : \"devuser\" , \"password\" : \"secret\" } ] } Run queries directly in VS Code or integrated terminal. \ud83d\ude80 12. Spring Boot Integration Example \u00b6 In your application.properties : spring.datasource.url = jdbc:postgresql://localhost:5432/devdb spring.datasource.username = devuser spring.datasource.password = secret spring.jpa.hibernate.ddl-auto = update spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect Docker Compose-friendly URL: jdbc:postgresql://postgres:5432/devdb \ud83e\udde0 13. Developer Workflow Pattern \u00b6 Start your DB (local or Docker). Connect through IDE or pgAdmin. Run schema migrations (Liquibase/Flyway). Run app \u2192 verify connection. Backup before experimenting. Keep .env variables for credentials: POSTGRES_USER=devuser POSTGRES_PASSWORD=secret POSTGRES_DB=devdb POSTGRES_PORT=5432 Load via: export $( grep -v '^#' .env | xargs ) \ud83e\udde9 14. Optimization and Maintenance \u00b6 Analyze & Vacuum VACUUM ANALYZE ; Keeps statistics fresh and space reclaimed. Indexes CREATE INDEX idx_users_email ON users ( email ); Backups pg_dumpall > full_backup.sql Performance Prefer JSONB for flexible data. Avoid SELECT * in production queries. Tune work_mem , shared_buffers for heavy loads. \u2705 15. Summary \u00b6 PostgreSQL = reliable, standard, and developer-friendly. Use Docker for easy, isolated environments. Use pgAdmin or IDE integration for management. Integrate cleanly with Spring Boot via JDBC. Keep permissions minimal, backups regular, and queries explicit. \ud83d\udcbb 16. PostgreSQL in Developer Workflows (JetBrains & VS Code) \u00b6 Postgres is more than a database service \u2014 it\u2019s part of your daily dev feedback loop . Connecting it tightly to your IDE and environment lets you debug, test, and deploy confidently. \ud83e\udde9 JetBrains IDEs (IntelliJ Ultimate / DataGrip / PyCharm Pro) \u00b6 Action Description Add Data Source \u2192 PostgreSQL Connect via host/port or directly through Docker Compose service. Run SQL scripts inline Execute queries from .sql files, see live results. Compare Schemas Diff local vs. remote DB structures (great for migrations). Generate DDL from tables Auto-create SQL definitions for export or review. Inspect Query Plan (Ctrl+Shift+Enter) Visualize query performance via EXPLAIN ANALYZE . Quick habit loop: 1. Write query \u2192 Alt+Enter \u2192 Run. 2. Fix slow query \u2192 Inspect execution plan. 3. Save snippet in IDE\u2019s \u201cScratch File\u201d for reuse. You can connect directly to your Dockerized DB by pointing to host localhost:5432 or service name postgres inside Compose. \ud83e\udde0 VS Code Integration \u00b6 Recommended extensions: - SQLTools + SQLTools PostgreSQL Driver \u2192 simple queries, table explorer. - Database Client \u2192 visual schema browsing. - .env support \u2192 use environment variables for credentials. Connect via .sqltools.json : { \"connections\" : [ { \"name\" : \"Local Postgres\" , \"driver\" : \"PostgreSQL\" , \"server\" : \"localhost\" , \"port\" : 5432 , \"database\" : \"devdb\" , \"username\" : \"devuser\" , \"password\" : \"secret\" } ] } ```` You ca n ru n a n d test queries direc tl y i n `.sql` f iles wi t hou t swi t chi n g t ools. --- ## \ud83e\uddf0 17. Pos t greSQL + Docker Compose f or Mul t i -E n viro n me nts A si n gle Compose f ile ca n ha n dle bo t h **developme nt ** a n d ** test i n g** da ta bases. ```yaml versio n : \"3.9\" services : pos t gres : image : pos t gres : 16 e n viro n me nt : POSTGRES_USER : devuser POSTGRES_PASSWORD : secre t POSTGRES_DB : devdb por ts : - \"5432:5432\" volumes : - pg_da ta : /var/lib/pos t gresql/da ta heal t hcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U devuser -d devdb\" ] i nter val : 10 s re tr ies : 5 test db : image : pos t gres : 16 e n viro n me nt : POSTGRES_USER : testuser POSTGRES_PASSWORD : test pass POSTGRES_DB : test db por ts : - \"55432:5432\" t mp fs : - /var/lib/pos t gresql/da ta heal t hcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U testuser -d testdb\" ] i nter val : 5 s re tr ies : 3 volumes : pg_da ta : Why it matters: pg_data \u2192 persists your dev data. testdb \u2192 ephemeral; wiped between test runs. Healthchecks prevent dependent containers from starting too early. \ud83d\udc49 You can link your backend app to postgres (dev) or testdb (CI) just by switching env variables. \ud83d\ude80 18. Integration with CI/CD (GitHub Actions Example) \u00b6 name : Backend Tests on : [ push , pull_request ] jobs : test : runs-on : ubuntu-latest services : postgres : image : postgres:16 env : POSTGRES_USER : testuser POSTGRES_PASSWORD : testpass POSTGRES_DB : testdb ports : [ '5432:5432' ] options : >- --health-cmd=\"pg_isready -U testuser -d testdb\" --health-interval=5s --health-timeout=5s --health-retries=5 steps : - uses : actions/checkout@v4 - name : Wait for Postgres run : | until pg_isready -h localhost -U testuser; do sleep 1 done - name : Run Tests run : ./gradlew test env : SPRING_DATASOURCE_URL : jdbc:postgresql://localhost:5432/testdb SPRING_DATASOURCE_USERNAME : testuser SPRING_DATASOURCE_PASSWORD : testpass This pattern runs Postgres automatically for tests \u2014 no manual setup, no external dependencies. \ud83e\udde9 19. Managing Environments: Local \u2192 Staging \u2192 Production \u00b6 Environment separation rule: Keep configuration externalized ( .env , configmaps , or Secrets). Never commit real passwords or keys. Distinguish database URLs by environment: Environment Example URL Notes Local jdbc:postgresql://localhost:5432/devdb Docker or local install Staging jdbc:postgresql://staging-db.internal:5432/appdb Shared test data Production jdbc:postgresql://prod-db.cluster:5432/appdb High availability In Docker Compose: env_file : - .env.${ENVIRONMENT} In Spring Boot: spring.datasource.url = ${DB_URL} spring.datasource.username = ${DB_USER} spring.datasource.password = ${DB_PASS} Pro tip: version .env.example for onboarding new developers easily. \ud83d\udd12 20. Production Hardening & Maintenance Patterns \u00b6 Connection Pooling \u00b6 Postgres performs best with connection pooling (e.g., PgBouncer ). docker run -d \\ --name pgbouncer \\ -p 6432 :6432 \\ -e DB_USER = devuser \\ -e DB_PASSWORD = secret \\ -e DB_HOST = postgres \\ edoburu/pgbouncer App connects to localhost:6432 instead of 5432 . Backups \u00b6 pg_dump -U devuser devdb | gzip > backup_ $( date +%F ) .sql.gz Automate via cron or CI. Replication and Scaling \u00b6 Use Streaming Replication for read replicas. Or scale horizontally via logical replication . Consider Patroni or TimescaleDB for high-availability setups. Security \u00b6 Disable remote superuser login. Restrict listen_addresses in postgresql.conf . Rotate credentials regularly. Encrypt connections with SSL ( ssl = on ). \u2705 Summary (Developer Edition) \u00b6 Integrate Postgres into your IDE and CI/CD pipelines, not just your runtime. Run it via Docker Compose to match local and production schemas. Automate validation, migrations, and backups. Use .env files to keep environments cleanly separated. Monitor performance ( EXPLAIN ANALYZE , logs, connection stats) like a pro DBA.","title":"quick-refresher"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#postgre-sql-from-basics-to-full-stack-integration","text":"PostgreSQL (often just Postgres ) is a powerful, open-source relational database known for reliability, standards compliance, and extensibility. It\u2019s the database behind everything from small apps to enterprise-scale systems. Think of it as the \u201cdeveloper\u2019s Swiss army knife\u201d for data \u2014 solid, flexible, and endlessly scriptable.","title":"\ud83d\udc18 Postgre-SQL: From Basics to Full-Stack Integration"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#1-what-postgresql-actually-does","text":"At its core, Postgres: - Stores structured data in tables (rows and columns). - Enforces relations via keys and constraints. - Lets you query and transform data using SQL . - Runs as a daemon/service on your system or inside a Docker container. - Manages concurrent access safely with MVCC (multi-version concurrency control). \ud83d\udc49 In short: PostgreSQL is a transactional data engine \u2014 designed for consistency, safety, and complex queries.","title":"\u2699\ufe0f 1. What PostgreSQL Actually Does"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#2-core-concepts","text":"Concept Description Database Logical container for schemas, tables, and users. Schema Namespace inside a database (like a folder for tables). Table Structured data collection (rows = records, columns = fields). Row / Column Individual data unit / attribute. Primary key Unique identifier per row. Foreign key Relationship link between tables. Transaction Atomic unit of work \u2014 all or nothing. MVCC Allows simultaneous reads/writes safely via versioning.","title":"\ud83e\uddf1 2. Core Concepts"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#3-postgresql-in-action","text":"","title":"\ud83e\udde9 3. PostgreSQL in Action"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#start-stop-linux","text":"sudo systemctl start postgresql sudo systemctl status postgresql sudo -u postgres psql","title":"Start / Stop (Linux)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#quick-db-shell-commands","text":"\\ l -- list databases \\ c mydb -- connect to database \\ dt -- list tables \\ d tablename -- describe table structure \\ q -- quit","title":"Quick DB shell commands"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#create-a-user-and-database","text":"CREATE USER devuser WITH PASSWORD 'secret' ; CREATE DATABASE devdb OWNER devuser ; GRANT ALL PRIVILEGES ON DATABASE devdb TO devuser ;","title":"Create a user and database"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#4-sql-basics-refresher","text":"-- Create table CREATE TABLE users ( id SERIAL PRIMARY KEY , name VARCHAR ( 100 ), email TEXT UNIQUE NOT NULL , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); -- Insert data INSERT INTO users ( name , email ) VALUES ( 'Alice' , 'alice@example.com' ); -- Query data SELECT * FROM users ; SELECT name FROM users WHERE email LIKE '%@example.com' ; -- Update UPDATE users SET name = 'Alicia' WHERE id = 1 ; -- Delete DELETE FROM users WHERE id = 1 ;","title":"\ud83e\uddf0 4. SQL Basics Refresher"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#5-postgresql-with-docker","text":"Simplify local setup \u2014 run everything isolated and disposable. docker run -d \\ --name postgres \\ -e POSTGRES_USER = devuser \\ -e POSTGRES_PASSWORD = secret \\ -e POSTGRES_DB = devdb \\ -p 5432 :5432 \\ -v pg_data:/var/lib/postgresql/data \\ postgres:16 Now you can connect from your host or app via: Host: localhost Port: 5432 Database: devdb User: devuser Password: secret","title":"\ud83e\udde9 5. PostgreSQL with Docker"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#docker-compose-example","text":"services : postgres : image : postgres:16 environment : POSTGRES_USER : devuser POSTGRES_PASSWORD : secret POSTGRES_DB : devdb ports : - \"5432:5432\" volumes : - pg_data:/var/lib/postgresql/data pgadmin : image : dpage/pgadmin4 environment : PGADMIN_DEFAULT_EMAIL : admin@example.com PGADMIN_DEFAULT_PASSWORD : admin ports : - \"5050:80\" depends_on : - postgres volumes : pg_data : Access pgAdmin at http://localhost:5050 \u2192 connect to host postgres , port 5432 .","title":"Docker Compose Example"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#6-common-data-types","text":"Type Example Notes INTEGER 42 Whole numbers SERIAL auto-increment Shortcut for integer + sequence VARCHAR(n) 'Hello' Variable-length string TEXT Long article Unlimited string BOOLEAN TRUE / FALSE Logical flag DATE , TIMESTAMP 2025-10-15 Temporal data JSONB '{\"x\":1}' Binary JSON \u2014 queryable! ARRAY '{1,2,3}' PostgreSQL supports array columns","title":"\ud83e\udde0 6. Common Data Types"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#7-user-access-management","text":"-- Create user CREATE USER api_user WITH PASSWORD 'apipass' ; -- Grant permissions GRANT CONNECT ON DATABASE devdb TO api_user ; GRANT USAGE ON SCHEMA public TO api_user ; GRANT SELECT , INSERT , UPDATE ON ALL TABLES IN SCHEMA public TO api_user ; -- Future tables ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT , INSERT , UPDATE ON TABLES TO api_user ; \ud83d\udc49 Keep app-level users least-privileged \u2014 don\u2019t give them superuser rights.","title":"\ud83e\udde9 7. User &amp; Access Management"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#8-useful-cli-commands","text":"psql -U devuser -d devdb # connect to DB psql -h localhost -U devuser # specify host pg_dump -U devuser devdb > dump.sql # backup psql -U devuser -d devdb < dump.sql # restore Check service status: sudo systemctl status postgresql","title":"\ud83e\udde9 8. Useful CLI Commands"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#9-troubleshooting","text":"Issue Fix Can't connect (local) Check pg_hba.conf and open port 5432. \u201crole does not exist\u201d Create user via CREATE USER . Permission denied Ensure grants on database and schema. Docker container forgets data Add a volume: -v pg_data:/var/lib/postgresql/data . Encoding issues Use UTF8 during DB creation.","title":"\ud83e\uddf0 9. Troubleshooting"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#10-postgresql-configuration-essentials","text":"Main config files (Linux or container): /etc/postgresql/16/main/postgresql.conf /etc/postgresql/16/main/pg_hba.conf Common tweaks: listen_addresses = '*' max_connections = 100 shared_buffers = 256MB work_mem = 16MB logging_collector = on log_directory = 'log' Reload without restart: sudo systemctl reload postgresql","title":"\ud83e\udde9 10. PostgreSQL Configuration Essentials"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#11-postgresql-in-ides-jetbrains-vs-code","text":"","title":"\ud83d\udcbb 11. PostgreSQL in IDEs (JetBrains / VS Code)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#jetbrains-datagrip-intellij-ultimate","text":"Open \u201cDatabase\u201d panel \u2192 \u201c+\u201d \u2192 \u201cPostgreSQL\u201d. Set host/port/user/password. Can run SQL scripts directly, browse schema, or diff databases. Integration with .env variables and Docker Compose services . Shortcut magic: Alt+Enter \u2192 run query under cursor Ctrl+Enter \u2192 run entire script Ctrl+Shift+F10 \u2192 execute file","title":"JetBrains (DataGrip, IntelliJ Ultimate)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#vs-code-setup","text":"Extensions to install: SQLTools SQLTools PostgreSQL Driver vscode-database-client (optional GUI) Example .sqltools.json : { \"connections\" : [ { \"name\" : \"Local Postgres\" , \"driver\" : \"PostgreSQL\" , \"previewLimit\" : 50 , \"server\" : \"localhost\" , \"port\" : 5432 , \"database\" : \"devdb\" , \"username\" : \"devuser\" , \"password\" : \"secret\" } ] } Run queries directly in VS Code or integrated terminal.","title":"VS Code Setup"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#12-spring-boot-integration-example","text":"In your application.properties : spring.datasource.url = jdbc:postgresql://localhost:5432/devdb spring.datasource.username = devuser spring.datasource.password = secret spring.jpa.hibernate.ddl-auto = update spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect Docker Compose-friendly URL: jdbc:postgresql://postgres:5432/devdb","title":"\ud83d\ude80 12. Spring Boot Integration Example"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#13-developer-workflow-pattern","text":"Start your DB (local or Docker). Connect through IDE or pgAdmin. Run schema migrations (Liquibase/Flyway). Run app \u2192 verify connection. Backup before experimenting. Keep .env variables for credentials: POSTGRES_USER=devuser POSTGRES_PASSWORD=secret POSTGRES_DB=devdb POSTGRES_PORT=5432 Load via: export $( grep -v '^#' .env | xargs )","title":"\ud83e\udde0 13. Developer Workflow Pattern"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#14-optimization-and-maintenance","text":"Analyze & Vacuum VACUUM ANALYZE ; Keeps statistics fresh and space reclaimed. Indexes CREATE INDEX idx_users_email ON users ( email ); Backups pg_dumpall > full_backup.sql Performance Prefer JSONB for flexible data. Avoid SELECT * in production queries. Tune work_mem , shared_buffers for heavy loads.","title":"\ud83e\udde9 14. Optimization and Maintenance"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#15-summary","text":"PostgreSQL = reliable, standard, and developer-friendly. Use Docker for easy, isolated environments. Use pgAdmin or IDE integration for management. Integrate cleanly with Spring Boot via JDBC. Keep permissions minimal, backups regular, and queries explicit.","title":"\u2705 15. Summary"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#16-postgresql-in-developer-workflows-jetbrains-vs-code","text":"Postgres is more than a database service \u2014 it\u2019s part of your daily dev feedback loop . Connecting it tightly to your IDE and environment lets you debug, test, and deploy confidently.","title":"\ud83d\udcbb 16. PostgreSQL in Developer Workflows (JetBrains &amp; VS Code)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#jetbrains-ides-intellij-ultimate-datagrip-pycharm-pro","text":"Action Description Add Data Source \u2192 PostgreSQL Connect via host/port or directly through Docker Compose service. Run SQL scripts inline Execute queries from .sql files, see live results. Compare Schemas Diff local vs. remote DB structures (great for migrations). Generate DDL from tables Auto-create SQL definitions for export or review. Inspect Query Plan (Ctrl+Shift+Enter) Visualize query performance via EXPLAIN ANALYZE . Quick habit loop: 1. Write query \u2192 Alt+Enter \u2192 Run. 2. Fix slow query \u2192 Inspect execution plan. 3. Save snippet in IDE\u2019s \u201cScratch File\u201d for reuse. You can connect directly to your Dockerized DB by pointing to host localhost:5432 or service name postgres inside Compose.","title":"\ud83e\udde9 JetBrains IDEs (IntelliJ Ultimate / DataGrip / PyCharm Pro)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#vs-code-integration","text":"Recommended extensions: - SQLTools + SQLTools PostgreSQL Driver \u2192 simple queries, table explorer. - Database Client \u2192 visual schema browsing. - .env support \u2192 use environment variables for credentials. Connect via .sqltools.json : { \"connections\" : [ { \"name\" : \"Local Postgres\" , \"driver\" : \"PostgreSQL\" , \"server\" : \"localhost\" , \"port\" : 5432 , \"database\" : \"devdb\" , \"username\" : \"devuser\" , \"password\" : \"secret\" } ] } ```` You ca n ru n a n d test queries direc tl y i n `.sql` f iles wi t hou t swi t chi n g t ools. --- ## \ud83e\uddf0 17. Pos t greSQL + Docker Compose f or Mul t i -E n viro n me nts A si n gle Compose f ile ca n ha n dle bo t h **developme nt ** a n d ** test i n g** da ta bases. ```yaml versio n : \"3.9\" services : pos t gres : image : pos t gres : 16 e n viro n me nt : POSTGRES_USER : devuser POSTGRES_PASSWORD : secre t POSTGRES_DB : devdb por ts : - \"5432:5432\" volumes : - pg_da ta : /var/lib/pos t gresql/da ta heal t hcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U devuser -d devdb\" ] i nter val : 10 s re tr ies : 5 test db : image : pos t gres : 16 e n viro n me nt : POSTGRES_USER : testuser POSTGRES_PASSWORD : test pass POSTGRES_DB : test db por ts : - \"55432:5432\" t mp fs : - /var/lib/pos t gresql/da ta heal t hcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U testuser -d testdb\" ] i nter val : 5 s re tr ies : 3 volumes : pg_da ta : Why it matters: pg_data \u2192 persists your dev data. testdb \u2192 ephemeral; wiped between test runs. Healthchecks prevent dependent containers from starting too early. \ud83d\udc49 You can link your backend app to postgres (dev) or testdb (CI) just by switching env variables.","title":"\ud83e\udde0 VS Code Integration"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#18-integration-with-cicd-github-actions-example","text":"name : Backend Tests on : [ push , pull_request ] jobs : test : runs-on : ubuntu-latest services : postgres : image : postgres:16 env : POSTGRES_USER : testuser POSTGRES_PASSWORD : testpass POSTGRES_DB : testdb ports : [ '5432:5432' ] options : >- --health-cmd=\"pg_isready -U testuser -d testdb\" --health-interval=5s --health-timeout=5s --health-retries=5 steps : - uses : actions/checkout@v4 - name : Wait for Postgres run : | until pg_isready -h localhost -U testuser; do sleep 1 done - name : Run Tests run : ./gradlew test env : SPRING_DATASOURCE_URL : jdbc:postgresql://localhost:5432/testdb SPRING_DATASOURCE_USERNAME : testuser SPRING_DATASOURCE_PASSWORD : testpass This pattern runs Postgres automatically for tests \u2014 no manual setup, no external dependencies.","title":"\ud83d\ude80 18. Integration with CI/CD (GitHub Actions Example)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#19-managing-environments-local-staging-production","text":"Environment separation rule: Keep configuration externalized ( .env , configmaps , or Secrets). Never commit real passwords or keys. Distinguish database URLs by environment: Environment Example URL Notes Local jdbc:postgresql://localhost:5432/devdb Docker or local install Staging jdbc:postgresql://staging-db.internal:5432/appdb Shared test data Production jdbc:postgresql://prod-db.cluster:5432/appdb High availability In Docker Compose: env_file : - .env.${ENVIRONMENT} In Spring Boot: spring.datasource.url = ${DB_URL} spring.datasource.username = ${DB_USER} spring.datasource.password = ${DB_PASS} Pro tip: version .env.example for onboarding new developers easily.","title":"\ud83e\udde9 19. Managing Environments: Local \u2192 Staging \u2192 Production"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#20-production-hardening-maintenance-patterns","text":"","title":"\ud83d\udd12 20. Production Hardening &amp; Maintenance Patterns"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#connection-pooling","text":"Postgres performs best with connection pooling (e.g., PgBouncer ). docker run -d \\ --name pgbouncer \\ -p 6432 :6432 \\ -e DB_USER = devuser \\ -e DB_PASSWORD = secret \\ -e DB_HOST = postgres \\ edoburu/pgbouncer App connects to localhost:6432 instead of 5432 .","title":"Connection Pooling"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#backups","text":"pg_dump -U devuser devdb | gzip > backup_ $( date +%F ) .sql.gz Automate via cron or CI.","title":"Backups"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#replication-and-scaling","text":"Use Streaming Replication for read replicas. Or scale horizontally via logical replication . Consider Patroni or TimescaleDB for high-availability setups.","title":"Replication and Scaling"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#security","text":"Disable remote superuser login. Restrict listen_addresses in postgresql.conf . Rotate credentials regularly. Encrypt connections with SSL ( ssl = on ).","title":"Security"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#summary-developer-edition","text":"Integrate Postgres into your IDE and CI/CD pipelines, not just your runtime. Run it via Docker Compose to match local and production schemas. Automate validation, migrations, and backups. Use .env files to keep environments cleanly separated. Monitor performance ( EXPLAIN ANALYZE , logs, connection stats) like a pro DBA.","title":"\u2705 Summary (Developer Edition)"},{"location":"cheatsheets/languages/java/core/nio/path/","text":"Java Path (and a quick note on Paths ) \u00b6 Path is the main interface in java.nio.file that models a filesystem path (like \"images/cat.png\" or \"/usr/local/bin\" ). About Paths : since Java 11 , you can use Path.of(...) instead of Paths.get(...) . They do the same thing. Because of that, this guide uses Path.of and ignores Paths . Quick glossary (beginner-friendly) \u00b6 Absolute path : a full address from the filesystem root, e.g. \"/home/alex/report.txt\" (Unix) or \"C:\\Users\\Alex\\report.txt\" (Windows). It doesn\u2019t depend on the \u201ccurrent folder\u201d. Relative path : a path relative to a base (usually the app\u2019s current working directory), e.g. \"docs/report.txt\" or \"../images/logo.png\" . Root : the topmost starting point of the filesystem ( \"/\" on Unix; a drive like \"C:\\\" on Windows). Normalize : clean a path by removing . (current dir) and resolving .. (go up one folder) without touching the disk . Resolve : join paths like URLs: base.resolve(child) \u2192 \u201cappend\u201d child to base. Relativize : create a relative path that goes from one path to another . Real path : an absolute, normalized path with symlinks resolved on disk . Creating Path instances \u00b6 Path.of(String first, String... more) \u00b6 Create a path from one or more parts. Path p1 = Path . of ( \"images\" , \"icons\" , \"cat.png\" ); // \"images/icons/cat.png\" Path p2 = Path . of ( \"/usr\" , \"local\" , \"bin\" ); // \"/usr/local/bin\" (absolute on Unix) Output examples p1.toString() \u2192 \"images/icons/cat.png\" p2.isAbsolute() \u2192 true Use this instead of Paths.get(...) on Java 11+. Reading path structure \u00b6 getFileName() \u00b6 Last element of the path (the \u201cleaf\u201d). Path p = Path . of ( \"/var/log/system.log\" ); p . getFileName (). toString (); // \"system.log\" getParent() \u00b6 Everything except the last element (or null if none). Path p = Path . of ( \"/var/log/system.log\" ); p . getParent (). toString (); // \"/var/log\" getRoot() \u00b6 The root component (or null if relative). Path p1 = Path . of ( \"/var/log/system.log\" ); Path p2 = Path . of ( \"docs/readme.md\" ); p1 . getRoot (). toString (); // \"/\" p2 . getRoot (); // null (relative path) getNameCount() and getName(int index) \u00b6 Count and access individual name elements (0-based, root excluded). Path p = Path . of ( \"/usr/local/bin\" ); p . getNameCount (); // 3 (\"usr\",\"local\",\"bin\") p . getName ( 1 ). toString (); // \"local\" subpath(int beginIndex, int endIndex) \u00b6 Slice out a portion of the names (root not included). Path p = Path . of ( \"/usr/local/share/docs\" ); p . subpath ( 1 , 3 ). toString (); // \"local/share\" Checking path properties \u00b6 isAbsolute() \u00b6 Is this path absolute? Path . of ( \"/etc/hosts\" ). isAbsolute (); // true Path . of ( \"etc/hosts\" ). isAbsolute (); // false startsWith(...) / endsWith(...) \u00b6 Compare by path elements (not plain string). Path p = Path . of ( \"src/main/java/App.java\" ); p . startsWith ( \"src\" ); // true p . endsWith ( \"App.java\" ); // true p . endsWith ( Path . of ( \"java\" , \"App.java\" )); // true Transforming paths (no filesystem access) \u00b6 normalize() \u00b6 Remove . and fold .. where possible. Path . of ( \"a/./b/../c\" ). normalize (). toString (); // \"a/c\" resolve(String|Path other) \u00b6 Append other to this path (unless other is absolute , then other is returned). Path base = Path . of ( \"/home/alex\" ); base . resolve ( \"docs/report.txt\" ). toString (); // \"/home/alex/docs/report.txt\" base . resolve ( \"/etc/hosts\" ). toString (); // \"/etc/hosts\" (absolute wins) resolveSibling(String|Path other) \u00b6 Replace the last element with other . Path p = Path . of ( \"/home/alex/docs/report.txt\" ); p . resolveSibling ( \"notes.txt\" ). toString (); // \"/home/alex/docs/notes.txt\" relativize(Path other) \u00b6 Create a relative path from this to other . Both must be both absolute or both relative, and on the same root/drive. Path a = Path . of ( \"/home/alex/docs\" ); Path b = Path . of ( \"/home/alex/images/pic.png\" ); a . relativize ( b ). toString (); // \"../images/pic.png\" Converting paths \u00b6 toAbsolutePath() \u00b6 Turn a relative path into an absolute one using the current working directory ; already-absolute paths are returned as-is. (No disk access.) Path . of ( \"logs/app.log\" ). toAbsolutePath (). toString (); // e.g. \"/Users/alex/project/logs/app.log\" toRealPath(LinkOption... options) \u00b6 Return the real absolute path: normalized and with symlinks resolved. Touches the filesystem and can throw if missing. Path . of ( \"symlink/to/file.txt\" ). toRealPath (). toString (); // e.g. \"/actual/location/file.txt\" If you pass LinkOption.NOFOLLOW_LINKS , it won\u2019t resolve symlinks (still checks existence). toUri() \u00b6 Convert to a file: URI. Path . of ( \"/tmp/test.txt\" ). toUri (). toString (); // \"file:///tmp/test.txt\" toFile() \u00b6 Convert to the old java.io.File object. Path . of ( \"docs/readme.md\" ). toFile (); // java.io.File Interop & utilities \u00b6 iterator() (implements Iterable<Path> ) \u00b6 Iterate path elements. Path p = Path . of ( \"src/main/java\" ); for ( Path part : p ) { // \"src\", then \"main\", then \"java\" } compareTo(Path other) (and equals , hashCode ) \u00b6 Lexicographic comparison based on the filesystem\u2019s rules. Path a = Path . of ( \"a\" ); Path b = Path . of ( \"b\" ); a . compareTo ( b ); // negative value (a < b) getFileSystem() \u00b6 The FileSystem this Path belongs to (useful with custom/ZIP filesystems). Path . of ( \"README.md\" ). getFileSystem (). provider (). getScheme (); // \"file\" Common Files helpers you\u2019ll often use with Path (not methods on Path , but handy) \u00b6 Files . exists ( Path . of ( \"notes.txt\" )); // true/false Files . createDirectories ( Path . of ( \"out/logs\" )); // create all missing dirs Files . copy ( srcPath , destPath , REPLACE_EXISTING ); // copy a file Files . move ( srcPath , destPath , ATOMIC_MOVE ); // move/rename Files . delete ( Path . of ( \"old.txt\" )); // delete Files . readString ( Path . of ( \"data.txt\" )); // read whole file as String Files . writeString ( Path . of ( \"out.txt\" ), \"hello\" ); // write text Windows vs. Unix notes (gotchas) \u00b6 Roots : Unix root is \"/\" . Windows roots are drives like \"C:\\\" and UNC roots like \"\\\\server\\share\" . Separators : Path uses the platform\u2019s separator under the hood. You can write either '/' or '\\' in string literals, but prefer Path.of(\"a\",\"b\",\"c\") to stay portable. Relativize/resolve : You can\u2019t relativize/resolve across different roots/drives. Mini reference (method \u2192 what it does \u2192 example I/O) \u00b6 Method What it does Example input \u2192 output Path.of(\"a\",\"b\",\"c\") Make a path from parts \u2192 \"a/b/c\" getFileName() Last path segment \"/x/y/z.txt\" \u2192 \"z.txt\" getParent() Path without the last segment \"/x/y/z.txt\" \u2192 \"/x/y\" getRoot() The root component or null \"/x/y\" \u2192 \"/\" ; \"x/y\" \u2192 null getNameCount() Number of segments (no root) \"/a/b/c\" \u2192 3 getName(i) Segment at index i \"/a/b/c\" & i=1 \u2192 \"b\" subpath(i,j) Slice of segments [i,j) \"/a/b/c/d\" , (1,3) \u2192 \"b/c\" isAbsolute() Is it a full path from the root? \"/a/b\" \u2192 true ; \"a/b\" \u2192 false startsWith(x) Starts with segment(s) x ? \"src/main/App.java\" & \"src\" \u2192 true endsWith(x) Ends with segment(s) x ? \"src/main/App.java\" & \"App.java\" \u2192 true normalize() Remove . and fold .. \"a/./b/../c\" \u2192 \"a/c\" resolve(x) Append x (unless x is absolute) \"/home/a\" + \"docs/r.txt\" \u2192 \"/home/a/docs/r.txt\" resolveSibling(x) Replace the last segment \"/a/b/c.txt\" + \"d.txt\" \u2192 \"/a/b/d.txt\" relativize(other) Path from this to other \"/a/b\" \u2192 \"/a/c/d\" gives \"../c/d\" toAbsolutePath() Make absolute using CWD \"logs/app.log\" \u2192 \"/\u2026/logs/app.log\" toRealPath() Absolute, normalized, resolve symlinks (touches disk) \"link/file\" \u2192 \"/actual/file\" toUri() Convert to file: URI \"/tmp/t.txt\" \u2192 \"file:///tmp/t.txt\" toFile() Convert to java.io.File \"docs/readme.md\" \u2192 File(\"docs/readme.md\") iterator() Iterate segments \"a/b/c\" \u2192 \"a\" , \"b\" , \"c\" compareTo() Order paths lexicographically \"a\" vs \"b\" \u2192 < 0 Tiny end-to-end example \u00b6 Path base = Path . of ( \"/home/alex/projects\" ); Path rel = Path . of ( \"demo/../lib/utils.java\" ); // relative Path norm = rel . normalize (); // \"lib/utils.java\" Path abs = base . resolve ( norm ); // \"/home/alex/projects/lib/utils.java\" Path here = Path . of ( \".\" ). toAbsolutePath (); // absolute CWD Path linkFree = abs . toRealPath (); // resolves symlinks (if any; hits disk) Path back = base . relativize ( linkFree ); // relative from base to real file Typical outputs norm.toString() \u2192 \"lib/utils.java\" abs.toString() \u2192 \"/home/alex/projects/lib/utils.java\" back.toString() \u2192 \"lib/utils.java\" Important behaviors & gotchas \u00b6 Relative vs Absolute Path.of(\"docs/file.txt\") is relative : it depends on the program\u2019s current working directory . Path.of(\"/home/user/docs/file.txt\") (Unix) or Path.of(\"C:\\\\Users\\\\Alex\\\\file.txt\") (Windows) is absolute : it always points to the same place, no matter where the program is run. Normalize doesn\u2019t touch the disk normalize() just cleans up the string form of the path ( . and .. ). It doesn\u2019t check if the file exists. Real path touches the disk toRealPath() does check the filesystem. It resolves symlinks, checks existence, and can throw exceptions if the file isn\u2019t there. Resolve vs. Relativize confusion resolve(child) \u2192 go deeper into the tree. relativize(other) \u2192 calculate the path between two paths. You can\u2019t relativize across different drives/roots ( C:\\ vs D:\\ on Windows, or / vs a network share on Unix). StartsWith/EndsWith are by segments, not plain strings \"src/main/java/App.java\".endsWith(\"java\") \u2192 false (last segment is \"App.java\" ). \"src/main/java/App.java\".endsWith(\"App.java\") \u2192 true . Iterating excludes root /usr/local/bin will give elements \"usr\" , \"local\" , \"bin\" \u2014 the root / is not included. Cross-platform differences On Windows: roots are drives ( C:\\ ), case-insensitive by default. On Unix: root is / , case-sensitive. Bottom line \u00b6 Use Path instead of string concatenation : It handles separators, OS differences, and path logic safely. Prefer Path.of(...) (Java 11+) over Paths.get(...) . Use normalize() when you want a clean path string. Use toRealPath() only if you need the true location on disk (and are ready to handle errors). Combine with Files class for actual file operations ( exists , read , write , delete ). Remember : Path itself is just a description of a location \u2014 it doesn\u2019t create, delete, or read files.","title":"Path"},{"location":"cheatsheets/languages/java/core/nio/path/#java-path-and-a-quick-note-on-paths","text":"Path is the main interface in java.nio.file that models a filesystem path (like \"images/cat.png\" or \"/usr/local/bin\" ). About Paths : since Java 11 , you can use Path.of(...) instead of Paths.get(...) . They do the same thing. Because of that, this guide uses Path.of and ignores Paths .","title":"Java Path (and a quick note on Paths)"},{"location":"cheatsheets/languages/java/core/nio/path/#quick-glossary-beginner-friendly","text":"Absolute path : a full address from the filesystem root, e.g. \"/home/alex/report.txt\" (Unix) or \"C:\\Users\\Alex\\report.txt\" (Windows). It doesn\u2019t depend on the \u201ccurrent folder\u201d. Relative path : a path relative to a base (usually the app\u2019s current working directory), e.g. \"docs/report.txt\" or \"../images/logo.png\" . Root : the topmost starting point of the filesystem ( \"/\" on Unix; a drive like \"C:\\\" on Windows). Normalize : clean a path by removing . (current dir) and resolving .. (go up one folder) without touching the disk . Resolve : join paths like URLs: base.resolve(child) \u2192 \u201cappend\u201d child to base. Relativize : create a relative path that goes from one path to another . Real path : an absolute, normalized path with symlinks resolved on disk .","title":"Quick glossary (beginner-friendly)"},{"location":"cheatsheets/languages/java/core/nio/path/#creating-path-instances","text":"","title":"Creating Path instances"},{"location":"cheatsheets/languages/java/core/nio/path/#pathofstring-first-string-more","text":"Create a path from one or more parts. Path p1 = Path . of ( \"images\" , \"icons\" , \"cat.png\" ); // \"images/icons/cat.png\" Path p2 = Path . of ( \"/usr\" , \"local\" , \"bin\" ); // \"/usr/local/bin\" (absolute on Unix) Output examples p1.toString() \u2192 \"images/icons/cat.png\" p2.isAbsolute() \u2192 true Use this instead of Paths.get(...) on Java 11+.","title":"Path.of(String first, String... more)"},{"location":"cheatsheets/languages/java/core/nio/path/#reading-path-structure","text":"","title":"Reading path structure"},{"location":"cheatsheets/languages/java/core/nio/path/#getfilename","text":"Last element of the path (the \u201cleaf\u201d). Path p = Path . of ( \"/var/log/system.log\" ); p . getFileName (). toString (); // \"system.log\"","title":"getFileName()"},{"location":"cheatsheets/languages/java/core/nio/path/#getparent","text":"Everything except the last element (or null if none). Path p = Path . of ( \"/var/log/system.log\" ); p . getParent (). toString (); // \"/var/log\"","title":"getParent()"},{"location":"cheatsheets/languages/java/core/nio/path/#getroot","text":"The root component (or null if relative). Path p1 = Path . of ( \"/var/log/system.log\" ); Path p2 = Path . of ( \"docs/readme.md\" ); p1 . getRoot (). toString (); // \"/\" p2 . getRoot (); // null (relative path)","title":"getRoot()"},{"location":"cheatsheets/languages/java/core/nio/path/#getnamecount-and-getnameint-index","text":"Count and access individual name elements (0-based, root excluded). Path p = Path . of ( \"/usr/local/bin\" ); p . getNameCount (); // 3 (\"usr\",\"local\",\"bin\") p . getName ( 1 ). toString (); // \"local\"","title":"getNameCount() and getName(int index)"},{"location":"cheatsheets/languages/java/core/nio/path/#subpathint-beginindex-int-endindex","text":"Slice out a portion of the names (root not included). Path p = Path . of ( \"/usr/local/share/docs\" ); p . subpath ( 1 , 3 ). toString (); // \"local/share\"","title":"subpath(int beginIndex, int endIndex)"},{"location":"cheatsheets/languages/java/core/nio/path/#checking-path-properties","text":"","title":"Checking path properties"},{"location":"cheatsheets/languages/java/core/nio/path/#isabsolute","text":"Is this path absolute? Path . of ( \"/etc/hosts\" ). isAbsolute (); // true Path . of ( \"etc/hosts\" ). isAbsolute (); // false","title":"isAbsolute()"},{"location":"cheatsheets/languages/java/core/nio/path/#startswith-endswith","text":"Compare by path elements (not plain string). Path p = Path . of ( \"src/main/java/App.java\" ); p . startsWith ( \"src\" ); // true p . endsWith ( \"App.java\" ); // true p . endsWith ( Path . of ( \"java\" , \"App.java\" )); // true","title":"startsWith(...) / endsWith(...)"},{"location":"cheatsheets/languages/java/core/nio/path/#transforming-paths-no-filesystem-access","text":"","title":"Transforming paths (no filesystem access)"},{"location":"cheatsheets/languages/java/core/nio/path/#normalize","text":"Remove . and fold .. where possible. Path . of ( \"a/./b/../c\" ). normalize (). toString (); // \"a/c\"","title":"normalize()"},{"location":"cheatsheets/languages/java/core/nio/path/#resolvestringpath-other","text":"Append other to this path (unless other is absolute , then other is returned). Path base = Path . of ( \"/home/alex\" ); base . resolve ( \"docs/report.txt\" ). toString (); // \"/home/alex/docs/report.txt\" base . resolve ( \"/etc/hosts\" ). toString (); // \"/etc/hosts\" (absolute wins)","title":"resolve(String|Path other)"},{"location":"cheatsheets/languages/java/core/nio/path/#resolvesiblingstringpath-other","text":"Replace the last element with other . Path p = Path . of ( \"/home/alex/docs/report.txt\" ); p . resolveSibling ( \"notes.txt\" ). toString (); // \"/home/alex/docs/notes.txt\"","title":"resolveSibling(String|Path other)"},{"location":"cheatsheets/languages/java/core/nio/path/#relativizepath-other","text":"Create a relative path from this to other . Both must be both absolute or both relative, and on the same root/drive. Path a = Path . of ( \"/home/alex/docs\" ); Path b = Path . of ( \"/home/alex/images/pic.png\" ); a . relativize ( b ). toString (); // \"../images/pic.png\"","title":"relativize(Path other)"},{"location":"cheatsheets/languages/java/core/nio/path/#converting-paths","text":"","title":"Converting paths"},{"location":"cheatsheets/languages/java/core/nio/path/#toabsolutepath","text":"Turn a relative path into an absolute one using the current working directory ; already-absolute paths are returned as-is. (No disk access.) Path . of ( \"logs/app.log\" ). toAbsolutePath (). toString (); // e.g. \"/Users/alex/project/logs/app.log\"","title":"toAbsolutePath()"},{"location":"cheatsheets/languages/java/core/nio/path/#torealpathlinkoption-options","text":"Return the real absolute path: normalized and with symlinks resolved. Touches the filesystem and can throw if missing. Path . of ( \"symlink/to/file.txt\" ). toRealPath (). toString (); // e.g. \"/actual/location/file.txt\" If you pass LinkOption.NOFOLLOW_LINKS , it won\u2019t resolve symlinks (still checks existence).","title":"toRealPath(LinkOption... options)"},{"location":"cheatsheets/languages/java/core/nio/path/#touri","text":"Convert to a file: URI. Path . of ( \"/tmp/test.txt\" ). toUri (). toString (); // \"file:///tmp/test.txt\"","title":"toUri()"},{"location":"cheatsheets/languages/java/core/nio/path/#tofile","text":"Convert to the old java.io.File object. Path . of ( \"docs/readme.md\" ). toFile (); // java.io.File","title":"toFile()"},{"location":"cheatsheets/languages/java/core/nio/path/#interop-utilities","text":"","title":"Interop &amp; utilities"},{"location":"cheatsheets/languages/java/core/nio/path/#iterator-implements-iterablepath","text":"Iterate path elements. Path p = Path . of ( \"src/main/java\" ); for ( Path part : p ) { // \"src\", then \"main\", then \"java\" }","title":"iterator() (implements Iterable&lt;Path&gt;)"},{"location":"cheatsheets/languages/java/core/nio/path/#comparetopath-other-and-equals-hashcode","text":"Lexicographic comparison based on the filesystem\u2019s rules. Path a = Path . of ( \"a\" ); Path b = Path . of ( \"b\" ); a . compareTo ( b ); // negative value (a < b)","title":"compareTo(Path other) (and equals, hashCode)"},{"location":"cheatsheets/languages/java/core/nio/path/#getfilesystem","text":"The FileSystem this Path belongs to (useful with custom/ZIP filesystems). Path . of ( \"README.md\" ). getFileSystem (). provider (). getScheme (); // \"file\"","title":"getFileSystem()"},{"location":"cheatsheets/languages/java/core/nio/path/#common-files-helpers-youll-often-use-with-path-not-methods-on-path-but-handy","text":"Files . exists ( Path . of ( \"notes.txt\" )); // true/false Files . createDirectories ( Path . of ( \"out/logs\" )); // create all missing dirs Files . copy ( srcPath , destPath , REPLACE_EXISTING ); // copy a file Files . move ( srcPath , destPath , ATOMIC_MOVE ); // move/rename Files . delete ( Path . of ( \"old.txt\" )); // delete Files . readString ( Path . of ( \"data.txt\" )); // read whole file as String Files . writeString ( Path . of ( \"out.txt\" ), \"hello\" ); // write text","title":"Common Files helpers you\u2019ll often use with Path (not methods on Path, but handy)"},{"location":"cheatsheets/languages/java/core/nio/path/#windows-vs-unix-notes-gotchas","text":"Roots : Unix root is \"/\" . Windows roots are drives like \"C:\\\" and UNC roots like \"\\\\server\\share\" . Separators : Path uses the platform\u2019s separator under the hood. You can write either '/' or '\\' in string literals, but prefer Path.of(\"a\",\"b\",\"c\") to stay portable. Relativize/resolve : You can\u2019t relativize/resolve across different roots/drives.","title":"Windows vs. Unix notes (gotchas)"},{"location":"cheatsheets/languages/java/core/nio/path/#mini-reference-method-what-it-does-example-io","text":"Method What it does Example input \u2192 output Path.of(\"a\",\"b\",\"c\") Make a path from parts \u2192 \"a/b/c\" getFileName() Last path segment \"/x/y/z.txt\" \u2192 \"z.txt\" getParent() Path without the last segment \"/x/y/z.txt\" \u2192 \"/x/y\" getRoot() The root component or null \"/x/y\" \u2192 \"/\" ; \"x/y\" \u2192 null getNameCount() Number of segments (no root) \"/a/b/c\" \u2192 3 getName(i) Segment at index i \"/a/b/c\" & i=1 \u2192 \"b\" subpath(i,j) Slice of segments [i,j) \"/a/b/c/d\" , (1,3) \u2192 \"b/c\" isAbsolute() Is it a full path from the root? \"/a/b\" \u2192 true ; \"a/b\" \u2192 false startsWith(x) Starts with segment(s) x ? \"src/main/App.java\" & \"src\" \u2192 true endsWith(x) Ends with segment(s) x ? \"src/main/App.java\" & \"App.java\" \u2192 true normalize() Remove . and fold .. \"a/./b/../c\" \u2192 \"a/c\" resolve(x) Append x (unless x is absolute) \"/home/a\" + \"docs/r.txt\" \u2192 \"/home/a/docs/r.txt\" resolveSibling(x) Replace the last segment \"/a/b/c.txt\" + \"d.txt\" \u2192 \"/a/b/d.txt\" relativize(other) Path from this to other \"/a/b\" \u2192 \"/a/c/d\" gives \"../c/d\" toAbsolutePath() Make absolute using CWD \"logs/app.log\" \u2192 \"/\u2026/logs/app.log\" toRealPath() Absolute, normalized, resolve symlinks (touches disk) \"link/file\" \u2192 \"/actual/file\" toUri() Convert to file: URI \"/tmp/t.txt\" \u2192 \"file:///tmp/t.txt\" toFile() Convert to java.io.File \"docs/readme.md\" \u2192 File(\"docs/readme.md\") iterator() Iterate segments \"a/b/c\" \u2192 \"a\" , \"b\" , \"c\" compareTo() Order paths lexicographically \"a\" vs \"b\" \u2192 < 0","title":"Mini reference (method \u2192 what it does \u2192 example I/O)"},{"location":"cheatsheets/languages/java/core/nio/path/#tiny-end-to-end-example","text":"Path base = Path . of ( \"/home/alex/projects\" ); Path rel = Path . of ( \"demo/../lib/utils.java\" ); // relative Path norm = rel . normalize (); // \"lib/utils.java\" Path abs = base . resolve ( norm ); // \"/home/alex/projects/lib/utils.java\" Path here = Path . of ( \".\" ). toAbsolutePath (); // absolute CWD Path linkFree = abs . toRealPath (); // resolves symlinks (if any; hits disk) Path back = base . relativize ( linkFree ); // relative from base to real file Typical outputs norm.toString() \u2192 \"lib/utils.java\" abs.toString() \u2192 \"/home/alex/projects/lib/utils.java\" back.toString() \u2192 \"lib/utils.java\"","title":"Tiny end-to-end example"},{"location":"cheatsheets/languages/java/core/nio/path/#important-behaviors-gotchas","text":"Relative vs Absolute Path.of(\"docs/file.txt\") is relative : it depends on the program\u2019s current working directory . Path.of(\"/home/user/docs/file.txt\") (Unix) or Path.of(\"C:\\\\Users\\\\Alex\\\\file.txt\") (Windows) is absolute : it always points to the same place, no matter where the program is run. Normalize doesn\u2019t touch the disk normalize() just cleans up the string form of the path ( . and .. ). It doesn\u2019t check if the file exists. Real path touches the disk toRealPath() does check the filesystem. It resolves symlinks, checks existence, and can throw exceptions if the file isn\u2019t there. Resolve vs. Relativize confusion resolve(child) \u2192 go deeper into the tree. relativize(other) \u2192 calculate the path between two paths. You can\u2019t relativize across different drives/roots ( C:\\ vs D:\\ on Windows, or / vs a network share on Unix). StartsWith/EndsWith are by segments, not plain strings \"src/main/java/App.java\".endsWith(\"java\") \u2192 false (last segment is \"App.java\" ). \"src/main/java/App.java\".endsWith(\"App.java\") \u2192 true . Iterating excludes root /usr/local/bin will give elements \"usr\" , \"local\" , \"bin\" \u2014 the root / is not included. Cross-platform differences On Windows: roots are drives ( C:\\ ), case-insensitive by default. On Unix: root is / , case-sensitive.","title":"Important behaviors &amp; gotchas"},{"location":"cheatsheets/languages/java/core/nio/path/#bottom-line","text":"Use Path instead of string concatenation : It handles separators, OS differences, and path logic safely. Prefer Path.of(...) (Java 11+) over Paths.get(...) . Use normalize() when you want a clean path string. Use toRealPath() only if you need the true location on disk (and are ready to handle errors). Combine with Files class for actual file operations ( exists , read , write , delete ). Remember : Path itself is just a description of a location \u2014 it doesn\u2019t create, delete, or read files.","title":"Bottom line"},{"location":"cheatsheets/networking/http/state/","text":"\ud83c\udf6a Sessions, Tokens & Cookies \u2014 Quick Refresher \u00b6 How HTTP, a stateless protocol, learns to remember you. See also: HTTP State Evolution 1) The Core Problem \u00b6 HTTP by design has no memory . Each request is independent \u2014 the server doesn\u2019t know it\u2019s you returning unless you tell it every time. So to build logins, carts, dashboards, and \u201cremember me\u201d experiences, we need a state mechanism \u2014 something that links separate requests together. Three main patterns exist: Mechanism Where State Lives Common Use Sessions On the server Web apps, classic login Cookies On the client (browser) Store session IDs, small data Tokens On the client (API world) JWTs, OAuth access tokens 2) Sessions \u2014 The Old but Gold Approach \u00b6 \ud83e\udde9 Idea \u00b6 Store a \u201csession record\u201d on the server \u2014 usually a hash map like: sessionId -> { userId: 42, role: \"admin\", cart: [...] } The client just holds a random session ID: Cookie: sessionId=abc123 The server looks it up on every request. \u2699\ufe0f How It Works \u00b6 User logs in with username/password. Server creates a session in memory or database. Server sends the session ID to the client as a cookie. Client sends it with every request. \ud83d\udca1 Pros \u00b6 Easy to invalidate ( delete sessionId server-side). Works with simple cookies (no JWT complexity). Secure if server stores minimal data. \u26a0\ufe0f Cons \u00b6 Doesn\u2019t scale easily across multiple servers unless you share session storage (Redis, database, etc.). Not ideal for stateless APIs. Example \u00b6 POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure GET /profile \u2192 Cookie: sessionId=abc123 3) Cookies \u2014 The Tiny Carriers of State \u00b6 Cookies are small text blobs (\u22484KB each) stored by browsers per origin. They automatically attach to every HTTP request to that site. \ud83c\udf6c Example \u00b6 Set-Cookie: theme=dark; Path=/; Max-Age=3600; SameSite=Lax Browser then adds: Cookie: theme=dark \ud83e\udde0 Key Attributes \u00b6 Attribute Meaning Domain which host(s) can read it Path restrict cookie to part of site Expires / Max-Age when to delete it Secure only send over HTTPS HttpOnly JS can\u2019t access it (prevents XSS stealing) SameSite controls cross-site sending (prevents CSRF) \ud83d\udd12 Security baseline \u00b6 Set-Cookie: sessionId=abc123; Secure; HttpOnly; SameSite=Strict 4) Tokens \u2014 Modern, Stateless Authentication \u00b6 Tokens shift state to the client , so servers don\u2019t store sessions. They\u2019re ideal for APIs, SPAs, and mobile apps. The two main types: Token Type Format Where Stored Expiry JWT (JSON Web Token) signed JSON localStorage / cookie short-lived (mins\u2013hrs) Opaque Token random ID server DB lookup flexible \ud83d\udd27 JWT Example \u00b6 Header.Payload.Signature \u2014 all Base64 encoded. { \"sub\" : \"42\" , \"name\" : \"Edgaras\" , \"exp\" : 1737000000 } JWTs are signed with a secret (HMAC) or private key (RSA). The server verifies the signature \u2014 no DB lookup needed. Typical Flow \u00b6 User logs in \u2192 server returns access_token + refresh_token . Client stores them (preferably in memory or httpOnly cookie ). Sends token in every request: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR... 4. When access token expires, client uses refresh token to get a new one. \ud83d\udca1 Pros \u00b6 Perfect for distributed / stateless backends. Scales easily. Easy to integrate with mobile / third-party clients. \u26a0\ufe0f Cons \u00b6 Harder to invalidate before expiry (you can only blacklist). Token theft = full impersonation until expiry. 5) Cookies vs Tokens \u2014 The Real Difference \u00b6 Aspect Cookie Session Token-based State stored Server-side Client-side Transport Automatic via browser Manual in Authorization header Invalidation Easy (delete on server) Harder (must track blacklists) Scalability Requires shared session store Scales horizontally Works with Browser + HTML apps APIs, SPAs, mobile apps CSRF risk Yes Minimal (if no cookies used) 6) Mixing Cookies & Tokens (Hybrid Pattern) \u00b6 Modern secure apps often use tokens inside cookies . Set-Cookie: access_token=<JWT>; HttpOnly; Secure; SameSite=Strict Benefits: Automatic sending like sessions. JWT\u2019s stateless verification. HttpOnly flag protects from JS theft. Used by major frameworks like NextAuth , Spring Security , and Django Rest Framework . 7) Refresh Tokens \u00b6 To balance security and convenience , many systems use two tokens: Type Lifetime Purpose Access token short (5\u201315 min) Used for API requests Refresh token long (days\u2013weeks) Used to get new access token The refresh token is sent only to /auth/refresh endpoint \u2014 not every request. 8) CSRF & XSS \u2014 The Twin Threats \u00b6 Cross-Site Request Forgery (CSRF) \u00b6 When attacker tricks browser into sending a cookie-authenticated request. Prevent with: SameSite=Strict or Lax cookies. CSRF token in form submissions. Use of Authorization header instead of cookies for APIs. Cross-Site Scripting (XSS) \u00b6 When injected JS steals tokens or cookies. Prevent with: HttpOnly cookies. Strict Content-Security-Policy. Input sanitization. 9) Practical Example \u2014 Login Flow Comparison \u00b6 \ud83c\udf6a Cookie-based (Sessions) \u00b6 POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure GET /dashboard \u2192 Cookie: sessionId=abc123 \ud83e\ude99 Token-based (JWT) \u00b6 POST /login \u2192 { \"access_token\": \"eyJ...\", \"refresh_token\": \"eyJ...\" } GET /profile \u2192 Authorization: Bearer eyJ... 10) Quick Recap \u2014 What to Use When \u00b6 Use Case Recommended Classic server-rendered site Sessions + Cookies REST API / mobile app JWTs (access + refresh tokens) Microservices / distributed JWTs or opaque tokens with gateway validation Sensitive data / high security Short-lived tokens + HttpOnly cookies Public API API keys (simple token variant) 11) Java & Spring Quick Hooks \u00b6 Session Example \u00b6 @PostMapping ( \"/login\" ) public ResponseEntity <?> login ( HttpSession session ) { session . setAttribute ( \"user\" , user ); return ResponseEntity . ok (). build (); } JWT Filter Example \u00b6 String authHeader = request . getHeader ( \"Authorization\" ); if ( authHeader != null && authHeader . startsWith ( \"Bearer \" )) { String token = authHeader . substring ( 7 ); Claims claims = jwtUtil . validateToken ( token ); // attach user info to security context } 12) Pocket Glossary \u00b6 Session: server-side memory of a user\u2019s state. Cookie: key-value pair stored on client, sent automatically with requests. Token: signed credential representing a user (e.g., JWT). Refresh token: used to issue new access tokens. CSRF: tricking browser into unintended requests. XSS: injecting scripts that run in a user\u2019s browser. 13) Summary Thought \u00b6 HTTP forgets. Sessions, cookies, and tokens are three ways to make it remember \u2014 but each trades simplicity for scalability, and security for convenience. Knowing when to store state and when to trust statelessness is what separates beginners from real backend engineers.","title":"State"},{"location":"cheatsheets/networking/http/state/#sessions-tokens-cookies-quick-refresher","text":"How HTTP, a stateless protocol, learns to remember you. See also: HTTP State Evolution","title":"\ud83c\udf6a Sessions, Tokens &amp; Cookies \u2014 Quick Refresher"},{"location":"cheatsheets/networking/http/state/#1-the-core-problem","text":"HTTP by design has no memory . Each request is independent \u2014 the server doesn\u2019t know it\u2019s you returning unless you tell it every time. So to build logins, carts, dashboards, and \u201cremember me\u201d experiences, we need a state mechanism \u2014 something that links separate requests together. Three main patterns exist: Mechanism Where State Lives Common Use Sessions On the server Web apps, classic login Cookies On the client (browser) Store session IDs, small data Tokens On the client (API world) JWTs, OAuth access tokens","title":"1) The Core Problem"},{"location":"cheatsheets/networking/http/state/#2-sessions-the-old-but-gold-approach","text":"","title":"2) Sessions \u2014 The Old but Gold Approach"},{"location":"cheatsheets/networking/http/state/#idea","text":"Store a \u201csession record\u201d on the server \u2014 usually a hash map like: sessionId -> { userId: 42, role: \"admin\", cart: [...] } The client just holds a random session ID: Cookie: sessionId=abc123 The server looks it up on every request.","title":"\ud83e\udde9 Idea"},{"location":"cheatsheets/networking/http/state/#how-it-works","text":"User logs in with username/password. Server creates a session in memory or database. Server sends the session ID to the client as a cookie. Client sends it with every request.","title":"\u2699\ufe0f How It Works"},{"location":"cheatsheets/networking/http/state/#pros","text":"Easy to invalidate ( delete sessionId server-side). Works with simple cookies (no JWT complexity). Secure if server stores minimal data.","title":"\ud83d\udca1 Pros"},{"location":"cheatsheets/networking/http/state/#cons","text":"Doesn\u2019t scale easily across multiple servers unless you share session storage (Redis, database, etc.). Not ideal for stateless APIs.","title":"\u26a0\ufe0f Cons"},{"location":"cheatsheets/networking/http/state/#example","text":"POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure GET /profile \u2192 Cookie: sessionId=abc123","title":"Example"},{"location":"cheatsheets/networking/http/state/#3-cookies-the-tiny-carriers-of-state","text":"Cookies are small text blobs (\u22484KB each) stored by browsers per origin. They automatically attach to every HTTP request to that site.","title":"3) Cookies \u2014 The Tiny Carriers of State"},{"location":"cheatsheets/networking/http/state/#example_1","text":"Set-Cookie: theme=dark; Path=/; Max-Age=3600; SameSite=Lax Browser then adds: Cookie: theme=dark","title":"\ud83c\udf6c Example"},{"location":"cheatsheets/networking/http/state/#key-attributes","text":"Attribute Meaning Domain which host(s) can read it Path restrict cookie to part of site Expires / Max-Age when to delete it Secure only send over HTTPS HttpOnly JS can\u2019t access it (prevents XSS stealing) SameSite controls cross-site sending (prevents CSRF)","title":"\ud83e\udde0 Key Attributes"},{"location":"cheatsheets/networking/http/state/#security-baseline","text":"Set-Cookie: sessionId=abc123; Secure; HttpOnly; SameSite=Strict","title":"\ud83d\udd12 Security baseline"},{"location":"cheatsheets/networking/http/state/#4-tokens-modern-stateless-authentication","text":"Tokens shift state to the client , so servers don\u2019t store sessions. They\u2019re ideal for APIs, SPAs, and mobile apps. The two main types: Token Type Format Where Stored Expiry JWT (JSON Web Token) signed JSON localStorage / cookie short-lived (mins\u2013hrs) Opaque Token random ID server DB lookup flexible","title":"4) Tokens \u2014 Modern, Stateless Authentication"},{"location":"cheatsheets/networking/http/state/#jwt-example","text":"Header.Payload.Signature \u2014 all Base64 encoded. { \"sub\" : \"42\" , \"name\" : \"Edgaras\" , \"exp\" : 1737000000 } JWTs are signed with a secret (HMAC) or private key (RSA). The server verifies the signature \u2014 no DB lookup needed.","title":"\ud83d\udd27 JWT Example"},{"location":"cheatsheets/networking/http/state/#typical-flow","text":"User logs in \u2192 server returns access_token + refresh_token . Client stores them (preferably in memory or httpOnly cookie ). Sends token in every request: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR... 4. When access token expires, client uses refresh token to get a new one.","title":"Typical Flow"},{"location":"cheatsheets/networking/http/state/#pros_1","text":"Perfect for distributed / stateless backends. Scales easily. Easy to integrate with mobile / third-party clients.","title":"\ud83d\udca1 Pros"},{"location":"cheatsheets/networking/http/state/#cons_1","text":"Harder to invalidate before expiry (you can only blacklist). Token theft = full impersonation until expiry.","title":"\u26a0\ufe0f Cons"},{"location":"cheatsheets/networking/http/state/#5-cookies-vs-tokens-the-real-difference","text":"Aspect Cookie Session Token-based State stored Server-side Client-side Transport Automatic via browser Manual in Authorization header Invalidation Easy (delete on server) Harder (must track blacklists) Scalability Requires shared session store Scales horizontally Works with Browser + HTML apps APIs, SPAs, mobile apps CSRF risk Yes Minimal (if no cookies used)","title":"5) Cookies vs Tokens \u2014 The Real Difference"},{"location":"cheatsheets/networking/http/state/#6-mixing-cookies-tokens-hybrid-pattern","text":"Modern secure apps often use tokens inside cookies . Set-Cookie: access_token=<JWT>; HttpOnly; Secure; SameSite=Strict Benefits: Automatic sending like sessions. JWT\u2019s stateless verification. HttpOnly flag protects from JS theft. Used by major frameworks like NextAuth , Spring Security , and Django Rest Framework .","title":"6) Mixing Cookies &amp; Tokens (Hybrid Pattern)"},{"location":"cheatsheets/networking/http/state/#7-refresh-tokens","text":"To balance security and convenience , many systems use two tokens: Type Lifetime Purpose Access token short (5\u201315 min) Used for API requests Refresh token long (days\u2013weeks) Used to get new access token The refresh token is sent only to /auth/refresh endpoint \u2014 not every request.","title":"7) Refresh Tokens"},{"location":"cheatsheets/networking/http/state/#8-csrf-xss-the-twin-threats","text":"","title":"8) CSRF &amp; XSS \u2014 The Twin Threats"},{"location":"cheatsheets/networking/http/state/#cross-site-request-forgery-csrf","text":"When attacker tricks browser into sending a cookie-authenticated request. Prevent with: SameSite=Strict or Lax cookies. CSRF token in form submissions. Use of Authorization header instead of cookies for APIs.","title":"Cross-Site Request Forgery (CSRF)"},{"location":"cheatsheets/networking/http/state/#cross-site-scripting-xss","text":"When injected JS steals tokens or cookies. Prevent with: HttpOnly cookies. Strict Content-Security-Policy. Input sanitization.","title":"Cross-Site Scripting (XSS)"},{"location":"cheatsheets/networking/http/state/#9-practical-example-login-flow-comparison","text":"","title":"9) Practical Example \u2014 Login Flow Comparison"},{"location":"cheatsheets/networking/http/state/#cookie-based-sessions","text":"POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure GET /dashboard \u2192 Cookie: sessionId=abc123","title":"\ud83c\udf6a Cookie-based (Sessions)"},{"location":"cheatsheets/networking/http/state/#token-based-jwt","text":"POST /login \u2192 { \"access_token\": \"eyJ...\", \"refresh_token\": \"eyJ...\" } GET /profile \u2192 Authorization: Bearer eyJ...","title":"\ud83e\ude99 Token-based (JWT)"},{"location":"cheatsheets/networking/http/state/#10-quick-recap-what-to-use-when","text":"Use Case Recommended Classic server-rendered site Sessions + Cookies REST API / mobile app JWTs (access + refresh tokens) Microservices / distributed JWTs or opaque tokens with gateway validation Sensitive data / high security Short-lived tokens + HttpOnly cookies Public API API keys (simple token variant)","title":"10) Quick Recap \u2014 What to Use When"},{"location":"cheatsheets/networking/http/state/#11-java-spring-quick-hooks","text":"","title":"11) Java &amp; Spring Quick Hooks"},{"location":"cheatsheets/networking/http/state/#session-example","text":"@PostMapping ( \"/login\" ) public ResponseEntity <?> login ( HttpSession session ) { session . setAttribute ( \"user\" , user ); return ResponseEntity . ok (). build (); }","title":"Session Example"},{"location":"cheatsheets/networking/http/state/#jwt-filter-example","text":"String authHeader = request . getHeader ( \"Authorization\" ); if ( authHeader != null && authHeader . startsWith ( \"Bearer \" )) { String token = authHeader . substring ( 7 ); Claims claims = jwtUtil . validateToken ( token ); // attach user info to security context }","title":"JWT Filter Example"},{"location":"cheatsheets/networking/http/state/#12-pocket-glossary","text":"Session: server-side memory of a user\u2019s state. Cookie: key-value pair stored on client, sent automatically with requests. Token: signed credential representing a user (e.g., JWT). Refresh token: used to issue new access tokens. CSRF: tricking browser into unintended requests. XSS: injecting scripts that run in a user\u2019s browser.","title":"12) Pocket Glossary"},{"location":"cheatsheets/networking/http/state/#13-summary-thought","text":"HTTP forgets. Sessions, cookies, and tokens are three ways to make it remember \u2014 but each trades simplicity for scalability, and security for convenience. Knowing when to store state and when to trust statelessness is what separates beginners from real backend engineers.","title":"13) Summary Thought"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/","text":"Obsidian \u2194 MkDocs Material \u2014 Setup & Structure (for knowledge-vault/docs ) \u00b6 Goal: Write in Obsidian with [[wikilinks]] \u2192 publish a polished docs site via MkDocs Material. Two modes: Cheatsheets (quick lookup) and Concepts (deep understanding). Keep them separate but cross-linked. 0) Prereqs \u00b6 Python 3.8+ Git Obsidian app (optional but recommended for writing) 1) Repo layout (the shape we\u2019re aiming for) \u00b6 knowledge-vault/ \u251c\u2500 mkdocs.yml # site config (we\u2019ll create it below) \u251c\u2500 README.md # for GitHub visitors (how to run/deploy) \u2514\u2500 docs/ # all site content lives here \u251c\u2500 index.md # site homepage \u251c\u2500 cheatsheets/ # quick references (APIs, commands, patterns) \u2502 \u251c\u2500 index.md # cheatsheets landing page \u2502 \u251c\u2500 languages/ \u2502 \u2502 \u251c\u2500 java/ \u2502 \u2502 \u2502 \u251c\u2500 core/ \u2502 \u2502 \u2502 \u2502 \u2514\u2500 streams.md \u2502 \u2502 \u2502 \u2514\u2500 frameworks/ \u2502 \u2502 \u2502 \u2514\u2500 spring/ \u2502 \u2502 \u2502 \u251c\u2500 annotations.md \u2502 \u2502 \u2502 \u2514\u2500 rest-controller.md \u2502 \u2502 \u2514\u2500 python/ \u2502 \u2502 \u2514\u2500 basics.md \u2502 \u251c\u2500 databases/ \u2502 \u2502 \u251c\u2500 sql/ \u2502 \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2502 \u2514\u2500 joins.md \u2502 \u2502 \u251c\u2500 mysql/ \u2502 \u2502 \u2502 \u251c\u2500 setup/ \u2502 \u2502 \u2502 \u2502 \u251c\u2500 java.md \u2502 \u2502 \u2502 \u2502 \u2514\u2500 python.md \u2502 \u2502 \u2502 \u2514\u2500 queries.md \u2502 \u2502 \u2514\u2500 orm/ \u2502 \u2502 \u251c\u2500 jpa-java-annotations.md \u2502 \u2502 \u2514\u2500 sqlalchemy-python-cheats.md \u2502 \u251c\u2500 networking/ \u2502 \u2502 \u2514\u2500 http/ \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2514\u2500 headers.md \u2502 \u2514\u2500 tools/ \u2502 \u251c\u2500 git.md \u2502 \u251c\u2500 docker.md \u2502 \u2514\u2500 obsidian-mkdocs-setup.md \u2190 this cheatsheet \u2514\u2500 concepts/ # deeper explanations and trade-offs \u251c\u2500 index.md # concepts landing page \u251c\u2500 backend/ \u2502 \u251c\u2500 http.md \u2502 \u251c\u2500 rest-api.md \u2502 \u2514\u2500 caching.md \u251c\u2500 databases/ \u2502 \u251c\u2500 normalization.md \u2502 \u251c\u2500 indexing.md \u2502 \u251c\u2500 transactions-acid.md \u2502 \u2514\u2500 orm/ \u2502 \u251c\u2500 orm-concepts.md \u2502 \u2514\u2500 jpa-vs-sqlalchemy.md \u251c\u2500 frameworks/ \u2502 \u251c\u2500 spring-core.md \u2502 \u2514\u2500 hibernate.md \u2514\u2500 design/ \u251c\u2500 dependency-injection.md \u2514\u2500 microservices.md Why this structure? Cheatsheets = fast lookup (language/framework/API); Concepts = how/why/architecture. It mirrors how your brain flips between coding and understanding, and keeps search results clean. 2) One-time install \u00b6 cd knowledge-vault # (Optional) keep Python deps isolated python -m venv .venv source .venv/bin/activate # Windows: .venv\\Scripts\\activate python -m pip install --upgrade pip # Core: MkDocs + Material + \"Last updated\" git plugin pip install -U mkdocs mkdocs-git-revision-date-localized-plugin # themes: https://pawamoy.github.io/mkdocs-gallery/themes/readthedocs/ # 1) Material pip install mkdocs-material # 2) Windmill #pip install mkdocs-windmill # 3) Bootstrap / Bootswatch #pip install mkdocs-bootstrap mkdocs-bootswatch # Pick ONE wikilinks plugin (to convert [[Page]] to proper links): # Option A (popular): Roam/Obsidian-style wikilinks + Obsidian-style callouts pip install mkdocs-roamlinks-plugin mkdocs-callouts # Option B (also good): Wikilinks via \"ezlinks\" (plugin name is mkdocs-wikilinks-plugin) # pip install mkdocs-wikilinks-plugin Open the repo as an Obsidian vault (Obsidian \u2192 Open folder as vault \u2192 select knowledge-vault/ ). Recommended Obsidian settings: Files & Links \u2192 Use [[Wikilinks]] : On Files & Links \u2192 New link format : Shortest Files & Links \u2192 Default location for new notes : Same folder as current file Editor \u2192 Show frontmatter : On 2.5) Obsidian setup (optional but useful) \u00b6 Core plugins to enable Backlinks, Outgoing Links \u2192 fast x-ref navigation Templates \u2192 front-matter snippets Daily Notes (optional) \u2192 scratchpad/logs that won\u2019t be published Community plugins that play nicely with MkDocs Material Admonition \u2014 renders MkDocs !!! note|tip|warning blocks inside Obsidian . Use this in your notes so one syntax works everywhere: !!! tip Use the search bar for method names, error snippets, or concepts. Advanced Tables (or Table Editor 2) \u2014 auto-align pipes, tab to next column. Linter \u2014 auto-fix headings, trailing spaces, YAML ordering (keep title/tags/summary neat). Templater \u2014 quick scaffolds for cheatsheets/concepts. Example templates: --- title: <% tp.file.title %> \u2014 Quickref tags: [cheatsheet, <topic>, <tech>] summary: One-liner for why this exists. --- # <% tp.file.title %> \u2014 Quickref > See concepts: [concepts/...](<../../concepts/...>) --- title: <% tp.file.title %> tags: [concept, <domain>] summary: What it is, why it matters, trade-offs. --- # <% tp.file.title %> > See cheatsheet: [cheatsheets/...](<../...>) Markdown Attributes \u2014 previews {#id .class} so Obsidian shows what attr_list does in MkDocs. Paste URL into Selection \u2014 speeds up linking text \u2192 [text](url) . Tag Wrangler \u2014 bulk-rename/merge tags. Obsidian Git (optional) \u2014 commit/pull from inside Obsidian if you\u2019re not using IDEA for VCS. Nice-to-have (safe, but non-exporting) Dataview \u2014 dashboards/lists in the vault. Remember: Dataview queries don\u2019t render in MkDocs . Use it for in-vault discovery, not for pages you publish, or export the results as static lists before publishing. Syntax alignment cheats Admonitions: Prefer MkDocs syntax ( !!! note ) + Admonition plugin \u2192 same source renders well in both places. Avoid Obsidian callouts ( > [!NOTE] ) if you want one true syntax. Tabs: pymdownx.tabbed looks great on the site but won\u2019t render as tabs inside Obsidian. In notes, keep tab blocks short; Obsidian will show them as plain headings\u2014good enough for editing. Wikilinks: Keep writing [[wikilinks]] . mkdocs-obsidian resolves them on build, so reorganizing folders won\u2019t break links. Ignore these in publish Your .obsidian/ stays out of the site\u2014already covered by: excluded_dirs: ['.obsidian', '.trash'] and .gitignore should include: .obsidian/ .trash/ Gotchas Dataview, buttons, or any Obsidian-only syntax isn\u2019t rendered by MkDocs. Keep publishable pages in plain Markdown + MkDocs features. If Linter rewrites YAML keys, make sure it doesn\u2019t nuke custom fields you care about. If you switch to Obsidian callouts, you\u2019ll need a pre-processor to convert them to !!! blocks; staying with !!! avoids that whole dance. 3) Create folders fast (scaffold) \u00b6 Run in repo root ( knowledge-vault/ ). Adjust to taste. mkdir -p docs/ { cheatsheets/ { languages/ { java/ { core,frameworks/spring } ,python } ,databases/ { sql,mysql/setup,orm } ,networking/http,tools } ,concepts/ { backend,databases/orm,frameworks,design }} 4) mkdocs.yml \u2014 fully commented \u00b6 Create knowledge-vault/mkdocs.yml with this content: # mkdocs.yml \u2014 Site configuration for \"Knowledge Vault\" # MkDocs reads Markdown from ./docs and outputs static HTML into ./site site_name : Knowledge Vault # Shown in header and metadata site_url : https://<your-username>.github.io/knowledge-vault # Used for canonical links/sitemaps repo_url : https://github.com/<your-username>/knowledge-vault # \u201cEdit on GitHub\u201d links edit_uri : edit/main/docs/ # Path to open files in GitHub\u2019s editor use_directory_urls : true # Pretty URLs: /path/ instead of /path.html theme : name : material # Material for MkDocs theme (feature-rich) language : en features : - navigation.instant # Faster page transitions - navigation.tracking # Highlight active section as you scroll - navigation.sections # Group pages by top-level sections - navigation.tabs # Top-level sections as tabs - toc.integrate # Merge page TOC into the sidebar - content.code.copy # Copy button on code blocks - content.code.annotate # Inline annotations on code - content.action.edit # \u201cEdit this page\u201d button - search.suggest # Search autocomplete - search.highlight # Highlight matches on page # Color schemes (light/dark) that follow OS preference palette : # --- Scheme 1: Light (shown when OS prefers light) --- - media : \"(prefers-color-scheme: light)\" # follow OS light mode scheme : default # Material's default light scheme primary : indigo # header / accents accent : indigo # buttons / highlights toggle : icon : material/weather-night # icon shown while in light mode name : Switch to dark mode # accessible label (tooltip) # --- Scheme 2: Dark (shown when OS prefers dark) --- - media : \"(prefers-color-scheme: dark)\" # follow OS dark mode scheme : slate # Material's dark scheme primary : indigo accent : indigo toggle : icon : material/weather-sunny # icon shown while in dark mode name : Switch to light mode # docs_dir defaults to \"docs\". Keeping it implicit = cleaner config. # docs_dir: docs plugins : - search # Full-text search # If you installed Option A: - roamlinks - callouts # If you installed Option B instead: # - ezlinks - git-revision-date-localized : # \u201cLast updated\u201d timestamps fallback_to_build_date : true markdown_extensions : - admonition # !!! note/tip/warning blocks - attr_list # {#id .class} on elements - def_list # Definition lists - md_in_html # Markdown inside HTML blocks - tables # Advanced tables - toc : permalink : true # Link anchors for headings - pymdownx.details # <details> collapsible sections - pymdownx.highlight : anchor_linenums : true # Clickable line numbers in code line_spans : __span # For precise CSS targeting - pymdownx.inlinehilite # `==inline code==` highlighting - pymdownx.magiclink # Autolink URLs and issues - pymdownx.superfences # Fenced code blocks inside lists, tabs - pymdownx.tabbed : alternate_style : true # Nice UI for tabbed code examples - pymdownx.tasklist : custom_checkbox : true # Pretty checkboxes in lists # Navigation: # Option A (recommended): start minimal and let filesystem drive nav while drafting \u2014 comment out nav. # Option B: curate the nav to control order/labels (uncomment to use). # # nav: # - Home: index.md # - Cheatsheets: # - Overview: cheatsheets/index.md # - Languages: # - Java: # - Streams: cheatsheets/languages/java/core/streams.md # - Spring Annotations: cheatsheets/languages/java/frameworks/spring/annotations.md # - REST Controller: cheatsheets/languages/java/frameworks/spring/rest-controller.md # - Python: # - Basics: cheatsheets/languages/python/basics.md # - Databases: # - SQL: # - Basics: cheatsheets/databases/sql/basics.md # - Joins: cheatsheets/databases/sql/joins.md # - MySQL: # - Setup (Java): cheatsheets/databases/mysql/setup/java.md # - Setup (Python): cheatsheets/databases/mysql/setup/python.md # - Queries: cheatsheets/databases/mysql/queries.md # - ORM: # - JPA Annotations (Java): cheatsheets/databases/orm/jpa-java-annotations.md # - SQLAlchemy Cheats (Python): cheatsheets/databases/orm/sqlalchemy-python-cheats.md # - Networking: # - HTTP Basics: cheatsheets/networking/http/basics.md # - Headers: cheatsheets/networking/http/headers.md # - Tools: # - Git: cheatsheets/tools/git.md # - Docker: cheatsheets/tools/docker.md # - Obsidian + MkDocs Setup: cheatsheets/tools/obsidian-mkdocs-setup.md # - Concepts: # - Overview: concepts/index.md # - Backend: # - HTTP: concepts/backend/http.md # - REST API: concepts/backend/rest-api.md # - Caching: concepts/backend/caching.md # - Databases: # - Normalization: concepts/databases/normalization.md # - Indexing: concepts/databases/indexing.md # - Transactions (ACID): concepts/databases/transactions-acid.md # - ORM: # - ORM Concepts: concepts/databases/orm/orm-concepts.md # - JPA vs SQLAlchemy: concepts/databases/orm/jpa-vs-sqlalchemy.md # - Frameworks: # - Spring Core: concepts/frameworks/spring-core.md # - Hibernate: concepts/frameworks/hibernate.md # - Design: # - Dependency Injection: concepts/design/dependency-injection.md # - Microservices: concepts/design/microservices.md Why comment out nav: at first? While you\u2019re building content, filesystem ordering is simpler. Later, un-comment nav: to curate labels and order. 5) Homepages (three index.md files) \u00b6 index.md turns a folder into a landing page and gives you clean URLs: docs/index.md \u2192 / docs/cheatsheets/index.md \u2192 /cheatsheets/ docs/concepts/index.md \u2192 /concepts/ 5.1 docs/index.md (site homepage) \u00b6 --- title: Knowledge Vault summary: Personal developer wiki \u2014 cheatsheets for speed, concepts for mastery. --- # \ud83e\udde0 Knowledge Vault Two modes, one brain: - **Cheatsheets** \u2192 quick reference while coding - **Concepts** \u2192 deeper understanding and architecture ## \ud83d\udeaa Start Here - [ Java Streams \u2014 Quickref ]( <../languages/java/core/streams.md> ) - [ SQL Basics \u2014 Cheatsheet ]( <../databases/sql/basics.md> ) - [ HTTP \u2014 Concepts ]( <concepts/backend/http> ) - [ Git \u2014 Commands ]( <./git.md> ) - [ HTTP Headers \u2014 Quickref ]( <cheatsheets/networking/http/headers> ) ## \ud83d\udd0e How to Use !!! tip Use the search bar for method names, error snippets, or concepts (e.g., `@Transactional` , `N+1` , `Content-Type` ). 5.2 docs/cheatsheets/index.md (section landing) \u00b6 --- title: Cheatsheets summary: Quick references for languages, frameworks, databases, tools, and commands. --- # \u26a1 Cheatsheets Fast lookup. Minimal theory. Maximum clarity. ## \ud83e\uddf1 Categories ### Languages - Java: [ Streams ]( <../languages/java/core/streams.md> ) \u00b7 [ Spring Annotations ]( <../languages/java/frameworks/spring/annotations.md> ) - Python: [ Basics ]( <../languages/python/basics.md> ) ### Databases - SQL: [ Basics ]( <../databases/sql/basics.md> ) \u00b7 [ Joins ]( <../databases/sql/joins.md> ) - MySQL: [ Setup (Java) ]( <../databases/mysql/setup/java.md> ) \u00b7 [ Setup (Python) ]( <../databases/mysql/setup/python.md> ) \u00b7 [ Queries ]( <../databases/mysql/queries.md> ) - ORM: [ JPA Annotations ]( <../databases/orm/jpa-java-annotations.md> ) \u00b7 [ SQLAlchemy ]( <../databases/orm/sqlalchemy-python-cheats.md> ) ### Networking - [ HTTP Basics ]( <cheatsheets/networking/http/basics> ) \u00b7 [ Headers ]( <cheatsheets/networking/http/headers> ) ### Tools - [ Git ]( <./git.md> ) \u00b7 [ Docker ]( <./docker.md> ) \u00b7 [ Obsidian + MkDocs Setup ]( <./obsidian-mkdocs-setup.md> ) 5.3 docs/concepts/index.md (section landing) \u00b6 --- title: Concepts summary: Deep dives into how systems work \u2014 theory, trade-offs, and reasoning. --- # \ud83e\udde0 Concepts Where understanding replaces memorization. ## \ud83e\udde9 Topics ### Backend - [ HTTP ]( <concepts/backend/http> ) \u00b7 [ REST API ]( <../../concepts/backend/rest-api.md> ) \u00b7 [ Caching ]( <../../concepts/backend/caching.md> ) ### Databases - [ Normalization ]( <../../concepts/databases/normalization.md> ) \u00b7 [ Indexing ]( <../../concepts/databases/indexing.md> ) \u00b7 [ Transactions (ACID) ]( <../../concepts/databases/transactions-acid.md> ) - ORM: [ ORM Concepts ]( <../../concepts/databases/orm/orm-concepts.md> ) \u00b7 [ JPA vs SQLAlchemy ]( <../../concepts/databases/orm/jpa-vs-sqlalchemy.md> ) ### Frameworks - [ Spring Core ]( <../../concepts/frameworks/spring-core.md> ) \u00b7 [ Hibernate ]( <../../concepts/frameworks/hibernate.md> ) ### Design - [ Dependency Injection ]( <../../concepts/design/dependency-injection.md> ) \u00b7 [ Microservices ]( <../../concepts/design/microservices.md> ) Do you need to define folder structure in index.md ? No. index.md is content , not configuration. It\u2019s a curated landing page for the folder. The site structure is driven by the filesystem and (optionally) the nav: in mkdocs.yml . 6) Front-matter templates (copy/paste into pages) \u00b6 Cheatsheet: --- title: <Title> \u2014 Quickref tags: [cheatsheet, <topic>, <tech>] summary: One-line reason this exists (lookup while coding). --- # <Title> \u2014 Quickref > See concepts: [concepts/...](<../../concepts/...>) Concept: --- title: <Concept Name> tags: [concept, <domain>] summary: What it is, why it matters, trade-offs. --- # <Concept Name> > See cheatsheet: [cheatsheets/...](<../...>) 7) Local dev & deploy \u00b6 # Local preview (auto-reload) mkdocs serve # open http://127.0.0.1:8000/ # Deploy to GitHub Pages mkdocs gh-deploy # your site: https://<your-username>.github.io/knowledge-vault/ 8) FAQ / Gotchas \u00b6 Where should README.md live? At repo root. It explains the project + how to run/deploy. The site homepage is docs/index.md . Do I need docs_dir: docs ? No. That\u2019s the default; keeping it implicit is cleaner. What makes /cheatsheets/ and /concepts/ routes work? The index.md files in those folders + use_directory_urls: true . What if I move files around? [[wikilinks]] are updated by mkdocs-obsidian on build. Rebuild after reorganizing. Should I curate nav: now? Early on, skip it. When structure stabilizes, un-comment nav: in mkdocs.yml to control order and labels. 9) Mental model (why this works) \u00b6 Separation of concerns: README.md (GitHub), docs/index.md (site), mkdocs.yml (wiring). Two modes = less friction: Cheatsheets for speed, Concepts for depth. Wikilinks = future-proof: Rearrange folders without rewriting links. Indexes = clean URLs: Section index.md gives /cheatsheets/ and /concepts/ real landing pages. Ship it. Then iterate. The vault grows with you, not against you.","title":"obsidian-mkdocs-setup"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#obsidian-mkdocs-material-setup-structure-for-knowledge-vaultdocs","text":"Goal: Write in Obsidian with [[wikilinks]] \u2192 publish a polished docs site via MkDocs Material. Two modes: Cheatsheets (quick lookup) and Concepts (deep understanding). Keep them separate but cross-linked.","title":"Obsidian \u2194 MkDocs Material \u2014 Setup &amp; Structure (for knowledge-vault/docs)"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#0-prereqs","text":"Python 3.8+ Git Obsidian app (optional but recommended for writing)","title":"0) Prereqs"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#1-repo-layout-the-shape-were-aiming-for","text":"knowledge-vault/ \u251c\u2500 mkdocs.yml # site config (we\u2019ll create it below) \u251c\u2500 README.md # for GitHub visitors (how to run/deploy) \u2514\u2500 docs/ # all site content lives here \u251c\u2500 index.md # site homepage \u251c\u2500 cheatsheets/ # quick references (APIs, commands, patterns) \u2502 \u251c\u2500 index.md # cheatsheets landing page \u2502 \u251c\u2500 languages/ \u2502 \u2502 \u251c\u2500 java/ \u2502 \u2502 \u2502 \u251c\u2500 core/ \u2502 \u2502 \u2502 \u2502 \u2514\u2500 streams.md \u2502 \u2502 \u2502 \u2514\u2500 frameworks/ \u2502 \u2502 \u2502 \u2514\u2500 spring/ \u2502 \u2502 \u2502 \u251c\u2500 annotations.md \u2502 \u2502 \u2502 \u2514\u2500 rest-controller.md \u2502 \u2502 \u2514\u2500 python/ \u2502 \u2502 \u2514\u2500 basics.md \u2502 \u251c\u2500 databases/ \u2502 \u2502 \u251c\u2500 sql/ \u2502 \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2502 \u2514\u2500 joins.md \u2502 \u2502 \u251c\u2500 mysql/ \u2502 \u2502 \u2502 \u251c\u2500 setup/ \u2502 \u2502 \u2502 \u2502 \u251c\u2500 java.md \u2502 \u2502 \u2502 \u2502 \u2514\u2500 python.md \u2502 \u2502 \u2502 \u2514\u2500 queries.md \u2502 \u2502 \u2514\u2500 orm/ \u2502 \u2502 \u251c\u2500 jpa-java-annotations.md \u2502 \u2502 \u2514\u2500 sqlalchemy-python-cheats.md \u2502 \u251c\u2500 networking/ \u2502 \u2502 \u2514\u2500 http/ \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2514\u2500 headers.md \u2502 \u2514\u2500 tools/ \u2502 \u251c\u2500 git.md \u2502 \u251c\u2500 docker.md \u2502 \u2514\u2500 obsidian-mkdocs-setup.md \u2190 this cheatsheet \u2514\u2500 concepts/ # deeper explanations and trade-offs \u251c\u2500 index.md # concepts landing page \u251c\u2500 backend/ \u2502 \u251c\u2500 http.md \u2502 \u251c\u2500 rest-api.md \u2502 \u2514\u2500 caching.md \u251c\u2500 databases/ \u2502 \u251c\u2500 normalization.md \u2502 \u251c\u2500 indexing.md \u2502 \u251c\u2500 transactions-acid.md \u2502 \u2514\u2500 orm/ \u2502 \u251c\u2500 orm-concepts.md \u2502 \u2514\u2500 jpa-vs-sqlalchemy.md \u251c\u2500 frameworks/ \u2502 \u251c\u2500 spring-core.md \u2502 \u2514\u2500 hibernate.md \u2514\u2500 design/ \u251c\u2500 dependency-injection.md \u2514\u2500 microservices.md Why this structure? Cheatsheets = fast lookup (language/framework/API); Concepts = how/why/architecture. It mirrors how your brain flips between coding and understanding, and keeps search results clean.","title":"1) Repo layout (the shape we\u2019re aiming for)"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#2-one-time-install","text":"cd knowledge-vault # (Optional) keep Python deps isolated python -m venv .venv source .venv/bin/activate # Windows: .venv\\Scripts\\activate python -m pip install --upgrade pip # Core: MkDocs + Material + \"Last updated\" git plugin pip install -U mkdocs mkdocs-git-revision-date-localized-plugin # themes: https://pawamoy.github.io/mkdocs-gallery/themes/readthedocs/ # 1) Material pip install mkdocs-material # 2) Windmill #pip install mkdocs-windmill # 3) Bootstrap / Bootswatch #pip install mkdocs-bootstrap mkdocs-bootswatch # Pick ONE wikilinks plugin (to convert [[Page]] to proper links): # Option A (popular): Roam/Obsidian-style wikilinks + Obsidian-style callouts pip install mkdocs-roamlinks-plugin mkdocs-callouts # Option B (also good): Wikilinks via \"ezlinks\" (plugin name is mkdocs-wikilinks-plugin) # pip install mkdocs-wikilinks-plugin Open the repo as an Obsidian vault (Obsidian \u2192 Open folder as vault \u2192 select knowledge-vault/ ). Recommended Obsidian settings: Files & Links \u2192 Use [[Wikilinks]] : On Files & Links \u2192 New link format : Shortest Files & Links \u2192 Default location for new notes : Same folder as current file Editor \u2192 Show frontmatter : On","title":"2) One-time install"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#25-obsidian-setup-optional-but-useful","text":"Core plugins to enable Backlinks, Outgoing Links \u2192 fast x-ref navigation Templates \u2192 front-matter snippets Daily Notes (optional) \u2192 scratchpad/logs that won\u2019t be published Community plugins that play nicely with MkDocs Material Admonition \u2014 renders MkDocs !!! note|tip|warning blocks inside Obsidian . Use this in your notes so one syntax works everywhere: !!! tip Use the search bar for method names, error snippets, or concepts. Advanced Tables (or Table Editor 2) \u2014 auto-align pipes, tab to next column. Linter \u2014 auto-fix headings, trailing spaces, YAML ordering (keep title/tags/summary neat). Templater \u2014 quick scaffolds for cheatsheets/concepts. Example templates: --- title: <% tp.file.title %> \u2014 Quickref tags: [cheatsheet, <topic>, <tech>] summary: One-liner for why this exists. --- # <% tp.file.title %> \u2014 Quickref > See concepts: [concepts/...](<../../concepts/...>) --- title: <% tp.file.title %> tags: [concept, <domain>] summary: What it is, why it matters, trade-offs. --- # <% tp.file.title %> > See cheatsheet: [cheatsheets/...](<../...>) Markdown Attributes \u2014 previews {#id .class} so Obsidian shows what attr_list does in MkDocs. Paste URL into Selection \u2014 speeds up linking text \u2192 [text](url) . Tag Wrangler \u2014 bulk-rename/merge tags. Obsidian Git (optional) \u2014 commit/pull from inside Obsidian if you\u2019re not using IDEA for VCS. Nice-to-have (safe, but non-exporting) Dataview \u2014 dashboards/lists in the vault. Remember: Dataview queries don\u2019t render in MkDocs . Use it for in-vault discovery, not for pages you publish, or export the results as static lists before publishing. Syntax alignment cheats Admonitions: Prefer MkDocs syntax ( !!! note ) + Admonition plugin \u2192 same source renders well in both places. Avoid Obsidian callouts ( > [!NOTE] ) if you want one true syntax. Tabs: pymdownx.tabbed looks great on the site but won\u2019t render as tabs inside Obsidian. In notes, keep tab blocks short; Obsidian will show them as plain headings\u2014good enough for editing. Wikilinks: Keep writing [[wikilinks]] . mkdocs-obsidian resolves them on build, so reorganizing folders won\u2019t break links. Ignore these in publish Your .obsidian/ stays out of the site\u2014already covered by: excluded_dirs: ['.obsidian', '.trash'] and .gitignore should include: .obsidian/ .trash/ Gotchas Dataview, buttons, or any Obsidian-only syntax isn\u2019t rendered by MkDocs. Keep publishable pages in plain Markdown + MkDocs features. If Linter rewrites YAML keys, make sure it doesn\u2019t nuke custom fields you care about. If you switch to Obsidian callouts, you\u2019ll need a pre-processor to convert them to !!! blocks; staying with !!! avoids that whole dance.","title":"2.5) Obsidian setup (optional but useful)"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#3-create-folders-fast-scaffold","text":"Run in repo root ( knowledge-vault/ ). Adjust to taste. mkdir -p docs/ { cheatsheets/ { languages/ { java/ { core,frameworks/spring } ,python } ,databases/ { sql,mysql/setup,orm } ,networking/http,tools } ,concepts/ { backend,databases/orm,frameworks,design }}","title":"3) Create folders fast (scaffold)"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#4-mkdocsyml-fully-commented","text":"Create knowledge-vault/mkdocs.yml with this content: # mkdocs.yml \u2014 Site configuration for \"Knowledge Vault\" # MkDocs reads Markdown from ./docs and outputs static HTML into ./site site_name : Knowledge Vault # Shown in header and metadata site_url : https://<your-username>.github.io/knowledge-vault # Used for canonical links/sitemaps repo_url : https://github.com/<your-username>/knowledge-vault # \u201cEdit on GitHub\u201d links edit_uri : edit/main/docs/ # Path to open files in GitHub\u2019s editor use_directory_urls : true # Pretty URLs: /path/ instead of /path.html theme : name : material # Material for MkDocs theme (feature-rich) language : en features : - navigation.instant # Faster page transitions - navigation.tracking # Highlight active section as you scroll - navigation.sections # Group pages by top-level sections - navigation.tabs # Top-level sections as tabs - toc.integrate # Merge page TOC into the sidebar - content.code.copy # Copy button on code blocks - content.code.annotate # Inline annotations on code - content.action.edit # \u201cEdit this page\u201d button - search.suggest # Search autocomplete - search.highlight # Highlight matches on page # Color schemes (light/dark) that follow OS preference palette : # --- Scheme 1: Light (shown when OS prefers light) --- - media : \"(prefers-color-scheme: light)\" # follow OS light mode scheme : default # Material's default light scheme primary : indigo # header / accents accent : indigo # buttons / highlights toggle : icon : material/weather-night # icon shown while in light mode name : Switch to dark mode # accessible label (tooltip) # --- Scheme 2: Dark (shown when OS prefers dark) --- - media : \"(prefers-color-scheme: dark)\" # follow OS dark mode scheme : slate # Material's dark scheme primary : indigo accent : indigo toggle : icon : material/weather-sunny # icon shown while in dark mode name : Switch to light mode # docs_dir defaults to \"docs\". Keeping it implicit = cleaner config. # docs_dir: docs plugins : - search # Full-text search # If you installed Option A: - roamlinks - callouts # If you installed Option B instead: # - ezlinks - git-revision-date-localized : # \u201cLast updated\u201d timestamps fallback_to_build_date : true markdown_extensions : - admonition # !!! note/tip/warning blocks - attr_list # {#id .class} on elements - def_list # Definition lists - md_in_html # Markdown inside HTML blocks - tables # Advanced tables - toc : permalink : true # Link anchors for headings - pymdownx.details # <details> collapsible sections - pymdownx.highlight : anchor_linenums : true # Clickable line numbers in code line_spans : __span # For precise CSS targeting - pymdownx.inlinehilite # `==inline code==` highlighting - pymdownx.magiclink # Autolink URLs and issues - pymdownx.superfences # Fenced code blocks inside lists, tabs - pymdownx.tabbed : alternate_style : true # Nice UI for tabbed code examples - pymdownx.tasklist : custom_checkbox : true # Pretty checkboxes in lists # Navigation: # Option A (recommended): start minimal and let filesystem drive nav while drafting \u2014 comment out nav. # Option B: curate the nav to control order/labels (uncomment to use). # # nav: # - Home: index.md # - Cheatsheets: # - Overview: cheatsheets/index.md # - Languages: # - Java: # - Streams: cheatsheets/languages/java/core/streams.md # - Spring Annotations: cheatsheets/languages/java/frameworks/spring/annotations.md # - REST Controller: cheatsheets/languages/java/frameworks/spring/rest-controller.md # - Python: # - Basics: cheatsheets/languages/python/basics.md # - Databases: # - SQL: # - Basics: cheatsheets/databases/sql/basics.md # - Joins: cheatsheets/databases/sql/joins.md # - MySQL: # - Setup (Java): cheatsheets/databases/mysql/setup/java.md # - Setup (Python): cheatsheets/databases/mysql/setup/python.md # - Queries: cheatsheets/databases/mysql/queries.md # - ORM: # - JPA Annotations (Java): cheatsheets/databases/orm/jpa-java-annotations.md # - SQLAlchemy Cheats (Python): cheatsheets/databases/orm/sqlalchemy-python-cheats.md # - Networking: # - HTTP Basics: cheatsheets/networking/http/basics.md # - Headers: cheatsheets/networking/http/headers.md # - Tools: # - Git: cheatsheets/tools/git.md # - Docker: cheatsheets/tools/docker.md # - Obsidian + MkDocs Setup: cheatsheets/tools/obsidian-mkdocs-setup.md # - Concepts: # - Overview: concepts/index.md # - Backend: # - HTTP: concepts/backend/http.md # - REST API: concepts/backend/rest-api.md # - Caching: concepts/backend/caching.md # - Databases: # - Normalization: concepts/databases/normalization.md # - Indexing: concepts/databases/indexing.md # - Transactions (ACID): concepts/databases/transactions-acid.md # - ORM: # - ORM Concepts: concepts/databases/orm/orm-concepts.md # - JPA vs SQLAlchemy: concepts/databases/orm/jpa-vs-sqlalchemy.md # - Frameworks: # - Spring Core: concepts/frameworks/spring-core.md # - Hibernate: concepts/frameworks/hibernate.md # - Design: # - Dependency Injection: concepts/design/dependency-injection.md # - Microservices: concepts/design/microservices.md Why comment out nav: at first? While you\u2019re building content, filesystem ordering is simpler. Later, un-comment nav: to curate labels and order.","title":"4) mkdocs.yml \u2014 fully commented"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#5-homepages-three-indexmd-files","text":"index.md turns a folder into a landing page and gives you clean URLs: docs/index.md \u2192 / docs/cheatsheets/index.md \u2192 /cheatsheets/ docs/concepts/index.md \u2192 /concepts/","title":"5) Homepages (three index.md files)"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#51-docsindexmd-site-homepage","text":"--- title: Knowledge Vault summary: Personal developer wiki \u2014 cheatsheets for speed, concepts for mastery. --- # \ud83e\udde0 Knowledge Vault Two modes, one brain: - **Cheatsheets** \u2192 quick reference while coding - **Concepts** \u2192 deeper understanding and architecture ## \ud83d\udeaa Start Here - [ Java Streams \u2014 Quickref ]( <../languages/java/core/streams.md> ) - [ SQL Basics \u2014 Cheatsheet ]( <../databases/sql/basics.md> ) - [ HTTP \u2014 Concepts ]( <concepts/backend/http> ) - [ Git \u2014 Commands ]( <./git.md> ) - [ HTTP Headers \u2014 Quickref ]( <cheatsheets/networking/http/headers> ) ## \ud83d\udd0e How to Use !!! tip Use the search bar for method names, error snippets, or concepts (e.g., `@Transactional` , `N+1` , `Content-Type` ).","title":"5.1 docs/index.md (site homepage)"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#52-docscheatsheetsindexmd-section-landing","text":"--- title: Cheatsheets summary: Quick references for languages, frameworks, databases, tools, and commands. --- # \u26a1 Cheatsheets Fast lookup. Minimal theory. Maximum clarity. ## \ud83e\uddf1 Categories ### Languages - Java: [ Streams ]( <../languages/java/core/streams.md> ) \u00b7 [ Spring Annotations ]( <../languages/java/frameworks/spring/annotations.md> ) - Python: [ Basics ]( <../languages/python/basics.md> ) ### Databases - SQL: [ Basics ]( <../databases/sql/basics.md> ) \u00b7 [ Joins ]( <../databases/sql/joins.md> ) - MySQL: [ Setup (Java) ]( <../databases/mysql/setup/java.md> ) \u00b7 [ Setup (Python) ]( <../databases/mysql/setup/python.md> ) \u00b7 [ Queries ]( <../databases/mysql/queries.md> ) - ORM: [ JPA Annotations ]( <../databases/orm/jpa-java-annotations.md> ) \u00b7 [ SQLAlchemy ]( <../databases/orm/sqlalchemy-python-cheats.md> ) ### Networking - [ HTTP Basics ]( <cheatsheets/networking/http/basics> ) \u00b7 [ Headers ]( <cheatsheets/networking/http/headers> ) ### Tools - [ Git ]( <./git.md> ) \u00b7 [ Docker ]( <./docker.md> ) \u00b7 [ Obsidian + MkDocs Setup ]( <./obsidian-mkdocs-setup.md> )","title":"5.2 docs/cheatsheets/index.md (section landing)"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#53-docsconceptsindexmd-section-landing","text":"--- title: Concepts summary: Deep dives into how systems work \u2014 theory, trade-offs, and reasoning. --- # \ud83e\udde0 Concepts Where understanding replaces memorization. ## \ud83e\udde9 Topics ### Backend - [ HTTP ]( <concepts/backend/http> ) \u00b7 [ REST API ]( <../../concepts/backend/rest-api.md> ) \u00b7 [ Caching ]( <../../concepts/backend/caching.md> ) ### Databases - [ Normalization ]( <../../concepts/databases/normalization.md> ) \u00b7 [ Indexing ]( <../../concepts/databases/indexing.md> ) \u00b7 [ Transactions (ACID) ]( <../../concepts/databases/transactions-acid.md> ) - ORM: [ ORM Concepts ]( <../../concepts/databases/orm/orm-concepts.md> ) \u00b7 [ JPA vs SQLAlchemy ]( <../../concepts/databases/orm/jpa-vs-sqlalchemy.md> ) ### Frameworks - [ Spring Core ]( <../../concepts/frameworks/spring-core.md> ) \u00b7 [ Hibernate ]( <../../concepts/frameworks/hibernate.md> ) ### Design - [ Dependency Injection ]( <../../concepts/design/dependency-injection.md> ) \u00b7 [ Microservices ]( <../../concepts/design/microservices.md> ) Do you need to define folder structure in index.md ? No. index.md is content , not configuration. It\u2019s a curated landing page for the folder. The site structure is driven by the filesystem and (optionally) the nav: in mkdocs.yml .","title":"5.3 docs/concepts/index.md (section landing)"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#6-front-matter-templates-copypaste-into-pages","text":"Cheatsheet: --- title: <Title> \u2014 Quickref tags: [cheatsheet, <topic>, <tech>] summary: One-line reason this exists (lookup while coding). --- # <Title> \u2014 Quickref > See concepts: [concepts/...](<../../concepts/...>) Concept: --- title: <Concept Name> tags: [concept, <domain>] summary: What it is, why it matters, trade-offs. --- # <Concept Name> > See cheatsheet: [cheatsheets/...](<../...>)","title":"6) Front-matter templates (copy/paste into pages)"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#7-local-dev-deploy","text":"# Local preview (auto-reload) mkdocs serve # open http://127.0.0.1:8000/ # Deploy to GitHub Pages mkdocs gh-deploy # your site: https://<your-username>.github.io/knowledge-vault/","title":"7) Local dev &amp; deploy"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#8-faq-gotchas","text":"Where should README.md live? At repo root. It explains the project + how to run/deploy. The site homepage is docs/index.md . Do I need docs_dir: docs ? No. That\u2019s the default; keeping it implicit is cleaner. What makes /cheatsheets/ and /concepts/ routes work? The index.md files in those folders + use_directory_urls: true . What if I move files around? [[wikilinks]] are updated by mkdocs-obsidian on build. Rebuild after reorganizing. Should I curate nav: now? Early on, skip it. When structure stabilizes, un-comment nav: in mkdocs.yml to control order and labels.","title":"8) FAQ / Gotchas"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#9-mental-model-why-this-works","text":"Separation of concerns: README.md (GitHub), docs/index.md (site), mkdocs.yml (wiring). Two modes = less friction: Cheatsheets for speed, Concepts for depth. Wikilinks = future-proof: Rearrange folders without rewriting links. Indexes = clean URLs: Section index.md gives /cheatsheets/ and /concepts/ real landing pages. Ship it. Then iterate. The vault grows with you, not against you.","title":"9) Mental model (why this works)"},{"location":"cheatsheets/tools/architecture/backend-overview/","text":"\ud83e\udde9 Backend System Architecture Overview \u00b6 (Git \u2192 Docker \u2192 Nginx \u2192 PostgreSQL \u2192 Redis \u2192 systemd) \u00b6 This overview connects the dots between your core tools \u2014 how they work together to deliver a modern backend system. You now have the whole pipeline from code commit to production runtime. \ud83e\uddf1 1. The Big Picture: Data Flow and Control Flow \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Git \u2502 push\u2192 \u2502 Docker \u2502 run\u2192 \u2502 systemd \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 build images \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 Containers: \u2502 \u2502 \u2502 \u251c\u2500 Nginx (proxy) \u2502 \u2502 \u2502 \u251c\u2500 Backend (API) \u2502 \u2502 \u2502 \u251c\u2500 PostgreSQL (DB)\u2502 \u2502 \u2502 \u2514\u2500 Redis (cache) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 inbound requests \u2502 \u2502 \u2502 Clients \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ```` **Data flow summary:** 1. Users \u2192 **Nginx** \u2192 **Backend API** 2. API \u2192 **PostgreSQL** for durable data 3. API \u2194 **Redis** for caching/session data 4. All of it runs under **Docker**, orchestrated by **systemd** 5. Source code and configs tracked via **Git** --- ## \u2699\ufe0f 2. Startup Order (Dependency Chain) When your system boots or deploys: | Order | Component | Managed By | Description | |--------|------------|-------------|--------------| | 1\ufe0f\u20e3 | systemd | Linux | Starts Docker, PostgreSQL, Redis, Nginx | | 2\ufe0f\u20e3 | Docker | systemd | Brings containers online | | 3\ufe0f\u20e3 | Databases (Postgres, Redis) | Docker Compose | Foundational services | | 4\ufe0f\u20e3 | Application backend | Docker Compose | Connects to DBs | | 5\ufe0f\u20e3 | Nginx | Docker Compose | Public entrypoint | | 6\ufe0f\u20e3 | Developers | Git | Deploy and version control updates | \ud83d\udca1 In production, **systemd manages Docker**, while **Docker manages everything else.** --- ## \ud83e\uddf0 3. Git: The Source of Truth **Purpose:** Version control for everything \u2014 code, Dockerfiles, configs. ```bash git clone repo-url git commit -m \"Add Nginx reverse proxy\" git push origin main ```` **Best practice:** Store `.env.example`, `docker-compose.yml`, `nginx.conf`, and service configs in Git \u2014 but **never credentials**. Use `.gitignore` for: .env *.log pycache / data/ --- ## \ud83d\udc33 4. Docker: The Environment Fabric **Purpose:** Package and run every service in isolation. Typical structure: docker/ \u251c\u2500 nginx/ \u251c\u2500 backend/ \u251c\u2500 postgres/ \u2514\u2500 redis/ **docker-compose.yml** ```yaml services: nginx: image: nginx:latest ports: [\"80:80\"] backend: build: ./backend depends_on: [postgres, redis] postgres: image: postgres:16 redis: image: redis:7 Docker defines your runtime graph ; Compose defines relationships . Everything above this line (Nginx, API, DB) lives in its own lightweight container. \ud83c\udf10 5. Nginx: The Front Gate \u00b6 Purpose: Routes HTTP traffic, handles HTTPS, and load-balances backend requests. Flow: Client \u2192 Nginx \u2192 Backend container Common setup: server { listen 80 ; server_name example.com ; location /api/ { proxy_pass http://backend:8080 ; } location / { root /usr/share/nginx/html ; } } Nginx offloads: SSL termination Static assets Reverse proxying Rate limiting and caching \ud83d\udc18 6. PostgreSQL: The Reliable Store \u00b6 Purpose: Permanent relational data. It lives in its own container with a mounted volume for persistence. Connections: jdbc:postgresql://postgres:5432/appdb Rules of thumb: Use volumes for data durability. Create separate users for apps. Use pgAdmin or IDE to manage schemas. \ud83d\udd34 7. Redis: The Speed Layer \u00b6 Purpose: In-memory cache, session store, and message broker. Communicates with backend over internal Docker network. Common patterns: Cache-Aside (read-through) Pub/Sub for async events Distributed locks (e.g., for job workers) Spring Boot example: spring.data.redis.host = redis spring.cache.type = redis Redis acts as the short-term memory of your system. \u2699\ufe0f 8. systemd: The Foundation Layer \u00b6 Purpose: Boot, supervise, and restart everything automatically. systemctl controls Docker, PostgreSQL, Redis, and Nginx daemons: sudo systemctl start docker postgresql redis nginx sudo systemctl enable docker systemd ensures services recover after crashes and start at boot. \ud83d\udd01 9. Lifecycle Summary \u00b6 Phase Tool Purpose Development Git, Docker Compose Build and test stack locally Startup systemd Boot and manage background services Runtime Docker Run isolated services Networking Nginx Route traffic Persistence PostgreSQL Store structured data Performance Redis Cache data and speed up requests Recovery systemd Auto-restart failed services Versioning Git Track everything that changes \ud83e\udde0 10. Environment Interaction Diagram \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Clients \u2502 \u2502 (Browser, API consumer, mobile app) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Nginx \u2502 (HTTP entrypoint) \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Backend (API) \u2502 \u2502 (Spring, Python) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 SQL queries Cached data \u2502 \u2502 \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PostgreSQL \u2502 \u2502 Redis \u2502 \u2502 (data at rest) \u2502 \u2502 (data in RAM) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25b2 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Docker \u2502 \u2502 (runs all) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 systemd \u2502 \u2502 (boots Docker) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Git \u2502 \u2502 (build source) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \ud83e\uddf0 11. Developer Flow: \u201cFrom Code to Live System\u201d \u00b6 Code change \u2192 Commit in Git. Build image \u2192 Docker builds backend image. Run stack \u2192 docker compose up -d . Test endpoints \u2192 via Nginx reverse proxy. Persist data \u2192 PostgreSQL. Speed up responses \u2192 Redis caching. Control startup & uptime \u2192 systemd. Repeat confidently \u2014 everything reproducible and tracked. \ud83d\udd12 12. Security & Configuration Flow \u00b6 Layer Responsibility Nginx SSL, headers, access control Docker Container isolation PostgreSQL Authentication, roles Redis Password protection, internal-only binding systemd OS-level permissions, restart policy Git Audit trail, version history \ud83e\udded 13. Future Expansions \u00b6 Once you\u2019re comfortable with this foundation: Add CI/CD (GitHub Actions, Jenkins, or GitLab CI). Introduce Prometheus + Grafana for monitoring. Explore Kubernetes (for distributed orchestration). Use Ansible or Terraform for infrastructure automation. \u2705 14. Summary \u00b6 Git \u2013 tracks your code and infrastructure definitions. Docker \u2013 builds and isolates your runtime. systemd \u2013 ensures your stack survives reboots. Nginx \u2013 routes and protects requests. PostgreSQL \u2013 stores long-term state. Redis \u2013 provides instant responses and caching. Everything fits like gears in a machine \u2014 from developer commit to production uptime.","title":"backend-system-overview"},{"location":"cheatsheets/tools/architecture/backend-overview/#backend-system-architecture-overview","text":"","title":"\ud83e\udde9 Backend System Architecture Overview"},{"location":"cheatsheets/tools/architecture/backend-overview/#git-docker-nginx-postgresql-redis-systemd","text":"This overview connects the dots between your core tools \u2014 how they work together to deliver a modern backend system. You now have the whole pipeline from code commit to production runtime.","title":"(Git \u2192 Docker \u2192 Nginx \u2192 PostgreSQL \u2192 Redis \u2192 systemd)"},{"location":"cheatsheets/tools/architecture/backend-overview/#1-the-big-picture-data-flow-and-control-flow","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Git \u2502 push\u2192 \u2502 Docker \u2502 run\u2192 \u2502 systemd \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 build images \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 Containers: \u2502 \u2502 \u2502 \u251c\u2500 Nginx (proxy) \u2502 \u2502 \u2502 \u251c\u2500 Backend (API) \u2502 \u2502 \u2502 \u251c\u2500 PostgreSQL (DB)\u2502 \u2502 \u2502 \u2514\u2500 Redis (cache) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 inbound requests \u2502 \u2502 \u2502 Clients \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ```` **Data flow summary:** 1. Users \u2192 **Nginx** \u2192 **Backend API** 2. API \u2192 **PostgreSQL** for durable data 3. API \u2194 **Redis** for caching/session data 4. All of it runs under **Docker**, orchestrated by **systemd** 5. Source code and configs tracked via **Git** --- ## \u2699\ufe0f 2. Startup Order (Dependency Chain) When your system boots or deploys: | Order | Component | Managed By | Description | |--------|------------|-------------|--------------| | 1\ufe0f\u20e3 | systemd | Linux | Starts Docker, PostgreSQL, Redis, Nginx | | 2\ufe0f\u20e3 | Docker | systemd | Brings containers online | | 3\ufe0f\u20e3 | Databases (Postgres, Redis) | Docker Compose | Foundational services | | 4\ufe0f\u20e3 | Application backend | Docker Compose | Connects to DBs | | 5\ufe0f\u20e3 | Nginx | Docker Compose | Public entrypoint | | 6\ufe0f\u20e3 | Developers | Git | Deploy and version control updates | \ud83d\udca1 In production, **systemd manages Docker**, while **Docker manages everything else.** --- ## \ud83e\uddf0 3. Git: The Source of Truth **Purpose:** Version control for everything \u2014 code, Dockerfiles, configs. ```bash git clone repo-url git commit -m \"Add Nginx reverse proxy\" git push origin main ```` **Best practice:** Store `.env.example`, `docker-compose.yml`, `nginx.conf`, and service configs in Git \u2014 but **never credentials**. Use `.gitignore` for: .env *.log pycache / data/ --- ## \ud83d\udc33 4. Docker: The Environment Fabric **Purpose:** Package and run every service in isolation. Typical structure: docker/ \u251c\u2500 nginx/ \u251c\u2500 backend/ \u251c\u2500 postgres/ \u2514\u2500 redis/ **docker-compose.yml** ```yaml services: nginx: image: nginx:latest ports: [\"80:80\"] backend: build: ./backend depends_on: [postgres, redis] postgres: image: postgres:16 redis: image: redis:7 Docker defines your runtime graph ; Compose defines relationships . Everything above this line (Nginx, API, DB) lives in its own lightweight container.","title":"\ud83e\uddf1 1. The Big Picture: Data Flow and Control Flow"},{"location":"cheatsheets/tools/architecture/backend-overview/#5-nginx-the-front-gate","text":"Purpose: Routes HTTP traffic, handles HTTPS, and load-balances backend requests. Flow: Client \u2192 Nginx \u2192 Backend container Common setup: server { listen 80 ; server_name example.com ; location /api/ { proxy_pass http://backend:8080 ; } location / { root /usr/share/nginx/html ; } } Nginx offloads: SSL termination Static assets Reverse proxying Rate limiting and caching","title":"\ud83c\udf10 5. Nginx: The Front Gate"},{"location":"cheatsheets/tools/architecture/backend-overview/#6-postgresql-the-reliable-store","text":"Purpose: Permanent relational data. It lives in its own container with a mounted volume for persistence. Connections: jdbc:postgresql://postgres:5432/appdb Rules of thumb: Use volumes for data durability. Create separate users for apps. Use pgAdmin or IDE to manage schemas.","title":"\ud83d\udc18 6. PostgreSQL: The Reliable Store"},{"location":"cheatsheets/tools/architecture/backend-overview/#7-redis-the-speed-layer","text":"Purpose: In-memory cache, session store, and message broker. Communicates with backend over internal Docker network. Common patterns: Cache-Aside (read-through) Pub/Sub for async events Distributed locks (e.g., for job workers) Spring Boot example: spring.data.redis.host = redis spring.cache.type = redis Redis acts as the short-term memory of your system.","title":"\ud83d\udd34 7. Redis: The Speed Layer"},{"location":"cheatsheets/tools/architecture/backend-overview/#8-systemd-the-foundation-layer","text":"Purpose: Boot, supervise, and restart everything automatically. systemctl controls Docker, PostgreSQL, Redis, and Nginx daemons: sudo systemctl start docker postgresql redis nginx sudo systemctl enable docker systemd ensures services recover after crashes and start at boot.","title":"\u2699\ufe0f 8. systemd: The Foundation Layer"},{"location":"cheatsheets/tools/architecture/backend-overview/#9-lifecycle-summary","text":"Phase Tool Purpose Development Git, Docker Compose Build and test stack locally Startup systemd Boot and manage background services Runtime Docker Run isolated services Networking Nginx Route traffic Persistence PostgreSQL Store structured data Performance Redis Cache data and speed up requests Recovery systemd Auto-restart failed services Versioning Git Track everything that changes","title":"\ud83d\udd01 9. Lifecycle Summary"},{"location":"cheatsheets/tools/architecture/backend-overview/#10-environment-interaction-diagram","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Clients \u2502 \u2502 (Browser, API consumer, mobile app) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Nginx \u2502 (HTTP entrypoint) \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Backend (API) \u2502 \u2502 (Spring, Python) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 SQL queries Cached data \u2502 \u2502 \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PostgreSQL \u2502 \u2502 Redis \u2502 \u2502 (data at rest) \u2502 \u2502 (data in RAM) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25b2 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Docker \u2502 \u2502 (runs all) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 systemd \u2502 \u2502 (boots Docker) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Git \u2502 \u2502 (build source) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"\ud83e\udde0 10. Environment Interaction Diagram"},{"location":"cheatsheets/tools/architecture/backend-overview/#11-developer-flow-from-code-to-live-system","text":"Code change \u2192 Commit in Git. Build image \u2192 Docker builds backend image. Run stack \u2192 docker compose up -d . Test endpoints \u2192 via Nginx reverse proxy. Persist data \u2192 PostgreSQL. Speed up responses \u2192 Redis caching. Control startup & uptime \u2192 systemd. Repeat confidently \u2014 everything reproducible and tracked.","title":"\ud83e\uddf0 11. Developer Flow: \u201cFrom Code to Live System\u201d"},{"location":"cheatsheets/tools/architecture/backend-overview/#12-security-configuration-flow","text":"Layer Responsibility Nginx SSL, headers, access control Docker Container isolation PostgreSQL Authentication, roles Redis Password protection, internal-only binding systemd OS-level permissions, restart policy Git Audit trail, version history","title":"\ud83d\udd12 12. Security &amp; Configuration Flow"},{"location":"cheatsheets/tools/architecture/backend-overview/#13-future-expansions","text":"Once you\u2019re comfortable with this foundation: Add CI/CD (GitHub Actions, Jenkins, or GitLab CI). Introduce Prometheus + Grafana for monitoring. Explore Kubernetes (for distributed orchestration). Use Ansible or Terraform for infrastructure automation.","title":"\ud83e\udded 13. Future Expansions"},{"location":"cheatsheets/tools/architecture/backend-overview/#14-summary","text":"Git \u2013 tracks your code and infrastructure definitions. Docker \u2013 builds and isolates your runtime. systemd \u2013 ensures your stack survives reboots. Nginx \u2013 routes and protects requests. PostgreSQL \u2013 stores long-term state. Redis \u2013 provides instant responses and caching. Everything fits like gears in a machine \u2014 from developer commit to production uptime.","title":"\u2705 14. Summary"},{"location":"cheatsheets/tools/architecture/frontend-overview/","text":"\ud83d\udca1 Frontend System Architecture Overview \u00b6 (Node.js \u2192 npm \u2192 React/Vite \u2192 API \u2192 Build & Deployment) \u00b6 The frontend layer is the bridge between users and your backend. It manages UI, application state, and communication with your APIs \u2014 built, bundled, and served through Node.js tooling. This document shows how the frontend development pipeline fits into your full-stack environment. \ud83e\uddf1 1. The Big Picture \u00b6 User \u2192 Browser \u2192 Frontend App (React/Vite) \u2502 \u25bc REST / GraphQL API (Nginx \u2192 Backend) \u2502 PostgreSQL & Redis under the hood ```` **Frontend role:** Present data, handle input, manage state, call backend endpoints, and render updates instantly. --- ## \u2699\ufe0f 2. Core Components of Modern Frontend | Component | Purpose | Tool | |------------|----------|------| | **Runtime** | JavaScript engine for tooling & builds | Node.js | | **Package Manager** | Installs dependencies | npm / pnpm / yarn | | **Framework** | UI logic and components | React, Vue, Svelte | | **Bundler/Dev Server** | Hot reload, build output | Vite / Webpack | | **State Management** | Handle UI data flow | Redux, Zustand, Context API | | **API Layer** | Communicate with backend | Fetch / Axios | | **Build Output** | Static assets for Nginx | `dist/` folder | --- ## \ud83e\udde9 3. Local Development Flow ```bash # Install dependencies npm install # Start dev server npm run dev ```` Default: * Vite dev server on `http://localhost:5173` * Auto-reloads when files change * Proxy API calls to backend (e.g., `http://localhost:8080`) **Example Vite proxy config:** ```js // vite.config.js export default { server: { proxy: { '/api': 'http://localhost:8080' } } }; \ud83e\udde0 4. Folder Structure \u00b6 frontend/ \u251c\u2500 src/ \u2502 \u251c\u2500 components/ \u2502 \u251c\u2500 pages/ \u2502 \u251c\u2500 hooks/ \u2502 \u251c\u2500 context/ \u2502 \u251c\u2500 services/ # API calls, Axios configs \u2502 \u251c\u2500 assets/ # images, styles \u2502 \u2514\u2500 main.jsx \u251c\u2500 public/ \u2502 \u2514\u2500 index.html \u251c\u2500 package.json \u251c\u2500 vite.config.js \u2514\u2500 .env \u26a1 5. Environment Variables \u00b6 Stored in .env (never committed). VITE_API_URL=http://localhost:8080/api VITE_APP_ENV=development Access in React: const apiUrl = import . meta . env . VITE_API_URL ; \u2705 Prefix with VITE_ for access in client-side code. \ud83e\uddf0 6. Communication with Backend \u00b6 REST Example (Axios) \u00b6 import axios from 'axios' ; const api = axios . create ({ baseURL : import . meta . env . VITE_API_URL , }); export const fetchUsers = async () => { const res = await api . get ( '/users' ); return res . data ; }; GraphQL Example \u00b6 import { request , gql } from 'graphql-request' ; const API = import . meta . env . VITE_API_URL + '/graphql' ; const query = gql ` query Users { users { id name } } ` ; export async function getUsers () { return await request ( API , query ); } \ud83e\uddf1 7. State and Caching Strategy \u00b6 Layer Example Purpose React Context AuthContext Manage global state LocalStorage token Persist login SWR / React Query useQuery() Cache API calls Redux / Zustand store slice Predictable state container Rule of thumb: Global state for global data, local state for local UI. \ud83e\udde9 8. Building for Production \u00b6 npm run build Outputs optimized static assets to: frontend/dist/ Files include: index.html assets/*.js , *.css You serve these via Nginx : server { listen 80 ; server_name example.com ; root /usr/share/nginx/html ; index index.html ; location / { try_files $uri /index.html ; } location /api/ { proxy_pass http://backend:8080 ; } } \ud83d\ude80 9. Dockerizing the Frontend \u00b6 Dockerfile: # Build stage FROM node:20-alpine AS build WORKDIR /app COPY package*.json ./ RUN npm install COPY . . RUN npm run build # Serve stage FROM nginx:latest COPY --from = build /app/dist /usr/share/nginx/html COPY nginx.conf /etc/nginx/conf.d/default.conf docker-compose.yml: services : frontend : build : ./frontend ports : - \"3000:80\" depends_on : - backend \ud83d\udcbb 10. Frontend in IDEs (JetBrains / VS Code) \u00b6 JetBrains (WebStorm / IntelliJ Ultimate) \u00b6 Built-in React + TypeScript tooling. Integrated terminal \u2192 run npm run dev . Live linting, code formatting, and Git integration. Debugger for browser + Node processes. Shortcut tips: Shift+F10 \u2014 run dev server Ctrl+B \u2014 jump to component definition Ctrl+Shift+R \u2014 run npm script VS Code Setup \u00b6 Recommended extensions: ESLint \u2014 static analysis Prettier \u2014 formatting Vite \u2014 syntax + run configs Tailwind CSS IntelliSense REST Client \u2014 test API endpoints \ud83e\udde0 11. Testing and Quality \u00b6 Unit tests npm run test Tools: Vitest / Jest. E2E tests npx playwright test Define flows: User logs in Calls /api/users Checks UI update Lint & format npm run lint npm run format Automation ensures consistent builds across machines. \u2699\ufe0f 12. Build \u2192 Deploy Pipeline \u00b6 Local \u2192 Staging \u2192 Production \u00b6 Step Tool Description Code changes Git Track & commit Build Vite Bundle assets Test Jest / Playwright Validate functionality Package Docker Create deployable image Deploy Nginx / CI/CD Serve to users CI/CD example (GitHub Actions): - name : Build and Push Frontend run : | docker build -t ghcr.io/user/frontend:${{ github.sha }} . docker push ghcr.io/user/frontend:${{ github.sha }} \ud83e\udde9 13. Communication with Backend Stack \u00b6 Interaction Description API Requests fetch() or Axios calls to /api/ Auth Tokens Sent via Authorization: Bearer <token> headers Rate Limiting Controlled by Nginx or Redis CORS Managed by backend or Nginx Real-Time Updates WebSockets or Redis Pub/Sub bridges All HTTP requests pass through Nginx , which proxies to the backend and ensures security. \ud83e\uddf0 14. Developer Workflow Summary \u00b6 Pull latest code: git pull Run dev server: npm run dev Build assets: npm run build Serve with Docker or Nginx. Deploy via CI/CD or manually. \ud83e\udded 15. Frontend \u2194 Backend Integration Diagram \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Browser \u2502 \u2502 (React/Vite) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 REST/GraphQL calls \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Nginx Proxy \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 forwards requests \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Backend API \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u25bc PostgreSQL Redis (storage) (cache) \u2705 16. Summary \u00b6 Node.js \u2013 runtime & package manager. Vite/React \u2013 fast UI development. Axios/Fetch \u2013 API communication. Docker & Nginx \u2013 consistent build + deployment. Git & CI/CD \u2013 version control and automation. Together, these tools mirror the backend architecture \u2014 the same principles of reproducibility, versioning, and service boundaries apply.","title":"frontend-system-overview"},{"location":"cheatsheets/tools/architecture/frontend-overview/#frontend-system-architecture-overview","text":"","title":"\ud83d\udca1 Frontend System Architecture Overview"},{"location":"cheatsheets/tools/architecture/frontend-overview/#nodejs-npm-reactvite-api-build-deployment","text":"The frontend layer is the bridge between users and your backend. It manages UI, application state, and communication with your APIs \u2014 built, bundled, and served through Node.js tooling. This document shows how the frontend development pipeline fits into your full-stack environment.","title":"(Node.js \u2192 npm \u2192 React/Vite \u2192 API \u2192 Build &amp; Deployment)"},{"location":"cheatsheets/tools/architecture/frontend-overview/#1-the-big-picture","text":"User \u2192 Browser \u2192 Frontend App (React/Vite) \u2502 \u25bc REST / GraphQL API (Nginx \u2192 Backend) \u2502 PostgreSQL & Redis under the hood ```` **Frontend role:** Present data, handle input, manage state, call backend endpoints, and render updates instantly. --- ## \u2699\ufe0f 2. Core Components of Modern Frontend | Component | Purpose | Tool | |------------|----------|------| | **Runtime** | JavaScript engine for tooling & builds | Node.js | | **Package Manager** | Installs dependencies | npm / pnpm / yarn | | **Framework** | UI logic and components | React, Vue, Svelte | | **Bundler/Dev Server** | Hot reload, build output | Vite / Webpack | | **State Management** | Handle UI data flow | Redux, Zustand, Context API | | **API Layer** | Communicate with backend | Fetch / Axios | | **Build Output** | Static assets for Nginx | `dist/` folder | --- ## \ud83e\udde9 3. Local Development Flow ```bash # Install dependencies npm install # Start dev server npm run dev ```` Default: * Vite dev server on `http://localhost:5173` * Auto-reloads when files change * Proxy API calls to backend (e.g., `http://localhost:8080`) **Example Vite proxy config:** ```js // vite.config.js export default { server: { proxy: { '/api': 'http://localhost:8080' } } };","title":"\ud83e\uddf1 1. The Big Picture"},{"location":"cheatsheets/tools/architecture/frontend-overview/#4-folder-structure","text":"frontend/ \u251c\u2500 src/ \u2502 \u251c\u2500 components/ \u2502 \u251c\u2500 pages/ \u2502 \u251c\u2500 hooks/ \u2502 \u251c\u2500 context/ \u2502 \u251c\u2500 services/ # API calls, Axios configs \u2502 \u251c\u2500 assets/ # images, styles \u2502 \u2514\u2500 main.jsx \u251c\u2500 public/ \u2502 \u2514\u2500 index.html \u251c\u2500 package.json \u251c\u2500 vite.config.js \u2514\u2500 .env","title":"\ud83e\udde0 4. Folder Structure"},{"location":"cheatsheets/tools/architecture/frontend-overview/#5-environment-variables","text":"Stored in .env (never committed). VITE_API_URL=http://localhost:8080/api VITE_APP_ENV=development Access in React: const apiUrl = import . meta . env . VITE_API_URL ; \u2705 Prefix with VITE_ for access in client-side code.","title":"\u26a1 5. Environment Variables"},{"location":"cheatsheets/tools/architecture/frontend-overview/#6-communication-with-backend","text":"","title":"\ud83e\uddf0 6. Communication with Backend"},{"location":"cheatsheets/tools/architecture/frontend-overview/#rest-example-axios","text":"import axios from 'axios' ; const api = axios . create ({ baseURL : import . meta . env . VITE_API_URL , }); export const fetchUsers = async () => { const res = await api . get ( '/users' ); return res . data ; };","title":"REST Example (Axios)"},{"location":"cheatsheets/tools/architecture/frontend-overview/#graphql-example","text":"import { request , gql } from 'graphql-request' ; const API = import . meta . env . VITE_API_URL + '/graphql' ; const query = gql ` query Users { users { id name } } ` ; export async function getUsers () { return await request ( API , query ); }","title":"GraphQL Example"},{"location":"cheatsheets/tools/architecture/frontend-overview/#7-state-and-caching-strategy","text":"Layer Example Purpose React Context AuthContext Manage global state LocalStorage token Persist login SWR / React Query useQuery() Cache API calls Redux / Zustand store slice Predictable state container Rule of thumb: Global state for global data, local state for local UI.","title":"\ud83e\uddf1 7. State and Caching Strategy"},{"location":"cheatsheets/tools/architecture/frontend-overview/#8-building-for-production","text":"npm run build Outputs optimized static assets to: frontend/dist/ Files include: index.html assets/*.js , *.css You serve these via Nginx : server { listen 80 ; server_name example.com ; root /usr/share/nginx/html ; index index.html ; location / { try_files $uri /index.html ; } location /api/ { proxy_pass http://backend:8080 ; } }","title":"\ud83e\udde9 8. Building for Production"},{"location":"cheatsheets/tools/architecture/frontend-overview/#9-dockerizing-the-frontend","text":"Dockerfile: # Build stage FROM node:20-alpine AS build WORKDIR /app COPY package*.json ./ RUN npm install COPY . . RUN npm run build # Serve stage FROM nginx:latest COPY --from = build /app/dist /usr/share/nginx/html COPY nginx.conf /etc/nginx/conf.d/default.conf docker-compose.yml: services : frontend : build : ./frontend ports : - \"3000:80\" depends_on : - backend","title":"\ud83d\ude80 9. Dockerizing the Frontend"},{"location":"cheatsheets/tools/architecture/frontend-overview/#10-frontend-in-ides-jetbrains-vs-code","text":"","title":"\ud83d\udcbb 10. Frontend in IDEs (JetBrains / VS Code)"},{"location":"cheatsheets/tools/architecture/frontend-overview/#jetbrains-webstorm-intellij-ultimate","text":"Built-in React + TypeScript tooling. Integrated terminal \u2192 run npm run dev . Live linting, code formatting, and Git integration. Debugger for browser + Node processes. Shortcut tips: Shift+F10 \u2014 run dev server Ctrl+B \u2014 jump to component definition Ctrl+Shift+R \u2014 run npm script","title":"JetBrains (WebStorm / IntelliJ Ultimate)"},{"location":"cheatsheets/tools/architecture/frontend-overview/#vs-code-setup","text":"Recommended extensions: ESLint \u2014 static analysis Prettier \u2014 formatting Vite \u2014 syntax + run configs Tailwind CSS IntelliSense REST Client \u2014 test API endpoints","title":"VS Code Setup"},{"location":"cheatsheets/tools/architecture/frontend-overview/#11-testing-and-quality","text":"Unit tests npm run test Tools: Vitest / Jest. E2E tests npx playwright test Define flows: User logs in Calls /api/users Checks UI update Lint & format npm run lint npm run format Automation ensures consistent builds across machines.","title":"\ud83e\udde0 11. Testing and Quality"},{"location":"cheatsheets/tools/architecture/frontend-overview/#12-build-deploy-pipeline","text":"","title":"\u2699\ufe0f 12. Build \u2192 Deploy Pipeline"},{"location":"cheatsheets/tools/architecture/frontend-overview/#local-staging-production","text":"Step Tool Description Code changes Git Track & commit Build Vite Bundle assets Test Jest / Playwright Validate functionality Package Docker Create deployable image Deploy Nginx / CI/CD Serve to users CI/CD example (GitHub Actions): - name : Build and Push Frontend run : | docker build -t ghcr.io/user/frontend:${{ github.sha }} . docker push ghcr.io/user/frontend:${{ github.sha }}","title":"Local \u2192 Staging \u2192 Production"},{"location":"cheatsheets/tools/architecture/frontend-overview/#13-communication-with-backend-stack","text":"Interaction Description API Requests fetch() or Axios calls to /api/ Auth Tokens Sent via Authorization: Bearer <token> headers Rate Limiting Controlled by Nginx or Redis CORS Managed by backend or Nginx Real-Time Updates WebSockets or Redis Pub/Sub bridges All HTTP requests pass through Nginx , which proxies to the backend and ensures security.","title":"\ud83e\udde9 13. Communication with Backend Stack"},{"location":"cheatsheets/tools/architecture/frontend-overview/#14-developer-workflow-summary","text":"Pull latest code: git pull Run dev server: npm run dev Build assets: npm run build Serve with Docker or Nginx. Deploy via CI/CD or manually.","title":"\ud83e\uddf0 14. Developer Workflow Summary"},{"location":"cheatsheets/tools/architecture/frontend-overview/#15-frontend-backend-integration-diagram","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Browser \u2502 \u2502 (React/Vite) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 REST/GraphQL calls \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Nginx Proxy \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 forwards requests \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Backend API \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u25bc PostgreSQL Redis (storage) (cache)","title":"\ud83e\udded 15. Frontend \u2194 Backend Integration Diagram"},{"location":"cheatsheets/tools/architecture/frontend-overview/#16-summary","text":"Node.js \u2013 runtime & package manager. Vite/React \u2013 fast UI development. Axios/Fetch \u2013 API communication. Docker & Nginx \u2013 consistent build + deployment. Git & CI/CD \u2013 version control and automation. Together, these tools mirror the backend architecture \u2014 the same principles of reproducibility, versioning, and service boundaries apply.","title":"\u2705 16. Summary"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/","text":"\ud83d\ude80 Full Stack Deployment & Operations Overview \u00b6 (Frontend + Backend + Infrastructure + CI/CD) \u00b6 This document connects everything \u2014 from developer commits to live, monitored systems. It shows how Git, Docker, Nginx, PostgreSQL, Redis, and systemd interact across environments, supported by CI/CD pipelines and monitoring. \ud83e\udde9 1. The Complete Stack \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Developer \u2502 \u2502 (Git + IDE + Docker) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 push/build \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Continuous Integration (CI) \u2502 \u2502 Build \u2192 Test \u2192 Package \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Continuous Deployment (CD) \u2502 \u2502 Deploy \u2192 Start Services \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Production Server \u2502 \u2502 (systemd + Docker + Nginx) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Monitoring & Logs \u2502 \u2502 (Prometheus, Grafana, ELK) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Everything begins with Git , moves through CI/CD automation , lands on a Dockerized host managed by systemd , and is served to the world through Nginx . \u2699\ufe0f 2. Environments and Their Roles \u00b6 Environment Purpose Key Tools Local Fast iteration, testing Docker Compose, local DB Staging Full stack replica Docker Compose, CI/CD Production Stable live system Docker, systemd, Nginx CI Runner Automated testing GitHub Actions / GitLab CI Golden rule: Each environment should be identical in architecture, differing only in configuration. \ud83e\uddf1 3. Stack Layers Overview \u00b6 Layer Component Purpose Source Control Git Version all code and infrastructure Build Layer Node.js, Gradle/Maven Build frontend + backend artifacts Runtime Layer Docker Run isolated containers Routing Layer Nginx Route external traffic Data Layer PostgreSQL, Redis Persistent + cached data Orchestration Layer systemd Ensure uptime and startup order Automation Layer CI/CD Test, build, and deploy automatically Observation Layer Prometheus, Grafana, Logs Metrics, alerts, traces \ud83d\udc33 4. Docker Compose for Unified Stack \u00b6 The glue that connects your local and staging environments. version : \"3.9\" services : nginx : image : nginx:latest ports : - \"80:80\" volumes : - ./nginx.conf:/etc/nginx/nginx.conf:ro depends_on : [ backend , frontend ] frontend : build : ./frontend expose : - \"5173\" backend : build : ./backend environment : SPRING_DATASOURCE_URL : jdbc:postgresql://postgres:5432/appdb SPRING_DATASOURCE_USERNAME : devuser SPRING_DATASOURCE_PASSWORD : secret depends_on : [ postgres , redis ] postgres : image : postgres:16 volumes : - pg_data:/var/lib/postgresql/data redis : image : redis:7 volumes : - redis_data:/data volumes : pg_data : redis_data : This setup runs the entire full stack locally, exactly as it would in staging or production. \ud83d\udd01 5. CI/CD Pipeline Flow \u00b6 Continuous Integration (CI) ensures your build works and tests pass. Continuous Deployment (CD) delivers it safely to your server. Example (GitHub Actions) \u00b6 name : Build & Deploy Full Stack on : push : branches : [ main ] jobs : build : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Build backend run : ./gradlew build - name : Build frontend run : npm ci && npm run build - name : Build Docker images run : | docker build -t ghcr.io/user/backend:${{ github.sha }} backend/ docker build -t ghcr.io/user/frontend:${{ github.sha }} frontend/ - name : Push Images run : | docker push ghcr.io/user/backend:${{ github.sha }} docker push ghcr.io/user/frontend:${{ github.sha }} deploy : runs-on : ubuntu-latest needs : build steps : - name : SSH & Deploy run : | ssh user@server \" docker pull ghcr.io/user/backend:${{ github.sha }} && docker pull ghcr.io/user/frontend:${{ github.sha }} && docker compose up -d && sudo systemctl reload nginx \" This pipeline: Builds both backend and frontend. Pushes images to a container registry. SSHes into the server and redeploys. Reloads Nginx to apply new frontend files. \u26a1 6. Deployment Directory Structure (on server) \u00b6 /opt/app/ \u251c\u2500 docker-compose.yml \u251c\u2500 nginx.conf \u251c\u2500 .env \u251c\u2500 frontend/ \u251c\u2500 backend/ \u251c\u2500 logs/ \u2514\u2500 volumes/ \u251c\u2500 postgres/ \u2514\u2500 redis/ systemd runs Docker as the service manager underneath: sudo systemctl restart docker sudo docker compose up -d \ud83e\udde9 7. Nginx as the Traffic Controller \u00b6 Handles requests, SSL, static serving, and proxying: server { listen 80 ; server_name example.com ; location / { root /usr/share/nginx/html ; try_files $uri /index.html ; } location /api/ { proxy_pass http://backend:8080 ; } } Nginx routes browser traffic \u2192 frontend, and /api calls \u2192 backend \u2192 PostgreSQL/Redis. \ud83d\udc18 8. Databases and Persistence \u00b6 PostgreSQL \u00b6 Stores structured, durable data. Mounted via Docker volume ( pg_data ). Managed by systemd through Docker. Redis \u00b6 In-memory caching + sessions. Mounted volume for optional persistence ( redis_data ). Communicates over internal Docker network. \ud83e\udde0 9. Configuration & Secrets Management \u00b6 All environments read from .env files: DB_USER=devuser DB_PASS=secret REDIS_PASS=redispass API_KEY=some_key For production: Use .env.prod with stronger creds. Never commit secrets \u2014 use CI/CD secrets storage. \ud83d\udcbe 10. Backup & Recovery \u00b6 PostgreSQL backup: \u00b6 pg_dump -U devuser appdb | gzip > backup_ $( date +%F ) .sql.gz Redis snapshot: \u00b6 redis-cli save Automate backups with systemd timers or cron. \ud83e\udded 11. Monitoring & Logging \u00b6 Tool Purpose journalctl OS & service logs Docker logs Container-level events Prometheus Metrics collection Grafana Visualization & alerts ELK stack (Elasticsearch + Logstash + Kibana) Centralized logging Minimal local setup: docker run -d -p 9090 :9090 prom/prometheus docker run -d -p 3000 :3000 grafana/grafana \ud83d\udd12 12. Security Layers \u00b6 Layer Defense Network Nginx firewall rules, fail2ban Transport HTTPS via Let\u2019s Encrypt Application Authentication, rate limiting Data Encrypted DB connections Access SSH keys, non-root Docker users Secrets Environment variables in CI/CD secrets store \ud83d\udd01 13. Continuous Maintenance Workflow \u00b6 Task Tool Frequency Code updates Git Continuous Build & deploy CI/CD On every push Logs review journalctl / Grafana Daily Backup rotation systemd timer Daily/weekly Security patches apt, Docker images Weekly Service healthcheck systemctl, Prometheus Ongoing \ud83e\udde9 14. Disaster Recovery Pattern \u00b6 Restore from latest DB + Redis backups. Pull latest images from registry. Deploy via docker compose up -d . Reconnect DNS / certificates. Verify via Nginx health endpoints. Recovery time objective: minutes, not hours. \ud83e\udde0 15. Developer-to-Production Mental Model \u00b6 Role Tool Responsibility Developer Git, Docker Build and test features Integrator CI Verify builds Deployer CD Push working containers live Operator systemd Keep services healthy Observer Grafana/Logs Detect issues early \u2705 16. Summary \u00b6 Git \u2192 tracks source and triggers builds. Docker \u2192 standardizes runtime. Nginx \u2192 routes traffic to services. PostgreSQL \u2192 stores persistent state. Redis \u2192 accelerates performance. systemd \u2192 ensures everything starts and stays alive. CI/CD \u2192 automates the entire loop. Monitoring tools \u2192 give visibility and peace of mind. Everything runs as a modular, reproducible, observable system \u2014 a fully self-contained full stack.","title":"fullstack-deployment-overview"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#full-stack-deployment-operations-overview","text":"","title":"\ud83d\ude80 Full Stack Deployment &amp; Operations Overview"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#frontend-backend-infrastructure-cicd","text":"This document connects everything \u2014 from developer commits to live, monitored systems. It shows how Git, Docker, Nginx, PostgreSQL, Redis, and systemd interact across environments, supported by CI/CD pipelines and monitoring.","title":"(Frontend + Backend + Infrastructure + CI/CD)"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#1-the-complete-stack","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Developer \u2502 \u2502 (Git + IDE + Docker) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 push/build \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Continuous Integration (CI) \u2502 \u2502 Build \u2192 Test \u2192 Package \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Continuous Deployment (CD) \u2502 \u2502 Deploy \u2192 Start Services \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Production Server \u2502 \u2502 (systemd + Docker + Nginx) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Monitoring & Logs \u2502 \u2502 (Prometheus, Grafana, ELK) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Everything begins with Git , moves through CI/CD automation , lands on a Dockerized host managed by systemd , and is served to the world through Nginx .","title":"\ud83e\udde9 1. The Complete Stack"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#2-environments-and-their-roles","text":"Environment Purpose Key Tools Local Fast iteration, testing Docker Compose, local DB Staging Full stack replica Docker Compose, CI/CD Production Stable live system Docker, systemd, Nginx CI Runner Automated testing GitHub Actions / GitLab CI Golden rule: Each environment should be identical in architecture, differing only in configuration.","title":"\u2699\ufe0f 2. Environments and Their Roles"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#3-stack-layers-overview","text":"Layer Component Purpose Source Control Git Version all code and infrastructure Build Layer Node.js, Gradle/Maven Build frontend + backend artifacts Runtime Layer Docker Run isolated containers Routing Layer Nginx Route external traffic Data Layer PostgreSQL, Redis Persistent + cached data Orchestration Layer systemd Ensure uptime and startup order Automation Layer CI/CD Test, build, and deploy automatically Observation Layer Prometheus, Grafana, Logs Metrics, alerts, traces","title":"\ud83e\uddf1 3. Stack Layers Overview"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#4-docker-compose-for-unified-stack","text":"The glue that connects your local and staging environments. version : \"3.9\" services : nginx : image : nginx:latest ports : - \"80:80\" volumes : - ./nginx.conf:/etc/nginx/nginx.conf:ro depends_on : [ backend , frontend ] frontend : build : ./frontend expose : - \"5173\" backend : build : ./backend environment : SPRING_DATASOURCE_URL : jdbc:postgresql://postgres:5432/appdb SPRING_DATASOURCE_USERNAME : devuser SPRING_DATASOURCE_PASSWORD : secret depends_on : [ postgres , redis ] postgres : image : postgres:16 volumes : - pg_data:/var/lib/postgresql/data redis : image : redis:7 volumes : - redis_data:/data volumes : pg_data : redis_data : This setup runs the entire full stack locally, exactly as it would in staging or production.","title":"\ud83d\udc33 4. Docker Compose for Unified Stack"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#5-cicd-pipeline-flow","text":"Continuous Integration (CI) ensures your build works and tests pass. Continuous Deployment (CD) delivers it safely to your server.","title":"\ud83d\udd01 5. CI/CD Pipeline Flow"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#example-github-actions","text":"name : Build & Deploy Full Stack on : push : branches : [ main ] jobs : build : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Build backend run : ./gradlew build - name : Build frontend run : npm ci && npm run build - name : Build Docker images run : | docker build -t ghcr.io/user/backend:${{ github.sha }} backend/ docker build -t ghcr.io/user/frontend:${{ github.sha }} frontend/ - name : Push Images run : | docker push ghcr.io/user/backend:${{ github.sha }} docker push ghcr.io/user/frontend:${{ github.sha }} deploy : runs-on : ubuntu-latest needs : build steps : - name : SSH & Deploy run : | ssh user@server \" docker pull ghcr.io/user/backend:${{ github.sha }} && docker pull ghcr.io/user/frontend:${{ github.sha }} && docker compose up -d && sudo systemctl reload nginx \" This pipeline: Builds both backend and frontend. Pushes images to a container registry. SSHes into the server and redeploys. Reloads Nginx to apply new frontend files.","title":"Example (GitHub Actions)"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#6-deployment-directory-structure-on-server","text":"/opt/app/ \u251c\u2500 docker-compose.yml \u251c\u2500 nginx.conf \u251c\u2500 .env \u251c\u2500 frontend/ \u251c\u2500 backend/ \u251c\u2500 logs/ \u2514\u2500 volumes/ \u251c\u2500 postgres/ \u2514\u2500 redis/ systemd runs Docker as the service manager underneath: sudo systemctl restart docker sudo docker compose up -d","title":"\u26a1 6. Deployment Directory Structure (on server)"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#7-nginx-as-the-traffic-controller","text":"Handles requests, SSL, static serving, and proxying: server { listen 80 ; server_name example.com ; location / { root /usr/share/nginx/html ; try_files $uri /index.html ; } location /api/ { proxy_pass http://backend:8080 ; } } Nginx routes browser traffic \u2192 frontend, and /api calls \u2192 backend \u2192 PostgreSQL/Redis.","title":"\ud83e\udde9 7. Nginx as the Traffic Controller"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#8-databases-and-persistence","text":"","title":"\ud83d\udc18 8. Databases and Persistence"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#postgresql","text":"Stores structured, durable data. Mounted via Docker volume ( pg_data ). Managed by systemd through Docker.","title":"PostgreSQL"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#redis","text":"In-memory caching + sessions. Mounted volume for optional persistence ( redis_data ). Communicates over internal Docker network.","title":"Redis"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#9-configuration-secrets-management","text":"All environments read from .env files: DB_USER=devuser DB_PASS=secret REDIS_PASS=redispass API_KEY=some_key For production: Use .env.prod with stronger creds. Never commit secrets \u2014 use CI/CD secrets storage.","title":"\ud83e\udde0 9. Configuration &amp; Secrets Management"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#10-backup-recovery","text":"","title":"\ud83d\udcbe 10. Backup &amp; Recovery"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#postgresql-backup","text":"pg_dump -U devuser appdb | gzip > backup_ $( date +%F ) .sql.gz","title":"PostgreSQL backup:"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#redis-snapshot","text":"redis-cli save Automate backups with systemd timers or cron.","title":"Redis snapshot:"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#11-monitoring-logging","text":"Tool Purpose journalctl OS & service logs Docker logs Container-level events Prometheus Metrics collection Grafana Visualization & alerts ELK stack (Elasticsearch + Logstash + Kibana) Centralized logging Minimal local setup: docker run -d -p 9090 :9090 prom/prometheus docker run -d -p 3000 :3000 grafana/grafana","title":"\ud83e\udded 11. Monitoring &amp; Logging"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#12-security-layers","text":"Layer Defense Network Nginx firewall rules, fail2ban Transport HTTPS via Let\u2019s Encrypt Application Authentication, rate limiting Data Encrypted DB connections Access SSH keys, non-root Docker users Secrets Environment variables in CI/CD secrets store","title":"\ud83d\udd12 12. Security Layers"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#13-continuous-maintenance-workflow","text":"Task Tool Frequency Code updates Git Continuous Build & deploy CI/CD On every push Logs review journalctl / Grafana Daily Backup rotation systemd timer Daily/weekly Security patches apt, Docker images Weekly Service healthcheck systemctl, Prometheus Ongoing","title":"\ud83d\udd01 13. Continuous Maintenance Workflow"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#14-disaster-recovery-pattern","text":"Restore from latest DB + Redis backups. Pull latest images from registry. Deploy via docker compose up -d . Reconnect DNS / certificates. Verify via Nginx health endpoints. Recovery time objective: minutes, not hours.","title":"\ud83e\udde9 14. Disaster Recovery Pattern"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#15-developer-to-production-mental-model","text":"Role Tool Responsibility Developer Git, Docker Build and test features Integrator CI Verify builds Deployer CD Push working containers live Operator systemd Keep services healthy Observer Grafana/Logs Detect issues early","title":"\ud83e\udde0 15. Developer-to-Production Mental Model"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#16-summary","text":"Git \u2192 tracks source and triggers builds. Docker \u2192 standardizes runtime. Nginx \u2192 routes traffic to services. PostgreSQL \u2192 stores persistent state. Redis \u2192 accelerates performance. systemd \u2192 ensures everything starts and stays alive. CI/CD \u2192 automates the entire loop. Monitoring tools \u2192 give visibility and peace of mind. Everything runs as a modular, reproducible, observable system \u2014 a fully self-contained full stack.","title":"\u2705 16. Summary"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/","text":"\u2699\ufe0f Linux systemd & systemctl: From Basics to Service Mastery \u00b6 systemd is the init system and service manager used by most modern Linux distributions (Ubuntu, Debian, Fedora, Arch, CentOS, etc.). It\u2019s what boots your system, starts background services, handles logs, timers, sockets, and shutdowns. systemctl is the command-line interface for controlling systemd . \ud83e\udde0 1. What systemd Actually Does \u00b6 When Linux boots, systemd : 1. Mounts file systems. 2. Spawns essential processes. 3. Starts all enabled services. 4. Manages dependencies and restarts on failure. It replaces older systems like SysVinit and upstart , providing faster parallel startup and fine-grained control. \ud83d\udc49 In short: systemd is the conductor ; services are the instruments . \ud83e\udde9 2. Key systemctl Commands (Quick Reference) \u00b6 # Service management sudo systemctl start docker sudo systemctl stop nginx sudo systemctl restart postgresql sudo systemctl reload nginx # reload config without stopping sudo systemctl status redis # check active status + logs # Boot-time behavior sudo systemctl enable docker # start automatically at boot sudo systemctl disable docker # disable at boot sudo systemctl is-enabled nginx # check status # Logs and info journalctl -u nginx # logs for one service journalctl -xe # detailed system logs systemctl list-units --type = service # all active services systemctl list-timers # scheduled timers # System power control sudo systemctl reboot sudo systemctl poweroff ```` --- ## \ud83e\uddf1 3. Anatomy of a Systemd Unit File Unit files define how services behave. They live under: /etc/systemd/system/ # custom user units /lib/systemd/system/ # system packages Example: `/etc/systemd/system/myapp.service` ```ini [Unit] Description=My Java Spring Boot Application After=network.target [Service] User=appuser WorkingDirectory=/opt/myapp ExecStart=/usr/bin/java -jar app.jar Restart=on-failure EnvironmentFile=/opt/myapp/.env [Install] WantedBy=multi-user.target Explanation: \u00b6 [Unit] \u2014 dependencies and metadata. [Service] \u2014 what to run, as whom, and how to handle restarts. [Install] \u2014 links service into system targets (boot-time groups). Reload after editing: sudo systemctl daemon-reload sudo systemctl enable myapp sudo systemctl start myapp \ud83e\uddf0 4. Common Service States \u00b6 Command Meaning active (running) Service is up. inactive (dead) Stopped. failed Crashed or exited abnormally. reloading Reloading config. activating/deactivating In startup/shutdown phase. \ud83e\udde9 5. Dependency and Target System \u00b6 systemd organizes services into targets \u2014 logical groups like: multi-user.target \u2192 standard multi-user system (normal operation) graphical.target \u2192 with GUI network.target \u2192 networking online default.target \u2192 system\u2019s default startup target Check default: systemctl get-default Change it (e.g., to boot without GUI): sudo systemctl set-default multi-user.target \u26a1 6. Journal Logs and Debugging \u00b6 journalctl reads systemd\u2019s binary logs. journalctl -u docker.service # logs for Docker only journalctl --since \"2 hours ago\" journalctl -f # follow logs (like tail -f) journalctl -k # kernel logs Filter by boot: journalctl -b -1 # previous boot logs \ud83e\uddf0 7. Timers (systemd\u2019s Cron Alternative) \u00b6 Timers replace cron with more flexibility and better logging. Example: /etc/systemd/system/backup.timer [Unit] Description = Nightly DB Backup [Timer] OnCalendar = daily Persistent = true [Install] WantedBy = timers.target Then /etc/systemd/system/backup.service : [Service] Type = oneshot ExecStart = /usr/local/bin/backup.sh Enable: sudo systemctl enable --now backup.timer systemctl list-timers \ud83e\udde9 8. User Services (Per-User systemd) \u00b6 You can run systemd-managed processes without root : systemctl --user enable myscript.service systemctl --user start myscript.service systemctl --user status myscript.service Useful for background scripts, language servers, or dev daemons. Config lives under: ~/.config/systemd/user/ \ud83e\uddf1 9. Service Restart and Recovery Patterns \u00b6 Add to [Service] section: Restart = on-failure RestartSec = 5 StartLimitIntervalSec = 0 Optional advanced options: Restart=always \u2192 restarts even after manual stop. ExecStartPre=/usr/bin/sleep 10 \u2192 delay before launch. ExecStopPost=/usr/bin/logger \"Service stopped\" \u2192 log cleanup. \ud83e\udde0 10. Practical Developer Workflow \u00b6 Most backend tools (Docker, PostgreSQL, Redis, Nginx) are systemd-managed . Here\u2019s the unified pattern for checking and controlling them: sudo systemctl status docker postgresql redis nginx sudo systemctl restart nginx sudo systemctl enable postgresql redis To verify all are active: systemctl list-units --type = service | grep -E 'nginx|redis|docker|postgres' \ud83d\udca1 If you use Docker Compose, those containers run inside Docker, but Docker itself is still a systemd service \u2014 systemctl restart docker affects them all. \ud83e\udde9 11. systemd + Development Environments \u00b6 JetBrains IDE Integration \u00b6 \u201cBefore Launch\u201d task: run sudo systemctl start <service> automatically. Add shell scripts to your Run Configurations for restarting or tailing logs. Combine with remote deployment \u2014 JetBrains can SSH + reload services post-deploy. Example remote deploy script: scp -r ./app.jar user@server:/opt/myapp/ ssh user@server \"sudo systemctl restart myapp\" VS Code Tasks \u00b6 Add to .vscode/tasks.json : { \"label\" : \"Restart Nginx\" , \"type\" : \"shell\" , \"command\" : \"sudo systemctl restart nginx\" } Run directly from VS Code\u2019s command palette. \ud83e\uddf0 12. Troubleshooting Common Issues \u00b6 Problem Fix \u201cUnit not found\u201d Create a .service file under /etc/systemd/system and reload daemon. Service doesn\u2019t start Check journalctl -u <service> . Config edits not applied Run sudo systemctl daemon-reload . Service loops restart Review Restart= directives or logs. Permission denied Ensure correct User= and file ownership. \ud83e\udde9 13. Real-World Example: Custom API Service \u00b6 /etc/systemd/system/backend.service [Unit] Description = Spring Boot API After = network.target [Service] User = appuser ExecStart = /usr/bin/java -jar /opt/backend/app.jar Restart = always Environment = SPRING_PROFILES_ACTIVE=prod EnvironmentFile = /opt/backend/.env [Install] WantedBy = multi-user.target Commands: sudo systemctl daemon-reload sudo systemctl enable backend sudo systemctl start backend sudo systemctl status backend \u2705 14. Summary \u00b6 systemd boots, manages, restarts, and logs all major services. systemctl gives you direct command-line control. Services are defined via .service unit files \u2014 easy to write, easy to automate. Timers replace cron with more control. Understanding this layer makes you a confident operator \u2014 not just a developer.","title":"quick-refresher"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#linux-systemd-systemctl-from-basics-to-service-mastery","text":"systemd is the init system and service manager used by most modern Linux distributions (Ubuntu, Debian, Fedora, Arch, CentOS, etc.). It\u2019s what boots your system, starts background services, handles logs, timers, sockets, and shutdowns. systemctl is the command-line interface for controlling systemd .","title":"\u2699\ufe0f Linux systemd &amp; systemctl: From Basics to Service Mastery"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#1-what-systemd-actually-does","text":"When Linux boots, systemd : 1. Mounts file systems. 2. Spawns essential processes. 3. Starts all enabled services. 4. Manages dependencies and restarts on failure. It replaces older systems like SysVinit and upstart , providing faster parallel startup and fine-grained control. \ud83d\udc49 In short: systemd is the conductor ; services are the instruments .","title":"\ud83e\udde0 1. What systemd Actually Does"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#2-key-systemctl-commands-quick-reference","text":"# Service management sudo systemctl start docker sudo systemctl stop nginx sudo systemctl restart postgresql sudo systemctl reload nginx # reload config without stopping sudo systemctl status redis # check active status + logs # Boot-time behavior sudo systemctl enable docker # start automatically at boot sudo systemctl disable docker # disable at boot sudo systemctl is-enabled nginx # check status # Logs and info journalctl -u nginx # logs for one service journalctl -xe # detailed system logs systemctl list-units --type = service # all active services systemctl list-timers # scheduled timers # System power control sudo systemctl reboot sudo systemctl poweroff ```` --- ## \ud83e\uddf1 3. Anatomy of a Systemd Unit File Unit files define how services behave. They live under: /etc/systemd/system/ # custom user units /lib/systemd/system/ # system packages Example: `/etc/systemd/system/myapp.service` ```ini [Unit] Description=My Java Spring Boot Application After=network.target [Service] User=appuser WorkingDirectory=/opt/myapp ExecStart=/usr/bin/java -jar app.jar Restart=on-failure EnvironmentFile=/opt/myapp/.env [Install] WantedBy=multi-user.target","title":"\ud83e\udde9 2. Key systemctl Commands (Quick Reference)"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#explanation","text":"[Unit] \u2014 dependencies and metadata. [Service] \u2014 what to run, as whom, and how to handle restarts. [Install] \u2014 links service into system targets (boot-time groups). Reload after editing: sudo systemctl daemon-reload sudo systemctl enable myapp sudo systemctl start myapp","title":"Explanation:"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#4-common-service-states","text":"Command Meaning active (running) Service is up. inactive (dead) Stopped. failed Crashed or exited abnormally. reloading Reloading config. activating/deactivating In startup/shutdown phase.","title":"\ud83e\uddf0 4. Common Service States"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#5-dependency-and-target-system","text":"systemd organizes services into targets \u2014 logical groups like: multi-user.target \u2192 standard multi-user system (normal operation) graphical.target \u2192 with GUI network.target \u2192 networking online default.target \u2192 system\u2019s default startup target Check default: systemctl get-default Change it (e.g., to boot without GUI): sudo systemctl set-default multi-user.target","title":"\ud83e\udde9 5. Dependency and Target System"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#6-journal-logs-and-debugging","text":"journalctl reads systemd\u2019s binary logs. journalctl -u docker.service # logs for Docker only journalctl --since \"2 hours ago\" journalctl -f # follow logs (like tail -f) journalctl -k # kernel logs Filter by boot: journalctl -b -1 # previous boot logs","title":"\u26a1 6. Journal Logs and Debugging"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#7-timers-systemds-cron-alternative","text":"Timers replace cron with more flexibility and better logging. Example: /etc/systemd/system/backup.timer [Unit] Description = Nightly DB Backup [Timer] OnCalendar = daily Persistent = true [Install] WantedBy = timers.target Then /etc/systemd/system/backup.service : [Service] Type = oneshot ExecStart = /usr/local/bin/backup.sh Enable: sudo systemctl enable --now backup.timer systemctl list-timers","title":"\ud83e\uddf0 7. Timers (systemd\u2019s Cron Alternative)"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#8-user-services-per-user-systemd","text":"You can run systemd-managed processes without root : systemctl --user enable myscript.service systemctl --user start myscript.service systemctl --user status myscript.service Useful for background scripts, language servers, or dev daemons. Config lives under: ~/.config/systemd/user/","title":"\ud83e\udde9 8. User Services (Per-User systemd)"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#9-service-restart-and-recovery-patterns","text":"Add to [Service] section: Restart = on-failure RestartSec = 5 StartLimitIntervalSec = 0 Optional advanced options: Restart=always \u2192 restarts even after manual stop. ExecStartPre=/usr/bin/sleep 10 \u2192 delay before launch. ExecStopPost=/usr/bin/logger \"Service stopped\" \u2192 log cleanup.","title":"\ud83e\uddf1 9. Service Restart and Recovery Patterns"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#10-practical-developer-workflow","text":"Most backend tools (Docker, PostgreSQL, Redis, Nginx) are systemd-managed . Here\u2019s the unified pattern for checking and controlling them: sudo systemctl status docker postgresql redis nginx sudo systemctl restart nginx sudo systemctl enable postgresql redis To verify all are active: systemctl list-units --type = service | grep -E 'nginx|redis|docker|postgres' \ud83d\udca1 If you use Docker Compose, those containers run inside Docker, but Docker itself is still a systemd service \u2014 systemctl restart docker affects them all.","title":"\ud83e\udde0 10. Practical Developer Workflow"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#11-systemd-development-environments","text":"","title":"\ud83e\udde9 11. systemd + Development Environments"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#jetbrains-ide-integration","text":"\u201cBefore Launch\u201d task: run sudo systemctl start <service> automatically. Add shell scripts to your Run Configurations for restarting or tailing logs. Combine with remote deployment \u2014 JetBrains can SSH + reload services post-deploy. Example remote deploy script: scp -r ./app.jar user@server:/opt/myapp/ ssh user@server \"sudo systemctl restart myapp\"","title":"JetBrains IDE Integration"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#vs-code-tasks","text":"Add to .vscode/tasks.json : { \"label\" : \"Restart Nginx\" , \"type\" : \"shell\" , \"command\" : \"sudo systemctl restart nginx\" } Run directly from VS Code\u2019s command palette.","title":"VS Code Tasks"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#12-troubleshooting-common-issues","text":"Problem Fix \u201cUnit not found\u201d Create a .service file under /etc/systemd/system and reload daemon. Service doesn\u2019t start Check journalctl -u <service> . Config edits not applied Run sudo systemctl daemon-reload . Service loops restart Review Restart= directives or logs. Permission denied Ensure correct User= and file ownership.","title":"\ud83e\uddf0 12. Troubleshooting Common Issues"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#13-real-world-example-custom-api-service","text":"/etc/systemd/system/backend.service [Unit] Description = Spring Boot API After = network.target [Service] User = appuser ExecStart = /usr/bin/java -jar /opt/backend/app.jar Restart = always Environment = SPRING_PROFILES_ACTIVE=prod EnvironmentFile = /opt/backend/.env [Install] WantedBy = multi-user.target Commands: sudo systemctl daemon-reload sudo systemctl enable backend sudo systemctl start backend sudo systemctl status backend","title":"\ud83e\udde9 13. Real-World Example: Custom API Service"},{"location":"cheatsheets/tools/%E2%9A%99%20systemd/quick-refresher/#14-summary","text":"systemd boots, manages, restarts, and logs all major services. systemctl gives you direct command-line control. Services are defined via .service unit files \u2014 easy to write, easy to automate. Timers replace cron with more control. Understanding this layer makes you a confident operator \u2014 not just a developer.","title":"\u2705 14. Summary"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/","text":"\ud83c\udf10 Nginx: From Basics to High-Performance Web Serving \u00b6 Nginx (\u201cengine-x\u201d) is a high-performance web server, reverse proxy, and load balancer . It\u2019s lightweight, event-driven, and designed to handle thousands of concurrent connections with minimal resources. You\u2019ll find it serving static sites, routing API traffic, proxying backend apps, or terminating SSL \u2014 often all at once. \u2699\ufe0f 1. What Nginx Actually Does \u00b6 Nginx can play multiple roles depending on configuration: Role Description Web server Serves static files directly (HTML, JS, CSS, images). Reverse proxy Forwards client requests to backend apps (e.g., Node, Spring Boot). Load balancer Distributes requests across multiple backend servers. TLS terminator Handles HTTPS encryption before passing traffic internally. Cache layer Stores responses to reduce backend load. \ud83d\udc49 In short: Nginx sits between the internet and your application , managing how traffic flows. \ud83e\uddf1 2. Core Concepts \u00b6 Concept Description Worker processes Handle client connections. Nginx scales by using multiple workers efficiently. Directives Configuration commands that define behavior (e.g., listen , server_name ). Context blocks Hierarchical sections: main , http , server , and location . Server block Defines a virtual host \u2014 domain, ports, SSL, routes. Location block Defines how to handle requests matching specific URIs. \ud83e\udde9 3. File Structure Overview \u00b6 Typical Linux layout after install: /etc/nginx/ \u251c\u2500 nginx.conf # main config (includes others) \u251c\u2500 conf.d/ # custom site configs (enabled by default) \u251c\u2500 sites-available/ # optional (Debian/Ubuntu layout) \u251c\u2500 sites-enabled/ # symlinks to active sites \u251c\u2500 snippets/ # reusable config fragments \u2514\u2500 logs/ \u251c\u2500 access.log \u2514\u2500 error.log ```` Test and reload Nginx safely: ```bash sudo nginx -t # test syntax sudo systemctl reload nginx sudo systemctl status nginx ```` --- ## \ud83e\uddf0 4. Basic HTTP Server Example **Goal:** Serve static files from `/var/www/html` on port 80. ```nginx server { listen 80; server_name example.com; root /var/www/html; index index.html; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; location / { try_files $uri $uri/ =404; } } \ud83d\udc49 This is Nginx as a pure web server \u2014 no proxying, just serving files. \ud83d\udd01 5. Reverse Proxy Setup \u00b6 Goal: Forward traffic from Nginx \u2192 backend app (e.g., Spring Boot or Node). server { listen 80 ; server_name api.example.com ; location / { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; } } \u2705 Best practice: Always pass client IP headers. Use proxy_pass without trailing slash unless you understand path rewriting. Protect upstreams (never expose raw app ports to the internet). \ud83d\udd12 6. HTTPS (TLS) Configuration \u00b6 Using Let\u2019s Encrypt certificates (managed by certbot ): sudo certbot --nginx -d example.com -d www.example.com Manual example: server { listen 443 ssl ; server_name example.com ; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem ; location / { proxy_pass http://127.0.0.1:8080 ; } } server { listen 80 ; server_name example.com ; return 301 https:// $host$request_uri ; } \ud83d\udc49 Always redirect HTTP \u2192 HTTPS. \u26a1 7. Load Balancing Example \u00b6 Round-robin across two backend servers: upstream backend_cluster { server 10.0.0.2 : 8080 ; server 10.0.0.3 : 8080 ; } server { listen 80 ; server_name app.example.com ; location / { proxy_pass http://backend_cluster ; } } Variants: ip_hash; for sticky sessions least_conn; for even load \ud83e\udde0 8. Useful Directives & Variables \u00b6 Directive Purpose root Directory to serve files from index Default file to serve server_name Hostname match for requests error_page Custom error responses rewrite URL rewriting try_files Fallbacks for static serving proxy_pass Forward to backend proxy_set_header Pass headers to backend Common variables: $remote_addr \u2192 client IP $host \u2192 domain in request $uri \u2192 path part of request $request_uri \u2192 original request including query $upstream_addr \u2192 backend server used \ud83e\udde9 9. Logging and Monitoring \u00b6 Logs are your best debugging friend: tail -f /var/log/nginx/access.log tail -f /var/log/nginx/error.log Sample log format: 127.0.0.1 - - [15/Oct/2025:12:34:56 +0000] \"GET /index.html HTTP/1.1\" 200 612 You can define custom formats: log_format main ' $remote_addr - $host [ $time_local] \" $request\" $status $body_bytes_sent' ; access_log /var/log/nginx/access.log main ; \ud83e\udde9 10. Caching Static Assets \u00b6 location ~ * \\.(jpg|jpeg|png|gif|css|js|ico|woff2?) $ { expires 30d ; add_header Cache-Control \"public, no-transform\" ; } \ud83d\udc49 Offload repeated requests from your backend and improve browser performance. \ud83e\uddf1 11. Security Hardening \u00b6 Disable server version info: server_tokens off ; * Limit request size: client_max_body_size 10M ; * Prevent clickjacking & MIME sniffing: add_header X-Frame-Options SAMEORIGIN ; add_header X-Content-Type-Options nosniff ; * Use rate limiting (basic DDOS protection): limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s ; location /api/ { limit_req zone=api burst=20 ; proxy_pass http://backend ; } \ud83e\udde9 12. Example Full Setup (Static + API Proxy + HTTPS) \u00b6 server { listen 80 ; server_name example.com www.example.com ; return 301 https:// $host$request_uri ; } server { listen 443 ssl http2 ; server_name example.com www.example.com ; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem ; root /var/www/html ; index index.html ; location /api/ { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Forwarded-For $remote_addr ; } location / { try_files $uri $uri/ = 404 ; } } \ud83e\udde9 13. Nginx in Development Environments \u00b6 JetBrains (IDEA / PyCharm) \u00b6 You can run and debug local servers via \u201cEdit Configurations \u2192 Nginx\u201d. Syntax highlighting is built-in; test configs directly with nginx -t . Use Deployment tools to sync /etc/nginx/ or container configs to remote hosts. VS Code \u00b6 Install: Nginx Configuration Language (syntax highlighting) Nginx Snippets (ready-to-use config templates) Docker Extension (if you\u2019re running Nginx in containers) Run via Docker: docker run -d -p 8080 :80 -v $( pwd ) /nginx.conf:/etc/nginx/nginx.conf nginx \ud83e\uddf0 14. Troubleshooting \u00b6 Problem Fix Config change not applied sudo nginx -t && sudo systemctl reload nginx \u201cBad Gateway (502)\u201d Backend down or wrong proxy_pass target Permission denied Ensure Nginx user ( www-data / nginx ) can access files Infinite redirect loop Check proxy_pass URLs and rewrite rules SSL errors Verify certificate paths & permissions \ud83e\udde0 15. Advanced Topics (for later) \u00b6 Reverse proxy caching ( proxy_cache_path , proxy_cache ). HTTP/2 and QUIC/HTTP3 enablement. Gzip and Brotli compression. Load balancing with health checks. Serving multiple domains (SNI). Dockerized Nginx reverse proxy setups. Using Nginx as a static file CDN. \u2705 Summary \u00b6 Nginx is both a web server and a reverse proxy \u2014 efficient, flexible, and production-grade. Serve static content directly and offload dynamic requests to backends. Always test ( nginx -t ) before reloading. Secure with HTTPS, caching, and rate limiting. Lightweight, predictable, and nearly indestructible \u2014 it\u2019s the web\u2019s quiet workhorse. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 nginx/ \u2514\u2500 quick-refresher.md \ud83d\udcbb 16. Nginx in Developer Workflows (JetBrains & VS Code) \u00b6 Nginx isn\u2019t just a server you \u201cdeploy somewhere.\u201d It\u2019s a local testing tool , reverse proxy in development , and part of modern CI/CD pipelines. \ud83e\udde9 JetBrains IDEs (IntelliJ IDEA, PyCharm, etc.) \u00b6 Feature What It Does File templates Built-in syntax highlighting for nginx.conf and .conf files. Remote deployment Sync /etc/nginx/ or Docker configs via \u201cDeployment \u2192 Remote Host\u201d. Before launch tasks Run nginx -t automatically to test config before restarting. Docker integration Configure Nginx container services directly in IDE Services tab. Pro tip: In JetBrains, you can make a Run Configuration that executes: sudo nginx -t && sudo systemctl reload nginx ```` This gives you one-click config validation + reload directly from the IDE. --- ### \ud83e\udde0 VS Code Integration VS Code can act as your Nginx control panel with the right extensions. **Recommended setup:** * **Nginx Configuration Language** \u2192 syntax + linting * **Nginx Snippets** \u2192 quick templates * **Docker Extension** \u2192 manage running containers * **REST Client** \u2192 test API endpoints proxied through Nginx You can run Nginx locally for frontend-backend routing: ``` bash docker run -d \\ --name dev-nginx \\ -p 8080 :80 \\ -v $( pwd ) /nginx.conf:/etc/nginx/nginx.conf:ro \\ nginx:latest \ud83e\uddf0 17. Nginx + Docker Compose in Local Development \u00b6 A clean, composable setup to proxy requests between your frontend and backend: version : \"3.9\" services : nginx : image : nginx:latest container_name : nginx ports : - \"80:80\" volumes : - ./nginx.conf:/etc/nginx/nginx.conf:ro depends_on : - backend - frontend frontend : build : ./frontend expose : - \"3000\" backend : build : ./backend expose : - \"8080\" Then nginx.conf : events {} http { server { listen 80 ; location / { proxy_pass http://frontend:3000 ; } location /api/ { proxy_pass http://backend:8080 ; } } } \u2705 Benefits: Unified local environment \u2014 no cross-origin chaos. Hot reload compatible (mount local code). Easier to mirror staging/production later. \ud83d\ude80 18. Staging vs. Production Patterns \u00b6 Environment Goal Typical Nginx Role Local Simulate routing and test caching/proxy rules Run via Docker or native install Staging Mimic production routing and SSL Reverse proxy + TLS Production Serve static content + proxy dynamic requests Load balancer + cache layer Example split configs: nginx/ \u251c\u2500 nginx.conf # global settings \u251c\u2500 conf.d/ \u2502 \u251c\u2500 dev.conf # local proxy setup \u2502 \u251c\u2500 staging.conf # SSL, rate limiting \u2502 \u2514\u2500 production.conf # caching, load balancing \ud83e\udde9 19. Common CI/CD Integrations \u00b6 Build pipeline (Dockerized): # Dockerfile FROM nginx:latest COPY nginx.conf /etc/nginx/nginx.conf COPY dist/ /usr/share/nginx/html GitHub Actions snippet: - name : Build & Push Nginx Image run : | docker build -t ghcr.io/user/app-nginx:${{ github.sha }} . docker push ghcr.io/user/app-nginx:${{ github.sha }} Deployment example (Docker Swarm / Kubernetes): # Swarm stack.yml services : nginx : image : ghcr.io/user/app-nginx:latest ports : - \"80:80\" - \"443:443\" deploy : replicas : 2 restart_policy : condition : on-failure \ud83e\udde0 20. Best Practices & Developer Habits \u00b6 Configuration Hygiene \u00b6 Keep production configs readonly and version-controlled. Split by domain or role \u2014 one file per app. Use includes: include /etc/nginx/conf.d/*.conf ; Developer sanity checklist \u00b6 Always run nginx -t before reload. Use $host and $remote_addr headers when proxying. Don\u2019t run with root inside containers (use nginx user). Redirect all HTTP to HTTPS \u2014 even locally, if possible. Keep logs rotated ( logrotate or Docker log limits). IDE habit \u00b6 Format configs automatically before commit. Use pre-commit hooks to validate syntax: nginx -t -q || exit 1 \u2705 Summary (Developer Edition) \u00b6 Integrate Nginx directly in IDE or Compose \u2014 no manual SSH needed. Test configs automatically before reloads. Run the same Nginx image locally and in production for consistency. Version-control your .conf files like code \u2014 because they are code. Treat Nginx as your traffic controller , not just a web server. \ud83d\udcc4 Final structure suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 nginx/ \u2514\u2500 quick-refresher.md","title":"quick-refresher"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#nginx-from-basics-to-high-performance-web-serving","text":"Nginx (\u201cengine-x\u201d) is a high-performance web server, reverse proxy, and load balancer . It\u2019s lightweight, event-driven, and designed to handle thousands of concurrent connections with minimal resources. You\u2019ll find it serving static sites, routing API traffic, proxying backend apps, or terminating SSL \u2014 often all at once.","title":"\ud83c\udf10 Nginx: From Basics to High-Performance Web Serving"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#1-what-nginx-actually-does","text":"Nginx can play multiple roles depending on configuration: Role Description Web server Serves static files directly (HTML, JS, CSS, images). Reverse proxy Forwards client requests to backend apps (e.g., Node, Spring Boot). Load balancer Distributes requests across multiple backend servers. TLS terminator Handles HTTPS encryption before passing traffic internally. Cache layer Stores responses to reduce backend load. \ud83d\udc49 In short: Nginx sits between the internet and your application , managing how traffic flows.","title":"\u2699\ufe0f 1. What Nginx Actually Does"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#2-core-concepts","text":"Concept Description Worker processes Handle client connections. Nginx scales by using multiple workers efficiently. Directives Configuration commands that define behavior (e.g., listen , server_name ). Context blocks Hierarchical sections: main , http , server , and location . Server block Defines a virtual host \u2014 domain, ports, SSL, routes. Location block Defines how to handle requests matching specific URIs.","title":"\ud83e\uddf1 2. Core Concepts"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#3-file-structure-overview","text":"Typical Linux layout after install: /etc/nginx/ \u251c\u2500 nginx.conf # main config (includes others) \u251c\u2500 conf.d/ # custom site configs (enabled by default) \u251c\u2500 sites-available/ # optional (Debian/Ubuntu layout) \u251c\u2500 sites-enabled/ # symlinks to active sites \u251c\u2500 snippets/ # reusable config fragments \u2514\u2500 logs/ \u251c\u2500 access.log \u2514\u2500 error.log ```` Test and reload Nginx safely: ```bash sudo nginx -t # test syntax sudo systemctl reload nginx sudo systemctl status nginx ```` --- ## \ud83e\uddf0 4. Basic HTTP Server Example **Goal:** Serve static files from `/var/www/html` on port 80. ```nginx server { listen 80; server_name example.com; root /var/www/html; index index.html; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; location / { try_files $uri $uri/ =404; } } \ud83d\udc49 This is Nginx as a pure web server \u2014 no proxying, just serving files.","title":"\ud83e\udde9 3. File Structure Overview"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#5-reverse-proxy-setup","text":"Goal: Forward traffic from Nginx \u2192 backend app (e.g., Spring Boot or Node). server { listen 80 ; server_name api.example.com ; location / { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; } } \u2705 Best practice: Always pass client IP headers. Use proxy_pass without trailing slash unless you understand path rewriting. Protect upstreams (never expose raw app ports to the internet).","title":"\ud83d\udd01 5. Reverse Proxy Setup"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#6-https-tls-configuration","text":"Using Let\u2019s Encrypt certificates (managed by certbot ): sudo certbot --nginx -d example.com -d www.example.com Manual example: server { listen 443 ssl ; server_name example.com ; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem ; location / { proxy_pass http://127.0.0.1:8080 ; } } server { listen 80 ; server_name example.com ; return 301 https:// $host$request_uri ; } \ud83d\udc49 Always redirect HTTP \u2192 HTTPS.","title":"\ud83d\udd12 6. HTTPS (TLS) Configuration"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#7-load-balancing-example","text":"Round-robin across two backend servers: upstream backend_cluster { server 10.0.0.2 : 8080 ; server 10.0.0.3 : 8080 ; } server { listen 80 ; server_name app.example.com ; location / { proxy_pass http://backend_cluster ; } } Variants: ip_hash; for sticky sessions least_conn; for even load","title":"\u26a1 7. Load Balancing Example"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#8-useful-directives-variables","text":"Directive Purpose root Directory to serve files from index Default file to serve server_name Hostname match for requests error_page Custom error responses rewrite URL rewriting try_files Fallbacks for static serving proxy_pass Forward to backend proxy_set_header Pass headers to backend Common variables: $remote_addr \u2192 client IP $host \u2192 domain in request $uri \u2192 path part of request $request_uri \u2192 original request including query $upstream_addr \u2192 backend server used","title":"\ud83e\udde0 8. Useful Directives &amp; Variables"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#9-logging-and-monitoring","text":"Logs are your best debugging friend: tail -f /var/log/nginx/access.log tail -f /var/log/nginx/error.log Sample log format: 127.0.0.1 - - [15/Oct/2025:12:34:56 +0000] \"GET /index.html HTTP/1.1\" 200 612 You can define custom formats: log_format main ' $remote_addr - $host [ $time_local] \" $request\" $status $body_bytes_sent' ; access_log /var/log/nginx/access.log main ;","title":"\ud83e\udde9 9. Logging and Monitoring"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#10-caching-static-assets","text":"location ~ * \\.(jpg|jpeg|png|gif|css|js|ico|woff2?) $ { expires 30d ; add_header Cache-Control \"public, no-transform\" ; } \ud83d\udc49 Offload repeated requests from your backend and improve browser performance.","title":"\ud83e\udde9 10. Caching Static Assets"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#11-security-hardening","text":"Disable server version info: server_tokens off ; * Limit request size: client_max_body_size 10M ; * Prevent clickjacking & MIME sniffing: add_header X-Frame-Options SAMEORIGIN ; add_header X-Content-Type-Options nosniff ; * Use rate limiting (basic DDOS protection): limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s ; location /api/ { limit_req zone=api burst=20 ; proxy_pass http://backend ; }","title":"\ud83e\uddf1 11. Security Hardening"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#12-example-full-setup-static-api-proxy-https","text":"server { listen 80 ; server_name example.com www.example.com ; return 301 https:// $host$request_uri ; } server { listen 443 ssl http2 ; server_name example.com www.example.com ; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem ; root /var/www/html ; index index.html ; location /api/ { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Forwarded-For $remote_addr ; } location / { try_files $uri $uri/ = 404 ; } }","title":"\ud83e\udde9 12. Example Full Setup (Static + API Proxy + HTTPS)"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#13-nginx-in-development-environments","text":"","title":"\ud83e\udde9 13. Nginx in Development Environments"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#jetbrains-idea-pycharm","text":"You can run and debug local servers via \u201cEdit Configurations \u2192 Nginx\u201d. Syntax highlighting is built-in; test configs directly with nginx -t . Use Deployment tools to sync /etc/nginx/ or container configs to remote hosts.","title":"JetBrains (IDEA / PyCharm)"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#vs-code","text":"Install: Nginx Configuration Language (syntax highlighting) Nginx Snippets (ready-to-use config templates) Docker Extension (if you\u2019re running Nginx in containers) Run via Docker: docker run -d -p 8080 :80 -v $( pwd ) /nginx.conf:/etc/nginx/nginx.conf nginx","title":"VS Code"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#14-troubleshooting","text":"Problem Fix Config change not applied sudo nginx -t && sudo systemctl reload nginx \u201cBad Gateway (502)\u201d Backend down or wrong proxy_pass target Permission denied Ensure Nginx user ( www-data / nginx ) can access files Infinite redirect loop Check proxy_pass URLs and rewrite rules SSL errors Verify certificate paths & permissions","title":"\ud83e\uddf0 14. Troubleshooting"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#15-advanced-topics-for-later","text":"Reverse proxy caching ( proxy_cache_path , proxy_cache ). HTTP/2 and QUIC/HTTP3 enablement. Gzip and Brotli compression. Load balancing with health checks. Serving multiple domains (SNI). Dockerized Nginx reverse proxy setups. Using Nginx as a static file CDN.","title":"\ud83e\udde0 15. Advanced Topics (for later)"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#summary","text":"Nginx is both a web server and a reverse proxy \u2014 efficient, flexible, and production-grade. Serve static content directly and offload dynamic requests to backends. Always test ( nginx -t ) before reloading. Secure with HTTPS, caching, and rate limiting. Lightweight, predictable, and nearly indestructible \u2014 it\u2019s the web\u2019s quiet workhorse. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 nginx/ \u2514\u2500 quick-refresher.md","title":"\u2705 Summary"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#16-nginx-in-developer-workflows-jetbrains-vs-code","text":"Nginx isn\u2019t just a server you \u201cdeploy somewhere.\u201d It\u2019s a local testing tool , reverse proxy in development , and part of modern CI/CD pipelines.","title":"\ud83d\udcbb 16. Nginx in Developer Workflows (JetBrains &amp; VS Code)"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#jetbrains-ides-intellij-idea-pycharm-etc","text":"Feature What It Does File templates Built-in syntax highlighting for nginx.conf and .conf files. Remote deployment Sync /etc/nginx/ or Docker configs via \u201cDeployment \u2192 Remote Host\u201d. Before launch tasks Run nginx -t automatically to test config before restarting. Docker integration Configure Nginx container services directly in IDE Services tab. Pro tip: In JetBrains, you can make a Run Configuration that executes: sudo nginx -t && sudo systemctl reload nginx ```` This gives you one-click config validation + reload directly from the IDE. --- ### \ud83e\udde0 VS Code Integration VS Code can act as your Nginx control panel with the right extensions. **Recommended setup:** * **Nginx Configuration Language** \u2192 syntax + linting * **Nginx Snippets** \u2192 quick templates * **Docker Extension** \u2192 manage running containers * **REST Client** \u2192 test API endpoints proxied through Nginx You can run Nginx locally for frontend-backend routing: ``` bash docker run -d \\ --name dev-nginx \\ -p 8080 :80 \\ -v $( pwd ) /nginx.conf:/etc/nginx/nginx.conf:ro \\ nginx:latest","title":"\ud83e\udde9 JetBrains IDEs (IntelliJ IDEA, PyCharm, etc.)"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#17-nginx-docker-compose-in-local-development","text":"A clean, composable setup to proxy requests between your frontend and backend: version : \"3.9\" services : nginx : image : nginx:latest container_name : nginx ports : - \"80:80\" volumes : - ./nginx.conf:/etc/nginx/nginx.conf:ro depends_on : - backend - frontend frontend : build : ./frontend expose : - \"3000\" backend : build : ./backend expose : - \"8080\" Then nginx.conf : events {} http { server { listen 80 ; location / { proxy_pass http://frontend:3000 ; } location /api/ { proxy_pass http://backend:8080 ; } } } \u2705 Benefits: Unified local environment \u2014 no cross-origin chaos. Hot reload compatible (mount local code). Easier to mirror staging/production later.","title":"\ud83e\uddf0 17. Nginx + Docker Compose in Local Development"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#18-staging-vs-production-patterns","text":"Environment Goal Typical Nginx Role Local Simulate routing and test caching/proxy rules Run via Docker or native install Staging Mimic production routing and SSL Reverse proxy + TLS Production Serve static content + proxy dynamic requests Load balancer + cache layer Example split configs: nginx/ \u251c\u2500 nginx.conf # global settings \u251c\u2500 conf.d/ \u2502 \u251c\u2500 dev.conf # local proxy setup \u2502 \u251c\u2500 staging.conf # SSL, rate limiting \u2502 \u2514\u2500 production.conf # caching, load balancing","title":"\ud83d\ude80 18. Staging vs. Production Patterns"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#19-common-cicd-integrations","text":"Build pipeline (Dockerized): # Dockerfile FROM nginx:latest COPY nginx.conf /etc/nginx/nginx.conf COPY dist/ /usr/share/nginx/html GitHub Actions snippet: - name : Build & Push Nginx Image run : | docker build -t ghcr.io/user/app-nginx:${{ github.sha }} . docker push ghcr.io/user/app-nginx:${{ github.sha }} Deployment example (Docker Swarm / Kubernetes): # Swarm stack.yml services : nginx : image : ghcr.io/user/app-nginx:latest ports : - \"80:80\" - \"443:443\" deploy : replicas : 2 restart_policy : condition : on-failure","title":"\ud83e\udde9 19. Common CI/CD Integrations"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#20-best-practices-developer-habits","text":"","title":"\ud83e\udde0 20. Best Practices &amp; Developer Habits"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#configuration-hygiene","text":"Keep production configs readonly and version-controlled. Split by domain or role \u2014 one file per app. Use includes: include /etc/nginx/conf.d/*.conf ;","title":"Configuration Hygiene"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#developer-sanity-checklist","text":"Always run nginx -t before reload. Use $host and $remote_addr headers when proxying. Don\u2019t run with root inside containers (use nginx user). Redirect all HTTP to HTTPS \u2014 even locally, if possible. Keep logs rotated ( logrotate or Docker log limits).","title":"Developer sanity checklist"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#ide-habit","text":"Format configs automatically before commit. Use pre-commit hooks to validate syntax: nginx -t -q || exit 1","title":"IDE habit"},{"location":"cheatsheets/tools/%F0%9F%8C%90%20nginx/quick-refresher/#summary-developer-edition","text":"Integrate Nginx directly in IDE or Compose \u2014 no manual SSH needed. Test configs automatically before reloads. Run the same Nginx image locally and in production for consistency. Version-control your .conf files like code \u2014 because they are code. Treat Nginx as your traffic controller , not just a web server. \ud83d\udcc4 Final structure suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 nginx/ \u2514\u2500 quick-refresher.md","title":"\u2705 Summary (Developer Edition)"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/","text":"\ud83d\udc33 Docker: From Service Basics to Multi-Container Setup \u00b6 Docker packages software into portable, isolated containers . Each container runs a process with its own filesystem, network, and dependencies. Whether you\u2019re controlling Docker as a Linux service or orchestrating multiple apps, its real power lies in repeatability and consistency across environments. \u2699\ufe0f 1. Controlling Docker as a Service (systemctl) \u00b6 systemctl manages background services (daemons) on Linux via systemd . Docker runs as one such service \u2014 you manage it like any other system process. sudo systemctl start docker # Start Docker service sudo systemctl stop docker # Stop Docker service sudo systemctl restart docker # Restart service sudo systemctl status docker # Check status and logs sudo systemctl enable docker # Start at boot sudo systemctl disable docker # Disable auto-start systemctl list-units --type = service ```` \ud83d\udc49 In short: ` systemctl ` is the tool, ` systemd ` is the manager, and ` docker ` is the service you\u2019re controlling. --- ## \ud83e\uddf1 2. Core Docker Concepts | Concept | Description | | ---------------------- | ------------------------------------------------------------------------------------------------ | | **Image** | Blueprint for running software ( e.g., ` nginx:latest ` , ` mysql:8.4 ` ) . Immutable and versioned. | | **Container** | A running instance of an image. Ephemeral \u2014 stops and vanishes unless data is stored externally. | | **Volume** | Persistent storage outside the container lifecycle ( e.g., database data ) . | | **Port Mapping** | Bridge between host and container ( ` -p 8080 :80 ` means host:8080 \u2192 container:80 ) . | | **Dockerfile** | Script describing how to build an image. Defines base image, files, commands, and exposed ports. | | **docker-compose.yml** | Declarative config for running multiple containers together ( services, networks, volumes ) . | \ud83e\udded **Learn Docker in this order:** 1 . Run a single container ( ` docker run nginx ` ) 2 . Build your own image ( write a Dockerfile ) 3 . Persist data with volumes 4 . Connect containers with networks 5 . Orchestrate everything using Compose --- ### \ud83d\udd01 Container Lifecycle Image \u2192 Container \u2192 Process \u2192 Exit \u2192 Removed \u2191 (built from Dockerfile) A container is just a **process with boundaries** \u2014 lightweight isolation using Linux namespaces and cgroups. It\u2019s not a VM; it shares the host kernel but runs with its own view of the system. --- ## \ud83d\udd27 Quick Command Reference ```bash # Core commands docker ps # running containers docker ps -a # all containers (including stopped) docker images # list local images docker run -d -p 8080:80 nginx docker exec -it <container> bash docker logs -f <container> docker stop <container> docker rm <container> docker system prune -a # cleanup everything unused \ud83d\udce6 3. Container Networking (the hallway between containers) \u00b6 Each container lives in its own isolated network namespace. They can communicate when they share a Docker network . Bridge network (default): Containers can reach each other via IP, but not by name unless you define a user network. User-defined network (recommended): docker network create mynet docker run -d --name db --network mynet mysql:8.4 docker run -d --name app --network mynet myapp Now app can reach db simply at hostname db:3306 . Ports and host access: docker run -p 8080 :80 nginx Maps port 8080 on your host to port 80 inside the container. \u2705 Best practice: Use Docker networks for container-to-container comms. Expose ports only when the host or outside world must connect. \ud83e\uddf0 4. Example: Multi-Container App (Spring Boot + MySQL + Nginx) \u00b6 # docker-compose.yml services : backend : build : ./backend depends_on : mysql : condition : service_healthy environment : SPRING_DATASOURCE_URL : jdbc:mysql://mysql:3306/appdb?allowPublicKeyRetrieval=true&useSSL=false SPRING_DATASOURCE_USERNAME : appuser SPRING_DATASOURCE_PASSWORD : app-pass ports : - \"8080:8080\" restart : unless-stopped mysql : image : mysql:8.4 environment : MYSQL_ROOT_PASSWORD : secret MYSQL_DATABASE : appdb MYSQL_USER : appuser MYSQL_PASSWORD : app-pass volumes : - mysql_data:/var/lib/mysql ports : - \"3306:3306\" healthcheck : test : [ \"CMD-SHELL\" , \"mysqladmin ping -h 127.0.0.1 -p$${MYSQL_ROOT_PASSWORD} || exit 1\" ] interval : 10s retries : 5 nginx : image : nginx:latest ports : - \"80:80\" depends_on : [ backend ] volumes : mysql_data : Inside this network: backend talks to DB at mysql:3306 nginx proxies to backend:8080 You access via localhost:80 \ud83c\udfd7\ufe0f Backend Dockerfile example \u00b6 FROM eclipse-temurin:21-jre WORKDIR /app COPY target/app.jar app.jar EXPOSE 8080 ENTRYPOINT [ \"java\" , \"-jar\" , \"/app/app.jar\" ] \ud83e\udde9 Application properties (Spring Boot) \u00b6 spring.datasource.url = jdbc:mysql://mysql:3306/appdb spring.datasource.username = appuser spring.datasource.password = app-pass spring.jpa.hibernate.ddl-auto = update spring.jpa.show-sql = true \ud83e\uddfc 5. Housekeeping and Troubleshooting \u00b6 Cleanups \u00b6 docker container prune # remove stopped containers docker image prune # remove dangling images docker system prune -a # full cleanup (containers, images, volumes, networks) Debugging \u00b6 docker ps -a # find exited containers docker logs <name> # read logs docker inspect <name> # metadata, IPs, mounts docker exec -it <name> bash # open shell inside container \ud83e\udde0 Advanced Concepts (for later) \u00b6 Image layers: Every Dockerfile instruction adds a cached layer \u2014 build faster by ordering instructions wisely. Isolation vs VMs: Containers share the host kernel, making them lightweight and fast to start. Security basics: Avoid running containers as root in production; use minimal base images (e.g., distroless , alpine ). BuildKit: Modern Docker build engine with parallel builds, inline caching, and secrets support ( DOCKER_BUILDKIT=1 ). \u2705 Summary \u00b6 Use systemctl to manage the Docker daemon. Use docker commands to run individual containers. Use docker-compose to run multi-container setups. Use volumes for persistence, networks for communication, and healthchecks for reliability. Start small, automate gradually, and remember: containers are processes, not magic . \ud83e\udded Further expansion (when you\u2019re ready) \u00b6 Later, you can split this file into: docker_basics.md docker_compose.md docker_networking.md docker_troubleshooting.md","title":"quick-refresher"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#docker-from-service-basics-to-multi-container-setup","text":"Docker packages software into portable, isolated containers . Each container runs a process with its own filesystem, network, and dependencies. Whether you\u2019re controlling Docker as a Linux service or orchestrating multiple apps, its real power lies in repeatability and consistency across environments.","title":"\ud83d\udc33 Docker: From Service Basics to Multi-Container Setup"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#1-controlling-docker-as-a-service-systemctl","text":"systemctl manages background services (daemons) on Linux via systemd . Docker runs as one such service \u2014 you manage it like any other system process. sudo systemctl start docker # Start Docker service sudo systemctl stop docker # Stop Docker service sudo systemctl restart docker # Restart service sudo systemctl status docker # Check status and logs sudo systemctl enable docker # Start at boot sudo systemctl disable docker # Disable auto-start systemctl list-units --type = service ```` \ud83d\udc49 In short: ` systemctl ` is the tool, ` systemd ` is the manager, and ` docker ` is the service you\u2019re controlling. --- ## \ud83e\uddf1 2. Core Docker Concepts | Concept | Description | | ---------------------- | ------------------------------------------------------------------------------------------------ | | **Image** | Blueprint for running software ( e.g., ` nginx:latest ` , ` mysql:8.4 ` ) . Immutable and versioned. | | **Container** | A running instance of an image. Ephemeral \u2014 stops and vanishes unless data is stored externally. | | **Volume** | Persistent storage outside the container lifecycle ( e.g., database data ) . | | **Port Mapping** | Bridge between host and container ( ` -p 8080 :80 ` means host:8080 \u2192 container:80 ) . | | **Dockerfile** | Script describing how to build an image. Defines base image, files, commands, and exposed ports. | | **docker-compose.yml** | Declarative config for running multiple containers together ( services, networks, volumes ) . | \ud83e\udded **Learn Docker in this order:** 1 . Run a single container ( ` docker run nginx ` ) 2 . Build your own image ( write a Dockerfile ) 3 . Persist data with volumes 4 . Connect containers with networks 5 . Orchestrate everything using Compose --- ### \ud83d\udd01 Container Lifecycle Image \u2192 Container \u2192 Process \u2192 Exit \u2192 Removed \u2191 (built from Dockerfile) A container is just a **process with boundaries** \u2014 lightweight isolation using Linux namespaces and cgroups. It\u2019s not a VM; it shares the host kernel but runs with its own view of the system. --- ## \ud83d\udd27 Quick Command Reference ```bash # Core commands docker ps # running containers docker ps -a # all containers (including stopped) docker images # list local images docker run -d -p 8080:80 nginx docker exec -it <container> bash docker logs -f <container> docker stop <container> docker rm <container> docker system prune -a # cleanup everything unused","title":"\u2699\ufe0f 1. Controlling Docker as a Service (systemctl)"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#3-container-networking-the-hallway-between-containers","text":"Each container lives in its own isolated network namespace. They can communicate when they share a Docker network . Bridge network (default): Containers can reach each other via IP, but not by name unless you define a user network. User-defined network (recommended): docker network create mynet docker run -d --name db --network mynet mysql:8.4 docker run -d --name app --network mynet myapp Now app can reach db simply at hostname db:3306 . Ports and host access: docker run -p 8080 :80 nginx Maps port 8080 on your host to port 80 inside the container. \u2705 Best practice: Use Docker networks for container-to-container comms. Expose ports only when the host or outside world must connect.","title":"\ud83d\udce6 3. Container Networking (the hallway between containers)"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#4-example-multi-container-app-spring-boot-mysql-nginx","text":"# docker-compose.yml services : backend : build : ./backend depends_on : mysql : condition : service_healthy environment : SPRING_DATASOURCE_URL : jdbc:mysql://mysql:3306/appdb?allowPublicKeyRetrieval=true&useSSL=false SPRING_DATASOURCE_USERNAME : appuser SPRING_DATASOURCE_PASSWORD : app-pass ports : - \"8080:8080\" restart : unless-stopped mysql : image : mysql:8.4 environment : MYSQL_ROOT_PASSWORD : secret MYSQL_DATABASE : appdb MYSQL_USER : appuser MYSQL_PASSWORD : app-pass volumes : - mysql_data:/var/lib/mysql ports : - \"3306:3306\" healthcheck : test : [ \"CMD-SHELL\" , \"mysqladmin ping -h 127.0.0.1 -p$${MYSQL_ROOT_PASSWORD} || exit 1\" ] interval : 10s retries : 5 nginx : image : nginx:latest ports : - \"80:80\" depends_on : [ backend ] volumes : mysql_data : Inside this network: backend talks to DB at mysql:3306 nginx proxies to backend:8080 You access via localhost:80","title":"\ud83e\uddf0 4. Example: Multi-Container App (Spring Boot + MySQL + Nginx)"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#backend-dockerfile-example","text":"FROM eclipse-temurin:21-jre WORKDIR /app COPY target/app.jar app.jar EXPOSE 8080 ENTRYPOINT [ \"java\" , \"-jar\" , \"/app/app.jar\" ]","title":"\ud83c\udfd7\ufe0f Backend Dockerfile example"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#application-properties-spring-boot","text":"spring.datasource.url = jdbc:mysql://mysql:3306/appdb spring.datasource.username = appuser spring.datasource.password = app-pass spring.jpa.hibernate.ddl-auto = update spring.jpa.show-sql = true","title":"\ud83e\udde9 Application properties (Spring Boot)"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#5-housekeeping-and-troubleshooting","text":"","title":"\ud83e\uddfc 5. Housekeeping and Troubleshooting"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#cleanups","text":"docker container prune # remove stopped containers docker image prune # remove dangling images docker system prune -a # full cleanup (containers, images, volumes, networks)","title":"Cleanups"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#debugging","text":"docker ps -a # find exited containers docker logs <name> # read logs docker inspect <name> # metadata, IPs, mounts docker exec -it <name> bash # open shell inside container","title":"Debugging"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#advanced-concepts-for-later","text":"Image layers: Every Dockerfile instruction adds a cached layer \u2014 build faster by ordering instructions wisely. Isolation vs VMs: Containers share the host kernel, making them lightweight and fast to start. Security basics: Avoid running containers as root in production; use minimal base images (e.g., distroless , alpine ). BuildKit: Modern Docker build engine with parallel builds, inline caching, and secrets support ( DOCKER_BUILDKIT=1 ).","title":"\ud83e\udde0 Advanced Concepts (for later)"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#summary","text":"Use systemctl to manage the Docker daemon. Use docker commands to run individual containers. Use docker-compose to run multi-container setups. Use volumes for persistence, networks for communication, and healthchecks for reliability. Start small, automate gradually, and remember: containers are processes, not magic .","title":"\u2705 Summary"},{"location":"cheatsheets/tools/%F0%9F%90%B3%20docker/quick-refresher/#further-expansion-when-youre-ready","text":"Later, you can split this file into: docker_basics.md docker_compose.md docker_networking.md docker_troubleshooting.md","title":"\ud83e\udded Further expansion (when you\u2019re ready)"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/","text":"\ud83e\udde0 Git: From Basics to Advanced Workflow Mastery \u00b6 Git is a distributed version control system (DVCS) \u2014 it tracks changes to files over time, lets developers collaborate, and makes every clone a complete backup of the repository. It\u2019s the tool that powers GitHub, GitLab, and most of modern software development. \u2699\ufe0f 1. What Git Actually Does \u00b6 Git records snapshots of your project (commits), not just diffs. Each commit stores the entire state of your code at that moment, compressed efficiently. You can move through history (like checkpoints in a game), branch off to experiment, and merge or rebase to integrate changes. # See history git log --oneline --graph --decorate ```` \ud83d\udc49 In short: Git is your project\u2019s **time machine + collaboration layer**. --- ## \ud83e\uddf1 2. Core Concepts | Concept | Description | | --------------------- | -------------------------------------------------------------------------------- | | **Repository ( repo ) ** | A Git-managed folder containing code and version history ( ` .git ` folder inside ) . | | **Commit** | A snapshot of your files at a moment in time. | | **Branch** | A movable pointer to a commit \u2014 allows parallel development. | | **HEAD** | Your current working branch ( where you are in history ) . | | **Staging area** | Where you prepare changes before committing. | | **Remote** | A copy of your repo hosted elsewhere ( e.g., GitHub ) . | | **Merge** | Combines histories from different branches. | | **Rebase** | Moves commits onto a new base, creating a linear history. | --- ## \u2692\ufe0f 3. The Git Workflow (mental model) Working Directory \u2192 Staging Area \u2192 Local Repository \u2192 Remote Repository 1. Edit files \u2192 `git add` 2. Save snapshot \u2192 `git commit` 3. Share/pull changes \u2192 `git push` / `git pull` --- ## \ud83d\udd27 4. Quick Command Reference ### Initialize or Clone ```bash git init # start a new repo git clone https://github.com/user/repo.git Inspect \u00b6 git status # show changed files git diff # show unstaged changes git log --oneline --graph --decorate Stage and Commit \u00b6 git add file.txt # stage file git add . # stage all changes git commit -m \"Add new feature\" # create commit Branch and Merge \u00b6 git branch # list branches git switch -c feature/login # create + switch git merge feature/login # merge into current branch git branch -d feature/login # delete local branch Sync with Remote \u00b6 git remote -v # show remotes git fetch # get new data, no merge git pull # fetch + merge current branch git push origin main # upload local commits \ud83c\udf3f 5. Branching and Collaboration Patterns \u00b6 Main workflow: main \u251c\u2500 feature/login \u251c\u2500 feature/dashboard \u2514\u2500 fix/typo Branch naming convention: feature/\u2026 , fix/\u2026 , refactor/\u2026 , release/\u2026 Recommended pattern: main \u2014 stable release branch develop \u2014 active integration branch feature/* \u2014 short-lived branches hotfix/* \u2014 emergency fixes release/* \u2014 prep for deployment \u26a1 6. Undoing and Time Travel \u00b6 git restore file.txt # discard unstaged changes git restore --staged file.txt # unstage git checkout <commit> -- file.txt # restore from old commit git reset --soft HEAD~1 # undo last commit, keep changes staged git reset --hard HEAD~1 # undo commit + changes git revert <commit> # create new commit that undoes another \ud83d\udc49 reset rewrites history; revert adds a new commit that undoes previous work safely. \ud83e\udde9 7. Working with Remotes (GitHub, etc.) \u00b6 git remote add origin https://github.com/user/repo.git git push -u origin main Next time, just: git push git pull Clone and work: git clone <url> git switch -c feature/branch Sync fork or upstream: git remote add upstream https://github.com/source/repo.git git fetch upstream git merge upstream/main \ud83e\uddf0 8. Real-World Example (Feature Workflow) \u00b6 # Start new work git switch -c feature/login # Edit code git add . git commit -m \"Implement login feature\" # Update main and rebase to stay up-to-date git fetch origin git rebase origin/main # Push branch for review git push -u origin feature/login # After merge, clean up git switch main git pull git branch -d feature/login \ud83e\uddfc 9. Maintenance and Cleanup \u00b6 git branch -vv # see tracking info git fetch -p # prune deleted remote branches git gc # clean up unnecessary files and optimize repo \ud83e\udde0 10. Common Troubleshooting \u00b6 Problem Fix Accidentally committed wrong file git reset HEAD~1 then re-commit Merge conflict Edit conflicted file \u2192 git add . \u2192 git commit Detached HEAD git switch main to reattach \u201cnon-fast-forward\u201d error on push Pull first ( git pull --rebase ) then push again Wrong commit message git commit --amend -m \"New message\" \ud83e\udde9 11. Advanced Tools (for later) \u00b6 Rebase vs Merge: Rebase keeps history linear, merge preserves branching. Cherry-pick: apply specific commits between branches. git cherry-pick <commit> * Stash: temporarily save changes. git stash git stash pop * Hooks: automate pre-commit checks and CI workflows. * Submodules: include external repos inside your repo. \u2705 Summary \u00b6 Git snapshots your code and lets you time-travel safely. Commits build your local history, remotes sync it across the team. Branches isolate work; merges and rebases integrate it. git status and git log are your best debugging friends. Never panic \u2014 you can almost always recover history in Git. \ud83e\udded Next Step Ideas \u00b6 When you outgrow this refresher: Split into git-basics.md , git-advanced.md , git-troubleshooting.md Add practical guides for branching strategies or GitHub workflows. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 git/ \u2514\u2500 quick-refresher.md \ud83d\udcbb 12. Git in Your IDE (JetBrains & VS Code) \u00b6 Git isn\u2019t just a command-line tool \u2014 every modern IDE wraps it into a visual workflow. But it helps to understand what each action actually does under the hood. \ud83e\udde9 JetBrains IDEs (IntelliJ IDEA, PyCharm, etc.) \u00b6 Action What It Actually Does Commit (Ctrl+K) Stages & commits changes locally. Equivalent to git add + git commit . Push (Ctrl+Shift+K) Uploads commits to the remote ( git push ). Update Project (Ctrl+T) Fetch + merge (or rebase, if configured). Rebase Onto Upstream Equivalent to git rebase origin/main . Keeps history clean. Show History (Alt+9 \u2192 Log tab) Visual git log + branch graph. Cherry-pick Commit Applies selected commit(s) onto your branch ( git cherry-pick ). Shelve Changes JetBrains' own version of git stash \u2014 great for quick context switches. \ud83d\udc49 Pro tip: JetBrains auto-detects Git roots. If a folder contains .git , it treats it as a repo automatically. Good workflow habit inside JetBrains: 1. Regularly commit small, meaningful chunks. 2. Rebase before pushing to keep branches fast-forwardable. 3. Always inspect your commit diff before confirming. \ud83e\udde0 VS Code Integration \u00b6 VS Code\u2019s Source Control panel is a friendly wrapper around core Git commands. Icon Action Git Equivalent \u2713 Commit git commit \u2b06\ufe0f Push git push \u2b07\ufe0f Pull git pull \ud83d\udd01 Sync Changes Pull + Push \u2295 Stage Change git add \ud83d\uddd1\ufe0f Discard Change git restore Extensions worth adding: - GitLens \u2192 deep history, blame, branch insights. - Git Graph \u2192 visual branching and merges. - GitHub Pull Requests \u2192 manage PRs directly in VS Code. \u270d\ufe0f 13. Writing Great Commit Messages \u00b6 Clear commit messages are part of professional hygiene. A Git log should read like a timeline of meaningful decisions, not noise. Format (conventional style): <type>(scope): short summary [optional body] [optional footer] Examples: feat(auth): add JWT token validation fix(api): correct null pointer on user fetch docs(readme): add setup instructions refactor(core): simplify cache layer Common types: Type Meaning feat new feature fix bug fix docs documentation change refactor code restructure without behavior change test adding or fixing tests chore maintenance or tooling changes \ud83d\udc49 A good commit message should explain why a change exists, not just what changed. \ud83e\udde9 14. Practical Git + IDE Workflow Example \u00b6 Here\u2019s how a typical developer loop looks: Start new work git switch -c feature/login (Or use JetBrains \u201cNew Branch\u201d button.) Code \u2192 test \u2192 commit Stage meaningful changes Commit with a clear message: feat(login): add session management Stay up to date git fetch origin git rebase origin/main (Or \u201cRebase onto Main\u201d in IDE.) Push for review git push -u origin feature/login (Or \u201cPush\u201d in IDE.) After PR merge git switch main git pull git branch -d feature/login (Or \u201cDelete Branch\u201d safely in IDE.) \ud83e\uddfc 15. Tips for Clean Repositories \u00b6 Keep .gitignore tight \u2014 no IDE caches or .venv/ folders. Avoid committing binaries, logs, or secrets. Use .gitattributes to manage line endings across systems. Squash small commits before merging to keep history readable: ```bash git rebase -i HEAD~5 ```` Use git tag for versioning: bash git tag -a v1.0.0 -m \"Initial release\" git push origin v1.0.0 \u2705 Final Notes \u00b6 The IDE is just a lens \u2014 Git remains the same underneath. Always review the diff before committing. Favor small, focused commits over massive all-in-one pushes. Treat your Git history as a story \u2014 future you will thank you.","title":"quick-refresher"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#git-from-basics-to-advanced-workflow-mastery","text":"Git is a distributed version control system (DVCS) \u2014 it tracks changes to files over time, lets developers collaborate, and makes every clone a complete backup of the repository. It\u2019s the tool that powers GitHub, GitLab, and most of modern software development.","title":"\ud83e\udde0 Git: From Basics to Advanced Workflow Mastery"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#1-what-git-actually-does","text":"Git records snapshots of your project (commits), not just diffs. Each commit stores the entire state of your code at that moment, compressed efficiently. You can move through history (like checkpoints in a game), branch off to experiment, and merge or rebase to integrate changes. # See history git log --oneline --graph --decorate ```` \ud83d\udc49 In short: Git is your project\u2019s **time machine + collaboration layer**. --- ## \ud83e\uddf1 2. Core Concepts | Concept | Description | | --------------------- | -------------------------------------------------------------------------------- | | **Repository ( repo ) ** | A Git-managed folder containing code and version history ( ` .git ` folder inside ) . | | **Commit** | A snapshot of your files at a moment in time. | | **Branch** | A movable pointer to a commit \u2014 allows parallel development. | | **HEAD** | Your current working branch ( where you are in history ) . | | **Staging area** | Where you prepare changes before committing. | | **Remote** | A copy of your repo hosted elsewhere ( e.g., GitHub ) . | | **Merge** | Combines histories from different branches. | | **Rebase** | Moves commits onto a new base, creating a linear history. | --- ## \u2692\ufe0f 3. The Git Workflow (mental model) Working Directory \u2192 Staging Area \u2192 Local Repository \u2192 Remote Repository 1. Edit files \u2192 `git add` 2. Save snapshot \u2192 `git commit` 3. Share/pull changes \u2192 `git push` / `git pull` --- ## \ud83d\udd27 4. Quick Command Reference ### Initialize or Clone ```bash git init # start a new repo git clone https://github.com/user/repo.git","title":"\u2699\ufe0f 1. What Git Actually Does"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#inspect","text":"git status # show changed files git diff # show unstaged changes git log --oneline --graph --decorate","title":"Inspect"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#stage-and-commit","text":"git add file.txt # stage file git add . # stage all changes git commit -m \"Add new feature\" # create commit","title":"Stage and Commit"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#branch-and-merge","text":"git branch # list branches git switch -c feature/login # create + switch git merge feature/login # merge into current branch git branch -d feature/login # delete local branch","title":"Branch and Merge"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#sync-with-remote","text":"git remote -v # show remotes git fetch # get new data, no merge git pull # fetch + merge current branch git push origin main # upload local commits","title":"Sync with Remote"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#5-branching-and-collaboration-patterns","text":"Main workflow: main \u251c\u2500 feature/login \u251c\u2500 feature/dashboard \u2514\u2500 fix/typo Branch naming convention: feature/\u2026 , fix/\u2026 , refactor/\u2026 , release/\u2026 Recommended pattern: main \u2014 stable release branch develop \u2014 active integration branch feature/* \u2014 short-lived branches hotfix/* \u2014 emergency fixes release/* \u2014 prep for deployment","title":"\ud83c\udf3f 5. Branching and Collaboration Patterns"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#6-undoing-and-time-travel","text":"git restore file.txt # discard unstaged changes git restore --staged file.txt # unstage git checkout <commit> -- file.txt # restore from old commit git reset --soft HEAD~1 # undo last commit, keep changes staged git reset --hard HEAD~1 # undo commit + changes git revert <commit> # create new commit that undoes another \ud83d\udc49 reset rewrites history; revert adds a new commit that undoes previous work safely.","title":"\u26a1 6. Undoing and Time Travel"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#7-working-with-remotes-github-etc","text":"git remote add origin https://github.com/user/repo.git git push -u origin main Next time, just: git push git pull Clone and work: git clone <url> git switch -c feature/branch Sync fork or upstream: git remote add upstream https://github.com/source/repo.git git fetch upstream git merge upstream/main","title":"\ud83e\udde9 7. Working with Remotes (GitHub, etc.)"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#8-real-world-example-feature-workflow","text":"# Start new work git switch -c feature/login # Edit code git add . git commit -m \"Implement login feature\" # Update main and rebase to stay up-to-date git fetch origin git rebase origin/main # Push branch for review git push -u origin feature/login # After merge, clean up git switch main git pull git branch -d feature/login","title":"\ud83e\uddf0 8. Real-World Example (Feature Workflow)"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#9-maintenance-and-cleanup","text":"git branch -vv # see tracking info git fetch -p # prune deleted remote branches git gc # clean up unnecessary files and optimize repo","title":"\ud83e\uddfc 9. Maintenance and Cleanup"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#10-common-troubleshooting","text":"Problem Fix Accidentally committed wrong file git reset HEAD~1 then re-commit Merge conflict Edit conflicted file \u2192 git add . \u2192 git commit Detached HEAD git switch main to reattach \u201cnon-fast-forward\u201d error on push Pull first ( git pull --rebase ) then push again Wrong commit message git commit --amend -m \"New message\"","title":"\ud83e\udde0 10. Common Troubleshooting"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#11-advanced-tools-for-later","text":"Rebase vs Merge: Rebase keeps history linear, merge preserves branching. Cherry-pick: apply specific commits between branches. git cherry-pick <commit> * Stash: temporarily save changes. git stash git stash pop * Hooks: automate pre-commit checks and CI workflows. * Submodules: include external repos inside your repo.","title":"\ud83e\udde9 11. Advanced Tools (for later)"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#summary","text":"Git snapshots your code and lets you time-travel safely. Commits build your local history, remotes sync it across the team. Branches isolate work; merges and rebases integrate it. git status and git log are your best debugging friends. Never panic \u2014 you can almost always recover history in Git.","title":"\u2705 Summary"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#next-step-ideas","text":"When you outgrow this refresher: Split into git-basics.md , git-advanced.md , git-troubleshooting.md Add practical guides for branching strategies or GitHub workflows. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 git/ \u2514\u2500 quick-refresher.md","title":"\ud83e\udded Next Step Ideas"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#12-git-in-your-ide-jetbrains-vs-code","text":"Git isn\u2019t just a command-line tool \u2014 every modern IDE wraps it into a visual workflow. But it helps to understand what each action actually does under the hood.","title":"\ud83d\udcbb 12. Git in Your IDE (JetBrains &amp; VS Code)"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#jetbrains-ides-intellij-idea-pycharm-etc","text":"Action What It Actually Does Commit (Ctrl+K) Stages & commits changes locally. Equivalent to git add + git commit . Push (Ctrl+Shift+K) Uploads commits to the remote ( git push ). Update Project (Ctrl+T) Fetch + merge (or rebase, if configured). Rebase Onto Upstream Equivalent to git rebase origin/main . Keeps history clean. Show History (Alt+9 \u2192 Log tab) Visual git log + branch graph. Cherry-pick Commit Applies selected commit(s) onto your branch ( git cherry-pick ). Shelve Changes JetBrains' own version of git stash \u2014 great for quick context switches. \ud83d\udc49 Pro tip: JetBrains auto-detects Git roots. If a folder contains .git , it treats it as a repo automatically. Good workflow habit inside JetBrains: 1. Regularly commit small, meaningful chunks. 2. Rebase before pushing to keep branches fast-forwardable. 3. Always inspect your commit diff before confirming.","title":"\ud83e\udde9 JetBrains IDEs (IntelliJ IDEA, PyCharm, etc.)"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#vs-code-integration","text":"VS Code\u2019s Source Control panel is a friendly wrapper around core Git commands. Icon Action Git Equivalent \u2713 Commit git commit \u2b06\ufe0f Push git push \u2b07\ufe0f Pull git pull \ud83d\udd01 Sync Changes Pull + Push \u2295 Stage Change git add \ud83d\uddd1\ufe0f Discard Change git restore Extensions worth adding: - GitLens \u2192 deep history, blame, branch insights. - Git Graph \u2192 visual branching and merges. - GitHub Pull Requests \u2192 manage PRs directly in VS Code.","title":"\ud83e\udde0 VS Code Integration"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#13-writing-great-commit-messages","text":"Clear commit messages are part of professional hygiene. A Git log should read like a timeline of meaningful decisions, not noise. Format (conventional style): <type>(scope): short summary [optional body] [optional footer] Examples: feat(auth): add JWT token validation fix(api): correct null pointer on user fetch docs(readme): add setup instructions refactor(core): simplify cache layer Common types: Type Meaning feat new feature fix bug fix docs documentation change refactor code restructure without behavior change test adding or fixing tests chore maintenance or tooling changes \ud83d\udc49 A good commit message should explain why a change exists, not just what changed.","title":"\u270d\ufe0f 13. Writing Great Commit Messages"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#14-practical-git-ide-workflow-example","text":"Here\u2019s how a typical developer loop looks: Start new work git switch -c feature/login (Or use JetBrains \u201cNew Branch\u201d button.) Code \u2192 test \u2192 commit Stage meaningful changes Commit with a clear message: feat(login): add session management Stay up to date git fetch origin git rebase origin/main (Or \u201cRebase onto Main\u201d in IDE.) Push for review git push -u origin feature/login (Or \u201cPush\u201d in IDE.) After PR merge git switch main git pull git branch -d feature/login (Or \u201cDelete Branch\u201d safely in IDE.)","title":"\ud83e\udde9 14. Practical Git + IDE Workflow Example"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#15-tips-for-clean-repositories","text":"Keep .gitignore tight \u2014 no IDE caches or .venv/ folders. Avoid committing binaries, logs, or secrets. Use .gitattributes to manage line endings across systems. Squash small commits before merging to keep history readable: ```bash git rebase -i HEAD~5 ```` Use git tag for versioning: bash git tag -a v1.0.0 -m \"Initial release\" git push origin v1.0.0","title":"\ud83e\uddfc 15. Tips for Clean Repositories"},{"location":"cheatsheets/tools/%F0%9F%A7%A0%20git/quick-refresher/#final-notes","text":"The IDE is just a lens \u2014 Git remains the same underneath. Always review the diff before committing. Favor small, focused commits over massive all-in-one pushes. Treat your Git history as a story \u2014 future you will thank you.","title":"\u2705 Final Notes"},{"location":"concepts/networking/http/10-index/","text":"\ud83c\udf0d Web & HTTP \u2014 Starter Guide \u00b6 \ud83e\udde9 Purpose \u00b6 This folder collects everything you need to truly understand how the web communicates and remembers \u2014 from raw HTTP to modern authentication. Each file stands alone, but reading them in order reveals the full story of how the web evolved from stateless requests to secure, identity-aware systems . \ufe0f\u20e3 Read Order \u00b6 Step File Theme Why it comes here 1. Quick Refresher HTTP fundamentals The physics of the web: requests, responses, headers, and why HTTP is stateless by design. 2. HTTP State Evolution How state was invented Explains why cookies and tokens exist at all \u2014 the journey from \u201cforgetful HTTP\u201d to \u201cauthenticated APIs.\u201d 3. Cookies Browser-native state Deep dive into cookies: how servers create them, how browsers send them, and how they keep classic sessions alive. 4. Tokens Stateless authentication Modern replacement for sessions \u2014 how APIs and mobile apps use tokens (JWT, OAuth2) to prove identity without server memory. \ud83d\udd04 Conceptual Flow \u00b6 HTTP (stateless) \u2193 Need for continuity (state) \u2193 Cookies (server remembers) \u2193 Tokens (client proves) This mirrors the real evolution of the web: from simple document delivery \u2192 to remembering users \u2192 to trustless, scalable identity systems. \ud83e\udde0 Reading Tips \u00b6 Move slow. Each file adds a layer of understanding \u2014 don\u2019t rush. Visualize the requests. Think like both the browser and the server; it makes \u201cstate\u201d click instantly. Focus on concepts before frameworks. Spring, Node, or Python are just different dialects of the same logic. Experiment with curl . Seeing headers in action (like Set-Cookie or Authorization ) cements the idea better than any paragraph. \ud83d\uddfa\ufe0f After Finishing \u00b6 You\u2019ll be able to: Explain what \u201cstateless\u201d actually means Understand cookies vs sessions vs tokens Recognize why tokens dominate modern systems Map all of this to frameworks like Spring Boot , Express , or FastAPI Next natural steps: oauth-oidc.md \u2192 how delegated auth works (Google, GitHub login) spring-security-jwt.md \u2192 how Spring implements modern token auth auth-ops-checklist.md \u2192 production hygiene: rotation, revocation, key management \ud83e\udde9 In One Sentence \u00b6 Start with HTTP \u2014 how messages work , end with tokens \u2014 how identity travels . Everything between those two explains how the web learned to remember you safely .","title":"Starter"},{"location":"concepts/networking/http/10-index/#web-http-starter-guide","text":"","title":"\ud83c\udf0d Web &amp; HTTP \u2014 Starter Guide"},{"location":"concepts/networking/http/10-index/#purpose","text":"This folder collects everything you need to truly understand how the web communicates and remembers \u2014 from raw HTTP to modern authentication. Each file stands alone, but reading them in order reveals the full story of how the web evolved from stateless requests to secure, identity-aware systems .","title":"\ud83e\udde9 Purpose"},{"location":"concepts/networking/http/10-index/#read-order","text":"Step File Theme Why it comes here 1. Quick Refresher HTTP fundamentals The physics of the web: requests, responses, headers, and why HTTP is stateless by design. 2. HTTP State Evolution How state was invented Explains why cookies and tokens exist at all \u2014 the journey from \u201cforgetful HTTP\u201d to \u201cauthenticated APIs.\u201d 3. Cookies Browser-native state Deep dive into cookies: how servers create them, how browsers send them, and how they keep classic sessions alive. 4. Tokens Stateless authentication Modern replacement for sessions \u2014 how APIs and mobile apps use tokens (JWT, OAuth2) to prove identity without server memory.","title":"\ufe0f\u20e3 Read Order"},{"location":"concepts/networking/http/10-index/#conceptual-flow","text":"HTTP (stateless) \u2193 Need for continuity (state) \u2193 Cookies (server remembers) \u2193 Tokens (client proves) This mirrors the real evolution of the web: from simple document delivery \u2192 to remembering users \u2192 to trustless, scalable identity systems.","title":"\ud83d\udd04 Conceptual Flow"},{"location":"concepts/networking/http/10-index/#reading-tips","text":"Move slow. Each file adds a layer of understanding \u2014 don\u2019t rush. Visualize the requests. Think like both the browser and the server; it makes \u201cstate\u201d click instantly. Focus on concepts before frameworks. Spring, Node, or Python are just different dialects of the same logic. Experiment with curl . Seeing headers in action (like Set-Cookie or Authorization ) cements the idea better than any paragraph.","title":"\ud83e\udde0 Reading Tips"},{"location":"concepts/networking/http/10-index/#after-finishing","text":"You\u2019ll be able to: Explain what \u201cstateless\u201d actually means Understand cookies vs sessions vs tokens Recognize why tokens dominate modern systems Map all of this to frameworks like Spring Boot , Express , or FastAPI Next natural steps: oauth-oidc.md \u2192 how delegated auth works (Google, GitHub login) spring-security-jwt.md \u2192 how Spring implements modern token auth auth-ops-checklist.md \u2192 production hygiene: rotation, revocation, key management","title":"\ud83d\uddfa\ufe0f After Finishing"},{"location":"concepts/networking/http/10-index/#in-one-sentence","text":"Start with HTTP \u2014 how messages work , end with tokens \u2014 how identity travels . Everything between those two explains how the web learned to remember you safely .","title":"\ud83e\udde9 In One Sentence"},{"location":"concepts/networking/http/20-quick-refresher/","text":"\u26a1 HTTP \u2014 Quick Refresher \u00b6 A speed-run of the web\u2019s lingua franca. Keep this handy; split it later when you outgrow it. \ud83e\udded Mental Model \u00b6 HTTP is like sending letters through a global post office: You (the client ) write a request letter with headers and maybe a body. The server reads it and replies with a response letter . Each exchange is independent \u2014 no long-term memory unless you bring cookies. That\u2019s why you often combine it with: Sessions / Tokens \u2192 to maintain identity TLS (HTTPS) \u2192 to keep the mail private Caching \u2192 to avoid sending the same letter again 1) What HTTP Is (and Isn\u2019t) \u00b6 HTTP = H yper T ext T ransfer P rotocol \u2014 rules for how a client talks to a server . Stateless : each request stands alone. Servers don\u2019t \u201cremember\u201d you unless you give them state (cookies, tokens). Text-first : start line \u2192 headers \u2192 optional body. Easy to read, easy to debug. HTTPS = HTTP over TLS for privacy + integrity. Client \u2500\u2500request\u2500\u2500> Server <\u2500response\u2500\u2500 2) The Shape of a Request \u00b6 GET /path?key=value HTTP/1.1 Host: example.com User-Agent: curl/8.0 Accept: application/json Authorization: Bearer <token> <body is optional> Key parts: Method (GET/POST/PUT/DELETE/\u2026) Target ( /path?query ) Version (HTTP/1.1 or HTTP/2/HTTP/3) Headers (metadata) Body (optional; usually with POST/PUT/PATCH) Minimal cURL \u00b6 # Simple GET curl https://example.com/api/items # GET with query + headers curl -H \"Accept: application/json\" \\ \"https://example.com/search?q=books&page=2\" # POST JSON curl -X POST -H \"Content-Type: application/json\" \\ -d '{\"title\":\"Dune\"}' https://example.com/api/books 3) The Shape of a Response \u00b6 HTTP/1.1 200 OK Content-Type: application/json Content-Length: 27 Cache-Control: max-age=3600 {\"message\":\"hello, world\"} Status line : version + status code + reason phrase Headers : metadata about the payload/caching/etc. Body : bytes (JSON, HTML, image, zip\u2026). 4) Methods (What You\u2019re Asking For) \u00b6 Method Idempotent? Has body? Typical use GET \u2705 \u274c Fetch a resource (no side-effects). HEAD \u2705 \u274c GET without body (check headers/size). POST \u274c \u2705 Create / command / non-idempotent actions. PUT \u2705 \u2705 Replace a resource entirely at the target URI. PATCH \u274c(usually) \u2705 Partial update of a resource. DELETE \u2705 (opt) Remove a resource. OPTIONS \u2705 (opt) What can I do here? Used in CORS preflights. Idempotent = same request repeated \u2192 same result on the server. 5) Status Codes (Quick Map) \u00b6 2xx \u2014 Success \u00b6 200 OK \u2014 here\u2019s your thing. 201 Created \u2014 new resource made; often returns Location . 204 No Content \u2014 success, no body (e.g., DELETE). 3xx \u2014 Redirection \u00b6 301 Moved Permanently 302 Found (temporary) 303 See Other \u2014 after POST, go GET this URL. 307/308 \u2014 redirect but don\u2019t change method/body. 4xx \u2014 Client Errors \u00b6 400 Bad Request \u2014 malformed request. 401 Unauthorized \u2014 missing/invalid auth. 403 Forbidden \u2014 authenticated but not allowed. 404 Not Found 409 Conflict \u2014 version mismatch, duplicate data. 422 Unprocessable Content \u2014 validation failed. 429 Too Many Requests \u2014 rate-limited. 5xx \u2014 Server Errors \u00b6 500 Internal Server Error 502 Bad Gateway 503 Service Unavailable 504 Gateway Timeout 6) Headers That Actually Matter (Daily Use) \u00b6 Request headers \u00b6 Host: domain name (mandatory in HTTP/1.1). Accept: formats you\u2019ll accept. Authorization: bearer token or basic credentials. Content-Type: body\u2019s media type. If-None-Match: ask only if changed (ETag). If-Modified-Since: ask only if newer than date. Response headers \u00b6 Content-Type: what\u2019s in the body. Cache-Control: caching policy. ETag: body fingerprint for change detection. Last-Modified: timestamp of resource. Vary: which headers affect caching. Set-Cookie: session or tracking data. Location: for redirects or newly created resources. 7) Caching (Speed Without Lies) \u00b6 Goal: serve from cache when safe, skip server work, save bandwidth. Freshness Cache-Control: max-age=600 \u2192 cache 10 minutes. no-store = never save; no-cache = revalidate first. Revalidation If-None-Match + ETag or If-Modified-Since + Last-Modified . Unchanged \u2192 304 Not Modified . User data Cache-Control: private, no-store 8) Content Negotiation \u00b6 Client says what it wants; server chooses best match. Example: Accept: application/json, text/html;q=0.8 Response: Content-Type: application/json 9) CORS (Cross-Origin Resource Sharing) \u00b6 Browsers block JS calls across domains by default. Server enables access with headers: Access-Control-Allow-Origin: https://yourapp.com Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS Access-Control-Allow-Headers: Content-Type, Authorization Complex requests trigger an OPTIONS preflight . 10) HTTP Versions at a Glance \u00b6 HTTP/1.1: text-based, single request per connection. HTTP/2: binary, multiplexed, header compression (HPACK). HTTP/3: runs on QUIC (UDP), faster handshakes, fewer delays. Negotiated automatically; you don\u2019t code to versions. \ud83d\ude80 Performance & Modern HTTP Practices \u00b6 Compression: Content-Encoding: gzip or br . Connection reuse: Connection: keep-alive . Streaming: chunked transfer for large payloads. CDNs: act as distributed HTTP caches. Caching layers: browser \u2192 proxy \u2192 CDN \u2192 origin. \ud83d\udd10 Security at a Glance \u00b6 Always use HTTPS \u2014 plain HTTP is obsolete. Validate input even from \u201ctrusted\u201d clients. Don\u2019t leak stack traces or system info in errors. Use secure cookie flags: SameSite=Strict; Secure; HttpOnly Defensive headers: X-Content-Type-Options: nosniff X-Frame-Options: DENY Referrer-Policy: no-referrer Content-Security-Policy: default-src 'self' 11) Debug Like You Mean It \u00b6 # Show response headers only curl -I https://example.com # Verbose curl -v https://example.com # Follow redirects curl -L https://example.com # Conditional GET curl -H 'If-None-Match: \"abc123\"' -I https://example.com/resource 12) Tiny REST API Primer \u00b6 Resources get URIs : /users/42 , /orders/77/items . Methods model intent: GET , POST , PUT , PATCH , DELETE . Status codes = communication contract. Representation is usually JSON: Content-Type: application/json Error body: structured JSON with code , message , fields . 13) Minimal \u201cMust-Know\u201d List \u00b6 Methods: GET / POST / PUT / PATCH / DELETE Codes: 200 / 201 / 204 / 301 / 304 / 400 / 401 / 403 / 404 / 409 / 422 / 429 / 500 Headers: Content-Type / Accept / Authorization / Cache-Control / ETag / Vary / Location Caching: max-age / ETag + If-None-Match / 304 14) Java & Spring Quick Hooks \u00b6 @GetMapping ( \"/books/{id}\" ) @PostMapping ( value = \"/books\" , consumes = \"application/json\" , produces = \"application/json\" ) @PutMapping ( \"/books/{id}\" ) @DeleteMapping ( \"/books/{id}\" ) return ResponseEntity . ok () . header ( \"Cache-Control\" , \"public, max-age=60\" ) . eTag ( hash ) . body ( dto ); \ud83e\udde9 Pocket Glossary \u00b6 Idempotent: redoing the same call yields the same server state. Safe: doesn\u2019t change server state (GET, HEAD). Origin: scheme + host + port combo. Payload: the body of a request or response. \ud83e\uddf1 When You Split This File Later \u00b6 Break into: http-basics.md methods.md headers.md status-codes.md caching.md security.md Keep this file as your top-level \u201cmap\u201d of HTTP knowledge.","title":"Quick Refresher"},{"location":"concepts/networking/http/20-quick-refresher/#http-quick-refresher","text":"A speed-run of the web\u2019s lingua franca. Keep this handy; split it later when you outgrow it.","title":"\u26a1 HTTP \u2014 Quick Refresher"},{"location":"concepts/networking/http/20-quick-refresher/#mental-model","text":"HTTP is like sending letters through a global post office: You (the client ) write a request letter with headers and maybe a body. The server reads it and replies with a response letter . Each exchange is independent \u2014 no long-term memory unless you bring cookies. That\u2019s why you often combine it with: Sessions / Tokens \u2192 to maintain identity TLS (HTTPS) \u2192 to keep the mail private Caching \u2192 to avoid sending the same letter again","title":"\ud83e\udded Mental Model"},{"location":"concepts/networking/http/20-quick-refresher/#1-what-http-is-and-isnt","text":"HTTP = H yper T ext T ransfer P rotocol \u2014 rules for how a client talks to a server . Stateless : each request stands alone. Servers don\u2019t \u201cremember\u201d you unless you give them state (cookies, tokens). Text-first : start line \u2192 headers \u2192 optional body. Easy to read, easy to debug. HTTPS = HTTP over TLS for privacy + integrity. Client \u2500\u2500request\u2500\u2500> Server <\u2500response\u2500\u2500","title":"1) What HTTP Is (and Isn\u2019t)"},{"location":"concepts/networking/http/20-quick-refresher/#2-the-shape-of-a-request","text":"GET /path?key=value HTTP/1.1 Host: example.com User-Agent: curl/8.0 Accept: application/json Authorization: Bearer <token> <body is optional> Key parts: Method (GET/POST/PUT/DELETE/\u2026) Target ( /path?query ) Version (HTTP/1.1 or HTTP/2/HTTP/3) Headers (metadata) Body (optional; usually with POST/PUT/PATCH)","title":"2) The Shape of a Request"},{"location":"concepts/networking/http/20-quick-refresher/#minimal-curl","text":"# Simple GET curl https://example.com/api/items # GET with query + headers curl -H \"Accept: application/json\" \\ \"https://example.com/search?q=books&page=2\" # POST JSON curl -X POST -H \"Content-Type: application/json\" \\ -d '{\"title\":\"Dune\"}' https://example.com/api/books","title":"Minimal cURL"},{"location":"concepts/networking/http/20-quick-refresher/#3-the-shape-of-a-response","text":"HTTP/1.1 200 OK Content-Type: application/json Content-Length: 27 Cache-Control: max-age=3600 {\"message\":\"hello, world\"} Status line : version + status code + reason phrase Headers : metadata about the payload/caching/etc. Body : bytes (JSON, HTML, image, zip\u2026).","title":"3) The Shape of a Response"},{"location":"concepts/networking/http/20-quick-refresher/#4-methods-what-youre-asking-for","text":"Method Idempotent? Has body? Typical use GET \u2705 \u274c Fetch a resource (no side-effects). HEAD \u2705 \u274c GET without body (check headers/size). POST \u274c \u2705 Create / command / non-idempotent actions. PUT \u2705 \u2705 Replace a resource entirely at the target URI. PATCH \u274c(usually) \u2705 Partial update of a resource. DELETE \u2705 (opt) Remove a resource. OPTIONS \u2705 (opt) What can I do here? Used in CORS preflights. Idempotent = same request repeated \u2192 same result on the server.","title":"4) Methods (What You\u2019re Asking For)"},{"location":"concepts/networking/http/20-quick-refresher/#5-status-codes-quick-map","text":"","title":"5) Status Codes (Quick Map)"},{"location":"concepts/networking/http/20-quick-refresher/#2xx-success","text":"200 OK \u2014 here\u2019s your thing. 201 Created \u2014 new resource made; often returns Location . 204 No Content \u2014 success, no body (e.g., DELETE).","title":"2xx \u2014 Success"},{"location":"concepts/networking/http/20-quick-refresher/#3xx-redirection","text":"301 Moved Permanently 302 Found (temporary) 303 See Other \u2014 after POST, go GET this URL. 307/308 \u2014 redirect but don\u2019t change method/body.","title":"3xx \u2014 Redirection"},{"location":"concepts/networking/http/20-quick-refresher/#4xx-client-errors","text":"400 Bad Request \u2014 malformed request. 401 Unauthorized \u2014 missing/invalid auth. 403 Forbidden \u2014 authenticated but not allowed. 404 Not Found 409 Conflict \u2014 version mismatch, duplicate data. 422 Unprocessable Content \u2014 validation failed. 429 Too Many Requests \u2014 rate-limited.","title":"4xx \u2014 Client Errors"},{"location":"concepts/networking/http/20-quick-refresher/#5xx-server-errors","text":"500 Internal Server Error 502 Bad Gateway 503 Service Unavailable 504 Gateway Timeout","title":"5xx \u2014 Server Errors"},{"location":"concepts/networking/http/20-quick-refresher/#6-headers-that-actually-matter-daily-use","text":"","title":"6) Headers That Actually Matter (Daily Use)"},{"location":"concepts/networking/http/20-quick-refresher/#request-headers","text":"Host: domain name (mandatory in HTTP/1.1). Accept: formats you\u2019ll accept. Authorization: bearer token or basic credentials. Content-Type: body\u2019s media type. If-None-Match: ask only if changed (ETag). If-Modified-Since: ask only if newer than date.","title":"Request headers"},{"location":"concepts/networking/http/20-quick-refresher/#response-headers","text":"Content-Type: what\u2019s in the body. Cache-Control: caching policy. ETag: body fingerprint for change detection. Last-Modified: timestamp of resource. Vary: which headers affect caching. Set-Cookie: session or tracking data. Location: for redirects or newly created resources.","title":"Response headers"},{"location":"concepts/networking/http/20-quick-refresher/#7-caching-speed-without-lies","text":"Goal: serve from cache when safe, skip server work, save bandwidth. Freshness Cache-Control: max-age=600 \u2192 cache 10 minutes. no-store = never save; no-cache = revalidate first. Revalidation If-None-Match + ETag or If-Modified-Since + Last-Modified . Unchanged \u2192 304 Not Modified . User data Cache-Control: private, no-store","title":"7) Caching (Speed Without Lies)"},{"location":"concepts/networking/http/20-quick-refresher/#8-content-negotiation","text":"Client says what it wants; server chooses best match. Example: Accept: application/json, text/html;q=0.8 Response: Content-Type: application/json","title":"8) Content Negotiation"},{"location":"concepts/networking/http/20-quick-refresher/#9-cors-cross-origin-resource-sharing","text":"Browsers block JS calls across domains by default. Server enables access with headers: Access-Control-Allow-Origin: https://yourapp.com Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS Access-Control-Allow-Headers: Content-Type, Authorization Complex requests trigger an OPTIONS preflight .","title":"9) CORS (Cross-Origin Resource Sharing)"},{"location":"concepts/networking/http/20-quick-refresher/#10-http-versions-at-a-glance","text":"HTTP/1.1: text-based, single request per connection. HTTP/2: binary, multiplexed, header compression (HPACK). HTTP/3: runs on QUIC (UDP), faster handshakes, fewer delays. Negotiated automatically; you don\u2019t code to versions.","title":"10) HTTP Versions at a Glance"},{"location":"concepts/networking/http/20-quick-refresher/#performance-modern-http-practices","text":"Compression: Content-Encoding: gzip or br . Connection reuse: Connection: keep-alive . Streaming: chunked transfer for large payloads. CDNs: act as distributed HTTP caches. Caching layers: browser \u2192 proxy \u2192 CDN \u2192 origin.","title":"\ud83d\ude80 Performance &amp; Modern HTTP Practices"},{"location":"concepts/networking/http/20-quick-refresher/#security-at-a-glance","text":"Always use HTTPS \u2014 plain HTTP is obsolete. Validate input even from \u201ctrusted\u201d clients. Don\u2019t leak stack traces or system info in errors. Use secure cookie flags: SameSite=Strict; Secure; HttpOnly Defensive headers: X-Content-Type-Options: nosniff X-Frame-Options: DENY Referrer-Policy: no-referrer Content-Security-Policy: default-src 'self'","title":"\ud83d\udd10 Security at a Glance"},{"location":"concepts/networking/http/20-quick-refresher/#11-debug-like-you-mean-it","text":"# Show response headers only curl -I https://example.com # Verbose curl -v https://example.com # Follow redirects curl -L https://example.com # Conditional GET curl -H 'If-None-Match: \"abc123\"' -I https://example.com/resource","title":"11) Debug Like You Mean It"},{"location":"concepts/networking/http/20-quick-refresher/#12-tiny-rest-api-primer","text":"Resources get URIs : /users/42 , /orders/77/items . Methods model intent: GET , POST , PUT , PATCH , DELETE . Status codes = communication contract. Representation is usually JSON: Content-Type: application/json Error body: structured JSON with code , message , fields .","title":"12) Tiny REST API Primer"},{"location":"concepts/networking/http/20-quick-refresher/#13-minimal-must-know-list","text":"Methods: GET / POST / PUT / PATCH / DELETE Codes: 200 / 201 / 204 / 301 / 304 / 400 / 401 / 403 / 404 / 409 / 422 / 429 / 500 Headers: Content-Type / Accept / Authorization / Cache-Control / ETag / Vary / Location Caching: max-age / ETag + If-None-Match / 304","title":"13) Minimal \u201cMust-Know\u201d List"},{"location":"concepts/networking/http/20-quick-refresher/#14-java-spring-quick-hooks","text":"@GetMapping ( \"/books/{id}\" ) @PostMapping ( value = \"/books\" , consumes = \"application/json\" , produces = \"application/json\" ) @PutMapping ( \"/books/{id}\" ) @DeleteMapping ( \"/books/{id}\" ) return ResponseEntity . ok () . header ( \"Cache-Control\" , \"public, max-age=60\" ) . eTag ( hash ) . body ( dto );","title":"14) Java &amp; Spring Quick Hooks"},{"location":"concepts/networking/http/20-quick-refresher/#pocket-glossary","text":"Idempotent: redoing the same call yields the same server state. Safe: doesn\u2019t change server state (GET, HEAD). Origin: scheme + host + port combo. Payload: the body of a request or response.","title":"\ud83e\udde9 Pocket Glossary"},{"location":"concepts/networking/http/20-quick-refresher/#when-you-split-this-file-later","text":"Break into: http-basics.md methods.md headers.md status-codes.md caching.md security.md Keep this file as your top-level \u201cmap\u201d of HTTP knowledge.","title":"\ud83e\uddf1 When You Split This File Later"},{"location":"concepts/networking/http/30-state-evolution/","text":"\ud83c\udf10 Web State Evolution (told through Spring\u2019s lens) \u00b6 How the web learned to remember \u2014 and how that memory evolved from cookies to tokens, from servers to clients. See also: HTTP State Reference 1) Why Web State Exists \u00b6 HTTP was designed to be stateless \u2014 every request is a blank slate. Without extra mechanisms, the server can\u2019t tell whether two requests come from the same user. To make web experiences persistent \u2014 logins, carts, dashboards \u2014 we need a state bridge between requests. That bridge has changed over time, but the problem never did. 2) Cookies \u2014 The Original Memory Hack \u00b6 A cookie is a tiny key\u2013value pair that a server asks the browser to keep and send back with future requests. Server \u2192 Set-Cookie: sessionId=abc123 Browser \u2192 Cookie: sessionId=abc123 Cookies make HTTP feel stateful, but they\u2019re just labels , not memory. The actual data lives on the server , keyed by that label: sessionId=abc123 \u2192 user=Edgaras, cart=3 items Think of it as a coat-check system: You (the browser) keep the ticket. The server keeps your coat (the session data). When you return, you hand in the ticket; the server finds your coat. If either side forgets (cookie cleared or session expired), you start fresh. 3) Why the Client Can\u2019t Be Trusted \u00b6 Cookies are stored client-side, so they can be read, changed, or deleted. That\u2019s why cookies must be protected with strict attributes: Attribute Protects Against Description HttpOnly JavaScript access JS can\u2019t read or modify it Secure Network sniffing Only sent via HTTPS SameSite CSRF attacks Controls cross-site sending Servers must never trust cookie data blindly \u2014 it\u2019s a reference, not proof. 4) The Stateful Model \u2014 Server Remembers You \u00b6 Example: Spring MVC \u00b6 Old-school web applications used server-side sessions . POST /login \u2192 Set-Cookie: JSESSIONID=xyz123 Spring stores that session internally: xyz123 \u2192 userId=42, username=\"edgaras\" Next request: GET /profile Cookie: JSESSIONID=xyz123 Spring restores your identity automatically via HttpSession . Code sketch: session . setAttribute ( \"user\" , user ); User user = ( User ) session . getAttribute ( \"user\" ); This model is stateful \u2014 the server remembers each user\u2019s state in memory or a shared store (like Redis). 5) The Stateless Model \u2014 Client Proves Itself \u00b6 Modern REST APIs abandoned server memory. Instead of \u201cthe server remembers you,\u201d we now do \u201cyou prove who you are each time.\u201d Example: Spring Boot (REST API) \u00b6 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6... The token (e.g., JWT) is: Signed by the server Self-contained (includes user info, expiration, roles) Verifiable without server memory No lookup tables. No HttpSession . Every request is independent and verifiable. This makes scaling simple \u2014 any server can validate the token. 6) Why This Change Happened \u00b6 The shift wasn\u2019t stylistic \u2014 it was infrastructural. Old model (sessions): Works for single servers. Breaks in load-balanced or cloud environments (session stickiness issues). New model (tokens): Works with multiple instances. Stateless and cache-friendly. Portable across APIs, apps, and devices. Tokens are ideal for distributed , multi-client systems. Cookies still shine in browser-native , single-origin web apps. 7) Hybrid World \u2014 Cookies Meet Tokens \u00b6 Many modern systems combine both ideas: Browser clients: store JWT in an HttpOnly cookie for security Mobile / API clients: store JWT manually and send via Authorization header Same token, different transport. Cookies are now often just the delivery vehicle for tokens. 8) Cross-Language Equivalents \u00b6 \ud83e\udde9 Java / Spring \u00b6 Old: HttpSession + JSESSIONID New: JWT / OAuth2 in Authorization header Advanced: WebFlux (reactive, stateless) \u2699\ufe0f Node.js / Express \u00b6 Old: express-session + connect-redis New: jsonwebtoken + stateless JWT validation Middleware-driven auth; typically one-liners \ud83d\udc0d Python \u00b6 Django (classic) : sessionid cookie \u2192 DB-backed session Flask : flask-session (stateful) or flask-jwt-extended (stateless) FastAPI : modern, JWT-first design \u26a1 JavaScript Frontends \u00b6 React / Vue / Angular store tokens in localStorage or cookies Send them as Authorization: Bearer ... Tokens make frontends independent from backend state Each ecosystem faces the same choice: Do we store memory on the server (stateful) or carry proof on the client (stateless)? 9) Concept Table \u2014 The Evolution in One View \u00b6 Era Approach Who Remembers You Stored Where Still Used? Example 1990s\u20132010s Sessions + Cookies Server Memory / DB \u2705 Yes Django, Spring MVC 2010s\u20132020s Tokens (JWT/OAuth2) Client Header / localStorage \u2705 Yes Spring Boot, FastAPI 2020s\u2192 Hybrid Cookies + Tokens Both Cookie-wrapped JWT \u2705 Growing SPAs, Cloud-native apps 10) Core Insight \u00b6 Cookies gave the web its first memory, but tokens gave it freedom \u2014 freedom to scale, to move between servers, to talk to any device. Spring just reflects that same journey: From JSESSIONID \u2192 to JWT \u2192 to OAuth2/OpenID Connect . The evolution wasn\u2019t just technical \u2014 it was philosophical: moving from the server knows you to you can prove who you are. 11) Practical Developer Takeaways \u00b6 Understand cookies and sessions conceptually \u2014 they\u2019re still vital for browsers. Build your APIs statelessly \u2014 each request should carry its own proof (token). Use Spring Security + JWT/OAuth2 as your modern baseline. Learn cross-language equivalents \u2014 they all rhyme with Spring\u2019s concepts. For scale: state belongs at the edge (client) , not in memory on the server. 12) In a Sentence \u00b6 Cookies made the web personal. Tokens made it planetary.","title":"State (Evolution)"},{"location":"concepts/networking/http/30-state-evolution/#web-state-evolution-told-through-springs-lens","text":"How the web learned to remember \u2014 and how that memory evolved from cookies to tokens, from servers to clients. See also: HTTP State Reference","title":"\ud83c\udf10 Web State Evolution (told through Spring\u2019s lens)"},{"location":"concepts/networking/http/30-state-evolution/#1-why-web-state-exists","text":"HTTP was designed to be stateless \u2014 every request is a blank slate. Without extra mechanisms, the server can\u2019t tell whether two requests come from the same user. To make web experiences persistent \u2014 logins, carts, dashboards \u2014 we need a state bridge between requests. That bridge has changed over time, but the problem never did.","title":"1) Why Web State Exists"},{"location":"concepts/networking/http/30-state-evolution/#2-cookies-the-original-memory-hack","text":"A cookie is a tiny key\u2013value pair that a server asks the browser to keep and send back with future requests. Server \u2192 Set-Cookie: sessionId=abc123 Browser \u2192 Cookie: sessionId=abc123 Cookies make HTTP feel stateful, but they\u2019re just labels , not memory. The actual data lives on the server , keyed by that label: sessionId=abc123 \u2192 user=Edgaras, cart=3 items Think of it as a coat-check system: You (the browser) keep the ticket. The server keeps your coat (the session data). When you return, you hand in the ticket; the server finds your coat. If either side forgets (cookie cleared or session expired), you start fresh.","title":"2) Cookies \u2014 The Original Memory Hack"},{"location":"concepts/networking/http/30-state-evolution/#3-why-the-client-cant-be-trusted","text":"Cookies are stored client-side, so they can be read, changed, or deleted. That\u2019s why cookies must be protected with strict attributes: Attribute Protects Against Description HttpOnly JavaScript access JS can\u2019t read or modify it Secure Network sniffing Only sent via HTTPS SameSite CSRF attacks Controls cross-site sending Servers must never trust cookie data blindly \u2014 it\u2019s a reference, not proof.","title":"3) Why the Client Can\u2019t Be Trusted"},{"location":"concepts/networking/http/30-state-evolution/#4-the-stateful-model-server-remembers-you","text":"","title":"4) The Stateful Model \u2014 Server Remembers You"},{"location":"concepts/networking/http/30-state-evolution/#example-spring-mvc","text":"Old-school web applications used server-side sessions . POST /login \u2192 Set-Cookie: JSESSIONID=xyz123 Spring stores that session internally: xyz123 \u2192 userId=42, username=\"edgaras\" Next request: GET /profile Cookie: JSESSIONID=xyz123 Spring restores your identity automatically via HttpSession . Code sketch: session . setAttribute ( \"user\" , user ); User user = ( User ) session . getAttribute ( \"user\" ); This model is stateful \u2014 the server remembers each user\u2019s state in memory or a shared store (like Redis).","title":"Example: Spring MVC"},{"location":"concepts/networking/http/30-state-evolution/#5-the-stateless-model-client-proves-itself","text":"Modern REST APIs abandoned server memory. Instead of \u201cthe server remembers you,\u201d we now do \u201cyou prove who you are each time.\u201d","title":"5) The Stateless Model \u2014 Client Proves Itself"},{"location":"concepts/networking/http/30-state-evolution/#example-spring-boot-rest-api","text":"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6... The token (e.g., JWT) is: Signed by the server Self-contained (includes user info, expiration, roles) Verifiable without server memory No lookup tables. No HttpSession . Every request is independent and verifiable. This makes scaling simple \u2014 any server can validate the token.","title":"Example: Spring Boot (REST API)"},{"location":"concepts/networking/http/30-state-evolution/#6-why-this-change-happened","text":"The shift wasn\u2019t stylistic \u2014 it was infrastructural. Old model (sessions): Works for single servers. Breaks in load-balanced or cloud environments (session stickiness issues). New model (tokens): Works with multiple instances. Stateless and cache-friendly. Portable across APIs, apps, and devices. Tokens are ideal for distributed , multi-client systems. Cookies still shine in browser-native , single-origin web apps.","title":"6) Why This Change Happened"},{"location":"concepts/networking/http/30-state-evolution/#7-hybrid-world-cookies-meet-tokens","text":"Many modern systems combine both ideas: Browser clients: store JWT in an HttpOnly cookie for security Mobile / API clients: store JWT manually and send via Authorization header Same token, different transport. Cookies are now often just the delivery vehicle for tokens.","title":"7) Hybrid World \u2014 Cookies Meet Tokens"},{"location":"concepts/networking/http/30-state-evolution/#8-cross-language-equivalents","text":"","title":"8) Cross-Language Equivalents"},{"location":"concepts/networking/http/30-state-evolution/#java-spring","text":"Old: HttpSession + JSESSIONID New: JWT / OAuth2 in Authorization header Advanced: WebFlux (reactive, stateless)","title":"\ud83e\udde9 Java / Spring"},{"location":"concepts/networking/http/30-state-evolution/#nodejs-express","text":"Old: express-session + connect-redis New: jsonwebtoken + stateless JWT validation Middleware-driven auth; typically one-liners","title":"\u2699\ufe0f Node.js / Express"},{"location":"concepts/networking/http/30-state-evolution/#python","text":"Django (classic) : sessionid cookie \u2192 DB-backed session Flask : flask-session (stateful) or flask-jwt-extended (stateless) FastAPI : modern, JWT-first design","title":"\ud83d\udc0d Python"},{"location":"concepts/networking/http/30-state-evolution/#javascript-frontends","text":"React / Vue / Angular store tokens in localStorage or cookies Send them as Authorization: Bearer ... Tokens make frontends independent from backend state Each ecosystem faces the same choice: Do we store memory on the server (stateful) or carry proof on the client (stateless)?","title":"\u26a1 JavaScript Frontends"},{"location":"concepts/networking/http/30-state-evolution/#9-concept-table-the-evolution-in-one-view","text":"Era Approach Who Remembers You Stored Where Still Used? Example 1990s\u20132010s Sessions + Cookies Server Memory / DB \u2705 Yes Django, Spring MVC 2010s\u20132020s Tokens (JWT/OAuth2) Client Header / localStorage \u2705 Yes Spring Boot, FastAPI 2020s\u2192 Hybrid Cookies + Tokens Both Cookie-wrapped JWT \u2705 Growing SPAs, Cloud-native apps","title":"9) Concept Table \u2014 The Evolution in One View"},{"location":"concepts/networking/http/30-state-evolution/#10-core-insight","text":"Cookies gave the web its first memory, but tokens gave it freedom \u2014 freedom to scale, to move between servers, to talk to any device. Spring just reflects that same journey: From JSESSIONID \u2192 to JWT \u2192 to OAuth2/OpenID Connect . The evolution wasn\u2019t just technical \u2014 it was philosophical: moving from the server knows you to you can prove who you are.","title":"10) Core Insight"},{"location":"concepts/networking/http/30-state-evolution/#11-practical-developer-takeaways","text":"Understand cookies and sessions conceptually \u2014 they\u2019re still vital for browsers. Build your APIs statelessly \u2014 each request should carry its own proof (token). Use Spring Security + JWT/OAuth2 as your modern baseline. Learn cross-language equivalents \u2014 they all rhyme with Spring\u2019s concepts. For scale: state belongs at the edge (client) , not in memory on the server.","title":"11) Practical Developer Takeaways"},{"location":"concepts/networking/http/30-state-evolution/#12-in-a-sentence","text":"Cookies made the web personal. Tokens made it planetary.","title":"12) In a Sentence"},{"location":"concepts/networking/http/40-cookies/","text":"\ud83c\udf6a HTTP Cookies \u2014 Quick Refresher \u00b6 Tiny text packets that let the web remember. 1) What a Cookie Is \u00b6 A cookie is a small key\u2013value pair that the server tells the browser to store. The browser automatically sends it back with every request to the same origin. Cookies exist because HTTP is stateless \u2014 servers forget who you are between requests. Cookies give the illusion of continuity. Server \u2192 Set-Cookie: sessionId=abc123; Secure; HttpOnly Browser \u2192 Cookie: sessionId=abc123 They\u2019re the oldest and most universal state mechanism in HTTP. 2) Anatomy of a Cookie \u00b6 Each cookie line looks like this: Set-Cookie: key=value; Attribute1; Attribute2=... Example \u00b6 Set-Cookie: theme=dark; Path=/; Max-Age=3600; SameSite=Lax The browser then includes it: Cookie: theme=dark 3) Where Cookies Live \u00b6 In browsers: limited (~20 per domain, 4 KB each). By origin: tied to domain + path + scheme (HTTP/HTTPS). Automatically sent: for same-origin requests, no client code needed. 4) Common Attributes and Their Meaning \u00b6 Attribute Purpose Typical Value / Example Domain Which host(s) can receive it Domain=example.com Path Restrict to subpath Path=/api Expires Absolute expiry time Expires=Wed, 16 Oct 2025 07:00:00 GMT Max-Age Relative expiry in seconds Max-Age=3600 Secure Send only via HTTPS Secure HttpOnly Hide from JavaScript HttpOnly SameSite Limit cross-site sending Strict , Lax , None 5) Lifecycle \u00b6 Server sets the cookie via Set-Cookie header. Browser stores it until it expires or user clears it. Browser sends it back in future requests matching domain/path/scheme. Server reads it from Cookie: header. To delete: Set-Cookie: sessionId=deleted; Max-Age=0 6) Session vs Persistent Cookies \u00b6 Type Description Lifetime Session cookie No Expires / Max-Age ; stored in memory Removed when browser closes Persistent cookie Has expiration Survives browser restarts Session cookies \u2192 logins Persistent cookies \u2192 \u201cremember me\u201d 7) Security Essentials \u00b6 \u2705 Always use: \u00b6 Set-Cookie: sessionId=abc123; Secure; HttpOnly; SameSite=Strict Key points \u00b6 Secure : no plaintext transmission. HttpOnly : prevents JS theft (XSS). SameSite : defends against CSRF. Don\u2019t store sensitive data directly inside cookies. Avoid overly broad domains ( Domain=.example.com shares across subdomains). 8) SameSite Explained Clearly \u00b6 Mode Behavior Use Case Strict Sent only from same site Most secure (auth cookies) Lax Sent on top-level navigations Default for browsers None Sent everywhere, even cross-site Must combine with Secure ; used for third-party integrations Example: Set-Cookie: auth=abc123; SameSite=None; Secure 9) Cookies in APIs and SPAs \u00b6 Browsers attach cookies automatically only for same-origin requests. When making cross-origin API calls, you must explicitly enable credential sharing. Client (JavaScript) \u00b6 fetch ( \"https://api.example.com/data\" , { credentials : \"include\" }); Server (API) \u00b6 Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: https://app.example.com This handshake enables cookie-based auth across origins. 9.5) Modern Alternatives \u00b6 While cookies remain the native way browsers persist state , modern systems often use other approaches \u2014 especially for APIs and mobile apps. Session Tokens \u00b6 Instead of storing a session ID in a cookie, the server issues a token (like a signed string) that the client stores manually (e.g., in localStorage ) and sends in headers such as: Authorization: Bearer <token> JWT (JSON Web Token) \u00b6 A self-contained, signed token that carries claims \u2014 user ID, roles, expiration. Used for stateless authentication \u2014 the server doesn\u2019t need to remember anything. But with power comes danger: once issued, it\u2019s valid until expiry, so revocation is harder . Server-Side Sessions \u00b6 The classic approach \u2014 store session data on the server , and just send a session ID via cookie. Simpler to invalidate, but less scalable in distributed systems. In short: Cookies are the browser-native state glue. Tokens are the API-native evolution. You\u2019ll often see both working together \u2014 cookies wrapping tokens for web clients, tokens alone for APIs and mobile apps. 10) Cookie Storage Alternatives \u00b6 LocalStorage / SessionStorage \u2014 manually managed by JS, not auto-sent. Cookies \u2014 automatic, integrated with HTTP. Use HttpOnly cookies for secrets; use storage APIs for preferences. 11) Practical Example \u2014 Login Flow \u00b6 POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure; SameSite=Strict GET /dashboard \u2192 Cookie: sessionId=abc123 Browser sends the cookie automatically; server validates the session. Logout: Set-Cookie: sessionId=; Max-Age=0 12) Debugging & Inspection \u00b6 Using cURL \u00b6 # Show cookies in response curl -I -c cookies.txt https://example.com # Send stored cookies curl -b cookies.txt https://example.com/profile In Browser \u00b6 Open DevTools \u2192 Application \u2192 Cookies to view, edit, or delete. 13) Java & Spring Example \u00b6 Setting \u00b6 ResponseCookie cookie = ResponseCookie . from ( \"sessionId\" , \"abc123\" ) . httpOnly ( true ) . secure ( true ) . sameSite ( \"Strict\" ) . path ( \"/\" ) . maxAge ( Duration . ofHours ( 1 )) . build (); return ResponseEntity . ok () . header ( HttpHeaders . SET_COOKIE , cookie . toString ()) . body ( \"ok\" ); Reading \u00b6 @CookieValue ( \"sessionId\" ) String sessionId 14) Quick Reference Table \u00b6 Purpose Header Example Set new cookie Set-Cookie Set-Cookie: user=edgaras; Max-Age=600 Send existing cookie Cookie Cookie: user=edgaras Delete cookie Set-Cookie Set-Cookie: user=; Max-Age=0 15) Mental Checklist \u00b6 Always add Secure; HttpOnly; SameSite . Keep cookies small. Avoid sensitive info inside. Delete or expire aggressively. Treat them as credentials , not just data. 16) In a Sentence \u00b6 Cookies are the quiet workhorses of the web \u2014 small, loyal, and dumb. They make a stateless protocol feel personal, but trust them only when you\u2019ve set the rules.","title":"Cookies"},{"location":"concepts/networking/http/40-cookies/#http-cookies-quick-refresher","text":"Tiny text packets that let the web remember.","title":"\ud83c\udf6a HTTP Cookies \u2014 Quick Refresher"},{"location":"concepts/networking/http/40-cookies/#1-what-a-cookie-is","text":"A cookie is a small key\u2013value pair that the server tells the browser to store. The browser automatically sends it back with every request to the same origin. Cookies exist because HTTP is stateless \u2014 servers forget who you are between requests. Cookies give the illusion of continuity. Server \u2192 Set-Cookie: sessionId=abc123; Secure; HttpOnly Browser \u2192 Cookie: sessionId=abc123 They\u2019re the oldest and most universal state mechanism in HTTP.","title":"1) What a Cookie Is"},{"location":"concepts/networking/http/40-cookies/#2-anatomy-of-a-cookie","text":"Each cookie line looks like this: Set-Cookie: key=value; Attribute1; Attribute2=...","title":"2) Anatomy of a Cookie"},{"location":"concepts/networking/http/40-cookies/#example","text":"Set-Cookie: theme=dark; Path=/; Max-Age=3600; SameSite=Lax The browser then includes it: Cookie: theme=dark","title":"Example"},{"location":"concepts/networking/http/40-cookies/#3-where-cookies-live","text":"In browsers: limited (~20 per domain, 4 KB each). By origin: tied to domain + path + scheme (HTTP/HTTPS). Automatically sent: for same-origin requests, no client code needed.","title":"3) Where Cookies Live"},{"location":"concepts/networking/http/40-cookies/#4-common-attributes-and-their-meaning","text":"Attribute Purpose Typical Value / Example Domain Which host(s) can receive it Domain=example.com Path Restrict to subpath Path=/api Expires Absolute expiry time Expires=Wed, 16 Oct 2025 07:00:00 GMT Max-Age Relative expiry in seconds Max-Age=3600 Secure Send only via HTTPS Secure HttpOnly Hide from JavaScript HttpOnly SameSite Limit cross-site sending Strict , Lax , None","title":"4) Common Attributes and Their Meaning"},{"location":"concepts/networking/http/40-cookies/#5-lifecycle","text":"Server sets the cookie via Set-Cookie header. Browser stores it until it expires or user clears it. Browser sends it back in future requests matching domain/path/scheme. Server reads it from Cookie: header. To delete: Set-Cookie: sessionId=deleted; Max-Age=0","title":"5) Lifecycle"},{"location":"concepts/networking/http/40-cookies/#6-session-vs-persistent-cookies","text":"Type Description Lifetime Session cookie No Expires / Max-Age ; stored in memory Removed when browser closes Persistent cookie Has expiration Survives browser restarts Session cookies \u2192 logins Persistent cookies \u2192 \u201cremember me\u201d","title":"6) Session vs Persistent Cookies"},{"location":"concepts/networking/http/40-cookies/#7-security-essentials","text":"","title":"7) Security Essentials"},{"location":"concepts/networking/http/40-cookies/#always-use","text":"Set-Cookie: sessionId=abc123; Secure; HttpOnly; SameSite=Strict","title":"\u2705 Always use:"},{"location":"concepts/networking/http/40-cookies/#key-points","text":"Secure : no plaintext transmission. HttpOnly : prevents JS theft (XSS). SameSite : defends against CSRF. Don\u2019t store sensitive data directly inside cookies. Avoid overly broad domains ( Domain=.example.com shares across subdomains).","title":"Key points"},{"location":"concepts/networking/http/40-cookies/#8-samesite-explained-clearly","text":"Mode Behavior Use Case Strict Sent only from same site Most secure (auth cookies) Lax Sent on top-level navigations Default for browsers None Sent everywhere, even cross-site Must combine with Secure ; used for third-party integrations Example: Set-Cookie: auth=abc123; SameSite=None; Secure","title":"8) SameSite Explained Clearly"},{"location":"concepts/networking/http/40-cookies/#9-cookies-in-apis-and-spas","text":"Browsers attach cookies automatically only for same-origin requests. When making cross-origin API calls, you must explicitly enable credential sharing.","title":"9) Cookies in APIs and SPAs"},{"location":"concepts/networking/http/40-cookies/#client-javascript","text":"fetch ( \"https://api.example.com/data\" , { credentials : \"include\" });","title":"Client (JavaScript)"},{"location":"concepts/networking/http/40-cookies/#server-api","text":"Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: https://app.example.com This handshake enables cookie-based auth across origins.","title":"Server (API)"},{"location":"concepts/networking/http/40-cookies/#95-modern-alternatives","text":"While cookies remain the native way browsers persist state , modern systems often use other approaches \u2014 especially for APIs and mobile apps.","title":"9.5) Modern Alternatives"},{"location":"concepts/networking/http/40-cookies/#session-tokens","text":"Instead of storing a session ID in a cookie, the server issues a token (like a signed string) that the client stores manually (e.g., in localStorage ) and sends in headers such as: Authorization: Bearer <token>","title":"Session Tokens"},{"location":"concepts/networking/http/40-cookies/#jwt-json-web-token","text":"A self-contained, signed token that carries claims \u2014 user ID, roles, expiration. Used for stateless authentication \u2014 the server doesn\u2019t need to remember anything. But with power comes danger: once issued, it\u2019s valid until expiry, so revocation is harder .","title":"JWT (JSON Web Token)"},{"location":"concepts/networking/http/40-cookies/#server-side-sessions","text":"The classic approach \u2014 store session data on the server , and just send a session ID via cookie. Simpler to invalidate, but less scalable in distributed systems. In short: Cookies are the browser-native state glue. Tokens are the API-native evolution. You\u2019ll often see both working together \u2014 cookies wrapping tokens for web clients, tokens alone for APIs and mobile apps.","title":"Server-Side Sessions"},{"location":"concepts/networking/http/40-cookies/#10-cookie-storage-alternatives","text":"LocalStorage / SessionStorage \u2014 manually managed by JS, not auto-sent. Cookies \u2014 automatic, integrated with HTTP. Use HttpOnly cookies for secrets; use storage APIs for preferences.","title":"10) Cookie Storage Alternatives"},{"location":"concepts/networking/http/40-cookies/#11-practical-example-login-flow","text":"POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure; SameSite=Strict GET /dashboard \u2192 Cookie: sessionId=abc123 Browser sends the cookie automatically; server validates the session. Logout: Set-Cookie: sessionId=; Max-Age=0","title":"11) Practical Example \u2014 Login Flow"},{"location":"concepts/networking/http/40-cookies/#12-debugging-inspection","text":"","title":"12) Debugging &amp; Inspection"},{"location":"concepts/networking/http/40-cookies/#using-curl","text":"# Show cookies in response curl -I -c cookies.txt https://example.com # Send stored cookies curl -b cookies.txt https://example.com/profile","title":"Using cURL"},{"location":"concepts/networking/http/40-cookies/#in-browser","text":"Open DevTools \u2192 Application \u2192 Cookies to view, edit, or delete.","title":"In Browser"},{"location":"concepts/networking/http/40-cookies/#13-java-spring-example","text":"","title":"13) Java &amp; Spring Example"},{"location":"concepts/networking/http/40-cookies/#setting","text":"ResponseCookie cookie = ResponseCookie . from ( \"sessionId\" , \"abc123\" ) . httpOnly ( true ) . secure ( true ) . sameSite ( \"Strict\" ) . path ( \"/\" ) . maxAge ( Duration . ofHours ( 1 )) . build (); return ResponseEntity . ok () . header ( HttpHeaders . SET_COOKIE , cookie . toString ()) . body ( \"ok\" );","title":"Setting"},{"location":"concepts/networking/http/40-cookies/#reading","text":"@CookieValue ( \"sessionId\" ) String sessionId","title":"Reading"},{"location":"concepts/networking/http/40-cookies/#14-quick-reference-table","text":"Purpose Header Example Set new cookie Set-Cookie Set-Cookie: user=edgaras; Max-Age=600 Send existing cookie Cookie Cookie: user=edgaras Delete cookie Set-Cookie Set-Cookie: user=; Max-Age=0","title":"14) Quick Reference Table"},{"location":"concepts/networking/http/40-cookies/#15-mental-checklist","text":"Always add Secure; HttpOnly; SameSite . Keep cookies small. Avoid sensitive info inside. Delete or expire aggressively. Treat them as credentials , not just data.","title":"15) Mental Checklist"},{"location":"concepts/networking/http/40-cookies/#16-in-a-sentence","text":"Cookies are the quiet workhorses of the web \u2014 small, loyal, and dumb. They make a stateless protocol feel personal, but trust them only when you\u2019ve set the rules.","title":"16) In a Sentence"},{"location":"concepts/networking/http/50-tokens/","text":"\ud83e\udde0 Understanding Tokens and Statelessness \u00b6 What a Token Really Is \u00b6 A token is proof of identity and permission , not history. It tells the server who you are and what you\u2019re allowed to do \u2014 nothing more. When you send a request with a token: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6... the server verifies it and uses the claims inside to decide whether you\u2019re authorized. The server doesn\u2019t \u201cremember\u201d you \u2014 it just trusts the math behind the token\u2019s signature. What \u201cStateless\u201d Really Means \u00b6 In old, stateful models (cookies + sessions), the server remembered everything: sessionId=abc123 \u2192 user=Edgaras, cart=3 items, lastPage=/checkout Each request depended on the previous one. That\u2019s stateful \u2014 continuity stored in memory on the server. In a stateless model (tokens): Each request is independent. The server doesn\u2019t hold user memory between requests. If it needs context (cart, settings, history), it queries the database . So \u201cstateless\u201d \u2260 \u201cno persistence.\u201d It means \u201cno in-memory conversation\u201d \u2014 every request brings everything needed to complete itself. What\u2019s Inside a Token \u00b6 Tokens carry only essential data (claims): { \"sub\" : \"42\" , // who you are \"role\" : \"USER\" , // what you can do \"scope\" : \"read:books\" , \"exp\" : 1739678400 // when it expires } The server reads this info, verifies the signature, and makes decisions \u2014 without ever having to recall your previous state. How the Server Sees It \u00b6 Each request is a self-contained event: Receive the token. Verify its signature (check it\u2019s not forged). Validate expiry and audience. Use claims to authorize actions. Fetch any needed data from persistent storage. After responding, it forgets \u2014 no ongoing memory, no session list. Permissions vs. History \u00b6 Tokens don\u2019t store your personal history. They store your authority \u2014 your access rights. Think of it like an access badge : The badge shows your name, department, and which doors you can open. The guard doesn\u2019t know what meetings you had yesterday. If your permissions change, you get a new badge. That\u2019s how modern auth works. Where \u201cState\u201d Actually Lives \u00b6 All lasting data (orders, messages, progress, preferences) is stored in the database , linked to your user ID. When you send a token, the server uses that ID to look up your data as needed. So the real state lives in persistent storage \u2014 not in the session or the token. Core Summary \u00b6 Concept Meaning Token Digital proof of identity and permission Stateless Each request stands alone \u2014 no server memory between them State Stored in the database, not in RAM Cookies Used for stateful sessions (server remembers you) Tokens Used for stateless APIs (you prove yourself each time) Analogy \u00b6 Model Analogy Who Keeps Memory Cookies / Sessions You get a coat-check ticket; the server keeps your coat Server Tokens You carry a signed passport; the server just checks its seal Client In a Sentence \u00b6 Cookies make the web remember you. Tokens make the web verify you. \u2753 Key Q&A \u00b6 1\ufe0f\u20e3 What the token actually does \u00b6 A token doesn\u2019t carry your personal history . It carries proof of identity and permission \u2014 that\u2019s it. When you send it, the server checks: \u201cIs this token valid, and what does it allow this user to do?\u201d It\u2019s like flashing an ID badge to get into a building: The guard (server) doesn\u2019t remember your previous visits. The badge (token) simply proves you\u2019re allowed to be there, maybe with access to certain floors (permissions). So yes \u2014 a token just proves who you are and what you can do . 2\ufe0f\u20e3 What happens to \u201cstate\u201d \u00b6 That\u2019s the stateless part: the server does not keep per-user memory between requests. In a stateful model (like old cookie sessions): The server had a table: sessionId=abc123 \u2192 user=Edgaras, cart=3 items, lastPage=/checkout It used that for context in later requests. In a stateless model (tokens): The server doesn\u2019t keep that table. Each request stands alone: the server authenticates, authorizes, and processes it from scratch using info inside (or derived from) the token. If the server needs extra data \u2014 for example, your shopping cart \u2014 it looks it up from the database , not from memory tied to a session. That\u2019s what \u201cstateless\u201d really means: No in-memory user context between requests. Every request carries all it needs. 3\ufe0f\u20e3 What\u2019s inside the token, then? \u00b6 Usually minimal facts: { \"sub\" : \"42\" , \"role\" : \"USER\" , \"scope\" : \"read:books\" , \"exp\" : 1739678400 } sub \u2192 who you are role / scope \u2192 what you can do exp \u2192 when this proof expires So the token doesn\u2019t tell your story , it tells your authority . 4\ufe0f\u20e3 How the server uses it \u00b6 When you send a request with your token: Server verifies its signature \u2192 confirms it wasn\u2019t forged. Checks expiration . Reads claims ( sub , role , scope ). Uses that info to decide: Can this user access /api/orders/42 ? Is this admin-only? What data should they see? Then the app logic handles whatever you asked \u2014 e.g., reading your orders \u2014 using the user ID from the token to query the database. 5\ufe0f\u20e3 Does the server need history? \u00b6 Not usually. In modern designs, state lives in the database , not the session. If it needs to remember your past actions \u2014 orders, cart, last login \u2014 that\u2019s persisted in the DB keyed by your user ID, not kept in RAM between requests. So \u201cstateless\u201d doesn\u2019t mean \u201cno persistence.\u201d It means \u201cno transient memory that ties one HTTP request to the next.\u201d 6\ufe0f\u20e3 Permissions \u2014 what the token \u201cgrants\u201d \u00b6 When an auth system issues a token, it embeds what that token allows . Those are your scopes or roles . Examples: \"scope\" : \"read:orders write:profile\" That\u2019s like saying: \u201cThis badge lets you read orders and update your profile, but not delete users.\u201d The backend checks these scopes to enforce access control. If you later change a user\u2019s permissions, future tokens will reflect that \u2014 but old tokens will keep old scopes until they expire. 7\ufe0f\u20e3 So in summary: \u00b6 Token = identity + permissions , not history. Server = verifier , not rememberer. State (like data or progress) lives in the database , not the session. Stateless means each request can stand alone \u2014 validated and processed without prior context. Scopes/roles inside the token define what you can touch.","title":"Tokens"},{"location":"concepts/networking/http/50-tokens/#understanding-tokens-and-statelessness","text":"","title":"\ud83e\udde0 Understanding Tokens and Statelessness"},{"location":"concepts/networking/http/50-tokens/#what-a-token-really-is","text":"A token is proof of identity and permission , not history. It tells the server who you are and what you\u2019re allowed to do \u2014 nothing more. When you send a request with a token: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6... the server verifies it and uses the claims inside to decide whether you\u2019re authorized. The server doesn\u2019t \u201cremember\u201d you \u2014 it just trusts the math behind the token\u2019s signature.","title":"What a Token Really Is"},{"location":"concepts/networking/http/50-tokens/#what-stateless-really-means","text":"In old, stateful models (cookies + sessions), the server remembered everything: sessionId=abc123 \u2192 user=Edgaras, cart=3 items, lastPage=/checkout Each request depended on the previous one. That\u2019s stateful \u2014 continuity stored in memory on the server. In a stateless model (tokens): Each request is independent. The server doesn\u2019t hold user memory between requests. If it needs context (cart, settings, history), it queries the database . So \u201cstateless\u201d \u2260 \u201cno persistence.\u201d It means \u201cno in-memory conversation\u201d \u2014 every request brings everything needed to complete itself.","title":"What \u201cStateless\u201d Really Means"},{"location":"concepts/networking/http/50-tokens/#whats-inside-a-token","text":"Tokens carry only essential data (claims): { \"sub\" : \"42\" , // who you are \"role\" : \"USER\" , // what you can do \"scope\" : \"read:books\" , \"exp\" : 1739678400 // when it expires } The server reads this info, verifies the signature, and makes decisions \u2014 without ever having to recall your previous state.","title":"What\u2019s Inside a Token"},{"location":"concepts/networking/http/50-tokens/#how-the-server-sees-it","text":"Each request is a self-contained event: Receive the token. Verify its signature (check it\u2019s not forged). Validate expiry and audience. Use claims to authorize actions. Fetch any needed data from persistent storage. After responding, it forgets \u2014 no ongoing memory, no session list.","title":"How the Server Sees It"},{"location":"concepts/networking/http/50-tokens/#permissions-vs-history","text":"Tokens don\u2019t store your personal history. They store your authority \u2014 your access rights. Think of it like an access badge : The badge shows your name, department, and which doors you can open. The guard doesn\u2019t know what meetings you had yesterday. If your permissions change, you get a new badge. That\u2019s how modern auth works.","title":"Permissions vs. History"},{"location":"concepts/networking/http/50-tokens/#where-state-actually-lives","text":"All lasting data (orders, messages, progress, preferences) is stored in the database , linked to your user ID. When you send a token, the server uses that ID to look up your data as needed. So the real state lives in persistent storage \u2014 not in the session or the token.","title":"Where \u201cState\u201d Actually Lives"},{"location":"concepts/networking/http/50-tokens/#core-summary","text":"Concept Meaning Token Digital proof of identity and permission Stateless Each request stands alone \u2014 no server memory between them State Stored in the database, not in RAM Cookies Used for stateful sessions (server remembers you) Tokens Used for stateless APIs (you prove yourself each time)","title":"Core Summary"},{"location":"concepts/networking/http/50-tokens/#analogy","text":"Model Analogy Who Keeps Memory Cookies / Sessions You get a coat-check ticket; the server keeps your coat Server Tokens You carry a signed passport; the server just checks its seal Client","title":"Analogy"},{"location":"concepts/networking/http/50-tokens/#in-a-sentence","text":"Cookies make the web remember you. Tokens make the web verify you.","title":"In a Sentence"},{"location":"concepts/networking/http/50-tokens/#key-qa","text":"","title":"\u2753 Key Q&amp;A"},{"location":"concepts/networking/http/50-tokens/#1-what-the-token-actually-does","text":"A token doesn\u2019t carry your personal history . It carries proof of identity and permission \u2014 that\u2019s it. When you send it, the server checks: \u201cIs this token valid, and what does it allow this user to do?\u201d It\u2019s like flashing an ID badge to get into a building: The guard (server) doesn\u2019t remember your previous visits. The badge (token) simply proves you\u2019re allowed to be there, maybe with access to certain floors (permissions). So yes \u2014 a token just proves who you are and what you can do .","title":"1\ufe0f\u20e3 What the token actually does"},{"location":"concepts/networking/http/50-tokens/#2-what-happens-to-state","text":"That\u2019s the stateless part: the server does not keep per-user memory between requests. In a stateful model (like old cookie sessions): The server had a table: sessionId=abc123 \u2192 user=Edgaras, cart=3 items, lastPage=/checkout It used that for context in later requests. In a stateless model (tokens): The server doesn\u2019t keep that table. Each request stands alone: the server authenticates, authorizes, and processes it from scratch using info inside (or derived from) the token. If the server needs extra data \u2014 for example, your shopping cart \u2014 it looks it up from the database , not from memory tied to a session. That\u2019s what \u201cstateless\u201d really means: No in-memory user context between requests. Every request carries all it needs.","title":"2\ufe0f\u20e3 What happens to \u201cstate\u201d"},{"location":"concepts/networking/http/50-tokens/#3-whats-inside-the-token-then","text":"Usually minimal facts: { \"sub\" : \"42\" , \"role\" : \"USER\" , \"scope\" : \"read:books\" , \"exp\" : 1739678400 } sub \u2192 who you are role / scope \u2192 what you can do exp \u2192 when this proof expires So the token doesn\u2019t tell your story , it tells your authority .","title":"3\ufe0f\u20e3 What\u2019s inside the token, then?"},{"location":"concepts/networking/http/50-tokens/#4-how-the-server-uses-it","text":"When you send a request with your token: Server verifies its signature \u2192 confirms it wasn\u2019t forged. Checks expiration . Reads claims ( sub , role , scope ). Uses that info to decide: Can this user access /api/orders/42 ? Is this admin-only? What data should they see? Then the app logic handles whatever you asked \u2014 e.g., reading your orders \u2014 using the user ID from the token to query the database.","title":"4\ufe0f\u20e3 How the server uses it"},{"location":"concepts/networking/http/50-tokens/#5-does-the-server-need-history","text":"Not usually. In modern designs, state lives in the database , not the session. If it needs to remember your past actions \u2014 orders, cart, last login \u2014 that\u2019s persisted in the DB keyed by your user ID, not kept in RAM between requests. So \u201cstateless\u201d doesn\u2019t mean \u201cno persistence.\u201d It means \u201cno transient memory that ties one HTTP request to the next.\u201d","title":"5\ufe0f\u20e3 Does the server need history?"},{"location":"concepts/networking/http/50-tokens/#6-permissions-what-the-token-grants","text":"When an auth system issues a token, it embeds what that token allows . Those are your scopes or roles . Examples: \"scope\" : \"read:orders write:profile\" That\u2019s like saying: \u201cThis badge lets you read orders and update your profile, but not delete users.\u201d The backend checks these scopes to enforce access control. If you later change a user\u2019s permissions, future tokens will reflect that \u2014 but old tokens will keep old scopes until they expire.","title":"6\ufe0f\u20e3 Permissions \u2014 what the token \u201cgrants\u201d"},{"location":"concepts/networking/http/50-tokens/#7-so-in-summary","text":"Token = identity + permissions , not history. Server = verifier , not rememberer. State (like data or progress) lives in the database , not the session. Stateless means each request can stand alone \u2014 validated and processed without prior context. Scopes/roles inside the token define what you can touch.","title":"7\ufe0f\u20e3 So in summary:"},{"location":"learning/backend/spring-roadmap/","text":"\ud83e\udded SPRING ROADMAP \u2014 2025 Backend Path \u00b6 LEVEL 1: Solid Ground \u2014 Core Spring Boot Developer \u00b6 This is your foundation \u2014 everything else rests on it. Core Goals: Understand how a Spring Boot app is structured Build simple REST APIs returning JSON Handle dependency injection, profiles, and configuration Focus Topics: @SpringBootApplication , @RestController , @Service , @Repository application.yml vs application.properties @Value , @ConfigurationProperties JSON serialization ( Jackson ) HTTP status codes and responses Mini project idea: A \u201cBook Tracker\u201d REST API \u2014 CRUD endpoints for books + authors. LEVEL 2: Persistence & Data Layer Mastery \u00b6 Real backends talk to databases. Learn to do it cleanly. Focus Topics: Spring Data JPA + Hibernate Entity relationships ( @OneToMany , @ManyToOne , etc.) Pagination, sorting, and query methods Transactions ( @Transactional ) Database migrations with Flyway or Liquibase Mini project idea: Extend the Book Tracker with persistent storage (PostgreSQL), add audit fields (createdAt, updatedAt). LEVEL 3: Authentication & Security \u00b6 This is where you step into real API work. Focus Topics: Spring Security basics ( Authentication , Authorization ) JWT authentication (stateless) Role-based access control (RBAC) Password hashing (BCrypt) CORS and secure API design Mini project idea: Add login/register endpoints to your API with JWT-based authentication. Users can view their own books only. LEVEL 4: Architecture & Robustness \u00b6 At this stage, you shift from \u201cit works\u201d \u2192 \u201cit scales and survives.\u201d Focus Topics: Exception handling ( @ControllerAdvice , @ExceptionHandler ) Validation ( @Valid , @NotBlank , etc.) Logging (SLF4J, Logback) Profiles for environments (dev, prod) Testing (JUnit 5 + MockMvc) Configuration management (Spring Profiles, Environment) Mini project idea: Introduce custom exceptions and global error handling to your existing app. LEVEL 5: Modern Edge \u2014 APIs, Tokens & Integration \u00b6 This is where you start to meet real-world distributed systems . Focus Topics: OAuth2 / OpenID Connect (login with Google, GitHub, etc.) Token refresh & revocation REST best practices (HATEOAS, pagination links) Consuming 3rd-party APIs ( RestTemplate , WebClient ) API versioning, rate limiting Mini project idea: Create an API gateway or a public-facing API that integrates with another service (like OpenWeather API) while authenticating via JWT. LEVEL 6: DevOps-Aware Developer \u00b6 You don\u2019t need to be a DevOps engineer \u2014 but you must deploy confidently . Focus Topics: Dockerize your Spring app Environment variables and configuration CI/CD pipelines (GitHub Actions, GitLab CI) Basic cloud deployment (Render, Railway, AWS EC2, or GCP) Metrics & health checks ( /actuator ) Mini project idea: Dockerize your Book Tracker, deploy it on a free-tier cloud with a PostgreSQL database. LEVEL 7: Professional Edge \u2014 Going Beyond \u00b6 Now you\u2019re playing in the upper tier \u2014 not \u201ca Java developer,\u201d but a backend engineer . Optional but valuable expansions: Spring WebFlux (Reactive) \u2014 async, event-driven APIs Spring Cloud \u2014 microservices, discovery, config server, circuit breakers Kotlin + Spring Boot \u2014 cleaner syntax, rising popularity in Europe Redis \u2014 caching and session storage GraphQL with Spring \u2014 alternative to REST Testing excellence \u2014 Testcontainers, integration tests, contract testing \ud83e\udde9 Complementary Non-Spring Skills \u00b6 To make you complete in the eyes of recruiters and teams: Git + GitHub fluency (branches, pull requests, merges) Docker basics SQL proficiency (joins, indexes, normalization) API documentation (OpenAPI/Swagger) Basic cloud understanding (how to deploy, monitor, scale) System design mindset (how components talk to each other) \ud83d\udee0 Recommended Stack to Master Together \u00b6 Here\u2019s the most employable combination right now in Europe: Java 17+ Spring Boot 3.x Spring Security + JWT/OAuth2 Spring Data JPA + PostgreSQL Lombok + MapStruct (productivity) Maven or Gradle Docker Git + CI/CD \ud83e\udde0 Strategy \u00b6 First, solidify Spring Boot + REST + JPA + Security \u2014 these four are the \u201ccore muscle.\u201d Then branch into either: Reactive & Microservices (if you love architecture challenges) Cloud & Deployment (if you love full ownership) Kotlin + APIs (if you want cleaner syntax and a European edge \u2014 Kotlin\u2019s huge in Nordics & Baltics)","title":"Spring roadmap"},{"location":"learning/backend/spring-roadmap/#spring-roadmap-2025-backend-path","text":"","title":"\ud83e\udded SPRING ROADMAP \u2014 2025 Backend Path"},{"location":"learning/backend/spring-roadmap/#level-1-solid-ground-core-spring-boot-developer","text":"This is your foundation \u2014 everything else rests on it. Core Goals: Understand how a Spring Boot app is structured Build simple REST APIs returning JSON Handle dependency injection, profiles, and configuration Focus Topics: @SpringBootApplication , @RestController , @Service , @Repository application.yml vs application.properties @Value , @ConfigurationProperties JSON serialization ( Jackson ) HTTP status codes and responses Mini project idea: A \u201cBook Tracker\u201d REST API \u2014 CRUD endpoints for books + authors.","title":"LEVEL 1: Solid Ground \u2014 Core Spring Boot Developer"},{"location":"learning/backend/spring-roadmap/#level-2-persistence-data-layer-mastery","text":"Real backends talk to databases. Learn to do it cleanly. Focus Topics: Spring Data JPA + Hibernate Entity relationships ( @OneToMany , @ManyToOne , etc.) Pagination, sorting, and query methods Transactions ( @Transactional ) Database migrations with Flyway or Liquibase Mini project idea: Extend the Book Tracker with persistent storage (PostgreSQL), add audit fields (createdAt, updatedAt).","title":"LEVEL 2: Persistence &amp; Data Layer Mastery"},{"location":"learning/backend/spring-roadmap/#level-3-authentication-security","text":"This is where you step into real API work. Focus Topics: Spring Security basics ( Authentication , Authorization ) JWT authentication (stateless) Role-based access control (RBAC) Password hashing (BCrypt) CORS and secure API design Mini project idea: Add login/register endpoints to your API with JWT-based authentication. Users can view their own books only.","title":"LEVEL 3: Authentication &amp; Security"},{"location":"learning/backend/spring-roadmap/#level-4-architecture-robustness","text":"At this stage, you shift from \u201cit works\u201d \u2192 \u201cit scales and survives.\u201d Focus Topics: Exception handling ( @ControllerAdvice , @ExceptionHandler ) Validation ( @Valid , @NotBlank , etc.) Logging (SLF4J, Logback) Profiles for environments (dev, prod) Testing (JUnit 5 + MockMvc) Configuration management (Spring Profiles, Environment) Mini project idea: Introduce custom exceptions and global error handling to your existing app.","title":"LEVEL 4: Architecture &amp; Robustness"},{"location":"learning/backend/spring-roadmap/#level-5-modern-edge-apis-tokens-integration","text":"This is where you start to meet real-world distributed systems . Focus Topics: OAuth2 / OpenID Connect (login with Google, GitHub, etc.) Token refresh & revocation REST best practices (HATEOAS, pagination links) Consuming 3rd-party APIs ( RestTemplate , WebClient ) API versioning, rate limiting Mini project idea: Create an API gateway or a public-facing API that integrates with another service (like OpenWeather API) while authenticating via JWT.","title":"LEVEL 5: Modern Edge \u2014 APIs, Tokens &amp; Integration"},{"location":"learning/backend/spring-roadmap/#level-6-devops-aware-developer","text":"You don\u2019t need to be a DevOps engineer \u2014 but you must deploy confidently . Focus Topics: Dockerize your Spring app Environment variables and configuration CI/CD pipelines (GitHub Actions, GitLab CI) Basic cloud deployment (Render, Railway, AWS EC2, or GCP) Metrics & health checks ( /actuator ) Mini project idea: Dockerize your Book Tracker, deploy it on a free-tier cloud with a PostgreSQL database.","title":"LEVEL 6: DevOps-Aware Developer"},{"location":"learning/backend/spring-roadmap/#level-7-professional-edge-going-beyond","text":"Now you\u2019re playing in the upper tier \u2014 not \u201ca Java developer,\u201d but a backend engineer . Optional but valuable expansions: Spring WebFlux (Reactive) \u2014 async, event-driven APIs Spring Cloud \u2014 microservices, discovery, config server, circuit breakers Kotlin + Spring Boot \u2014 cleaner syntax, rising popularity in Europe Redis \u2014 caching and session storage GraphQL with Spring \u2014 alternative to REST Testing excellence \u2014 Testcontainers, integration tests, contract testing","title":"LEVEL 7: Professional Edge \u2014 Going Beyond"},{"location":"learning/backend/spring-roadmap/#complementary-non-spring-skills","text":"To make you complete in the eyes of recruiters and teams: Git + GitHub fluency (branches, pull requests, merges) Docker basics SQL proficiency (joins, indexes, normalization) API documentation (OpenAPI/Swagger) Basic cloud understanding (how to deploy, monitor, scale) System design mindset (how components talk to each other)","title":"\ud83e\udde9 Complementary Non-Spring Skills"},{"location":"learning/backend/spring-roadmap/#recommended-stack-to-master-together","text":"Here\u2019s the most employable combination right now in Europe: Java 17+ Spring Boot 3.x Spring Security + JWT/OAuth2 Spring Data JPA + PostgreSQL Lombok + MapStruct (productivity) Maven or Gradle Docker Git + CI/CD","title":"\ud83d\udee0 Recommended Stack to Master Together"},{"location":"learning/backend/spring-roadmap/#strategy","text":"First, solidify Spring Boot + REST + JPA + Security \u2014 these four are the \u201ccore muscle.\u201d Then branch into either: Reactive & Microservices (if you love architecture challenges) Cloud & Deployment (if you love full ownership) Kotlin + APIs (if you want cleaner syntax and a European edge \u2014 Kotlin\u2019s huge in Nordics & Baltics)","title":"\ud83e\udde0 Strategy"},{"location":"meta/structure-notes/","text":"\ud83e\udde9 Structure Notes \u2014 Cheatsheets Organization \u00b6 Topic: How to handle the growth of the tools/ section in cheatsheets. Current Approach \u00b6 The tools/ folder starts flat \u2014 everything goes here: git.md , docker.md , nginx.md , obsidian-mkdocs-setup.md , etc. At this stage, the goal is speed and clarity , not perfect hierarchy. Don\u2019t overthink categories too early. cheatsheets/ \u2514\u2500 tools/ \u251c\u2500 git.md \u251c\u2500 docker.md \u251c\u2500 nginx.md \u251c\u2500 obsidian-mkdocs-setup.md Planned Evolution \u00b6 As the collection grows and themes start to emerge (e.g., multiple networking or DevOps tools), split tools/ into domain-based subfolders : cheatsheets/ \u2514\u2500 tools/ \u251c\u2500 devops/ \u2502 \u251c\u2500 docker.md \u2502 \u251c\u2500 ansible.md \u2502 \u2514\u2500 kubernetes.md \u251c\u2500 system/ \u2502 \u251c\u2500 systemd.md \u2502 \u251c\u2500 cron.md \u2502 \u2514\u2500 journalctl.md \u251c\u2500 networking/ \u2502 \u251c\u2500 nginx.md \u2502 \u2514\u2500 certbot.md \u2514\u2500 productivity/ \u251c\u2500 git.md \u251c\u2500 mkdocs.md \u2514\u2500 obsidian.md Guiding Principles \u00b6 Start flat, grow organically. Don\u2019t create folders for one file. When 3+ tools cluster by domain , introduce a subfolder. Cheatsheets are how to use a thing. Concepts are why the thing works that way. The goal isn\u2019t a perfect taxonomy \u2014 it\u2019s a navigable map of thought that evolves with experience. Notes \u00b6 This convention prevents early complexity while ensuring long-term scalability. It reflects the \u201cknowledge-vault\u201d philosophy: build what you need today, structure it when it starts to breathe. Here\u2019s a matching note for your Concepts section, written in the same tone and structure as your Structure Notes \u2014 Cheatsheets Organization one: \ud83e\udde0 Structure Notes \u2014 Concepts Organization \u00b6 Topic: How to handle the growth and structure of the concepts/ section. Current Approach \u00b6 The concepts/ folder starts flat \u2014 every new idea or explanation goes here directly: http.md , tcp-ip.md , oop.md , rest-vs-graphql.md , etc. At the beginning, the goal is clarity and speed of capture. Don\u2019t pre-plan categories before ideas have weight. concepts/ \u251c\u2500 http.md \u251c\u2500 tcp-ip.md \u251c\u2500 oop.md \u2514\u2500 rest-vs-graphql.md Planned Evolution \u00b6 As understanding deepens and related topics multiply, group them into domain-based subfolders . concepts/ \u251c\u2500 networking/ \u2502 \u251c\u2500 http/ \u2502 \u2502 \u251c\u2500 http-basics.md \u2502 \u2502 \u251c\u2500 headers.md \u2502 \u2502 \u251c\u2500 methods.md \u2502 \u2502 \u251c\u2500 status-codes.md \u2502 \u2502 \u2514\u2500 caching.md \u2502 \u251c\u2500 tcp-ip.md \u2502 \u251c\u2500 dns.md \u2502 \u2514\u2500 ssl-tls.md \u251c\u2500 web/ \u2502 \u251c\u2500 rest-vs-graphql.md \u2502 \u251c\u2500 api-versioning.md \u2502 \u251c\u2500 cookies-vs-tokens.md \u2502 \u2514\u2500 cors.md \u251c\u2500 programming/ \u2502 \u251c\u2500 oop.md \u2502 \u251c\u2500 functional-programming.md \u2502 \u251c\u2500 async-vs-threading.md \u2502 \u2514\u2500 design-patterns.md \u2514\u2500 os/ \u251c\u2500 processes-vs-threads.md \u251c\u2500 file-descriptors.md \u2514\u2500 memory-management.md Guiding Principles \u00b6 Start flat, grow when patterns emerge. A single note doesn\u2019t deserve a folder \u2014 but a cluster does. Concepts explain systems, not tools. They answer why and how something works rather than how to use it . Mirror real-world domains. Networking, Web, Programming, and OS \u2014 a conceptual map of how the stack fits together. Keep modular granularity. Break large concepts (like HTTP) into smaller, linkable notes once needed. Notes \u00b6 This pattern scales from beginner notes to deep theory without collapse into chaos. Where cheatsheets are practical quick wins, concepts are the slow architecture of understanding \u2014 ideas that deserve to interlink and mature. It keeps your vault growing like a mind with memory , not a folder full of files.","title":"\ud83e\udde9 Structure Notes \u2014 Cheatsheets Organization"},{"location":"meta/structure-notes/#structure-notes-cheatsheets-organization","text":"Topic: How to handle the growth of the tools/ section in cheatsheets.","title":"\ud83e\udde9 Structure Notes \u2014 Cheatsheets Organization"},{"location":"meta/structure-notes/#current-approach","text":"The tools/ folder starts flat \u2014 everything goes here: git.md , docker.md , nginx.md , obsidian-mkdocs-setup.md , etc. At this stage, the goal is speed and clarity , not perfect hierarchy. Don\u2019t overthink categories too early. cheatsheets/ \u2514\u2500 tools/ \u251c\u2500 git.md \u251c\u2500 docker.md \u251c\u2500 nginx.md \u251c\u2500 obsidian-mkdocs-setup.md","title":"Current Approach"},{"location":"meta/structure-notes/#planned-evolution","text":"As the collection grows and themes start to emerge (e.g., multiple networking or DevOps tools), split tools/ into domain-based subfolders : cheatsheets/ \u2514\u2500 tools/ \u251c\u2500 devops/ \u2502 \u251c\u2500 docker.md \u2502 \u251c\u2500 ansible.md \u2502 \u2514\u2500 kubernetes.md \u251c\u2500 system/ \u2502 \u251c\u2500 systemd.md \u2502 \u251c\u2500 cron.md \u2502 \u2514\u2500 journalctl.md \u251c\u2500 networking/ \u2502 \u251c\u2500 nginx.md \u2502 \u2514\u2500 certbot.md \u2514\u2500 productivity/ \u251c\u2500 git.md \u251c\u2500 mkdocs.md \u2514\u2500 obsidian.md","title":"Planned Evolution"},{"location":"meta/structure-notes/#guiding-principles","text":"Start flat, grow organically. Don\u2019t create folders for one file. When 3+ tools cluster by domain , introduce a subfolder. Cheatsheets are how to use a thing. Concepts are why the thing works that way. The goal isn\u2019t a perfect taxonomy \u2014 it\u2019s a navigable map of thought that evolves with experience.","title":"Guiding Principles"},{"location":"meta/structure-notes/#notes","text":"This convention prevents early complexity while ensuring long-term scalability. It reflects the \u201cknowledge-vault\u201d philosophy: build what you need today, structure it when it starts to breathe. Here\u2019s a matching note for your Concepts section, written in the same tone and structure as your Structure Notes \u2014 Cheatsheets Organization one:","title":"Notes"},{"location":"meta/structure-notes/#structure-notes-concepts-organization","text":"Topic: How to handle the growth and structure of the concepts/ section.","title":"\ud83e\udde0 Structure Notes \u2014 Concepts Organization"},{"location":"meta/structure-notes/#current-approach_1","text":"The concepts/ folder starts flat \u2014 every new idea or explanation goes here directly: http.md , tcp-ip.md , oop.md , rest-vs-graphql.md , etc. At the beginning, the goal is clarity and speed of capture. Don\u2019t pre-plan categories before ideas have weight. concepts/ \u251c\u2500 http.md \u251c\u2500 tcp-ip.md \u251c\u2500 oop.md \u2514\u2500 rest-vs-graphql.md","title":"Current Approach"},{"location":"meta/structure-notes/#planned-evolution_1","text":"As understanding deepens and related topics multiply, group them into domain-based subfolders . concepts/ \u251c\u2500 networking/ \u2502 \u251c\u2500 http/ \u2502 \u2502 \u251c\u2500 http-basics.md \u2502 \u2502 \u251c\u2500 headers.md \u2502 \u2502 \u251c\u2500 methods.md \u2502 \u2502 \u251c\u2500 status-codes.md \u2502 \u2502 \u2514\u2500 caching.md \u2502 \u251c\u2500 tcp-ip.md \u2502 \u251c\u2500 dns.md \u2502 \u2514\u2500 ssl-tls.md \u251c\u2500 web/ \u2502 \u251c\u2500 rest-vs-graphql.md \u2502 \u251c\u2500 api-versioning.md \u2502 \u251c\u2500 cookies-vs-tokens.md \u2502 \u2514\u2500 cors.md \u251c\u2500 programming/ \u2502 \u251c\u2500 oop.md \u2502 \u251c\u2500 functional-programming.md \u2502 \u251c\u2500 async-vs-threading.md \u2502 \u2514\u2500 design-patterns.md \u2514\u2500 os/ \u251c\u2500 processes-vs-threads.md \u251c\u2500 file-descriptors.md \u2514\u2500 memory-management.md","title":"Planned Evolution"},{"location":"meta/structure-notes/#guiding-principles_1","text":"Start flat, grow when patterns emerge. A single note doesn\u2019t deserve a folder \u2014 but a cluster does. Concepts explain systems, not tools. They answer why and how something works rather than how to use it . Mirror real-world domains. Networking, Web, Programming, and OS \u2014 a conceptual map of how the stack fits together. Keep modular granularity. Break large concepts (like HTTP) into smaller, linkable notes once needed.","title":"Guiding Principles"},{"location":"meta/structure-notes/#notes_1","text":"This pattern scales from beginner notes to deep theory without collapse into chaos. Where cheatsheets are practical quick wins, concepts are the slow architecture of understanding \u2014 ideas that deserve to interlink and mature. It keeps your vault growing like a mind with memory , not a folder full of files.","title":"Notes"}]}