{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Knowledge Vault","text":"<p>Two modes, one brain: - Cheatsheets \u2192 quick reference while coding - Concepts \u2192 deeper understanding and architecture</p>"},{"location":"#how-to-use","title":"\ud83d\udd0e How to Use","text":"<p>Tip</p> <p>Use the search bar for method names, error snippets, or concepts (e.g., <code>@Transactional</code>, <code>N+1</code>, <code>Content-Type</code>).</p>"},{"location":"cheatsheets/","title":"\u26a1 Cheatsheets","text":"<p>Fast lookup. Minimal theory. Maximum clarity.</p>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/","title":"Obsidian \u2194 MkDocs Material \u2014 Setup &amp; Structure (for <code>knowledge-vault/docs</code>)","text":"<p>Goal: Write in Obsidian with <code>[[wikilinks]]</code> \u2192 publish a polished docs site via MkDocs Material.</p> <p>Two modes: Cheatsheets (quick lookup) and Concepts (deep understanding). Keep them separate but cross-linked.</p>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#0-prereqs","title":"0) Prereqs","text":"<ul> <li>Python 3.8+</li> <li>Git</li> <li>Obsidian app (optional but recommended for writing)</li> </ul>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#1-repo-layout-the-shape-were-aiming-for","title":"1) Repo layout (the shape we\u2019re aiming for)","text":"<pre><code>knowledge-vault/\n\u251c\u2500 mkdocs.yml                # site config (we\u2019ll create it below)\n\u251c\u2500 README.md                 # for GitHub visitors (how to run/deploy)\n\u2514\u2500 docs/                     # all site content lives here\n   \u251c\u2500 index.md               # site homepage\n   \u251c\u2500 cheatsheets/           # quick references (APIs, commands, patterns)\n   \u2502  \u251c\u2500 index.md            # cheatsheets landing page\n   \u2502  \u251c\u2500 languages/\n   \u2502  \u2502  \u251c\u2500 java/\n   \u2502  \u2502  \u2502  \u251c\u2500 core/\n   \u2502  \u2502  \u2502  \u2502  \u2514\u2500 streams.md\n   \u2502  \u2502  \u2502  \u2514\u2500 frameworks/\n   \u2502  \u2502  \u2502     \u2514\u2500 spring/\n   \u2502  \u2502  \u2502        \u251c\u2500 annotations.md\n   \u2502  \u2502  \u2502        \u2514\u2500 rest-controller.md\n   \u2502  \u2502  \u2514\u2500 python/\n   \u2502  \u2502     \u2514\u2500 basics.md\n   \u2502  \u251c\u2500 databases/\n   \u2502  \u2502  \u251c\u2500 sql/\n   \u2502  \u2502  \u2502  \u251c\u2500 basics.md\n   \u2502  \u2502  \u2502  \u2514\u2500 joins.md\n   \u2502  \u2502  \u251c\u2500 mysql/\n   \u2502  \u2502  \u2502  \u251c\u2500 setup/\n   \u2502  \u2502  \u2502  \u2502  \u251c\u2500 java.md\n   \u2502  \u2502  \u2502  \u2502  \u2514\u2500 python.md\n   \u2502  \u2502  \u2502  \u2514\u2500 queries.md\n   \u2502  \u2502  \u2514\u2500 orm/\n   \u2502  \u2502     \u251c\u2500 jpa-java-annotations.md\n   \u2502  \u2502     \u2514\u2500 sqlalchemy-python-cheats.md\n   \u2502  \u251c\u2500 networking/\n   \u2502  \u2502  \u2514\u2500 http/\n   \u2502  \u2502     \u251c\u2500 basics.md\n   \u2502  \u2502     \u2514\u2500 headers.md\n   \u2502  \u2514\u2500 tools/\n   \u2502     \u251c\u2500 git.md\n   \u2502     \u251c\u2500 docker.md\n   \u2502     \u2514\u2500 obsidian-mkdocs-setup.md    \u2190 this cheatsheet\n   \u2514\u2500 concepts/              # deeper explanations and trade-offs\n      \u251c\u2500 index.md            # concepts landing page\n      \u251c\u2500 backend/\n      \u2502  \u251c\u2500 http.md\n      \u2502  \u251c\u2500 rest-api.md\n      \u2502  \u2514\u2500 caching.md\n      \u251c\u2500 databases/\n      \u2502  \u251c\u2500 normalization.md\n      \u2502  \u251c\u2500 indexing.md\n      \u2502  \u251c\u2500 transactions-acid.md\n      \u2502  \u2514\u2500 orm/\n      \u2502     \u251c\u2500 orm-concepts.md\n      \u2502     \u2514\u2500 jpa-vs-sqlalchemy.md\n      \u251c\u2500 frameworks/\n      \u2502  \u251c\u2500 spring-core.md\n      \u2502  \u2514\u2500 hibernate.md\n      \u2514\u2500 design/\n         \u251c\u2500 dependency-injection.md\n         \u2514\u2500 microservices.md\n</code></pre> <p>Why this structure? Cheatsheets = fast lookup (language/framework/API); Concepts = how/why/architecture. It mirrors how your brain flips between coding and understanding, and keeps search results clean.</p>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#2-one-time-install","title":"2) One-time install","text":"<pre><code>cd knowledge-vault\n\n# (Optional) keep Python deps isolated\npython -m venv .venv\nsource .venv/bin/activate      # Windows: .venv\\Scripts\\activate\n\npython -m pip install --upgrade pip\n\n# Core: MkDocs + Material + \"Last updated\" git plugin\npip install -U mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin\n\n# Pick ONE wikilinks plugin (to convert [[Page]] to proper links):\n\n# Option A (popular): Roam/Obsidian-style wikilinks + Obsidian-style callouts\npip install mkdocs-roamlinks-plugin mkdocs-callouts\n\n# Option B (also good): Wikilinks via \"ezlinks\" (plugin name is mkdocs-wikilinks-plugin)\n# pip install mkdocs-wikilinks-plugin\n</code></pre> <p>Open the repo as an Obsidian vault (Obsidian \u2192 Open folder as vault \u2192 select <code>knowledge-vault/</code>). Recommended Obsidian settings:</p> <ul> <li>Files &amp; Links \u2192 Use [[Wikilinks]]: On</li> <li>Files &amp; Links \u2192 New link format: Shortest</li> <li>Files &amp; Links \u2192 Default location for new notes: Same folder as current file</li> <li>Editor \u2192 Show frontmatter: On</li> </ul>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#25-obsidian-setup-optional-but-useful","title":"2.5) Obsidian setup (optional but useful)","text":"<p>Core plugins to enable</p> <ul> <li>Backlinks, Outgoing Links \u2192 fast x-ref navigation</li> <li>Templates \u2192 front-matter snippets</li> <li>Daily Notes (optional) \u2192 scratchpad/logs that won\u2019t be published</li> </ul> <p>Community plugins that play nicely with MkDocs Material</p> <ul> <li>Admonition \u2014 renders MkDocs <code>!!! note|tip|warning</code> blocks inside Obsidian.   Use this in your notes so one syntax works everywhere:</li> </ul> <pre><code>!!! tip\n    Use the search bar for method names, error snippets, or concepts.\n</code></pre> <ul> <li> <p>Advanced Tables (or Table Editor 2) \u2014 auto-align pipes, tab to next column.</p> </li> <li> <p>Linter \u2014 auto-fix headings, trailing spaces, YAML ordering (keep <code>title/tags/summary</code> neat).</p> </li> <li> <p>Templater \u2014 quick scaffolds for cheatsheets/concepts.</p> </li> <li> <p>Example templates:</p> <pre><code>---\ntitle: &lt;% tp.file.title %&gt; \u2014 Quickref\ntags: [cheatsheet, &lt;topic&gt;, &lt;tech&gt;]\nsummary: One-liner for why this exists.\n---\n# &lt;% tp.file.title %&gt; \u2014 Quickref\n\n&gt; See concepts: [concepts/...](&lt;../../concepts/...&gt;)\n</code></pre> <pre><code>---\ntitle: &lt;% tp.file.title %&gt;\ntags: [concept, &lt;domain&gt;]\nsummary: What it is, why it matters, trade-offs.\n---\n# &lt;% tp.file.title %&gt;\n\n&gt; See cheatsheet: [cheatsheets/...](&lt;../...&gt;)\n</code></pre> </li> <li> <p>Markdown Attributes \u2014 previews <code>{#id .class}</code> so Obsidian shows what <code>attr_list</code> does in MkDocs.</p> </li> <li> <p>Paste URL into Selection \u2014 speeds up linking text \u2192 <code>[text](url)</code>.</p> </li> <li> <p>Tag Wrangler \u2014 bulk-rename/merge tags.</p> </li> <li> <p>Obsidian Git (optional) \u2014 commit/pull from inside Obsidian if you\u2019re not using IDEA for VCS.</p> </li> </ul> <p>Nice-to-have (safe, but non-exporting)</p> <ul> <li>Dataview \u2014 dashboards/lists in the vault. Remember: Dataview queries don\u2019t render in MkDocs. Use it for in-vault discovery, not for pages you publish, or export the results as static lists before publishing.</li> </ul> <p>Syntax alignment cheats</p> <ul> <li>Admonitions: Prefer MkDocs syntax (<code>!!! note</code>) + Admonition plugin \u2192 same source renders well in both places. Avoid Obsidian callouts (<code>&gt; [!NOTE]</code>) if you want one true syntax.</li> <li>Tabs: <code>pymdownx.tabbed</code> looks great on the site but won\u2019t render as tabs inside Obsidian. In notes, keep tab blocks short; Obsidian will show them as plain headings\u2014good enough for editing.</li> <li>Wikilinks: Keep writing <code>[[wikilinks]]</code>. <code>mkdocs-obsidian</code> resolves them on build, so reorganizing folders won\u2019t break links.</li> </ul> <p>Ignore these in publish Your <code>.obsidian/</code> stays out of the site\u2014already covered by:</p> <pre><code>excluded_dirs: ['.obsidian', '.trash']\n</code></pre> <p>and <code>.gitignore</code> should include:</p> <pre><code>.obsidian/\n.trash/\n</code></pre> <p>Gotchas</p> <ul> <li>Dataview, buttons, or any Obsidian-only syntax isn\u2019t rendered by MkDocs. Keep publishable pages in plain Markdown + MkDocs features.</li> <li>If Linter rewrites YAML keys, make sure it doesn\u2019t nuke custom fields you care about.</li> <li>If you switch to Obsidian callouts, you\u2019ll need a pre-processor to convert them to <code>!!!</code> blocks; staying with <code>!!!</code> avoids that whole dance.</li> </ul>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#3-create-folders-fast-scaffold","title":"3) Create folders fast (scaffold)","text":"<p>Run in repo root (<code>knowledge-vault/</code>). Adjust to taste.</p> <pre><code>mkdir -p docs/{cheatsheets/{languages/{java/{core,frameworks/spring},python},databases/{sql,mysql/setup,orm},networking/http,tools},concepts/{backend,databases/orm,frameworks,design}}\n</code></pre>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#4-mkdocsyml-fully-commented","title":"4) <code>mkdocs.yml</code> \u2014 fully commented","text":"<p>Create <code>knowledge-vault/mkdocs.yml</code> with this content:</p> <pre><code># mkdocs.yml \u2014 Site configuration for \"Knowledge Vault\"\n# MkDocs reads Markdown from ./docs and outputs static HTML into ./site\n\nsite_name: Knowledge Vault                 # Shown in header and metadata\nsite_url: https://&lt;your-username&gt;.github.io/knowledge-vault  # Used for canonical links/sitemaps\nrepo_url: https://github.com/&lt;your-username&gt;/knowledge-vault  # \u201cEdit on GitHub\u201d links\nedit_uri: edit/main/docs/                  # Path to open files in GitHub\u2019s editor\nuse_directory_urls: true                   # Pretty URLs: /path/ instead of /path.html\n\ntheme:\n  name: material                           # Material for MkDocs theme (feature-rich)\n  language: en\n  features:\n    - navigation.instant                   # Faster page transitions\n    - navigation.tracking                  # Highlight active section as you scroll\n    - navigation.sections                  # Group pages by top-level sections\n    - navigation.tabs                      # Top-level sections as tabs\n    - toc.integrate                        # Merge page TOC into the sidebar\n    - content.code.copy                    # Copy button on code blocks\n    - content.code.annotate                # Inline annotations on code\n    - content.action.edit                  # \u201cEdit this page\u201d button\n    - search.suggest                       # Search autocomplete\n    - search.highlight                     # Highlight matches on page\n\n# docs_dir defaults to \"docs\". Keeping it implicit = cleaner config.\n# docs_dir: docs\n\nplugins:\n  - search                                 # Full-text search\n  # If you installed Option A:\n  - roamlinks\n  - callouts\n  # If you installed Option B instead:\n  # - ezlinks\n  - git-revision-date-localized:           # \u201cLast updated\u201d timestamps\n      fallback_to_build_date: true\n\nmarkdown_extensions:\n  - admonition                             # !!! note/tip/warning blocks\n  - attr_list                              # {#id .class} on elements\n  - def_list                               # Definition lists\n  - md_in_html                             # Markdown inside HTML blocks\n  - tables                                 # Advanced tables\n  - toc:\n      permalink: true                      # Link anchors for headings\n  - pymdownx.details                       # &lt;details&gt; collapsible sections\n  - pymdownx.highlight:\n      anchor_linenums: true                # Clickable line numbers in code\n      line_spans: __span                   # For precise CSS targeting\n  - pymdownx.inlinehilite                  # `==inline code==` highlighting\n  - pymdownx.magiclink                     # Autolink URLs and issues\n  - pymdownx.superfences                   # Fenced code blocks inside lists, tabs\n  - pymdownx.tabbed:\n      alternate_style: true                # Nice UI for tabbed code examples\n  - pymdownx.tasklist:\n      custom_checkbox: true                # Pretty checkboxes in lists\n\n# Navigation:\n# Option A (recommended): start minimal and let filesystem drive nav while drafting \u2014 comment out nav.\n# Option B: curate the nav to control order/labels (uncomment to use).\n#\n# nav:\n#   - Home: index.md\n#   - Cheatsheets:\n#       - Overview: cheatsheets/index.md\n#       - Languages:\n#           - Java:\n#               - Streams: cheatsheets/languages/java/core/streams.md\n#               - Spring Annotations: cheatsheets/languages/java/frameworks/spring/annotations.md\n#               - REST Controller: cheatsheets/languages/java/frameworks/spring/rest-controller.md\n#           - Python:\n#               - Basics: cheatsheets/languages/python/basics.md\n#       - Databases:\n#           - SQL:\n#               - Basics: cheatsheets/databases/sql/basics.md\n#               - Joins: cheatsheets/databases/sql/joins.md\n#           - MySQL:\n#               - Setup (Java): cheatsheets/databases/mysql/setup/java.md\n#               - Setup (Python): cheatsheets/databases/mysql/setup/python.md\n#               - Queries: cheatsheets/databases/mysql/queries.md\n#           - ORM:\n#               - JPA Annotations (Java): cheatsheets/databases/orm/jpa-java-annotations.md\n#               - SQLAlchemy Cheats (Python): cheatsheets/databases/orm/sqlalchemy-python-cheats.md\n#       - Networking:\n#           - HTTP Basics: cheatsheets/networking/http/basics.md\n#           - Headers: cheatsheets/networking/http/headers.md\n#       - Tools:\n#           - Git: cheatsheets/tools/git.md\n#           - Docker: cheatsheets/tools/docker.md\n#           - Obsidian + MkDocs Setup: cheatsheets/tools/obsidian-mkdocs-setup.md\n#   - Concepts:\n#       - Overview: concepts/index.md\n#       - Backend:\n#           - HTTP: concepts/backend/http.md\n#           - REST API: concepts/backend/rest-api.md\n#           - Caching: concepts/backend/caching.md\n#       - Databases:\n#           - Normalization: concepts/databases/normalization.md\n#           - Indexing: concepts/databases/indexing.md\n#           - Transactions (ACID): concepts/databases/transactions-acid.md\n#           - ORM:\n#               - ORM Concepts: concepts/databases/orm/orm-concepts.md\n#               - JPA vs SQLAlchemy: concepts/databases/orm/jpa-vs-sqlalchemy.md\n#       - Frameworks:\n#           - Spring Core: concepts/frameworks/spring-core.md\n#           - Hibernate: concepts/frameworks/hibernate.md\n#       - Design:\n#           - Dependency Injection: concepts/design/dependency-injection.md\n#           - Microservices: concepts/design/microservices.md\n</code></pre> <p>Why comment out <code>nav:</code> at first? While you\u2019re building content, filesystem ordering is simpler. Later, un-comment <code>nav:</code> to curate labels and order.</p>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#5-homepages-three-indexmd-files","title":"5) Homepages (three <code>index.md</code> files)","text":"<p><code>index.md</code> turns a folder into a landing page and gives you clean URLs:</p> <ul> <li><code>docs/index.md</code> \u2192 <code>/</code></li> <li><code>docs/cheatsheets/index.md</code> \u2192 <code>/cheatsheets/</code></li> <li><code>docs/concepts/index.md</code> \u2192 <code>/concepts/</code></li> </ul>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#51-docsindexmd-site-homepage","title":"5.1 <code>docs/index.md</code> (site homepage)","text":"<pre><code>---\ntitle: Knowledge Vault\nsummary: Personal developer wiki \u2014 cheatsheets for speed, concepts for mastery.\n---\n\n# \ud83e\udde0 Knowledge Vault\n\nTwo modes, one brain:\n- **Cheatsheets** \u2192 quick reference while coding\n- **Concepts** \u2192 deeper understanding and architecture\n\n## \ud83d\udeaa Start Here\n- [Java Streams \u2014 Quickref](&lt;../languages/java/core/streams.md&gt;)\n- [SQL Basics \u2014 Cheatsheet](&lt;../databases/sql/basics.md&gt;)\n- [HTTP \u2014 Concepts](&lt;concepts/backend/http&gt;)\n- [Git \u2014 Commands](&lt;./git.md&gt;)\n- [HTTP Headers \u2014 Quickref](&lt;cheatsheets/networking/http/headers&gt;)\n\n## \ud83d\udd0e How to Use\n!!! tip\n    Use the search bar for method names, error snippets, or concepts (e.g., `@Transactional`, `N+1`, `Content-Type`).\n</code></pre>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#52-docscheatsheetsindexmd-section-landing","title":"5.2 <code>docs/cheatsheets/index.md</code> (section landing)","text":"<pre><code>---\ntitle: Cheatsheets\nsummary: Quick references for languages, frameworks, databases, tools, and commands.\n---\n\n# \u26a1 Cheatsheets\n\nFast lookup. Minimal theory. Maximum clarity.\n\n## \ud83e\uddf1 Categories\n### Languages\n- Java: [Streams](&lt;../languages/java/core/streams.md&gt;) \u00b7 [Spring Annotations](&lt;../languages/java/frameworks/spring/annotations.md&gt;)\n- Python: [Basics](&lt;../languages/python/basics.md&gt;)\n\n### Databases\n- SQL: [Basics](&lt;../databases/sql/basics.md&gt;) \u00b7 [Joins](&lt;../databases/sql/joins.md&gt;)\n- MySQL: [Setup (Java)](&lt;../databases/mysql/setup/java.md&gt;) \u00b7 [Setup (Python)](&lt;../databases/mysql/setup/python.md&gt;) \u00b7 [Queries](&lt;../databases/mysql/queries.md&gt;)\n- ORM: [JPA Annotations](&lt;../databases/orm/jpa-java-annotations.md&gt;) \u00b7 [SQLAlchemy](&lt;../databases/orm/sqlalchemy-python-cheats.md&gt;)\n\n### Networking\n- [HTTP Basics](&lt;cheatsheets/networking/http/basics&gt;) \u00b7 [Headers](&lt;cheatsheets/networking/http/headers&gt;)\n\n### Tools\n- [Git](&lt;./git.md&gt;) \u00b7 [Docker](&lt;./docker.md&gt;) \u00b7 [Obsidian + MkDocs Setup](&lt;./obsidian-mkdocs-setup.md&gt;)\n</code></pre>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#53-docsconceptsindexmd-section-landing","title":"5.3 <code>docs/concepts/index.md</code> (section landing)","text":"<pre><code>---\ntitle: Concepts\nsummary: Deep dives into how systems work \u2014 theory, trade-offs, and reasoning.\n---\n\n# \ud83e\udde0 Concepts\n\nWhere understanding replaces memorization.\n\n## \ud83e\udde9 Topics\n### Backend\n- [HTTP](&lt;concepts/backend/http&gt;) \u00b7 [REST API](&lt;../../concepts/backend/rest-api.md&gt;) \u00b7 [Caching](&lt;../../concepts/backend/caching.md&gt;)\n\n### Databases\n- [Normalization](&lt;../../concepts/databases/normalization.md&gt;) \u00b7 [Indexing](&lt;../../concepts/databases/indexing.md&gt;) \u00b7 [Transactions (ACID)](&lt;../../concepts/databases/transactions-acid.md&gt;)\n- ORM: [ORM Concepts](&lt;../../concepts/databases/orm/orm-concepts.md&gt;) \u00b7 [JPA vs SQLAlchemy](&lt;../../concepts/databases/orm/jpa-vs-sqlalchemy.md&gt;)\n\n### Frameworks\n- [Spring Core](&lt;../../concepts/frameworks/spring-core.md&gt;) \u00b7 [Hibernate](&lt;../../concepts/frameworks/hibernate.md&gt;)\n\n### Design\n- [Dependency Injection](&lt;../../concepts/design/dependency-injection.md&gt;) \u00b7 [Microservices](&lt;../../concepts/design/microservices.md&gt;)\n</code></pre> <p>Do you need to define folder structure in <code>index.md</code>? No. <code>index.md</code> is content, not configuration. It\u2019s a curated landing page for the folder. The site structure is driven by the filesystem and (optionally) the <code>nav:</code> in <code>mkdocs.yml</code>.</p>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#6-front-matter-templates-copypaste-into-pages","title":"6) Front-matter templates (copy/paste into pages)","text":"<p>Cheatsheet:</p> <pre><code>---\ntitle: &lt;Title&gt; \u2014 Quickref\ntags: [cheatsheet, &lt;topic&gt;, &lt;tech&gt;]\nsummary: One-line reason this exists (lookup while coding).\n---\n# &lt;Title&gt; \u2014 Quickref\n\n&gt; See concepts: [concepts/...](&lt;../../concepts/...&gt;)\n</code></pre> <p>Concept:</p> <pre><code>---\ntitle: &lt;Concept Name&gt;\ntags: [concept, &lt;domain&gt;]\nsummary: What it is, why it matters, trade-offs.\n---\n# &lt;Concept Name&gt;\n\n&gt; See cheatsheet: [cheatsheets/...](&lt;../...&gt;)\n</code></pre>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#7-local-dev-deploy","title":"7) Local dev &amp; deploy","text":"<pre><code># Local preview (auto-reload)\nmkdocs serve\n# open http://127.0.0.1:8000/\n\n# Deploy to GitHub Pages\nmkdocs gh-deploy\n# your site: https://&lt;your-username&gt;.github.io/knowledge-vault/\n</code></pre>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#8-faq-gotchas","title":"8) FAQ / Gotchas","text":"<ul> <li>Where should README.md live? At repo root. It explains the project + how to run/deploy. The site homepage is <code>docs/index.md</code>.</li> <li>Do I need <code>docs_dir: docs</code>? No. That\u2019s the default; keeping it implicit is cleaner.</li> <li>What makes <code>/cheatsheets/</code> and <code>/concepts/</code> routes work? The <code>index.md</code> files in those folders + <code>use_directory_urls: true</code>.</li> <li>What if I move files around? <code>[[wikilinks]]</code> are updated by <code>mkdocs-obsidian</code> on build. Rebuild after reorganizing.</li> <li>Should I curate <code>nav:</code> now? Early on, skip it. When structure stabilizes, un-comment <code>nav:</code> in <code>mkdocs.yml</code> to control order and labels.</li> </ul>"},{"location":"cheatsheets/tools/obsidian-mkdocs-setup/#9-mental-model-why-this-works","title":"9) Mental model (why this works)","text":"<ul> <li>Separation of concerns: <code>README.md</code> (GitHub), <code>docs/index.md</code> (site), <code>mkdocs.yml</code> (wiring).</li> <li>Two modes = less friction: Cheatsheets for speed, Concepts for depth.</li> <li>Wikilinks = future-proof: Rearrange folders without rewriting links.</li> <li>Indexes = clean URLs: Section <code>index.md</code> gives <code>/cheatsheets/</code> and <code>/concepts/</code> real landing pages.</li> </ul> <p>Ship it. Then iterate. The vault grows with you, not against you.</p>"},{"location":"cheatsheets/tools/path/","title":"Java <code>Path</code> (and a quick note on <code>Paths</code>)","text":"<ul> <li><code>Path</code> is the main interface in <code>java.nio.file</code> that models a filesystem path (like <code>\"images/cat.png\"</code> or <code>\"/usr/local/bin\"</code>).</li> <li>About <code>Paths</code>: since Java 11, you can use <code>Path.of(...)</code> instead of <code>Paths.get(...)</code>. They do the same thing. Because of that, this guide uses <code>Path.of</code> and ignores <code>Paths</code>.</li> </ul>"},{"location":"cheatsheets/tools/path/#quick-glossary-beginner-friendly","title":"Quick glossary (beginner-friendly)","text":"<ul> <li>Absolute path: a full address from the filesystem root, e.g. <code>\"/home/alex/report.txt\"</code> (Unix) or <code>\"C:\\Users\\Alex\\report.txt\"</code> (Windows). It doesn\u2019t depend on the \u201ccurrent folder\u201d.</li> <li>Relative path: a path relative to a base (usually the app\u2019s current working directory), e.g. <code>\"docs/report.txt\"</code> or <code>\"../images/logo.png\"</code>.</li> <li>Root: the topmost starting point of the filesystem (<code>\"/\"</code> on Unix; a drive like <code>\"C:\\\"</code> on Windows).</li> <li>Normalize: clean a path by removing <code>.</code> (current dir) and resolving <code>..</code> (go up one folder) without touching the disk.</li> <li>Resolve: join paths like URLs: base.resolve(child) \u2192 \u201cappend\u201d child to base.</li> <li>Relativize: create a relative path that goes from one path to another.</li> <li>Real path: an absolute, normalized path with symlinks resolved on disk.</li> </ul>"},{"location":"cheatsheets/tools/path/#creating-path-instances","title":"Creating <code>Path</code> instances","text":""},{"location":"cheatsheets/tools/path/#pathofstring-first-string-more","title":"<code>Path.of(String first, String... more)</code>","text":"<p>Create a path from one or more parts.</p> <pre><code>Path p1 = Path.of(\"images\", \"icons\", \"cat.png\"); // \"images/icons/cat.png\"\nPath p2 = Path.of(\"/usr\", \"local\", \"bin\");       // \"/usr/local/bin\" (absolute on Unix)\n</code></pre> <p>Output examples</p> <ul> <li><code>p1.toString()</code> \u2192 <code>\"images/icons/cat.png\"</code></li> <li><code>p2.isAbsolute()</code> \u2192 <code>true</code></li> </ul> <p>Use this instead of <code>Paths.get(...)</code> on Java 11+.</p>"},{"location":"cheatsheets/tools/path/#reading-path-structure","title":"Reading path structure","text":""},{"location":"cheatsheets/tools/path/#getfilename","title":"<code>getFileName()</code>","text":"<p>Last element of the path (the \u201cleaf\u201d).</p> <pre><code>Path p = Path.of(\"/var/log/system.log\");\np.getFileName().toString(); // \"system.log\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#getparent","title":"<code>getParent()</code>","text":"<p>Everything except the last element (or <code>null</code> if none).</p> <pre><code>Path p = Path.of(\"/var/log/system.log\");\np.getParent().toString();   // \"/var/log\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#getroot","title":"<code>getRoot()</code>","text":"<p>The root component (or <code>null</code> if relative).</p> <pre><code>Path p1 = Path.of(\"/var/log/system.log\");\nPath p2 = Path.of(\"docs/readme.md\");\np1.getRoot().toString();    // \"/\"\np2.getRoot();               // null (relative path)\n</code></pre>"},{"location":"cheatsheets/tools/path/#getnamecount-and-getnameint-index","title":"<code>getNameCount()</code> and <code>getName(int index)</code>","text":"<p>Count and access individual name elements (0-based, root excluded).</p> <pre><code>Path p = Path.of(\"/usr/local/bin\");\np.getNameCount();           // 3  (\"usr\",\"local\",\"bin\")\np.getName(1).toString();    // \"local\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#subpathint-beginindex-int-endindex","title":"<code>subpath(int beginIndex, int endIndex)</code>","text":"<p>Slice out a portion of the names (root not included).</p> <pre><code>Path p = Path.of(\"/usr/local/share/docs\");\np.subpath(1, 3).toString(); // \"local/share\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#checking-path-properties","title":"Checking path properties","text":""},{"location":"cheatsheets/tools/path/#isabsolute","title":"<code>isAbsolute()</code>","text":"<p>Is this path absolute?</p> <pre><code>Path.of(\"/etc/hosts\").isAbsolute(); // true\nPath.of(\"etc/hosts\").isAbsolute();  // false\n</code></pre>"},{"location":"cheatsheets/tools/path/#startswith-endswith","title":"<code>startsWith(...)</code> / <code>endsWith(...)</code>","text":"<p>Compare by path elements (not plain string).</p> <pre><code>Path p = Path.of(\"src/main/java/App.java\");\np.startsWith(\"src\");               // true\np.endsWith(\"App.java\");            // true\np.endsWith(Path.of(\"java\", \"App.java\")); // true\n</code></pre>"},{"location":"cheatsheets/tools/path/#transforming-paths-no-filesystem-access","title":"Transforming paths (no filesystem access)","text":""},{"location":"cheatsheets/tools/path/#normalize","title":"<code>normalize()</code>","text":"<p>Remove <code>.</code> and fold <code>..</code> where possible.</p> <pre><code>Path.of(\"a/./b/../c\").normalize().toString(); // \"a/c\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#resolvestringpath-other","title":"<code>resolve(String|Path other)</code>","text":"<p>Append <code>other</code> to this path (unless <code>other</code> is absolute, then <code>other</code> is returned).</p> <pre><code>Path base = Path.of(\"/home/alex\");\nbase.resolve(\"docs/report.txt\").toString(); // \"/home/alex/docs/report.txt\"\nbase.resolve(\"/etc/hosts\").toString();      // \"/etc/hosts\" (absolute wins)\n</code></pre>"},{"location":"cheatsheets/tools/path/#resolvesiblingstringpath-other","title":"<code>resolveSibling(String|Path other)</code>","text":"<p>Replace the last element with <code>other</code>.</p> <pre><code>Path p = Path.of(\"/home/alex/docs/report.txt\");\np.resolveSibling(\"notes.txt\").toString();   // \"/home/alex/docs/notes.txt\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#relativizepath-other","title":"<code>relativize(Path other)</code>","text":"<p>Create a relative path from <code>this</code> to <code>other</code>. Both must be both absolute or both relative, and on the same root/drive.</p> <pre><code>Path a = Path.of(\"/home/alex/docs\");\nPath b = Path.of(\"/home/alex/images/pic.png\");\na.relativize(b).toString();                 // \"../images/pic.png\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#converting-paths","title":"Converting paths","text":""},{"location":"cheatsheets/tools/path/#toabsolutepath","title":"<code>toAbsolutePath()</code>","text":"<p>Turn a relative path into an absolute one using the current working directory; already-absolute paths are returned as-is. (No disk access.)</p> <pre><code>Path.of(\"logs/app.log\").toAbsolutePath().toString();\n// e.g. \"/Users/alex/project/logs/app.log\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#torealpathlinkoption-options","title":"<code>toRealPath(LinkOption... options)</code>","text":"<p>Return the real absolute path: normalized and with symlinks resolved. Touches the filesystem and can throw if missing.</p> <pre><code>Path.of(\"symlink/to/file.txt\").toRealPath().toString();\n// e.g. \"/actual/location/file.txt\"\n</code></pre> <p>If you pass <code>LinkOption.NOFOLLOW_LINKS</code>, it won\u2019t resolve symlinks (still checks existence).</p>"},{"location":"cheatsheets/tools/path/#touri","title":"<code>toUri()</code>","text":"<p>Convert to a <code>file:</code> URI.</p> <pre><code>Path.of(\"/tmp/test.txt\").toUri().toString(); // \"file:///tmp/test.txt\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#tofile","title":"<code>toFile()</code>","text":"<p>Convert to the old <code>java.io.File</code> object.</p> <pre><code>Path.of(\"docs/readme.md\").toFile(); // java.io.File\n</code></pre>"},{"location":"cheatsheets/tools/path/#interop-utilities","title":"Interop &amp; utilities","text":""},{"location":"cheatsheets/tools/path/#iterator-implements-iterablepath","title":"<code>iterator()</code> (implements <code>Iterable&lt;Path&gt;</code>)","text":"<p>Iterate path elements.</p> <pre><code>Path p = Path.of(\"src/main/java\");\nfor (Path part : p) {\n  // \"src\", then \"main\", then \"java\"\n}\n</code></pre>"},{"location":"cheatsheets/tools/path/#comparetopath-other-and-equals-hashcode","title":"<code>compareTo(Path other)</code> (and <code>equals</code>, <code>hashCode</code>)","text":"<p>Lexicographic comparison based on the filesystem\u2019s rules.</p> <pre><code>Path a = Path.of(\"a\");\nPath b = Path.of(\"b\");\na.compareTo(b); // negative value (a &lt; b)\n</code></pre>"},{"location":"cheatsheets/tools/path/#getfilesystem","title":"<code>getFileSystem()</code>","text":"<p>The <code>FileSystem</code> this <code>Path</code> belongs to (useful with custom/ZIP filesystems).</p> <pre><code>Path.of(\"README.md\").getFileSystem().provider().getScheme(); // \"file\"\n</code></pre>"},{"location":"cheatsheets/tools/path/#common-files-helpers-youll-often-use-with-path-not-methods-on-path-but-handy","title":"Common <code>Files</code> helpers you\u2019ll often use with <code>Path</code> (not methods on <code>Path</code>, but handy)","text":"<pre><code>Files.exists(Path.of(\"notes.txt\"));                 // true/false\nFiles.createDirectories(Path.of(\"out/logs\"));       // create all missing dirs\nFiles.copy(srcPath, destPath, REPLACE_EXISTING);    // copy a file\nFiles.move(srcPath, destPath, ATOMIC_MOVE);         // move/rename\nFiles.delete(Path.of(\"old.txt\"));                   // delete\nFiles.readString(Path.of(\"data.txt\"));              // read whole file as String\nFiles.writeString(Path.of(\"out.txt\"), \"hello\");     // write text\n</code></pre>"},{"location":"cheatsheets/tools/path/#windows-vs-unix-notes-gotchas","title":"Windows vs. Unix notes (gotchas)","text":"<ul> <li>Roots: Unix root is <code>\"/\"</code>. Windows roots are drives like <code>\"C:\\\"</code> and UNC roots like <code>\"\\\\server\\share\"</code>.</li> <li>Separators: <code>Path</code> uses the platform\u2019s separator under the hood. You can write either <code>'/'</code> or <code>'\\'</code> in string literals, but prefer <code>Path.of(\"a\",\"b\",\"c\")</code> to stay portable.</li> <li>Relativize/resolve: You can\u2019t relativize/resolve across different roots/drives.</li> </ul>"},{"location":"cheatsheets/tools/path/#mini-reference-method-what-it-does-example-io","title":"Mini reference (method \u2192 what it does \u2192 example I/O)","text":"Method What it does Example input \u2192 output <code>Path.of(\"a\",\"b\",\"c\")</code> Make a path from parts \u2192 <code>\"a/b/c\"</code> <code>getFileName()</code> Last path segment <code>\"/x/y/z.txt\"</code> \u2192 <code>\"z.txt\"</code> <code>getParent()</code> Path without the last segment <code>\"/x/y/z.txt\"</code> \u2192 <code>\"/x/y\"</code> <code>getRoot()</code> The root component or <code>null</code> <code>\"/x/y\"</code> \u2192 <code>\"/\"</code>; <code>\"x/y\"</code> \u2192 <code>null</code> <code>getNameCount()</code> Number of segments (no root) <code>\"/a/b/c\"</code> \u2192 <code>3</code> <code>getName(i)</code> Segment at index <code>i</code> <code>\"/a/b/c\"</code> &amp; <code>i=1</code> \u2192 <code>\"b\"</code> <code>subpath(i,j)</code> Slice of segments <code>[i,j)</code> <code>\"/a/b/c/d\"</code>, <code>(1,3)</code> \u2192 <code>\"b/c\"</code> <code>isAbsolute()</code> Is it a full path from the root? <code>\"/a/b\"</code> \u2192 <code>true</code>; <code>\"a/b\"</code> \u2192 <code>false</code> <code>startsWith(x)</code> Starts with segment(s) <code>x</code>? <code>\"src/main/App.java\"</code> &amp; <code>\"src\"</code> \u2192 <code>true</code> <code>endsWith(x)</code> Ends with segment(s) <code>x</code>? <code>\"src/main/App.java\"</code> &amp; <code>\"App.java\"</code> \u2192 <code>true</code> <code>normalize()</code> Remove <code>.</code> and fold <code>..</code> <code>\"a/./b/../c\"</code> \u2192 <code>\"a/c\"</code> <code>resolve(x)</code> Append <code>x</code> (unless <code>x</code> is absolute) <code>\"/home/a\" + \"docs/r.txt\"</code> \u2192 <code>\"/home/a/docs/r.txt\"</code> <code>resolveSibling(x)</code> Replace the last segment <code>\"/a/b/c.txt\" + \"d.txt\"</code> \u2192 <code>\"/a/b/d.txt\"</code> <code>relativize(other)</code> Path from <code>this</code> to <code>other</code> <code>\"/a/b\"</code> \u2192 <code>\"/a/c/d\"</code> gives <code>\"../c/d\"</code> <code>toAbsolutePath()</code> Make absolute using CWD <code>\"logs/app.log\"</code> \u2192 <code>\"/\u2026/logs/app.log\"</code> <code>toRealPath()</code> Absolute, normalized, resolve symlinks (touches disk) <code>\"link/file\"</code> \u2192 <code>\"/actual/file\"</code> <code>toUri()</code> Convert to <code>file:</code> URI <code>\"/tmp/t.txt\"</code> \u2192 <code>\"file:///tmp/t.txt\"</code> <code>toFile()</code> Convert to <code>java.io.File</code> <code>\"docs/readme.md\"</code> \u2192 <code>File(\"docs/readme.md\")</code> <code>iterator()</code> Iterate segments <code>\"a/b/c\"</code> \u2192 <code>\"a\"</code>, <code>\"b\"</code>, <code>\"c\"</code> <code>compareTo()</code> Order paths lexicographically <code>\"a\"</code> vs <code>\"b\"</code> \u2192 <code>&lt; 0</code>"},{"location":"cheatsheets/tools/path/#tiny-end-to-end-example","title":"Tiny end-to-end example","text":"<pre><code>Path base = Path.of(\"/home/alex/projects\");\nPath rel  = Path.of(\"demo/../lib/utils.java\"); // relative\nPath norm = rel.normalize();                   // \"lib/utils.java\"\nPath abs  = base.resolve(norm);                // \"/home/alex/projects/lib/utils.java\"\nPath here = Path.of(\".\").toAbsolutePath();     // absolute CWD\nPath linkFree = abs.toRealPath();              // resolves symlinks (if any; hits disk)\nPath back = base.relativize(linkFree);         // relative from base to real file\n</code></pre> <p>Typical outputs</p> <ul> <li><code>norm.toString()</code> \u2192 <code>\"lib/utils.java\"</code></li> <li><code>abs.toString()</code> \u2192 <code>\"/home/alex/projects/lib/utils.java\"</code></li> <li><code>back.toString()</code> \u2192 <code>\"lib/utils.java\"</code></li> </ul>"},{"location":"cheatsheets/tools/path/#important-behaviors-gotchas","title":"Important behaviors &amp; gotchas","text":"<ol> <li> <p>Relative vs Absolute</p> <ul> <li><code>Path.of(\"docs/file.txt\")</code> is relative: it depends on the program\u2019s current working directory.</li> <li><code>Path.of(\"/home/user/docs/file.txt\")</code> (Unix) or <code>Path.of(\"C:\\\\Users\\\\Alex\\\\file.txt\")</code> (Windows) is absolute: it always points to the same place, no matter where the program is run.</li> </ul> </li> <li> <p>Normalize doesn\u2019t touch the disk</p> <ul> <li><code>normalize()</code> just cleans up the string form of the path (<code>.</code> and <code>..</code>).</li> <li>It doesn\u2019t check if the file exists.</li> </ul> </li> <li> <p>Real path touches the disk</p> <ul> <li><code>toRealPath()</code> does check the filesystem.</li> <li>It resolves symlinks, checks existence, and can throw exceptions if the file isn\u2019t there.</li> </ul> </li> <li> <p>Resolve vs. Relativize confusion</p> <ul> <li><code>resolve(child)</code> \u2192 go deeper into the tree.</li> <li><code>relativize(other)</code> \u2192 calculate the path between two paths.</li> <li>You can\u2019t <code>relativize</code> across different drives/roots (<code>C:\\</code> vs <code>D:\\</code> on Windows, or <code>/</code> vs a network share on Unix).</li> </ul> </li> <li> <p>StartsWith/EndsWith are by segments, not plain strings</p> <ul> <li><code>\"src/main/java/App.java\".endsWith(\"java\")</code> \u2192 false (last segment is <code>\"App.java\"</code>).</li> <li><code>\"src/main/java/App.java\".endsWith(\"App.java\")</code> \u2192 true.</li> </ul> </li> <li> <p>Iterating excludes root</p> <ul> <li><code>/usr/local/bin</code> will give elements <code>\"usr\"</code>, <code>\"local\"</code>, <code>\"bin\"</code> \u2014 the root <code>/</code> is not included.</li> </ul> </li> <li> <p>Cross-platform differences</p> <ul> <li>On Windows: roots are drives (<code>C:\\</code>), case-insensitive by default.</li> <li>On Unix: root is <code>/</code>, case-sensitive.</li> </ul> </li> </ol>"},{"location":"cheatsheets/tools/path/#bottom-line","title":"Bottom line","text":"<ul> <li>Use <code>Path</code> instead of string concatenation: It handles separators, OS differences, and path logic safely.</li> <li>Prefer <code>Path.of(...)</code> (Java 11+) over <code>Paths.get(...)</code>.</li> <li>Use <code>normalize()</code> when you want a clean path string.</li> <li>Use <code>toRealPath()</code> only if you need the true location on disk (and are ready to handle errors).</li> <li>Combine with <code>Files</code> class for actual file operations (<code>exists</code>, <code>read</code>, <code>write</code>, <code>delete</code>).</li> <li>Remember: <code>Path</code> itself is just a description of a location \u2014 it doesn\u2019t create, delete, or read files.</li> </ul>"},{"location":"concepts/","title":"\ud83e\udde0 Concepts","text":"<p>Where understanding replaces memorization.</p>"}]}