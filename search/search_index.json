{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83e\udde0 Knowledge Vault \u00b6 Two modes, one brain: Cheatsheets \u2192 quick reference while coding Concepts \u2192 deeper understanding and architecture \ud83d\udd0e How to Use \u00b6 Tip Use the search bar for method names, error snippets, or concepts (e.g., @Transactional , N+1 , Content-Type ). Internal Blueprints Some folders (e.g. *_meta/blueprint.md* ) are visible intentionally. These files describe how each section (containers, editors, etc.) should evolve \u2014 they\u2019re design notes for future structure, not active content.","title":"Knowledge Vault"},{"location":"#knowledge-vault","text":"Two modes, one brain: Cheatsheets \u2192 quick reference while coding Concepts \u2192 deeper understanding and architecture","title":"\ud83e\udde0 Knowledge Vault"},{"location":"#how-to-use","text":"Tip Use the search bar for method names, error snippets, or concepts (e.g., @Transactional , N+1 , Content-Type ). Internal Blueprints Some folders (e.g. *_meta/blueprint.md* ) are visible intentionally. These files describe how each section (containers, editors, etc.) should evolve \u2014 they\u2019re design notes for future structure, not active content.","title":"\ud83d\udd0e How to Use"},{"location":"_meta/structure-notes/","text":"\ud83e\udde9 Structure Notes \u2014 Cheatsheets Organization \u00b6 Topic: How to handle the growth of the tools/ section in cheatsheets. Current Approach \u00b6 The tools/ folder starts flat \u2014 everything goes here: git.md , docker.md , nginx.md , obsidian-mkdocs-setup.md , etc. At this stage, the goal is speed and clarity , not perfect hierarchy. Don\u2019t overthink categories too early. cheatsheets/ \u2514\u2500 tools/ \u251c\u2500 git.md \u251c\u2500 docker.md \u251c\u2500 nginx.md \u251c\u2500 obsidian-mkdocs-setup.md Planned Evolution \u00b6 As the collection grows and themes start to emerge (e.g., multiple networking or DevOps tools), split tools/ into domain-based subfolders : cheatsheets/ \u2514\u2500 tools/ \u251c\u2500 devops/ \u2502 \u251c\u2500 docker.md \u2502 \u251c\u2500 ansible.md \u2502 \u2514\u2500 kubernetes.md \u251c\u2500 system/ \u2502 \u251c\u2500 systemd.md \u2502 \u251c\u2500 cron.md \u2502 \u2514\u2500 journalctl.md \u251c\u2500 networking/ \u2502 \u251c\u2500 nginx.md \u2502 \u2514\u2500 certbot.md \u2514\u2500 productivity/ \u251c\u2500 git.md \u251c\u2500 mkdocs.md \u2514\u2500 obsidian.md Guiding Principles \u00b6 Start flat, grow organically. Don\u2019t create folders for one file. When 3+ tools cluster by domain , introduce a subfolder. Cheatsheets are how to use a thing. Concepts are why the thing works that way. The goal isn\u2019t a perfect taxonomy \u2014 it\u2019s a navigable map of thought that evolves with experience. Notes \u00b6 This convention prevents early complexity while ensuring long-term scalability. It reflects the \u201cknowledge-vault\u201d philosophy: build what you need today, structure it when it starts to breathe. Here\u2019s a matching note for your Concepts section, written in the same tone and structure as your Structure Notes \u2014 Cheatsheets Organization one: \ud83e\udde0 Structure Notes \u2014 Concepts Organization \u00b6 Topic: How to handle the growth and structure of the concepts/ section. Current Approach \u00b6 The concepts/ folder starts flat \u2014 every new idea or explanation goes here directly: http.md , tcp-ip.md , oop.md , rest-vs-graphql.md , etc. At the beginning, the goal is clarity and speed of capture. Don\u2019t pre-plan categories before ideas have weight. concepts/ \u251c\u2500 http.md \u251c\u2500 tcp-ip.md \u251c\u2500 oop.md \u2514\u2500 rest-vs-graphql.md Planned Evolution \u00b6 As understanding deepens and related topics multiply, group them into domain-based subfolders . concepts/ \u251c\u2500 networking/ \u2502 \u251c\u2500 http/ \u2502 \u2502 \u251c\u2500 http-basics.md \u2502 \u2502 \u251c\u2500 headers.md \u2502 \u2502 \u251c\u2500 methods.md \u2502 \u2502 \u251c\u2500 status-codes.md \u2502 \u2502 \u2514\u2500 caching.md \u2502 \u251c\u2500 tcp-ip.md \u2502 \u251c\u2500 dns.md \u2502 \u2514\u2500 ssl-tls.md \u251c\u2500 web/ \u2502 \u251c\u2500 rest-vs-graphql.md \u2502 \u251c\u2500 api-versioning.md \u2502 \u251c\u2500 cookies-vs-tokens.md \u2502 \u2514\u2500 cors.md \u251c\u2500 programming/ \u2502 \u251c\u2500 oop.md \u2502 \u251c\u2500 functional-programming.md \u2502 \u251c\u2500 async-vs-threading.md \u2502 \u2514\u2500 design-patterns.md \u2514\u2500 os/ \u251c\u2500 processes-vs-threads.md \u251c\u2500 file-descriptors.md \u2514\u2500 memory-management.md Guiding Principles \u00b6 Start flat, grow when patterns emerge. A single note doesn\u2019t deserve a folder \u2014 but a cluster does. Concepts explain systems, not tools. They answer why and how something works rather than how to use it . Mirror real-world domains. Networking, Web, Programming, and OS \u2014 a conceptual map of how the stack fits together. Keep modular granularity. Break large concepts (like HTTP) into smaller, linkable notes once needed. Notes \u00b6 This pattern scales from beginner notes to deep theory without collapse into chaos. Where cheatsheets are practical quick wins, concepts are the slow architecture of understanding \u2014 ideas that deserve to interlink and mature. It keeps your vault growing like a mind with memory , not a folder full of files.","title":"Structure Notes"},{"location":"_meta/structure-notes/#structure-notes-cheatsheets-organization","text":"Topic: How to handle the growth of the tools/ section in cheatsheets.","title":"\ud83e\udde9 Structure Notes \u2014 Cheatsheets Organization"},{"location":"_meta/structure-notes/#current-approach","text":"The tools/ folder starts flat \u2014 everything goes here: git.md , docker.md , nginx.md , obsidian-mkdocs-setup.md , etc. At this stage, the goal is speed and clarity , not perfect hierarchy. Don\u2019t overthink categories too early. cheatsheets/ \u2514\u2500 tools/ \u251c\u2500 git.md \u251c\u2500 docker.md \u251c\u2500 nginx.md \u251c\u2500 obsidian-mkdocs-setup.md","title":"Current Approach"},{"location":"_meta/structure-notes/#planned-evolution","text":"As the collection grows and themes start to emerge (e.g., multiple networking or DevOps tools), split tools/ into domain-based subfolders : cheatsheets/ \u2514\u2500 tools/ \u251c\u2500 devops/ \u2502 \u251c\u2500 docker.md \u2502 \u251c\u2500 ansible.md \u2502 \u2514\u2500 kubernetes.md \u251c\u2500 system/ \u2502 \u251c\u2500 systemd.md \u2502 \u251c\u2500 cron.md \u2502 \u2514\u2500 journalctl.md \u251c\u2500 networking/ \u2502 \u251c\u2500 nginx.md \u2502 \u2514\u2500 certbot.md \u2514\u2500 productivity/ \u251c\u2500 git.md \u251c\u2500 mkdocs.md \u2514\u2500 obsidian.md","title":"Planned Evolution"},{"location":"_meta/structure-notes/#guiding-principles","text":"Start flat, grow organically. Don\u2019t create folders for one file. When 3+ tools cluster by domain , introduce a subfolder. Cheatsheets are how to use a thing. Concepts are why the thing works that way. The goal isn\u2019t a perfect taxonomy \u2014 it\u2019s a navigable map of thought that evolves with experience.","title":"Guiding Principles"},{"location":"_meta/structure-notes/#notes","text":"This convention prevents early complexity while ensuring long-term scalability. It reflects the \u201cknowledge-vault\u201d philosophy: build what you need today, structure it when it starts to breathe. Here\u2019s a matching note for your Concepts section, written in the same tone and structure as your Structure Notes \u2014 Cheatsheets Organization one:","title":"Notes"},{"location":"_meta/structure-notes/#structure-notes-concepts-organization","text":"Topic: How to handle the growth and structure of the concepts/ section.","title":"\ud83e\udde0 Structure Notes \u2014 Concepts Organization"},{"location":"_meta/structure-notes/#current-approach_1","text":"The concepts/ folder starts flat \u2014 every new idea or explanation goes here directly: http.md , tcp-ip.md , oop.md , rest-vs-graphql.md , etc. At the beginning, the goal is clarity and speed of capture. Don\u2019t pre-plan categories before ideas have weight. concepts/ \u251c\u2500 http.md \u251c\u2500 tcp-ip.md \u251c\u2500 oop.md \u2514\u2500 rest-vs-graphql.md","title":"Current Approach"},{"location":"_meta/structure-notes/#planned-evolution_1","text":"As understanding deepens and related topics multiply, group them into domain-based subfolders . concepts/ \u251c\u2500 networking/ \u2502 \u251c\u2500 http/ \u2502 \u2502 \u251c\u2500 http-basics.md \u2502 \u2502 \u251c\u2500 headers.md \u2502 \u2502 \u251c\u2500 methods.md \u2502 \u2502 \u251c\u2500 status-codes.md \u2502 \u2502 \u2514\u2500 caching.md \u2502 \u251c\u2500 tcp-ip.md \u2502 \u251c\u2500 dns.md \u2502 \u2514\u2500 ssl-tls.md \u251c\u2500 web/ \u2502 \u251c\u2500 rest-vs-graphql.md \u2502 \u251c\u2500 api-versioning.md \u2502 \u251c\u2500 cookies-vs-tokens.md \u2502 \u2514\u2500 cors.md \u251c\u2500 programming/ \u2502 \u251c\u2500 oop.md \u2502 \u251c\u2500 functional-programming.md \u2502 \u251c\u2500 async-vs-threading.md \u2502 \u2514\u2500 design-patterns.md \u2514\u2500 os/ \u251c\u2500 processes-vs-threads.md \u251c\u2500 file-descriptors.md \u2514\u2500 memory-management.md","title":"Planned Evolution"},{"location":"_meta/structure-notes/#guiding-principles_1","text":"Start flat, grow when patterns emerge. A single note doesn\u2019t deserve a folder \u2014 but a cluster does. Concepts explain systems, not tools. They answer why and how something works rather than how to use it . Mirror real-world domains. Networking, Web, Programming, and OS \u2014 a conceptual map of how the stack fits together. Keep modular granularity. Break large concepts (like HTTP) into smaller, linkable notes once needed.","title":"Guiding Principles"},{"location":"_meta/structure-notes/#notes_1","text":"This pattern scales from beginner notes to deep theory without collapse into chaos. Where cheatsheets are practical quick wins, concepts are the slow architecture of understanding \u2014 ideas that deserve to interlink and mature. It keeps your vault growing like a mind with memory , not a folder full of files.","title":"Notes"},{"location":"ai/prompts/class-cheatsheet/","text":"i need full cheatsheets on class \"ClassName\" what about methods that is not mention here \"cheatsheet\"","title":"Class cheatsheet"},{"location":"ai/prompts/new-prompt/","text":"beans, how Beans work in Spring framework cheatsheet + concept(s) -i see there is multiple class of type Bean like : BeanUtils, beanFactory, beanClass, getBean. Is there some kind of class i should be aware? i think i would need to make","title":"New prompt"},{"location":"cheatsheets/containers/_meta/blueprint/","text":"Containers/ Blueprint \u00b6 Purpose \u00b6 The containers/ domain organizes everything related to container engines, images, runtime behavior, orchestration, and ecosystem tooling. It separates engine-specific docs (Docker, Podman) from cross-engine concepts like images, networks, volumes, and orchestration (Compose/Kubernetes). This prevents duplication and keeps the collection evolving smoothly as new tools (Buildah, Skopeo, Finch, Rancher, etc.) join the ecosystem. Folder layout (future-proof) \u00b6 cheatsheets/ \u2514\u2500 containers/ \u251c\u2500 _index.md # High-level overview (OCI standard, purpose, tools) \u251c\u2500 engines/ \u2502 \u251c\u2500 docker.md # Install, daemon, BuildKit, Compose v2 \u2502 \u251c\u2500 podman.md # Install, rootless, pods, Quadlet, docker.sock compat \u2502 \u2514\u2500 notes.md # Common engine quirks or comparisons \u251c\u2500 images/ \u2502 \u251c\u2500 building.md # Dockerfile / Containerfile, multi-arch, BuildKit vs Buildah \u2502 \u251c\u2500 scanning.md # Image scanning (trivy, grype) \u2502 \u2514\u2500 caching.md # Layers, pruning, build cache \u251c\u2500 registries/ \u2502 \u251c\u2500 auth.md # Login, creds store, auth.json, helper tools \u2502 \u2514\u2500 push-pull.md # Tagging, pushing, pulling, skopeo copy \u251c\u2500 runtime/ \u2502 \u251c\u2500 run-basics.md # run/start/stop/logs/exec equivalents \u2502 \u251c\u2500 pods-vs-compose.md # When to use Pods (Podman) vs Compose (Docker) \u2502 \u2514\u2500 systemd-quadlet.md # systemd integration for containers \u251c\u2500 networking/ \u2502 \u251c\u2500 basics.md # bridge/host/macvlan modes, ports \u2502 \u2514\u2500 dns.md # Container DNS, resolv.conf, hosts mapping \u251c\u2500 storage/ \u2502 \u251c\u2500 volumes.md # Named/bind mounts, persistence, SELinux :Z flags \u2502 \u2514\u2500 layers.md # OverlayFS, pruning, cleanup strategies \u251c\u2500 orchestration/ \u2502 \u251c\u2500 compose.md # Compose schema, common stack patterns \u2502 \u251c\u2500 kubernetes.md # Core K8s concepts, manifests, migration from Compose \u2502 \u2514\u2500 quadlet.md # Podman Quadlet + systemd unit patterns \u251c\u2500 templates/ \u2502 \u251c\u2500 compose/ # Prebuilt service templates (MySQL, Redis, Nginx, etc.) \u2502 \u251c\u2500 quadlet/ # Systemd unit templates for rootless containers \u2502 \u2514\u2500 k8s/ # Optional: minimal Deployment/Service manifests \u251c\u2500 security/ \u2502 \u251c\u2500 rootless.md # User namespaces; Podman\u2019s approach \u2502 \u251c\u2500 capabilities.md # cap drop/add, seccomp, SELinux/AppArmor \u2502 \u2514\u2500 supply-chain.md # SBOMs, signatures, provenance \u251c\u2500 troubleshooting/ \u2502 \u251c\u2500 inspect-and-logs.md # inspect, logs, events, journald \u2502 \u2514\u2500 cleanup.md # prune, orphan cleanup, storage reset \u2514\u2500 _meta/ \u2514\u2500 blueprint.md # (this file) ```` --- ## File naming & style rules - **One concept per file.** Keep each note focused \u2014 e.g., `volumes.md`, `building.md`, `run-basics.md`. - **Use kebab-case** filenames (consistent with URLs). - **Front matter metadata** aligns with the rest of your cheatsheets: ```md --- title: Podman \u2014 Rootless Mode tags: [containers, podman, rootless] summary: Understanding rootless containers and user namespaces in Podman. aliases: --- Titles : \u201cEngine \u2014 Concept\u201d or \u201cConcept \u2014 Focus\u201d Examples: Docker \u2014 Daemon & Compose , Images \u2014 Building , Networking \u2014 Basics . Cross-link pages frequently (e.g., link from images/building.md to registries/push-pull.md ). Optional: README.md Index per subfolder \u00b6 Example: containers/runtime/README.md --- title: Container Runtime \u2014 Index tags: [containers, runtime] summary: Container lifecycle, logs, and system integration. --- - [ Run Basics ]( ./run-basics.md ) - [ Pods vs Compose ]( ./pods-vs-compose.md ) - [ Systemd & Quadlet ]( ./systemd-quadlet.md ) Quick rename / migration guidance \u00b6 Existing single-page Docker notes \u2192 move to engines/docker.md Short templates (e.g., MySQL, Redis, Nginx Compose files) \u2192 templates/compose/ Rootless systemd or Quadlet examples \u2192 templates/quadlet/ Conceptual guides (volumes, networking, etc.) \u2192 respective subfolders Future directions (for when you scale) \u00b6 Add containers/tools/ for Buildah , Skopeo , Trivy , Grype . Add containers/integration/ for CI/CD , GitHub Actions , image signing . Add containers/_meta/summary.md \u2014 yearly reflection on what grew, what merged, what\u2019s deprecated. Core principle \u00b6 Organize by concept , not by engine. Engines change; concepts survive. Every folder should answer one enduring question: Images/ \u2014 How do we build and move container blueprints? Runtime/ \u2014 How do we run and manage containers locally? Orchestration/ \u2014 How do we run multiple containers together? Security/ \u2014 How do we trust, sign, and isolate them? Troubleshooting/ \u2014 How do we inspect and fix them? That\u2019s how you future-proof containers/ without overcomplicating it today.","title":"Containers \u2014 Future Blueprint"},{"location":"cheatsheets/containers/_meta/blueprint/#containers-blueprint","text":"","title":"Containers/ Blueprint"},{"location":"cheatsheets/containers/_meta/blueprint/#purpose","text":"The containers/ domain organizes everything related to container engines, images, runtime behavior, orchestration, and ecosystem tooling. It separates engine-specific docs (Docker, Podman) from cross-engine concepts like images, networks, volumes, and orchestration (Compose/Kubernetes). This prevents duplication and keeps the collection evolving smoothly as new tools (Buildah, Skopeo, Finch, Rancher, etc.) join the ecosystem.","title":"Purpose"},{"location":"cheatsheets/containers/_meta/blueprint/#folder-layout-future-proof","text":"cheatsheets/ \u2514\u2500 containers/ \u251c\u2500 _index.md # High-level overview (OCI standard, purpose, tools) \u251c\u2500 engines/ \u2502 \u251c\u2500 docker.md # Install, daemon, BuildKit, Compose v2 \u2502 \u251c\u2500 podman.md # Install, rootless, pods, Quadlet, docker.sock compat \u2502 \u2514\u2500 notes.md # Common engine quirks or comparisons \u251c\u2500 images/ \u2502 \u251c\u2500 building.md # Dockerfile / Containerfile, multi-arch, BuildKit vs Buildah \u2502 \u251c\u2500 scanning.md # Image scanning (trivy, grype) \u2502 \u2514\u2500 caching.md # Layers, pruning, build cache \u251c\u2500 registries/ \u2502 \u251c\u2500 auth.md # Login, creds store, auth.json, helper tools \u2502 \u2514\u2500 push-pull.md # Tagging, pushing, pulling, skopeo copy \u251c\u2500 runtime/ \u2502 \u251c\u2500 run-basics.md # run/start/stop/logs/exec equivalents \u2502 \u251c\u2500 pods-vs-compose.md # When to use Pods (Podman) vs Compose (Docker) \u2502 \u2514\u2500 systemd-quadlet.md # systemd integration for containers \u251c\u2500 networking/ \u2502 \u251c\u2500 basics.md # bridge/host/macvlan modes, ports \u2502 \u2514\u2500 dns.md # Container DNS, resolv.conf, hosts mapping \u251c\u2500 storage/ \u2502 \u251c\u2500 volumes.md # Named/bind mounts, persistence, SELinux :Z flags \u2502 \u2514\u2500 layers.md # OverlayFS, pruning, cleanup strategies \u251c\u2500 orchestration/ \u2502 \u251c\u2500 compose.md # Compose schema, common stack patterns \u2502 \u251c\u2500 kubernetes.md # Core K8s concepts, manifests, migration from Compose \u2502 \u2514\u2500 quadlet.md # Podman Quadlet + systemd unit patterns \u251c\u2500 templates/ \u2502 \u251c\u2500 compose/ # Prebuilt service templates (MySQL, Redis, Nginx, etc.) \u2502 \u251c\u2500 quadlet/ # Systemd unit templates for rootless containers \u2502 \u2514\u2500 k8s/ # Optional: minimal Deployment/Service manifests \u251c\u2500 security/ \u2502 \u251c\u2500 rootless.md # User namespaces; Podman\u2019s approach \u2502 \u251c\u2500 capabilities.md # cap drop/add, seccomp, SELinux/AppArmor \u2502 \u2514\u2500 supply-chain.md # SBOMs, signatures, provenance \u251c\u2500 troubleshooting/ \u2502 \u251c\u2500 inspect-and-logs.md # inspect, logs, events, journald \u2502 \u2514\u2500 cleanup.md # prune, orphan cleanup, storage reset \u2514\u2500 _meta/ \u2514\u2500 blueprint.md # (this file) ```` --- ## File naming & style rules - **One concept per file.** Keep each note focused \u2014 e.g., `volumes.md`, `building.md`, `run-basics.md`. - **Use kebab-case** filenames (consistent with URLs). - **Front matter metadata** aligns with the rest of your cheatsheets: ```md --- title: Podman \u2014 Rootless Mode tags: [containers, podman, rootless] summary: Understanding rootless containers and user namespaces in Podman. aliases: --- Titles : \u201cEngine \u2014 Concept\u201d or \u201cConcept \u2014 Focus\u201d Examples: Docker \u2014 Daemon & Compose , Images \u2014 Building , Networking \u2014 Basics . Cross-link pages frequently (e.g., link from images/building.md to registries/push-pull.md ).","title":"Folder layout (future-proof)"},{"location":"cheatsheets/containers/_meta/blueprint/#optional-readmemd-index-per-subfolder","text":"Example: containers/runtime/README.md --- title: Container Runtime \u2014 Index tags: [containers, runtime] summary: Container lifecycle, logs, and system integration. --- - [ Run Basics ]( ./run-basics.md ) - [ Pods vs Compose ]( ./pods-vs-compose.md ) - [ Systemd & Quadlet ]( ./systemd-quadlet.md )","title":"Optional: README.md Index per subfolder"},{"location":"cheatsheets/containers/_meta/blueprint/#quick-rename-migration-guidance","text":"Existing single-page Docker notes \u2192 move to engines/docker.md Short templates (e.g., MySQL, Redis, Nginx Compose files) \u2192 templates/compose/ Rootless systemd or Quadlet examples \u2192 templates/quadlet/ Conceptual guides (volumes, networking, etc.) \u2192 respective subfolders","title":"Quick rename / migration guidance"},{"location":"cheatsheets/containers/_meta/blueprint/#future-directions-for-when-you-scale","text":"Add containers/tools/ for Buildah , Skopeo , Trivy , Grype . Add containers/integration/ for CI/CD , GitHub Actions , image signing . Add containers/_meta/summary.md \u2014 yearly reflection on what grew, what merged, what\u2019s deprecated.","title":"Future directions (for when you scale)"},{"location":"cheatsheets/containers/_meta/blueprint/#core-principle","text":"Organize by concept , not by engine. Engines change; concepts survive. Every folder should answer one enduring question: Images/ \u2014 How do we build and move container blueprints? Runtime/ \u2014 How do we run and manage containers locally? Orchestration/ \u2014 How do we run multiple containers together? Security/ \u2014 How do we trust, sign, and isolate them? Troubleshooting/ \u2014 How do we inspect and fix them? That\u2019s how you future-proof containers/ without overcomplicating it today.","title":"Core principle"},{"location":"cheatsheets/containers/quickstart/docker/","text":"\ud83d\udc33 Docker: From Service Basics to Multi-Container Setup \u00b6 Docker packages software into portable, isolated containers . Each container runs a process with its own filesystem, network, and dependencies. Whether you\u2019re controlling Docker as a Linux service or orchestrating multiple apps, its real power lies in repeatability and consistency across environments. \u2699\ufe0f 1. Controlling Docker as a Service (systemctl) \u00b6 systemctl manages background services (daemons) on Linux via systemd . Docker runs as one such service \u2014 you manage it like any other system process. sudo systemctl start docker # Start Docker service sudo systemctl stop docker # Stop Docker service sudo systemctl restart docker # Restart service sudo systemctl status docker # Check status and logs sudo systemctl enable docker # Start at boot sudo systemctl disable docker # Disable auto-start systemctl list-units --type = service ```` \ud83d\udc49 In short: ` systemctl ` is the tool, ` systemd ` is the manager, and ` docker ` is the service you\u2019re controlling. --- ## \ud83e\uddf1 2. Core Docker Concepts | Concept | Description | | ---------------------- | ------------------------------------------------------------------------------------------------ | | **Image** | Blueprint for running software ( e.g., ` nginx:latest ` , ` mysql:8.4 ` ) . Immutable and versioned. | | **Container** | A running instance of an image. Ephemeral \u2014 stops and vanishes unless data is stored externally. | | **Volume** | Persistent storage outside the container lifecycle ( e.g., database data ) . | | **Port Mapping** | Bridge between host and container ( ` -p 8080 :80 ` means host:8080 \u2192 container:80 ) . | | **Dockerfile** | Script describing how to build an image. Defines base image, files, commands, and exposed ports. | | **docker-compose.yml** | Declarative config for running multiple containers together ( services, networks, volumes ) . | \ud83e\udded **Learn Docker in this order:** 1 . Run a single container ( ` docker run nginx ` ) 2 . Build your own image ( write a Dockerfile ) 3 . Persist data with volumes 4 . Connect containers with networks 5 . Orchestrate everything using Compose --- ### \ud83d\udd01 Container Lifecycle Image \u2192 Container \u2192 Process \u2192 Exit \u2192 Removed \u2191 (built from Dockerfile) A container is just a **process with boundaries** \u2014 lightweight isolation using Linux namespaces and cgroups. It\u2019s not a VM; it shares the host kernel but runs with its own view of the system. --- ## \ud83d\udd27 Quick Command Reference ```bash # Core commands docker ps # running containers docker ps -a # all containers (including stopped) docker images # list local images docker run -d -p 8080:80 nginx docker exec -it <container> bash docker logs -f <container> docker stop <container> docker rm <container> docker system prune -a # cleanup everything unused \ud83d\udce6 3. Container Networking (the hallway between containers) \u00b6 Each container lives in its own isolated network namespace. They can communicate when they share a Docker network . Bridge network (default): Containers can reach each other via IP, but not by name unless you define a user network. User-defined network (recommended): docker network create mynet docker run -d --name db --network mynet mysql:8.4 docker run -d --name app --network mynet myapp Now app can reach db simply at hostname db:3306 . Ports and host access: docker run -p 8080 :80 nginx Maps port 8080 on your host to port 80 inside the container. \u2705 Best practice: Use Docker networks for container-to-container comms. Expose ports only when the host or outside world must connect. \ud83e\uddf0 4. Example: Multi-Container App (Spring Boot + MySQL + Nginx) \u00b6 # docker-compose.yml services : backend : build : ./backend depends_on : mysql : condition : service_healthy environment : SPRING_DATASOURCE_URL : jdbc:mysql://mysql:3306/appdb?allowPublicKeyRetrieval=true&useSSL=false SPRING_DATASOURCE_USERNAME : appuser SPRING_DATASOURCE_PASSWORD : app-pass ports : - \"8080:8080\" restart : unless-stopped mysql : image : mysql:8.4 environment : MYSQL_ROOT_PASSWORD : secret MYSQL_DATABASE : appdb MYSQL_USER : appuser MYSQL_PASSWORD : app-pass volumes : - mysql_data:/var/lib/mysql ports : - \"3306:3306\" healthcheck : test : [ \"CMD-SHELL\" , \"mysqladmin ping -h 127.0.0.1 -p$${MYSQL_ROOT_PASSWORD} || exit 1\" ] interval : 10s retries : 5 nginx : image : nginx:latest ports : - \"80:80\" depends_on : [ backend ] volumes : mysql_data : Inside this network: backend talks to DB at mysql:3306 nginx proxies to backend:8080 You access via localhost:80 \ud83c\udfd7\ufe0f Backend Dockerfile example \u00b6 FROM eclipse-temurin:21-jre WORKDIR /app COPY target/app.jar app.jar EXPOSE 8080 ENTRYPOINT [ \"java\" , \"-jar\" , \"/app/app.jar\" ] \ud83e\udde9 Application properties (Spring Boot) \u00b6 spring.datasource.url = jdbc:mysql://mysql:3306/appdb spring.datasource.username = appuser spring.datasource.password = app-pass spring.jpa.hibernate.ddl-auto = update spring.jpa.show-sql = true \ud83e\uddfc 5. Housekeeping and Troubleshooting \u00b6 Cleanups \u00b6 docker container prune # remove stopped containers docker image prune # remove dangling images docker system prune -a # full cleanup (containers, images, volumes, networks) Debugging \u00b6 docker ps -a # find exited containers docker logs <name> # read logs docker inspect <name> # metadata, IPs, mounts docker exec -it <name> bash # open shell inside container \ud83e\udde0 Advanced Concepts (for later) \u00b6 Image layers: Every Dockerfile instruction adds a cached layer \u2014 build faster by ordering instructions wisely. Isolation vs VMs: Containers share the host kernel, making them lightweight and fast to start. Security basics: Avoid running containers as root in production; use minimal base images (e.g., distroless , alpine ). BuildKit: Modern Docker build engine with parallel builds, inline caching, and secrets support ( DOCKER_BUILDKIT=1 ). \u2705 Summary \u00b6 Use systemctl to manage the Docker daemon. Use docker commands to run individual containers. Use docker-compose to run multi-container setups. Use volumes for persistence, networks for communication, and healthchecks for reliability. Start small, automate gradually, and remember: containers are processes, not magic . \ud83e\udded Further expansion (when you\u2019re ready) \u00b6 Later, you can split this file into: docker_basics.md docker_compose.md docker_networking.md docker_troubleshooting.md","title":"\ud83d\udc33 Docker Quickstart"},{"location":"cheatsheets/containers/quickstart/docker/#docker-from-service-basics-to-multi-container-setup","text":"Docker packages software into portable, isolated containers . Each container runs a process with its own filesystem, network, and dependencies. Whether you\u2019re controlling Docker as a Linux service or orchestrating multiple apps, its real power lies in repeatability and consistency across environments.","title":"\ud83d\udc33 Docker: From Service Basics to Multi-Container Setup"},{"location":"cheatsheets/containers/quickstart/docker/#1-controlling-docker-as-a-service-systemctl","text":"systemctl manages background services (daemons) on Linux via systemd . Docker runs as one such service \u2014 you manage it like any other system process. sudo systemctl start docker # Start Docker service sudo systemctl stop docker # Stop Docker service sudo systemctl restart docker # Restart service sudo systemctl status docker # Check status and logs sudo systemctl enable docker # Start at boot sudo systemctl disable docker # Disable auto-start systemctl list-units --type = service ```` \ud83d\udc49 In short: ` systemctl ` is the tool, ` systemd ` is the manager, and ` docker ` is the service you\u2019re controlling. --- ## \ud83e\uddf1 2. Core Docker Concepts | Concept | Description | | ---------------------- | ------------------------------------------------------------------------------------------------ | | **Image** | Blueprint for running software ( e.g., ` nginx:latest ` , ` mysql:8.4 ` ) . Immutable and versioned. | | **Container** | A running instance of an image. Ephemeral \u2014 stops and vanishes unless data is stored externally. | | **Volume** | Persistent storage outside the container lifecycle ( e.g., database data ) . | | **Port Mapping** | Bridge between host and container ( ` -p 8080 :80 ` means host:8080 \u2192 container:80 ) . | | **Dockerfile** | Script describing how to build an image. Defines base image, files, commands, and exposed ports. | | **docker-compose.yml** | Declarative config for running multiple containers together ( services, networks, volumes ) . | \ud83e\udded **Learn Docker in this order:** 1 . Run a single container ( ` docker run nginx ` ) 2 . Build your own image ( write a Dockerfile ) 3 . Persist data with volumes 4 . Connect containers with networks 5 . Orchestrate everything using Compose --- ### \ud83d\udd01 Container Lifecycle Image \u2192 Container \u2192 Process \u2192 Exit \u2192 Removed \u2191 (built from Dockerfile) A container is just a **process with boundaries** \u2014 lightweight isolation using Linux namespaces and cgroups. It\u2019s not a VM; it shares the host kernel but runs with its own view of the system. --- ## \ud83d\udd27 Quick Command Reference ```bash # Core commands docker ps # running containers docker ps -a # all containers (including stopped) docker images # list local images docker run -d -p 8080:80 nginx docker exec -it <container> bash docker logs -f <container> docker stop <container> docker rm <container> docker system prune -a # cleanup everything unused","title":"\u2699\ufe0f 1. Controlling Docker as a Service (systemctl)"},{"location":"cheatsheets/containers/quickstart/docker/#3-container-networking-the-hallway-between-containers","text":"Each container lives in its own isolated network namespace. They can communicate when they share a Docker network . Bridge network (default): Containers can reach each other via IP, but not by name unless you define a user network. User-defined network (recommended): docker network create mynet docker run -d --name db --network mynet mysql:8.4 docker run -d --name app --network mynet myapp Now app can reach db simply at hostname db:3306 . Ports and host access: docker run -p 8080 :80 nginx Maps port 8080 on your host to port 80 inside the container. \u2705 Best practice: Use Docker networks for container-to-container comms. Expose ports only when the host or outside world must connect.","title":"\ud83d\udce6 3. Container Networking (the hallway between containers)"},{"location":"cheatsheets/containers/quickstart/docker/#4-example-multi-container-app-spring-boot-mysql-nginx","text":"# docker-compose.yml services : backend : build : ./backend depends_on : mysql : condition : service_healthy environment : SPRING_DATASOURCE_URL : jdbc:mysql://mysql:3306/appdb?allowPublicKeyRetrieval=true&useSSL=false SPRING_DATASOURCE_USERNAME : appuser SPRING_DATASOURCE_PASSWORD : app-pass ports : - \"8080:8080\" restart : unless-stopped mysql : image : mysql:8.4 environment : MYSQL_ROOT_PASSWORD : secret MYSQL_DATABASE : appdb MYSQL_USER : appuser MYSQL_PASSWORD : app-pass volumes : - mysql_data:/var/lib/mysql ports : - \"3306:3306\" healthcheck : test : [ \"CMD-SHELL\" , \"mysqladmin ping -h 127.0.0.1 -p$${MYSQL_ROOT_PASSWORD} || exit 1\" ] interval : 10s retries : 5 nginx : image : nginx:latest ports : - \"80:80\" depends_on : [ backend ] volumes : mysql_data : Inside this network: backend talks to DB at mysql:3306 nginx proxies to backend:8080 You access via localhost:80","title":"\ud83e\uddf0 4. Example: Multi-Container App (Spring Boot + MySQL + Nginx)"},{"location":"cheatsheets/containers/quickstart/docker/#backend-dockerfile-example","text":"FROM eclipse-temurin:21-jre WORKDIR /app COPY target/app.jar app.jar EXPOSE 8080 ENTRYPOINT [ \"java\" , \"-jar\" , \"/app/app.jar\" ]","title":"\ud83c\udfd7\ufe0f Backend Dockerfile example"},{"location":"cheatsheets/containers/quickstart/docker/#application-properties-spring-boot","text":"spring.datasource.url = jdbc:mysql://mysql:3306/appdb spring.datasource.username = appuser spring.datasource.password = app-pass spring.jpa.hibernate.ddl-auto = update spring.jpa.show-sql = true","title":"\ud83e\udde9 Application properties (Spring Boot)"},{"location":"cheatsheets/containers/quickstart/docker/#5-housekeeping-and-troubleshooting","text":"","title":"\ud83e\uddfc 5. Housekeeping and Troubleshooting"},{"location":"cheatsheets/containers/quickstart/docker/#cleanups","text":"docker container prune # remove stopped containers docker image prune # remove dangling images docker system prune -a # full cleanup (containers, images, volumes, networks)","title":"Cleanups"},{"location":"cheatsheets/containers/quickstart/docker/#debugging","text":"docker ps -a # find exited containers docker logs <name> # read logs docker inspect <name> # metadata, IPs, mounts docker exec -it <name> bash # open shell inside container","title":"Debugging"},{"location":"cheatsheets/containers/quickstart/docker/#advanced-concepts-for-later","text":"Image layers: Every Dockerfile instruction adds a cached layer \u2014 build faster by ordering instructions wisely. Isolation vs VMs: Containers share the host kernel, making them lightweight and fast to start. Security basics: Avoid running containers as root in production; use minimal base images (e.g., distroless , alpine ). BuildKit: Modern Docker build engine with parallel builds, inline caching, and secrets support ( DOCKER_BUILDKIT=1 ).","title":"\ud83e\udde0 Advanced Concepts (for later)"},{"location":"cheatsheets/containers/quickstart/docker/#summary","text":"Use systemctl to manage the Docker daemon. Use docker commands to run individual containers. Use docker-compose to run multi-container setups. Use volumes for persistence, networks for communication, and healthchecks for reliability. Start small, automate gradually, and remember: containers are processes, not magic .","title":"\u2705 Summary"},{"location":"cheatsheets/containers/quickstart/docker/#further-expansion-when-youre-ready","text":"Later, you can split this file into: docker_basics.md docker_compose.md docker_networking.md docker_troubleshooting.md","title":"\ud83e\udded Further expansion (when you\u2019re ready)"},{"location":"cheatsheets/containers/quickstart/podman/","text":"\ud83d\ude80 Simple Guide to Podman and Containers \u00b6 \ud83d\udd27 What Podman Is \u00b6 Podman (\u201cPod Manager\u201d) is a container engine \u2014 just like Docker \u2014 but it runs without a daemon . Instead of one background service ( dockerd ) managing everything, Podman runs containers as regular Linux processes owned by the user who starts them. It fully supports the OCI (Open Container Initiative) standards, meaning: Docker and Podman use the same image format. You can pull from the same registries ( docker.io , quay.io , ghcr.io , etc.). Images built by one work in the other. Podman can manage: Single containers Groups of containers (called Pods ) Containers as systemd services via Quadlet \ud83e\uddf1 The Big Architectural Difference \u00b6 Concept Docker Podman Daemon Central background process ( dockerd ) Daemonless \u2014 every container is a direct child process Privileges Root daemon (even for non-root users) Rootless by default \u2014 containers run under your own UID Socket /var/run/docker.sock Optional: /run/user/$UID/podman/podman.sock Compose Built-in docker compose External tool: podman-compose Pods Docker: only in Kubernetes First-class feature \u2014 group containers like mini-K8s pods System integration Docker runs as service Podman integrates natively with systemd via Quadlet In short: Docker = one big engine. Podman = small, self-contained tools running directly on Linux. \ud83e\udde0 Core Podman Concepts (same as Docker) \u00b6 Image Template for containers, read-only, immutable. Example: podman pull mysql:8.4 Container A running instance of an image. Starts quickly, isolated by namespaces and cgroups. Example: podman run -d --name mysql mysql:8.4 Volume Persistent data storage \u2014 survives container deletion. Example: podman volume create mysql-data Ports Expose container ports to the host. Example: -p 8080:80 \u2192 access on localhost:8080 . Containerfile Same as Dockerfile, just name-neutral. Example: podman build -t myapp . Compose Use podman-compose (separate package) to run multi-container stacks. \u2699\ufe0f Podman Basics \u2014 Command Equivalents \u00b6 Task Docker Podman Run container docker run -d nginx podman run -d nginx List containers docker ps podman ps Stop container docker stop nginx podman stop nginx Remove container docker rm nginx podman rm nginx View logs docker logs nginx podman logs nginx Inspect docker inspect nginx podman inspect nginx View images docker images podman images Build image docker build -t app . podman build -t app . They\u2019re nearly identical \u2014 Podman was intentionally built to be CLI-compatible. \ud83e\uddcd Rootless Containers (Podman\u2019s Superpower) \u00b6 By default, Podman runs containers without root privileges \u2014 each container runs inside a user namespace , isolated from the real system. You don\u2019t need sudo . You can run multiple user-isolated container sets on the same machine. Security improves because even a breakout from the container stays inside your user sandbox. Example: podman run --rm -it alpine sh \u2192 Runs as your own user, not root. Inside the container, you appear as root \u2014 but it\u2019s mapped to your normal UID on the host. \ud83e\udde9 Pods \u2014 Built-in Kubernetes-Style Grouping \u00b6 A Pod is a group of containers that share the same network and storage namespace. Example: podman pod create --name webpod -p 8080 :80 podman run -d --pod webpod nginx podman run -d --pod webpod redis Now both nginx and redis share the same network \u2014 just like a Kubernetes pod. You can inspect: podman pod ps podman pod inspect webpod Use pods when you want tight coupling between containers (e.g., app + sidecar). \ud83e\uddf0 Systemd Integration \u2014 Quadlet \u00b6 Podman talks natively with systemd , which means your containers can become permanent user or system services. You don\u2019t write systemctl start podman \u2014 instead, you drop a .container or .pod file in your systemd config. Example: ~/.config/containers/systemd/mysql.container [Container] Image = mysql:8.4 PublishPort = 3306:3306 Env = MYSQL_ROOT_PASSWORD=root Volume = mysql-data:/var/lib/mysql [Install] WantedBy = default.target Enable it: systemctl --user daemon-reload systemctl --user enable --now mysql.service Podman + Quadlet replaces the Docker daemon entirely \u2014 systemd manages the container lifecycle. \ud83e\ude84 Compose (Multi-Container Dev Environments) \u00b6 Podman doesn\u2019t bundle Compose by default, but you can install podman-compose . It uses the same docker-compose.yml files . Example: podman-compose -f docker-compose.yml up -d podman-compose down That means all your old Compose projects (MySQL + backend + Nginx) run untouched. Behind the scenes, it creates pods for you automatically. \ud83d\udef0\ufe0f Networking (Under the Hood) \u00b6 Podman uses CNI plugins to manage networking. Containers on the same pod share the same network namespace. For external exposure, use -p hostPort:containerPort just like Docker. Example: podman run -d -p 8080 :80 nginx To connect multiple containers: podman network create appnet podman run -d --network appnet --name db mysql:8.4 podman run -d --network appnet --name app backend:latest They can talk to each other via db:3306 , just like in Docker networks. \ud83d\udce6 Volumes and Storage \u00b6 Persistent data works the same way as Docker, but stored under your user directory for rootless containers. podman volume create mysql-data podman run -v mysql-data:/var/lib/mysql mysql:8.4 List and inspect volumes: podman volume ls podman volume inspect mysql-data \ud83d\udd10 Security & Isolation \u00b6 Rootless mode prevents host compromise. Supports SELinux , AppArmor , and seccomp natively. You can drop capabilities, restrict syscalls, or limit resources: podman run --cap-drop = ALL --read-only nginx * Default network isolation is tighter than Docker\u2019s, but can be configured. \ud83e\uddf9 Maintenance & Cleanup \u00b6 podman ps -a podman images podman system prune -a Equivalent to Docker \u2014 just without daemon interaction. \u26a1 Quick Comparison Summary \u00b6 Feature Docker Podman Daemon Required ( dockerd ) None Rootless mode Partial Default Compose Built-in Separate tool ( podman-compose ) Pods No Yes systemd integration Indirect Native (Quadlet) Socket API /var/run/docker.sock Optional ( podman.sock ) CLI commands docker podman (or use podman-docker alias) \ud83e\udded Mental Model \u00b6 Think of Docker as \u201cone big boss\u201d (the daemon) that manages your containers for you. Think of Podman as \u201cdirect control\u201d \u2014 you manage containers like regular Linux processes, optionally grouped into pods and controlled by systemd. You lose the babysitter daemon, but you gain: Simpler architecture Rootless safety Native system integration Kubernetes-aligned concepts (pods, Quadlet) \ud83e\udde9 Example Setup (MySQL + Backend) \u00b6 docker-compose.yml still works unchanged: services : mysql : image : mysql:8.4 environment : MYSQL_ROOT_PASSWORD : root MYSQL_DATABASE : appdb ports : - \"3306:3306\" volumes : - mysql_data:/var/lib/mysql backend : image : backend:latest depends_on : - mysql environment : SPRING_DATASOURCE_URL : jdbc:mysql://mysql:3306/appdb SPRING_DATASOURCE_USERNAME : root SPRING_DATASOURCE_PASSWORD : root ports : - \"8080:8080\" volumes : mysql_data : Run it: podman-compose up -d \u2705 Rule of Thumb \u00b6 Everything you know from Docker works here. The key differences: No daemon (each container is its own process). Rootless by default. Pods and Quadlet add system-level flexibility. Compose exists separately but behaves the same. Podman is Docker\u2019s spiritual successor \u2014 same workflow, just stripped of the daemon and built with Linux-native elegance.","title":"\ud83d\ude80 Podman Quickstart"},{"location":"cheatsheets/containers/quickstart/podman/#simple-guide-to-podman-and-containers","text":"","title":"\ud83d\ude80 Simple Guide to Podman and Containers"},{"location":"cheatsheets/containers/quickstart/podman/#what-podman-is","text":"Podman (\u201cPod Manager\u201d) is a container engine \u2014 just like Docker \u2014 but it runs without a daemon . Instead of one background service ( dockerd ) managing everything, Podman runs containers as regular Linux processes owned by the user who starts them. It fully supports the OCI (Open Container Initiative) standards, meaning: Docker and Podman use the same image format. You can pull from the same registries ( docker.io , quay.io , ghcr.io , etc.). Images built by one work in the other. Podman can manage: Single containers Groups of containers (called Pods ) Containers as systemd services via Quadlet","title":"\ud83d\udd27 What Podman Is"},{"location":"cheatsheets/containers/quickstart/podman/#the-big-architectural-difference","text":"Concept Docker Podman Daemon Central background process ( dockerd ) Daemonless \u2014 every container is a direct child process Privileges Root daemon (even for non-root users) Rootless by default \u2014 containers run under your own UID Socket /var/run/docker.sock Optional: /run/user/$UID/podman/podman.sock Compose Built-in docker compose External tool: podman-compose Pods Docker: only in Kubernetes First-class feature \u2014 group containers like mini-K8s pods System integration Docker runs as service Podman integrates natively with systemd via Quadlet In short: Docker = one big engine. Podman = small, self-contained tools running directly on Linux.","title":"\ud83e\uddf1 The Big Architectural Difference"},{"location":"cheatsheets/containers/quickstart/podman/#core-podman-concepts-same-as-docker","text":"Image Template for containers, read-only, immutable. Example: podman pull mysql:8.4 Container A running instance of an image. Starts quickly, isolated by namespaces and cgroups. Example: podman run -d --name mysql mysql:8.4 Volume Persistent data storage \u2014 survives container deletion. Example: podman volume create mysql-data Ports Expose container ports to the host. Example: -p 8080:80 \u2192 access on localhost:8080 . Containerfile Same as Dockerfile, just name-neutral. Example: podman build -t myapp . Compose Use podman-compose (separate package) to run multi-container stacks.","title":"\ud83e\udde0 Core Podman Concepts (same as Docker)"},{"location":"cheatsheets/containers/quickstart/podman/#podman-basics-command-equivalents","text":"Task Docker Podman Run container docker run -d nginx podman run -d nginx List containers docker ps podman ps Stop container docker stop nginx podman stop nginx Remove container docker rm nginx podman rm nginx View logs docker logs nginx podman logs nginx Inspect docker inspect nginx podman inspect nginx View images docker images podman images Build image docker build -t app . podman build -t app . They\u2019re nearly identical \u2014 Podman was intentionally built to be CLI-compatible.","title":"\u2699\ufe0f Podman Basics \u2014 Command Equivalents"},{"location":"cheatsheets/containers/quickstart/podman/#rootless-containers-podmans-superpower","text":"By default, Podman runs containers without root privileges \u2014 each container runs inside a user namespace , isolated from the real system. You don\u2019t need sudo . You can run multiple user-isolated container sets on the same machine. Security improves because even a breakout from the container stays inside your user sandbox. Example: podman run --rm -it alpine sh \u2192 Runs as your own user, not root. Inside the container, you appear as root \u2014 but it\u2019s mapped to your normal UID on the host.","title":"\ud83e\uddcd Rootless Containers (Podman\u2019s Superpower)"},{"location":"cheatsheets/containers/quickstart/podman/#pods-built-in-kubernetes-style-grouping","text":"A Pod is a group of containers that share the same network and storage namespace. Example: podman pod create --name webpod -p 8080 :80 podman run -d --pod webpod nginx podman run -d --pod webpod redis Now both nginx and redis share the same network \u2014 just like a Kubernetes pod. You can inspect: podman pod ps podman pod inspect webpod Use pods when you want tight coupling between containers (e.g., app + sidecar).","title":"\ud83e\udde9 Pods \u2014 Built-in Kubernetes-Style Grouping"},{"location":"cheatsheets/containers/quickstart/podman/#systemd-integration-quadlet","text":"Podman talks natively with systemd , which means your containers can become permanent user or system services. You don\u2019t write systemctl start podman \u2014 instead, you drop a .container or .pod file in your systemd config. Example: ~/.config/containers/systemd/mysql.container [Container] Image = mysql:8.4 PublishPort = 3306:3306 Env = MYSQL_ROOT_PASSWORD=root Volume = mysql-data:/var/lib/mysql [Install] WantedBy = default.target Enable it: systemctl --user daemon-reload systemctl --user enable --now mysql.service Podman + Quadlet replaces the Docker daemon entirely \u2014 systemd manages the container lifecycle.","title":"\ud83e\uddf0 Systemd Integration \u2014 Quadlet"},{"location":"cheatsheets/containers/quickstart/podman/#compose-multi-container-dev-environments","text":"Podman doesn\u2019t bundle Compose by default, but you can install podman-compose . It uses the same docker-compose.yml files . Example: podman-compose -f docker-compose.yml up -d podman-compose down That means all your old Compose projects (MySQL + backend + Nginx) run untouched. Behind the scenes, it creates pods for you automatically.","title":"\ud83e\ude84 Compose (Multi-Container Dev Environments)"},{"location":"cheatsheets/containers/quickstart/podman/#networking-under-the-hood","text":"Podman uses CNI plugins to manage networking. Containers on the same pod share the same network namespace. For external exposure, use -p hostPort:containerPort just like Docker. Example: podman run -d -p 8080 :80 nginx To connect multiple containers: podman network create appnet podman run -d --network appnet --name db mysql:8.4 podman run -d --network appnet --name app backend:latest They can talk to each other via db:3306 , just like in Docker networks.","title":"\ud83d\udef0\ufe0f Networking (Under the Hood)"},{"location":"cheatsheets/containers/quickstart/podman/#volumes-and-storage","text":"Persistent data works the same way as Docker, but stored under your user directory for rootless containers. podman volume create mysql-data podman run -v mysql-data:/var/lib/mysql mysql:8.4 List and inspect volumes: podman volume ls podman volume inspect mysql-data","title":"\ud83d\udce6 Volumes and Storage"},{"location":"cheatsheets/containers/quickstart/podman/#security-isolation","text":"Rootless mode prevents host compromise. Supports SELinux , AppArmor , and seccomp natively. You can drop capabilities, restrict syscalls, or limit resources: podman run --cap-drop = ALL --read-only nginx * Default network isolation is tighter than Docker\u2019s, but can be configured.","title":"\ud83d\udd10 Security &amp; Isolation"},{"location":"cheatsheets/containers/quickstart/podman/#maintenance-cleanup","text":"podman ps -a podman images podman system prune -a Equivalent to Docker \u2014 just without daemon interaction.","title":"\ud83e\uddf9 Maintenance &amp; Cleanup"},{"location":"cheatsheets/containers/quickstart/podman/#quick-comparison-summary","text":"Feature Docker Podman Daemon Required ( dockerd ) None Rootless mode Partial Default Compose Built-in Separate tool ( podman-compose ) Pods No Yes systemd integration Indirect Native (Quadlet) Socket API /var/run/docker.sock Optional ( podman.sock ) CLI commands docker podman (or use podman-docker alias)","title":"\u26a1 Quick Comparison Summary"},{"location":"cheatsheets/containers/quickstart/podman/#mental-model","text":"Think of Docker as \u201cone big boss\u201d (the daemon) that manages your containers for you. Think of Podman as \u201cdirect control\u201d \u2014 you manage containers like regular Linux processes, optionally grouped into pods and controlled by systemd. You lose the babysitter daemon, but you gain: Simpler architecture Rootless safety Native system integration Kubernetes-aligned concepts (pods, Quadlet)","title":"\ud83e\udded Mental Model"},{"location":"cheatsheets/containers/quickstart/podman/#example-setup-mysql-backend","text":"docker-compose.yml still works unchanged: services : mysql : image : mysql:8.4 environment : MYSQL_ROOT_PASSWORD : root MYSQL_DATABASE : appdb ports : - \"3306:3306\" volumes : - mysql_data:/var/lib/mysql backend : image : backend:latest depends_on : - mysql environment : SPRING_DATASOURCE_URL : jdbc:mysql://mysql:3306/appdb SPRING_DATASOURCE_USERNAME : root SPRING_DATASOURCE_PASSWORD : root ports : - \"8080:8080\" volumes : mysql_data : Run it: podman-compose up -d","title":"\ud83e\udde9 Example Setup (MySQL + Backend)"},{"location":"cheatsheets/containers/quickstart/podman/#rule-of-thumb","text":"Everything you know from Docker works here. The key differences: No daemon (each container is its own process). Rootless by default. Pods and Quadlet add system-level flexibility. Compose exists separately but behaves the same. Podman is Docker\u2019s spiritual successor \u2014 same workflow, just stripped of the daemon and built with Linux-native elegance.","title":"\u2705 Rule of Thumb"},{"location":"cheatsheets/containers/templates/compose/mysql/","text":"\ud83d\udc2c MySQL with Compose (Docker or Podman) \u00b6 This cheat sheet shows how to run a reusable local MySQL 8 container using a Compose file. It works the same with Docker or Podman \u2014 choose your engine and forget about the rest. Engine setup \u00b6 You can alias one variable to simplify commands: # Optional global engine switch ENGINE = ${ ENGINE :- docker } # set ENGINE=podman if you use Podman ```` Then every command becomes engine-agnostic: ``` bash $ENGINE compose up -d $ENGINE compose logs -f mysql $ENGINE exec -it mysql8 mysql -u root -p MySQL Compose File \u00b6 # File: compose.yaml # Purpose: Run a reusable local MySQL 8 container that your Spring Boot app # (running on host) and DBeaver can connect to via localhost. Works with Docker or Podman. services : mysql : image : mysql:8.0 # Base image. For reproducibility, pin a patch: e.g., mysql:8.0.43 container_name : mysql8 # Stable handle for exec/logs: `$ENGINE exec -it mysql8 ...` restart : unless-stopped # Auto-start on reboot; won't restart if you stop it manually environment : MYSQL_ROOT_PASSWORD : rootpass # Root password (only used on first init). Move to .env for safety. MYSQL_DATABASE : appdb # Auto-create this DB on first init MYSQL_USER : appuser # App user created on first init MYSQL_PASSWORD : apppass # App user password (first init only) TZ : Europe/Vilnius # Align container time with host; helpful for logs/JDBC timestamps ports : - \"3306:3306\" # Host:Container. If host 3306 is busy, use \"3307:3306\" and set JDBC port=3307 command : # mysqld server flags - --default-authentication-plugin=mysql_native_password # Use legacy auth for maximum client compatibility (DBeaver/JDBC); drop this if all clients # support caching_sha2_password (the modern default). - --character-set-server=utf8mb4 # Full Unicode, including emoji. - --collation-server=utf8mb4_0900_ai_ci # Modern, case-insensitive, accent-insensitive collation that pairs with utf8mb4. - --skip-host-cache # Avoid reverse DNS lookups on connect (faster, fewer surprises). - --skip-name-resolve # Force MySQL to use IPs instead of hostnames (prevents weird grants on hostnames). volumes : - mysql_data:/var/lib/mysql # Named volume for data files (safe default on Linux; survives container recreation). - ./initdb:/docker-entrypoint-initdb.d:ro,Z # One-time init scripts (.sql/.sh) executed alphabetically on first boot (empty data dir). # `:ro` = read-only for safety. `,Z` = SELinux relabel (Fedora/RHEL); harmless elsewhere. healthcheck : test : [ \"CMD-SHELL\" , \"mysqladmin ping -h localhost -p$${MYSQL_ROOT_PASSWORD} --silent\" ] # Simple readiness probe. Note the $$ to escape $ in YAML so the container sees $MYSQL_ROOT_PASSWORD. interval : 10s # Probe every 10 seconds timeout : 5s # Consider it failed if no response within 5 seconds retries : 10 # Require 10 consecutive passes/failures before flipping status volumes : mysql_data : # Declare the named volume used above \ud83e\udded Run & Inspect \u00b6 $ENGINE compose up -d $ENGINE compose logs -f mysql # watch for: \"ready for connections\" $ENGINE ps \ud83e\udde9 Connect (e.g., DBeaver) \u00b6 Host: localhost Port: 3306 (or remapped port) DB: appdb User/Pass: appuser / apppass (standard) or root / rootpass (admin) \ud83d\udd11 Create new DB users \u00b6 $ENGINE exec -it mysql8 mysql -u root -p # enter rootpass CREATE USER 'newuser' @ '%' IDENTIFIED BY 'newpass' ; GRANT ALL PRIVILEGES ON appdb . * TO 'newuser' @ '%' ; FLUSH PRIVILEGES ; \ud83d\udcc1 Init scripts ( ./initdb ) \u00b6 Any .sql or .sh files placed in ./initdb run once on the first boot (when the volume is empty). ./initdb/ \u251c\u2500 01-schema.sql \u251c\u2500 02-seed.sql \u2514\u2500 03-users.sql Example \u2014 Schema ( 01-schema.sql ) \u00b6 USE appdb ; CREATE TABLE IF NOT EXISTS customers ( id BIGINT AUTO_INCREMENT PRIMARY KEY , email VARCHAR ( 255 ) NOT NULL UNIQUE , first_name VARCHAR ( 100 ) NOT NULL , last_name VARCHAR ( 100 ) NOT NULL , status ENUM ( 'ACTIVE' , 'INACTIVE' ) NOT NULL DEFAULT 'ACTIVE' , created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP , updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ; Example \u2014 Seed Data ( 02-seed.sql ) \u00b6 USE appdb ; INSERT INTO customers ( email , first_name , last_name , status ) VALUES ( 'ada@example.com' , 'Ada' , 'Lovelace' , 'ACTIVE' ), ( 'grace@example.com' , 'Grace' , 'Hopper' , 'ACTIVE' ) ON DUPLICATE KEY UPDATE first_name = VALUES ( first_name ), last_name = VALUES ( last_name ), status = VALUES ( status ); \u267b\ufe0f Re-run init scripts \u00b6 If you want a clean start: $ENGINE compose down -v $ENGINE compose up -d Otherwise, make your SQL idempotent using: CREATE TABLE IF NOT EXISTS INSERT ... ON DUPLICATE KEY UPDATE CREATE INDEX IF NOT EXISTS \ud83e\uddf1 Migrations (recommended later) \u00b6 For production or evolving schemas, manage changes with Flyway or Liquibase in Spring Boot instead of raw SQL. \u2699\ufe0f Spring Boot JPA Strategy Reminder \u00b6 # pick ONE: spring.jpa.hibernate.ddl-auto = update # spring.jpa.hibernate.ddl-auto=validate # spring.jpa.hibernate.ddl-auto=create # spring.jpa.hibernate.ddl-auto=create-drop If you\u2019re using ./initdb or Flyway, set ddl-auto=validate to ensure schema consistency. \ud83e\udeb6 Notes on Podman vs Docker \u00b6 YAML is identical. :Z volume label may be required on SELinux (Fedora/RHEL). Rootless mode publishes ports to localhost only (fine for dev). You can generate a systemd unit with: podman generate systemd --new --files mysql8 Everything else \u201cjust works.\u201d That\u2019s it \u2014 a single Compose file that runs anywhere: Docker, Podman, WSL, or a full Linux host. If you later add PostgreSQL or Redis, you can reuse this same $ENGINE compose pattern \u2014 one variable, no mental friction.","title":"MySQL"},{"location":"cheatsheets/containers/templates/compose/mysql/#mysql-with-compose-docker-or-podman","text":"This cheat sheet shows how to run a reusable local MySQL 8 container using a Compose file. It works the same with Docker or Podman \u2014 choose your engine and forget about the rest.","title":"\ud83d\udc2c MySQL with Compose (Docker or Podman)"},{"location":"cheatsheets/containers/templates/compose/mysql/#engine-setup","text":"You can alias one variable to simplify commands: # Optional global engine switch ENGINE = ${ ENGINE :- docker } # set ENGINE=podman if you use Podman ```` Then every command becomes engine-agnostic: ``` bash $ENGINE compose up -d $ENGINE compose logs -f mysql $ENGINE exec -it mysql8 mysql -u root -p","title":"Engine setup"},{"location":"cheatsheets/containers/templates/compose/mysql/#mysql-compose-file","text":"# File: compose.yaml # Purpose: Run a reusable local MySQL 8 container that your Spring Boot app # (running on host) and DBeaver can connect to via localhost. Works with Docker or Podman. services : mysql : image : mysql:8.0 # Base image. For reproducibility, pin a patch: e.g., mysql:8.0.43 container_name : mysql8 # Stable handle for exec/logs: `$ENGINE exec -it mysql8 ...` restart : unless-stopped # Auto-start on reboot; won't restart if you stop it manually environment : MYSQL_ROOT_PASSWORD : rootpass # Root password (only used on first init). Move to .env for safety. MYSQL_DATABASE : appdb # Auto-create this DB on first init MYSQL_USER : appuser # App user created on first init MYSQL_PASSWORD : apppass # App user password (first init only) TZ : Europe/Vilnius # Align container time with host; helpful for logs/JDBC timestamps ports : - \"3306:3306\" # Host:Container. If host 3306 is busy, use \"3307:3306\" and set JDBC port=3307 command : # mysqld server flags - --default-authentication-plugin=mysql_native_password # Use legacy auth for maximum client compatibility (DBeaver/JDBC); drop this if all clients # support caching_sha2_password (the modern default). - --character-set-server=utf8mb4 # Full Unicode, including emoji. - --collation-server=utf8mb4_0900_ai_ci # Modern, case-insensitive, accent-insensitive collation that pairs with utf8mb4. - --skip-host-cache # Avoid reverse DNS lookups on connect (faster, fewer surprises). - --skip-name-resolve # Force MySQL to use IPs instead of hostnames (prevents weird grants on hostnames). volumes : - mysql_data:/var/lib/mysql # Named volume for data files (safe default on Linux; survives container recreation). - ./initdb:/docker-entrypoint-initdb.d:ro,Z # One-time init scripts (.sql/.sh) executed alphabetically on first boot (empty data dir). # `:ro` = read-only for safety. `,Z` = SELinux relabel (Fedora/RHEL); harmless elsewhere. healthcheck : test : [ \"CMD-SHELL\" , \"mysqladmin ping -h localhost -p$${MYSQL_ROOT_PASSWORD} --silent\" ] # Simple readiness probe. Note the $$ to escape $ in YAML so the container sees $MYSQL_ROOT_PASSWORD. interval : 10s # Probe every 10 seconds timeout : 5s # Consider it failed if no response within 5 seconds retries : 10 # Require 10 consecutive passes/failures before flipping status volumes : mysql_data : # Declare the named volume used above","title":"MySQL Compose File"},{"location":"cheatsheets/containers/templates/compose/mysql/#run-inspect","text":"$ENGINE compose up -d $ENGINE compose logs -f mysql # watch for: \"ready for connections\" $ENGINE ps","title":"\ud83e\udded Run &amp; Inspect"},{"location":"cheatsheets/containers/templates/compose/mysql/#connect-eg-dbeaver","text":"Host: localhost Port: 3306 (or remapped port) DB: appdb User/Pass: appuser / apppass (standard) or root / rootpass (admin)","title":"\ud83e\udde9 Connect (e.g., DBeaver)"},{"location":"cheatsheets/containers/templates/compose/mysql/#create-new-db-users","text":"$ENGINE exec -it mysql8 mysql -u root -p # enter rootpass CREATE USER 'newuser' @ '%' IDENTIFIED BY 'newpass' ; GRANT ALL PRIVILEGES ON appdb . * TO 'newuser' @ '%' ; FLUSH PRIVILEGES ;","title":"\ud83d\udd11 Create new DB users"},{"location":"cheatsheets/containers/templates/compose/mysql/#init-scripts-initdb","text":"Any .sql or .sh files placed in ./initdb run once on the first boot (when the volume is empty). ./initdb/ \u251c\u2500 01-schema.sql \u251c\u2500 02-seed.sql \u2514\u2500 03-users.sql","title":"\ud83d\udcc1 Init scripts (./initdb)"},{"location":"cheatsheets/containers/templates/compose/mysql/#example-schema-01-schemasql","text":"USE appdb ; CREATE TABLE IF NOT EXISTS customers ( id BIGINT AUTO_INCREMENT PRIMARY KEY , email VARCHAR ( 255 ) NOT NULL UNIQUE , first_name VARCHAR ( 100 ) NOT NULL , last_name VARCHAR ( 100 ) NOT NULL , status ENUM ( 'ACTIVE' , 'INACTIVE' ) NOT NULL DEFAULT 'ACTIVE' , created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP , updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ;","title":"Example \u2014 Schema (01-schema.sql)"},{"location":"cheatsheets/containers/templates/compose/mysql/#example-seed-data-02-seedsql","text":"USE appdb ; INSERT INTO customers ( email , first_name , last_name , status ) VALUES ( 'ada@example.com' , 'Ada' , 'Lovelace' , 'ACTIVE' ), ( 'grace@example.com' , 'Grace' , 'Hopper' , 'ACTIVE' ) ON DUPLICATE KEY UPDATE first_name = VALUES ( first_name ), last_name = VALUES ( last_name ), status = VALUES ( status );","title":"Example \u2014 Seed Data (02-seed.sql)"},{"location":"cheatsheets/containers/templates/compose/mysql/#re-run-init-scripts","text":"If you want a clean start: $ENGINE compose down -v $ENGINE compose up -d Otherwise, make your SQL idempotent using: CREATE TABLE IF NOT EXISTS INSERT ... ON DUPLICATE KEY UPDATE CREATE INDEX IF NOT EXISTS","title":"\u267b\ufe0f Re-run init scripts"},{"location":"cheatsheets/containers/templates/compose/mysql/#migrations-recommended-later","text":"For production or evolving schemas, manage changes with Flyway or Liquibase in Spring Boot instead of raw SQL.","title":"\ud83e\uddf1 Migrations (recommended later)"},{"location":"cheatsheets/containers/templates/compose/mysql/#spring-boot-jpa-strategy-reminder","text":"# pick ONE: spring.jpa.hibernate.ddl-auto = update # spring.jpa.hibernate.ddl-auto=validate # spring.jpa.hibernate.ddl-auto=create # spring.jpa.hibernate.ddl-auto=create-drop If you\u2019re using ./initdb or Flyway, set ddl-auto=validate to ensure schema consistency.","title":"\u2699\ufe0f Spring Boot JPA Strategy Reminder"},{"location":"cheatsheets/containers/templates/compose/mysql/#notes-on-podman-vs-docker","text":"YAML is identical. :Z volume label may be required on SELinux (Fedora/RHEL). Rootless mode publishes ports to localhost only (fine for dev). You can generate a systemd unit with: podman generate systemd --new --files mysql8 Everything else \u201cjust works.\u201d That\u2019s it \u2014 a single Compose file that runs anywhere: Docker, Podman, WSL, or a full Linux host. If you later add PostgreSQL or Redis, you can reuse this same $ENGINE compose pattern \u2014 one variable, no mental friction.","title":"\ud83e\udeb6 Notes on Podman vs Docker"},{"location":"cheatsheets/containers/templates/compose/postgresql/","text":"\ud83d\udc18 PostgreSQL with Compose (Docker or Podman) \u00b6 Run a reusable local PostgreSQL container using a Compose file. Works with Docker or Podman \u2014 pick your engine and move on. Engine setup \u00b6 # Optional global engine switch ENGINE = ${ ENGINE :- docker } # set ENGINE=podman if you use Podman ```` Then every command is engine-agnostic: ``` bash $ENGINE compose up -d $ENGINE compose logs -f pg $ENGINE exec -it pg psql -U appuser -d appdb PostgreSQL Compose File \u00b6 # File: compose.yaml # Purpose: Run a reusable local PostgreSQL 16 container that your Spring Boot app # (running on host) and DBeaver/psql can connect to via localhost. services : pg : image : postgres:16 container_name : pg restart : unless-stopped environment : # ---- Initial credentials (applied only on first run; persisted in volume) ---- # !! Change these in real use or move to a .env file. POSTGRES_USER : appuser POSTGRES_PASSWORD : apppass POSTGRES_DB : appdb # Optional but nice for consistent timestamps TZ : Europe/Vilnius # Optional: control initdb encoding/locale for new cluster POSTGRES_INITDB_ARGS : \"--encoding=UTF-8 --locale=C.UTF-8\" ports : - \"5432:5432\" # If host 5432 is busy, remap: \"5433:5432\" (then JDBC port=5433) # Postgres server settings (put comments on their own lines) command : # Examples; tweak as needed: - -c - shared_buffers=256MB - -c - max_connections=100 - -c - timezone=Europe/Vilnius volumes : - pg_data:/var/lib/postgresql/data # Named volume for persistent data (recommended default on Linux). - ./initdb:/docker-entrypoint-initdb.d:ro,Z # Optional: .sql/.sh here run once on first boot (when volume is empty). # Add :Z on SELinux systems; harmless elsewhere. healthcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost\" ] interval : 10s timeout : 5s retries : 10 volumes : pg_data : \ud83e\udded Run & Inspect \u00b6 $ENGINE compose up -d $ENGINE compose logs -f pg # watch for: \"database system is ready to accept connections\" $ENGINE ps \ud83e\udde9 Connect (DBeaver or psql) \u00b6 Host: localhost Port: 5432 (or your remap, e.g., 5433 ) DB: appdb User/Pass: appuser / apppass psql examples: $ENGINE exec -it pg psql -U appuser -d appdb $ENGINE exec -it pg psql -U appuser -d appdb -c '\\dt' \ud83d\udd11 Create a new DB role/user (later) \u00b6 $ENGINE exec -it pg psql -U appuser -d appdb -- Create role with login and password CREATE ROLE reporter LOGIN PASSWORD 'reporterpass' ; -- Least-privilege: read-only on appdb GRANT CONNECT ON DATABASE appdb TO reporter ; GRANT USAGE ON SCHEMA public TO reporter ; GRANT SELECT ON ALL TABLES IN SCHEMA public TO reporter ; ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO reporter ; \ud83d\udcc1 Init scripts ( ./initdb ) \u00b6 Any .sql or executable .sh files in ./initdb run once on the first container start (when pg_data is empty). Files run alphabetically; prefix with numbers to enforce order: ./initdb/ \u251c\u2500 01-schema.sql \u251c\u2500 02-seed.sql \u2514\u2500 03-roles.sql 1) Example schema ( 01-schema.sql ) \u00b6 -- Ensure we're on the right DB (the entrypoint creates appdb for you) -- \\c appdb -- not needed when run by entrypoint, but harmless CREATE TABLE IF NOT EXISTS customers ( id BIGSERIAL PRIMARY KEY , email VARCHAR ( 255 ) NOT NULL UNIQUE , first_name VARCHAR ( 100 ) NOT NULL , last_name VARCHAR ( 100 ) NOT NULL , status TEXT NOT NULL DEFAULT 'ACTIVE' , created_at TIMESTAMPTZ NOT NULL DEFAULT now (), updated_at TIMESTAMPTZ NOT NULL DEFAULT now () ); CREATE TABLE IF NOT EXISTS orders ( id BIGSERIAL PRIMARY KEY , customer_id BIGINT NOT NULL REFERENCES customers ( id ) ON DELETE CASCADE , total_cents INTEGER NOT NULL , currency CHAR ( 3 ) NOT NULL DEFAULT 'EUR' , placed_at TIMESTAMPTZ NOT NULL DEFAULT now () ); -- Helpful indexes (Postgres supports IF NOT EXISTS) CREATE INDEX IF NOT EXISTS idx_orders_customer ON orders ( customer_id ); CREATE INDEX IF NOT EXISTS idx_customers_email ON customers ( email ); 2) Example seed data ( 02-seed.sql ) \u00b6 INSERT INTO customers ( email , first_name , last_name , status ) VALUES ( 'ada@example.com' , 'Ada' , 'Lovelace' , 'ACTIVE' ), ( 'grace@example.com' , 'Grace' , 'Hopper' , 'ACTIVE' ) ON CONFLICT ( email ) DO UPDATE SET first_name = EXCLUDED . first_name , last_name = EXCLUDED . last_name , status = EXCLUDED . status ; -- Guarded inserts for orders INSERT INTO orders ( customer_id , total_cents , currency ) SELECT id , 1999 , 'EUR' FROM customers WHERE email = 'ada@example.com' AND NOT EXISTS ( SELECT 1 FROM orders o WHERE o . customer_id = customers . id AND o . total_cents = 1999 ); INSERT INTO orders ( customer_id , total_cents , currency ) SELECT id , 3499 , 'EUR' FROM customers WHERE email = 'grace@example.com' AND NOT EXISTS ( SELECT 1 FROM orders o WHERE o . customer_id = customers . id AND o . total_cents = 3499 ); 3) Optional roles/privileges ( 03-roles.sql ) \u00b6 -- Example: analytics user with read-only access DO $$ BEGIN IF NOT EXISTS ( SELECT FROM pg_roles WHERE rolname = 'reporter' ) THEN CREATE ROLE reporter LOGIN PASSWORD 'reporterpass' ; END IF ; END $$ ; GRANT CONNECT ON DATABASE appdb TO reporter ; GRANT USAGE ON SCHEMA public TO reporter ; GRANT SELECT ON ALL TABLES IN SCHEMA public TO reporter ; ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO reporter ; Re-running init scripts \u00b6 They only run when the data volume is fresh . To reset: $ENGINE compose down -v $ENGINE compose up -d To avoid resets, make seeds idempotent with ON CONFLICT , IF NOT EXISTS , and guarded inserts. \ud83e\uddf1 Migrations (recommended later) \u00b6 When schema evolves, use Flyway or Liquibase with Spring Boot. Versioned scripts like V1__init.sql , V2__add_indexes.sql , \u2026 are safer and traceable. \u2699\ufe0f Spring Boot quick reminder (PostgreSQL) \u00b6 application.properties essentials: spring.datasource.url = jdbc:postgresql://localhost:5432/appdb spring.datasource.username = appuser spring.datasource.password = apppass # Choose one: spring.jpa.hibernate.ddl-auto = update # spring.jpa.hibernate.ddl-auto=validate # spring.jpa.hibernate.ddl-auto=create # spring.jpa.hibernate.ddl-auto=create-drop # Optional: be explicit about dialect spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect Using ./initdb or Flyway/Liquibase? Prefer ddl-auto=validate to catch mismatches without altering the DB. \ud83e\udeb6 Notes on Podman vs Docker \u00b6 YAML is identical. SELinux distros (Fedora/RHEL/etc.): keep :Z on bind mounts like ./initdb:...:Z . Rootless mode: publishes to localhost by default; great for dev. Systemd integration (Podman): podman generate systemd --new --files pg Everything else \u201cjust works.\u201d","title":"PostgreSQL"},{"location":"cheatsheets/containers/templates/compose/postgresql/#postgresql-with-compose-docker-or-podman","text":"Run a reusable local PostgreSQL container using a Compose file. Works with Docker or Podman \u2014 pick your engine and move on.","title":"\ud83d\udc18 PostgreSQL with Compose (Docker or Podman)"},{"location":"cheatsheets/containers/templates/compose/postgresql/#engine-setup","text":"# Optional global engine switch ENGINE = ${ ENGINE :- docker } # set ENGINE=podman if you use Podman ```` Then every command is engine-agnostic: ``` bash $ENGINE compose up -d $ENGINE compose logs -f pg $ENGINE exec -it pg psql -U appuser -d appdb","title":"Engine setup"},{"location":"cheatsheets/containers/templates/compose/postgresql/#postgresql-compose-file","text":"# File: compose.yaml # Purpose: Run a reusable local PostgreSQL 16 container that your Spring Boot app # (running on host) and DBeaver/psql can connect to via localhost. services : pg : image : postgres:16 container_name : pg restart : unless-stopped environment : # ---- Initial credentials (applied only on first run; persisted in volume) ---- # !! Change these in real use or move to a .env file. POSTGRES_USER : appuser POSTGRES_PASSWORD : apppass POSTGRES_DB : appdb # Optional but nice for consistent timestamps TZ : Europe/Vilnius # Optional: control initdb encoding/locale for new cluster POSTGRES_INITDB_ARGS : \"--encoding=UTF-8 --locale=C.UTF-8\" ports : - \"5432:5432\" # If host 5432 is busy, remap: \"5433:5432\" (then JDBC port=5433) # Postgres server settings (put comments on their own lines) command : # Examples; tweak as needed: - -c - shared_buffers=256MB - -c - max_connections=100 - -c - timezone=Europe/Vilnius volumes : - pg_data:/var/lib/postgresql/data # Named volume for persistent data (recommended default on Linux). - ./initdb:/docker-entrypoint-initdb.d:ro,Z # Optional: .sql/.sh here run once on first boot (when volume is empty). # Add :Z on SELinux systems; harmless elsewhere. healthcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost\" ] interval : 10s timeout : 5s retries : 10 volumes : pg_data :","title":"PostgreSQL Compose File"},{"location":"cheatsheets/containers/templates/compose/postgresql/#run-inspect","text":"$ENGINE compose up -d $ENGINE compose logs -f pg # watch for: \"database system is ready to accept connections\" $ENGINE ps","title":"\ud83e\udded Run &amp; Inspect"},{"location":"cheatsheets/containers/templates/compose/postgresql/#connect-dbeaver-or-psql","text":"Host: localhost Port: 5432 (or your remap, e.g., 5433 ) DB: appdb User/Pass: appuser / apppass psql examples: $ENGINE exec -it pg psql -U appuser -d appdb $ENGINE exec -it pg psql -U appuser -d appdb -c '\\dt'","title":"\ud83e\udde9 Connect (DBeaver or psql)"},{"location":"cheatsheets/containers/templates/compose/postgresql/#create-a-new-db-roleuser-later","text":"$ENGINE exec -it pg psql -U appuser -d appdb -- Create role with login and password CREATE ROLE reporter LOGIN PASSWORD 'reporterpass' ; -- Least-privilege: read-only on appdb GRANT CONNECT ON DATABASE appdb TO reporter ; GRANT USAGE ON SCHEMA public TO reporter ; GRANT SELECT ON ALL TABLES IN SCHEMA public TO reporter ; ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO reporter ;","title":"\ud83d\udd11 Create a new DB role/user (later)"},{"location":"cheatsheets/containers/templates/compose/postgresql/#init-scripts-initdb","text":"Any .sql or executable .sh files in ./initdb run once on the first container start (when pg_data is empty). Files run alphabetically; prefix with numbers to enforce order: ./initdb/ \u251c\u2500 01-schema.sql \u251c\u2500 02-seed.sql \u2514\u2500 03-roles.sql","title":"\ud83d\udcc1 Init scripts (./initdb)"},{"location":"cheatsheets/containers/templates/compose/postgresql/#1-example-schema-01-schemasql","text":"-- Ensure we're on the right DB (the entrypoint creates appdb for you) -- \\c appdb -- not needed when run by entrypoint, but harmless CREATE TABLE IF NOT EXISTS customers ( id BIGSERIAL PRIMARY KEY , email VARCHAR ( 255 ) NOT NULL UNIQUE , first_name VARCHAR ( 100 ) NOT NULL , last_name VARCHAR ( 100 ) NOT NULL , status TEXT NOT NULL DEFAULT 'ACTIVE' , created_at TIMESTAMPTZ NOT NULL DEFAULT now (), updated_at TIMESTAMPTZ NOT NULL DEFAULT now () ); CREATE TABLE IF NOT EXISTS orders ( id BIGSERIAL PRIMARY KEY , customer_id BIGINT NOT NULL REFERENCES customers ( id ) ON DELETE CASCADE , total_cents INTEGER NOT NULL , currency CHAR ( 3 ) NOT NULL DEFAULT 'EUR' , placed_at TIMESTAMPTZ NOT NULL DEFAULT now () ); -- Helpful indexes (Postgres supports IF NOT EXISTS) CREATE INDEX IF NOT EXISTS idx_orders_customer ON orders ( customer_id ); CREATE INDEX IF NOT EXISTS idx_customers_email ON customers ( email );","title":"1) Example schema (01-schema.sql)"},{"location":"cheatsheets/containers/templates/compose/postgresql/#2-example-seed-data-02-seedsql","text":"INSERT INTO customers ( email , first_name , last_name , status ) VALUES ( 'ada@example.com' , 'Ada' , 'Lovelace' , 'ACTIVE' ), ( 'grace@example.com' , 'Grace' , 'Hopper' , 'ACTIVE' ) ON CONFLICT ( email ) DO UPDATE SET first_name = EXCLUDED . first_name , last_name = EXCLUDED . last_name , status = EXCLUDED . status ; -- Guarded inserts for orders INSERT INTO orders ( customer_id , total_cents , currency ) SELECT id , 1999 , 'EUR' FROM customers WHERE email = 'ada@example.com' AND NOT EXISTS ( SELECT 1 FROM orders o WHERE o . customer_id = customers . id AND o . total_cents = 1999 ); INSERT INTO orders ( customer_id , total_cents , currency ) SELECT id , 3499 , 'EUR' FROM customers WHERE email = 'grace@example.com' AND NOT EXISTS ( SELECT 1 FROM orders o WHERE o . customer_id = customers . id AND o . total_cents = 3499 );","title":"2) Example seed data (02-seed.sql)"},{"location":"cheatsheets/containers/templates/compose/postgresql/#3-optional-rolesprivileges-03-rolessql","text":"-- Example: analytics user with read-only access DO $$ BEGIN IF NOT EXISTS ( SELECT FROM pg_roles WHERE rolname = 'reporter' ) THEN CREATE ROLE reporter LOGIN PASSWORD 'reporterpass' ; END IF ; END $$ ; GRANT CONNECT ON DATABASE appdb TO reporter ; GRANT USAGE ON SCHEMA public TO reporter ; GRANT SELECT ON ALL TABLES IN SCHEMA public TO reporter ; ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO reporter ;","title":"3) Optional roles/privileges (03-roles.sql)"},{"location":"cheatsheets/containers/templates/compose/postgresql/#re-running-init-scripts","text":"They only run when the data volume is fresh . To reset: $ENGINE compose down -v $ENGINE compose up -d To avoid resets, make seeds idempotent with ON CONFLICT , IF NOT EXISTS , and guarded inserts.","title":"Re-running init scripts"},{"location":"cheatsheets/containers/templates/compose/postgresql/#migrations-recommended-later","text":"When schema evolves, use Flyway or Liquibase with Spring Boot. Versioned scripts like V1__init.sql , V2__add_indexes.sql , \u2026 are safer and traceable.","title":"\ud83e\uddf1 Migrations (recommended later)"},{"location":"cheatsheets/containers/templates/compose/postgresql/#spring-boot-quick-reminder-postgresql","text":"application.properties essentials: spring.datasource.url = jdbc:postgresql://localhost:5432/appdb spring.datasource.username = appuser spring.datasource.password = apppass # Choose one: spring.jpa.hibernate.ddl-auto = update # spring.jpa.hibernate.ddl-auto=validate # spring.jpa.hibernate.ddl-auto=create # spring.jpa.hibernate.ddl-auto=create-drop # Optional: be explicit about dialect spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect Using ./initdb or Flyway/Liquibase? Prefer ddl-auto=validate to catch mismatches without altering the DB.","title":"\u2699\ufe0f Spring Boot quick reminder (PostgreSQL)"},{"location":"cheatsheets/containers/templates/compose/postgresql/#notes-on-podman-vs-docker","text":"YAML is identical. SELinux distros (Fedora/RHEL/etc.): keep :Z on bind mounts like ./initdb:...:Z . Rootless mode: publishes to localhost by default; great for dev. Systemd integration (Podman): podman generate systemd --new --files pg Everything else \u201cjust works.\u201d","title":"\ud83e\udeb6 Notes on Podman vs Docker"},{"location":"cheatsheets/containers/templates/compose/sql-server/","text":"\ud83e\uddf1 SQL Server with Compose (Docker or Podman) \u00b6 This cheat sheet spins up Microsoft SQL Server 2022 in a container with persistent storage, adds a portable init job (runs .sql files once), and connects from DBeaver . The YAML works with Docker or Podman . Engine setup \u00b6 Alias one variable to make commands engine-agnostic: # Optional global engine switch ENGINE = ${ ENGINE :- docker } # set ENGINE=podman if you use Podman Then every command is the same: $ENGINE compose up -d $ENGINE compose logs -f mssql $ENGINE exec -it mssql /bin/bash SQL Server Compose File \u00b6 # File: compose.yaml # Purpose: Local SQL Server 2022 with a one-time init job. Works on Docker or Podman. services : mssql : image : mcr.microsoft.com/mssql/server:2022-latest container_name : mssql restart : unless-stopped environment : ACCEPT_EULA : \"Y\" # Mandatory MSSQL_SA_PASSWORD : \"Str0ng!Passw0rd\" # Must meet SQL Server complexity rules MSSQL_PID : \"Developer\" # Developer (free) | Express | Standard | Enterprise (licensed) TZ : \"Europe/Vilnius\" ports : - \"1433:1433\" # If busy, use \"11433:1433\" and adjust clients to port 11433 volumes : - mssql_data:/var/opt/mssql # Data files live here - ./backups:/var/opt/mssql/backups:Z # Optional: host-mounted backups dir (SELinux :Z ok on Docker too) # Simple TCP healthcheck that doesn't rely on sqlcmd being present in this image healthcheck : test : [ \"CMD-SHELL\" , \"bash -c 'echo > /dev/tcp/127.0.0.1/1433'\" ] interval : 10s timeout : 3s retries : 30 start_period : 30s # One-time init job: runs *.sql in ./initdb against the mssql service after it's healthy mssql-init : image : mcr.microsoft.com/mssql-tools:latest container_name : mssql-init depends_on : mssql : condition : service_healthy environment : MSSQL_SA_PASSWORD : \"Str0ng!Passw0rd\" volumes : - ./initdb:/initdb:ro,Z entrypoint : [ \"/bin/bash\" , \"-lc\" ] command : > ' set -euo pipefail; HOST=mssql; PORT=1433; USER=sa; PASS=\"$MSSQL_SA_PASSWORD\"; # wait for TCP just in case for i in {1..60}; do (echo > /dev/tcp/${HOST}/${PORT}) >/dev/null 2>&1 && break || sleep 2; done; # run all .sql files in lexical order; ignore if directory empty shopt -s nullglob; for f in /initdb/*.sql; do echo \\\"[mssql-init] Running: $f\\\"; /opt/mssql-tools/bin/sqlcmd -S ${HOST},${PORT} -U ${USER} -P \\\"${PASS}\\\" -i \\\"$f\\\"; done; echo \\\"[mssql-init] Done.\\\" ' # Run once on first `up`; remove after success restart : \"no\" volumes : mssql_data : Notes The official SQL Server image does not auto-run docker-entrypoint-initdb.d like MySQL/Postgres. The mssql-init job above is the portable way to run your own .sql on first boot (or whenever you want). On SELinux systems (Fedora/RHEL), the :Z suffix safely relabels host mounts. It\u2019s harmless elsewhere. For Podman rootless , published ports are on the user namespace (localhost) \u2014 perfect for dev. \ud83e\udded Run & Inspect \u00b6 $ENGINE compose up -d $ENGINE compose logs -f mssql # wait for: \"SQL Server is now ready for client connections\" $ENGINE compose logs -f mssql-init # see init job output (it exits when done) $ENGINE ps \ud83e\udde9 Connect (e.g., DBeaver) \u00b6 Driver : SQL Server (Microsoft) Host : localhost Port : 1433 (or your remapped host port) Database : e.g., AppDb (if you create one) User/Pass : sa / Str0ng!Passw0rd If the driver requires, set properties such as: encrypt=true;trustServerCertificate=true for local dev, or import a proper certificate and set trustServerCertificate=false . \ud83d\udcc1 Init scripts ( ./initdb ) \u00b6 All .sql files in ./initdb are run by the mssql-tools job, in lexical order. ./initdb/ \u251c\u2500 01-database-and-login.sql \u251c\u2500 02-schema.sql \u2514\u2500 03-seed.sql Example \u2014 Create DB, login, user ( 01-database-and-login.sql ) \u00b6 -- Create database IF DB_ID ( N 'AppDb' ) IS NULL CREATE DATABASE AppDb ; GO -- Create server login IF SUSER_ID ( N 'app_login' ) IS NULL CREATE LOGIN app_login WITH PASSWORD = 'AppUser!234' ; GO -- Map a database user to the login USE AppDb ; GO IF USER_ID ( N 'app_user' ) IS NULL CREATE USER app_user FOR LOGIN app_login ; GO -- Grant a sane role; tighten later as needed ALTER ROLE db_owner ADD MEMBER app_user ; GO Example \u2014 Schema ( 02-schema.sql ) \u00b6 USE AppDb ; GO IF OBJECT_ID ( N 'dbo.customers' , N 'U' ) IS NULL BEGIN CREATE TABLE dbo . customers ( id INT IDENTITY ( 1 , 1 ) PRIMARY KEY , email NVARCHAR ( 255 ) NOT NULL UNIQUE , first_name NVARCHAR ( 100 ) NOT NULL , last_name NVARCHAR ( 100 ) NOT NULL , status NVARCHAR ( 20 ) NOT NULL DEFAULT N 'ACTIVE' , created_at DATETIME2 NOT NULL DEFAULT SYSDATETIME () ); END GO CREATE INDEX IX_customers_email ON dbo . customers ( email ); GO Example \u2014 Seed ( 03-seed.sql ) \u00b6 USE AppDb ; GO MERGE dbo . customers AS tgt USING ( VALUES ( N 'ada@example.com' , N 'Ada' , N 'Lovelace' , N 'ACTIVE' ), ( N 'grace@example.com' , N 'Grace' , N 'Hopper' , N 'ACTIVE' ) ) AS src ( email , first_name , last_name , status ) ON tgt . email = src . email WHEN MATCHED THEN UPDATE SET first_name = src . first_name , last_name = src . last_name , status = src . status WHEN NOT MATCHED THEN INSERT ( email , first_name , last_name , status ) VALUES ( src . email , src . first_name , src . last_name , src . status ); GO \ud83d\udd11 Create additional logins/users (interactive) \u00b6 # Start an interactive sqlcmd without installing tools on the host $ENGINE run --rm -it --network host mcr.microsoft.com/mssql-tools:latest \\ /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Str0ng!Passw0rd' CREATE LOGIN dev_login WITH PASSWORD = 'Dev!Passw0rd' ; GO USE AppDb ; GO CREATE USER dev_user FOR LOGIN dev_login ; GO ALTER ROLE db_datareader ADD MEMBER dev_user ; -- read-only example GO QUIT On Docker for Linux, --network host works. On Podman, it also works in rootless mode. If you\u2019d rather use the Compose network, replace --network host with --network <yourstack_default> and -S mssql . \u267b\ufe0f Re-run init scripts \u00b6 Want to rerun everything from ./initdb ? $ENGINE compose run --rm mssql-init Want a fresh database? $ENGINE compose down -v # WARNING: also deletes the mssql_data volume (all data) $ENGINE compose up -d \ud83d\udcbe Backups (inside container) \u00b6 Mount ./backups (already in YAML) and run: # open a shell in the server container $ENGINE exec -it mssql /bin/bash # then: # Full backup to the mounted host directory /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Str0ng!Passw0rd' -Q \\ \"BACKUP DATABASE AppDb TO DISK = N'/var/opt/mssql/backups/AppDb_full.bak' WITH INIT, COMPRESSION, STATS = 10;\" Restore example (target DB must be unused): -- inside sqlcmd ALTER DATABASE AppDb SET SINGLE_USER WITH ROLLBACK IMMEDIATE ; RESTORE DATABASE AppDb FROM DISK = N '/var/opt/mssql/backups/AppDb_full.bak' WITH REPLACE , STATS = 10 ; ALTER DATABASE AppDb SET MULTI_USER ; GO \u2699\ufe0f Spring Boot JDBC quick ref \u00b6 spring.datasource.url = jdbc:sqlserver://localhost:1433;databaseName=AppDb;encrypt=true;trustServerCertificate=true spring.datasource.username = app_login spring.datasource.password = AppUser!234 spring.jpa.hibernate.ddl-auto = validate \ud83e\uddf1 Admin & troubleshooting \u00b6 $ENGINE compose logs -f mssql $ENGINE exec -it mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Str0ng!Passw0rd' -Q \"SELECT @@VERSION;\" $ENGINE exec -it mssql /bin/bash $ENGINE compose down $ENGINE compose down -v # DANGER: wipes data Common pitfalls Password rejected : must include upper, lower, digit, and symbol; length \u2265 8\u201312 (use strong values). Port clash : remap to \"11433:1433\" and point clients to port 11433 . SSL nags in JDBC : use encrypt=true;trustServerCertificate=true locally, and proper certs for shared envs. SELinux denials : keep :Z on host mounts or switch to named volumes only.","title":"SQL Server"},{"location":"cheatsheets/containers/templates/compose/sql-server/#sql-server-with-compose-docker-or-podman","text":"This cheat sheet spins up Microsoft SQL Server 2022 in a container with persistent storage, adds a portable init job (runs .sql files once), and connects from DBeaver . The YAML works with Docker or Podman .","title":"\ud83e\uddf1 SQL Server with Compose (Docker or Podman)"},{"location":"cheatsheets/containers/templates/compose/sql-server/#engine-setup","text":"Alias one variable to make commands engine-agnostic: # Optional global engine switch ENGINE = ${ ENGINE :- docker } # set ENGINE=podman if you use Podman Then every command is the same: $ENGINE compose up -d $ENGINE compose logs -f mssql $ENGINE exec -it mssql /bin/bash","title":"Engine setup"},{"location":"cheatsheets/containers/templates/compose/sql-server/#sql-server-compose-file","text":"# File: compose.yaml # Purpose: Local SQL Server 2022 with a one-time init job. Works on Docker or Podman. services : mssql : image : mcr.microsoft.com/mssql/server:2022-latest container_name : mssql restart : unless-stopped environment : ACCEPT_EULA : \"Y\" # Mandatory MSSQL_SA_PASSWORD : \"Str0ng!Passw0rd\" # Must meet SQL Server complexity rules MSSQL_PID : \"Developer\" # Developer (free) | Express | Standard | Enterprise (licensed) TZ : \"Europe/Vilnius\" ports : - \"1433:1433\" # If busy, use \"11433:1433\" and adjust clients to port 11433 volumes : - mssql_data:/var/opt/mssql # Data files live here - ./backups:/var/opt/mssql/backups:Z # Optional: host-mounted backups dir (SELinux :Z ok on Docker too) # Simple TCP healthcheck that doesn't rely on sqlcmd being present in this image healthcheck : test : [ \"CMD-SHELL\" , \"bash -c 'echo > /dev/tcp/127.0.0.1/1433'\" ] interval : 10s timeout : 3s retries : 30 start_period : 30s # One-time init job: runs *.sql in ./initdb against the mssql service after it's healthy mssql-init : image : mcr.microsoft.com/mssql-tools:latest container_name : mssql-init depends_on : mssql : condition : service_healthy environment : MSSQL_SA_PASSWORD : \"Str0ng!Passw0rd\" volumes : - ./initdb:/initdb:ro,Z entrypoint : [ \"/bin/bash\" , \"-lc\" ] command : > ' set -euo pipefail; HOST=mssql; PORT=1433; USER=sa; PASS=\"$MSSQL_SA_PASSWORD\"; # wait for TCP just in case for i in {1..60}; do (echo > /dev/tcp/${HOST}/${PORT}) >/dev/null 2>&1 && break || sleep 2; done; # run all .sql files in lexical order; ignore if directory empty shopt -s nullglob; for f in /initdb/*.sql; do echo \\\"[mssql-init] Running: $f\\\"; /opt/mssql-tools/bin/sqlcmd -S ${HOST},${PORT} -U ${USER} -P \\\"${PASS}\\\" -i \\\"$f\\\"; done; echo \\\"[mssql-init] Done.\\\" ' # Run once on first `up`; remove after success restart : \"no\" volumes : mssql_data : Notes The official SQL Server image does not auto-run docker-entrypoint-initdb.d like MySQL/Postgres. The mssql-init job above is the portable way to run your own .sql on first boot (or whenever you want). On SELinux systems (Fedora/RHEL), the :Z suffix safely relabels host mounts. It\u2019s harmless elsewhere. For Podman rootless , published ports are on the user namespace (localhost) \u2014 perfect for dev.","title":"SQL Server Compose File"},{"location":"cheatsheets/containers/templates/compose/sql-server/#run-inspect","text":"$ENGINE compose up -d $ENGINE compose logs -f mssql # wait for: \"SQL Server is now ready for client connections\" $ENGINE compose logs -f mssql-init # see init job output (it exits when done) $ENGINE ps","title":"\ud83e\udded Run &amp; Inspect"},{"location":"cheatsheets/containers/templates/compose/sql-server/#connect-eg-dbeaver","text":"Driver : SQL Server (Microsoft) Host : localhost Port : 1433 (or your remapped host port) Database : e.g., AppDb (if you create one) User/Pass : sa / Str0ng!Passw0rd If the driver requires, set properties such as: encrypt=true;trustServerCertificate=true for local dev, or import a proper certificate and set trustServerCertificate=false .","title":"\ud83e\udde9 Connect (e.g., DBeaver)"},{"location":"cheatsheets/containers/templates/compose/sql-server/#init-scripts-initdb","text":"All .sql files in ./initdb are run by the mssql-tools job, in lexical order. ./initdb/ \u251c\u2500 01-database-and-login.sql \u251c\u2500 02-schema.sql \u2514\u2500 03-seed.sql","title":"\ud83d\udcc1 Init scripts (./initdb)"},{"location":"cheatsheets/containers/templates/compose/sql-server/#example-create-db-login-user-01-database-and-loginsql","text":"-- Create database IF DB_ID ( N 'AppDb' ) IS NULL CREATE DATABASE AppDb ; GO -- Create server login IF SUSER_ID ( N 'app_login' ) IS NULL CREATE LOGIN app_login WITH PASSWORD = 'AppUser!234' ; GO -- Map a database user to the login USE AppDb ; GO IF USER_ID ( N 'app_user' ) IS NULL CREATE USER app_user FOR LOGIN app_login ; GO -- Grant a sane role; tighten later as needed ALTER ROLE db_owner ADD MEMBER app_user ; GO","title":"Example \u2014 Create DB, login, user (01-database-and-login.sql)"},{"location":"cheatsheets/containers/templates/compose/sql-server/#example-schema-02-schemasql","text":"USE AppDb ; GO IF OBJECT_ID ( N 'dbo.customers' , N 'U' ) IS NULL BEGIN CREATE TABLE dbo . customers ( id INT IDENTITY ( 1 , 1 ) PRIMARY KEY , email NVARCHAR ( 255 ) NOT NULL UNIQUE , first_name NVARCHAR ( 100 ) NOT NULL , last_name NVARCHAR ( 100 ) NOT NULL , status NVARCHAR ( 20 ) NOT NULL DEFAULT N 'ACTIVE' , created_at DATETIME2 NOT NULL DEFAULT SYSDATETIME () ); END GO CREATE INDEX IX_customers_email ON dbo . customers ( email ); GO","title":"Example \u2014 Schema (02-schema.sql)"},{"location":"cheatsheets/containers/templates/compose/sql-server/#example-seed-03-seedsql","text":"USE AppDb ; GO MERGE dbo . customers AS tgt USING ( VALUES ( N 'ada@example.com' , N 'Ada' , N 'Lovelace' , N 'ACTIVE' ), ( N 'grace@example.com' , N 'Grace' , N 'Hopper' , N 'ACTIVE' ) ) AS src ( email , first_name , last_name , status ) ON tgt . email = src . email WHEN MATCHED THEN UPDATE SET first_name = src . first_name , last_name = src . last_name , status = src . status WHEN NOT MATCHED THEN INSERT ( email , first_name , last_name , status ) VALUES ( src . email , src . first_name , src . last_name , src . status ); GO","title":"Example \u2014 Seed (03-seed.sql)"},{"location":"cheatsheets/containers/templates/compose/sql-server/#create-additional-loginsusers-interactive","text":"# Start an interactive sqlcmd without installing tools on the host $ENGINE run --rm -it --network host mcr.microsoft.com/mssql-tools:latest \\ /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Str0ng!Passw0rd' CREATE LOGIN dev_login WITH PASSWORD = 'Dev!Passw0rd' ; GO USE AppDb ; GO CREATE USER dev_user FOR LOGIN dev_login ; GO ALTER ROLE db_datareader ADD MEMBER dev_user ; -- read-only example GO QUIT On Docker for Linux, --network host works. On Podman, it also works in rootless mode. If you\u2019d rather use the Compose network, replace --network host with --network <yourstack_default> and -S mssql .","title":"\ud83d\udd11 Create additional logins/users (interactive)"},{"location":"cheatsheets/containers/templates/compose/sql-server/#re-run-init-scripts","text":"Want to rerun everything from ./initdb ? $ENGINE compose run --rm mssql-init Want a fresh database? $ENGINE compose down -v # WARNING: also deletes the mssql_data volume (all data) $ENGINE compose up -d","title":"\u267b\ufe0f Re-run init scripts"},{"location":"cheatsheets/containers/templates/compose/sql-server/#backups-inside-container","text":"Mount ./backups (already in YAML) and run: # open a shell in the server container $ENGINE exec -it mssql /bin/bash # then: # Full backup to the mounted host directory /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Str0ng!Passw0rd' -Q \\ \"BACKUP DATABASE AppDb TO DISK = N'/var/opt/mssql/backups/AppDb_full.bak' WITH INIT, COMPRESSION, STATS = 10;\" Restore example (target DB must be unused): -- inside sqlcmd ALTER DATABASE AppDb SET SINGLE_USER WITH ROLLBACK IMMEDIATE ; RESTORE DATABASE AppDb FROM DISK = N '/var/opt/mssql/backups/AppDb_full.bak' WITH REPLACE , STATS = 10 ; ALTER DATABASE AppDb SET MULTI_USER ; GO","title":"\ud83d\udcbe Backups (inside container)"},{"location":"cheatsheets/containers/templates/compose/sql-server/#spring-boot-jdbc-quick-ref","text":"spring.datasource.url = jdbc:sqlserver://localhost:1433;databaseName=AppDb;encrypt=true;trustServerCertificate=true spring.datasource.username = app_login spring.datasource.password = AppUser!234 spring.jpa.hibernate.ddl-auto = validate","title":"\u2699\ufe0f Spring Boot JDBC quick ref"},{"location":"cheatsheets/containers/templates/compose/sql-server/#admin-troubleshooting","text":"$ENGINE compose logs -f mssql $ENGINE exec -it mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Str0ng!Passw0rd' -Q \"SELECT @@VERSION;\" $ENGINE exec -it mssql /bin/bash $ENGINE compose down $ENGINE compose down -v # DANGER: wipes data Common pitfalls Password rejected : must include upper, lower, digit, and symbol; length \u2265 8\u201312 (use strong values). Port clash : remap to \"11433:1433\" and point clients to port 11433 . SSL nags in JDBC : use encrypt=true;trustServerCertificate=true locally, and proper certs for shared envs. SELinux denials : keep :Z on host mounts or switch to named volumes only.","title":"\ud83e\uddf1 Admin &amp; troubleshooting"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/","text":"\ud83d\udd34 Redis: From Basics to Real-World Usage \u00b6 Redis (Remote Dictionary Server) is a lightning-fast in-memory data store used as a cache, message broker, and lightweight database. It stores data as key-value pairs , keeps it in RAM for near-instant access, and can optionally persist it to disk. It\u2019s often used alongside PostgreSQL: Postgres for durability, Redis for speed. \u2699\ufe0f 1. What Redis Actually Does \u00b6 Redis keeps everything in memory but optionally syncs to disk (snapshots or append logs). It supports complex data types, pub/sub messaging, and atomic operations \u2014 all with sub-millisecond latency. Use Case Example Cache Store frequently accessed DB results. Session Store Track logged-in users. Queue / Stream Background jobs, real-time feeds. Rate Limiter Count requests per user/IP. Pub/Sub Event notification between services. \ud83d\udc49 In short: Redis trades persistence for speed , but can be configured for both. \ud83e\uddf1 2. Core Concepts \u00b6 Concept Description Key Identifier for a piece of data (string). Value Data stored under a key \u2014 can be string, hash, list, set, etc. TTL Time-to-live (expiration). Persistence Data saved to disk (RDB snapshots or AOF logs). Pub/Sub Publisher sends messages to channels; subscribers receive them. Database index Redis has logical DBs numbered 0\u201315 by default. \u26a1 3. Basic Commands (Quick Reference) \u00b6 redis-cli # Start CLI ping # \u2192 PONG set key \"value\" # store get key # retrieve del key # delete exists key # check if exists expire key 60 # expire after 60s keys * # list all keys (use with caution) flushall # delete everything ```` --- ## \ud83e\udde9 4. Data Structures and Examples ### Strings ``` bash set greeting \"Hello\" get greeting incr counter decr counter Hashes (key \u2192 fields) \u00b6 hset user:1 name \"Alice\" email \"alice@example.com\" hgetall user:1 hget user:1 email Lists (ordered queue) \u00b6 lpush queue job1 rpush queue job2 lrange queue 0 -1 lpop queue Sets (unique values) \u00b6 sadd users \"edgaras\" \"alice\" smembers users sismember users \"bob\" Sorted Sets (ranking) \u00b6 zadd leaderboard 100 \"alice\" 95 \"bob\" zrevrange leaderboard 0 -1 WITHSCORES Pub/Sub \u00b6 SUBSCRIBE news PUBLISH news \"Server update complete!\" \ud83e\udde0 5. Persistence Modes \u00b6 Redis can persist data in two main ways: Mode Description RDB (Snapshot) Saves full dataset at intervals (default). Fast, minimal overhead. AOF (Append Only File) Logs every operation \u2014 safer but slower. Hybrid Combines both for speed + durability. Example in redis.conf : save 900 1 save 300 10 save 60 10000 appendonly yes \ud83e\uddf0 6. Running Redis with Docker \u00b6 docker run -d \\ --name redis \\ -p 6379 :6379 \\ -v redis_data:/data \\ redis:7 Check connection: docker exec -it redis redis-cli ping With password: docker run -d \\ -p 6379 :6379 \\ -e REDIS_PASSWORD = secret \\ redis:7 \\ redis-server --requirepass secret \ud83e\udde9 7. Docker Compose Example \u00b6 version : \"3.9\" services : redis : image : redis:7 ports : - \"6379:6379\" volumes : - redis_data:/data command : redis-server --appendonly yes healthcheck : test : [ \"CMD\" , \"redis-cli\" , \"ping\" ] interval : 5s retries : 5 backend : build : ./backend environment : REDIS_HOST : redis REDIS_PORT : 6379 volumes : redis_data : \ud83d\udcbe 8. Redis + Application Integration (Spring Boot Example) \u00b6 application.properties : spring.data.redis.host = redis spring.data.redis.port = 6379 spring.data.redis.password = secret Simple cache usage with Spring: @Cacheable ( \"users\" ) public User getUserById ( Long id ) { return userRepository . findById ( id ). orElseThrow (); } Make sure caching is enabled: @EnableCaching @SpringBootApplication public class App {} \ud83d\udce1 9. Monitoring and Admin Commands \u00b6 info # show metrics dbsize # number of keys monitor # live command log config get * # view config config rewrite # persist config changes slowlog get # show slow commands For real-time dashboards: RedisInsight redis-exporter for Prometheus / Grafana metrics. \ud83d\udd12 10. Security & Performance Best Practices \u00b6 Set a password ( requirepass secret ) \u2014 Redis is open by default. Bind to localhost or internal networks ( bind 127.0.0.1 ). Disable FLUSHALL and CONFIG commands in production. Use connection pooling for app clients. For persistence: prefer AOF + fsync every second . Enable maxmemory and maxmemory-policy allkeys-lru for safe eviction. Example snippet: maxmemory 512mb maxmemory-policy allkeys-lru \ud83d\udcbb 11. IDE & Tool Integration \u00b6 JetBrains IDEs \u00b6 Use built-in Database Tool Window \u2192 Add Data Source \u2192 Redis. Visualize keys, TTLs, and values directly. Supports EVAL and Lua scripting. VS Code \u00b6 Recommended extensions: Redis Explorer \u2192 browse keys, TTLs, and memory usage. REST Client \u2192 test APIs that interact with Redis. .env files \u2192 store connection secrets. Example .env : REDIS_HOST=localhost REDIS_PORT=6379 REDIS_PASSWORD=secret \ud83d\ude80 12. CI/CD Integration Example \u00b6 GitHub Actions \u2014 Redis as test dependency: services : redis : image : redis:7 ports : [ '6379:6379' ] options : >- --health-cmd=\"redis-cli ping\" --health-interval=5s --health-retries=5 steps : - uses : actions/checkout@v4 - name : Run integration tests env : REDIS_HOST : localhost REDIS_PORT : 6379 run : ./gradlew test \ud83e\udde9 13. Real-World Patterns \u00b6 Pattern Description Example Cache-Aside App reads from Redis; on miss, fetches DB + stores in Redis. Common with Spring or Django. Write-Through Writes go to Redis and DB simultaneously. Ensures consistency. Pub/Sub Services communicate via Redis channels. Real-time notifications. Streams Event queue with consumer groups. Great for jobs, analytics. Example stream usage: XADD jobs * type \"email\" user \"alice\" XREADGROUP GROUP workers 1 COUNT 1 STREAMS jobs > \ud83e\udde0 14. Troubleshooting \u00b6 Issue Fix Redis not reachable Check port 6379 and container health. Keys disappear TTL expired or memory eviction triggered. \u201cNOAUTH\u201d error Set password in config and client. High latency Tune maxmemory + eviction policy. Data not persistent Enable appendonly yes . \u2705 15. Summary \u00b6 Redis = speed and simplicity \u2014 an in-memory data store with persistence options. Ideal for caching, pub/sub, queues, and rate limiting. Use Docker for easy setup and Compose for multi-service integration. Always secure, monitor, and limit memory. Combine with PostgreSQL for the best of both worlds: durability + velocity. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 redis/ \u2514\u2500 quick-refresher.md","title":"quick-refresher"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#redis-from-basics-to-real-world-usage","text":"Redis (Remote Dictionary Server) is a lightning-fast in-memory data store used as a cache, message broker, and lightweight database. It stores data as key-value pairs , keeps it in RAM for near-instant access, and can optionally persist it to disk. It\u2019s often used alongside PostgreSQL: Postgres for durability, Redis for speed.","title":"\ud83d\udd34 Redis: From Basics to Real-World Usage"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#1-what-redis-actually-does","text":"Redis keeps everything in memory but optionally syncs to disk (snapshots or append logs). It supports complex data types, pub/sub messaging, and atomic operations \u2014 all with sub-millisecond latency. Use Case Example Cache Store frequently accessed DB results. Session Store Track logged-in users. Queue / Stream Background jobs, real-time feeds. Rate Limiter Count requests per user/IP. Pub/Sub Event notification between services. \ud83d\udc49 In short: Redis trades persistence for speed , but can be configured for both.","title":"\u2699\ufe0f 1. What Redis Actually Does"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#2-core-concepts","text":"Concept Description Key Identifier for a piece of data (string). Value Data stored under a key \u2014 can be string, hash, list, set, etc. TTL Time-to-live (expiration). Persistence Data saved to disk (RDB snapshots or AOF logs). Pub/Sub Publisher sends messages to channels; subscribers receive them. Database index Redis has logical DBs numbered 0\u201315 by default.","title":"\ud83e\uddf1 2. Core Concepts"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#3-basic-commands-quick-reference","text":"redis-cli # Start CLI ping # \u2192 PONG set key \"value\" # store get key # retrieve del key # delete exists key # check if exists expire key 60 # expire after 60s keys * # list all keys (use with caution) flushall # delete everything ```` --- ## \ud83e\udde9 4. Data Structures and Examples ### Strings ``` bash set greeting \"Hello\" get greeting incr counter decr counter","title":"\u26a1 3. Basic Commands (Quick Reference)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#hashes-key-fields","text":"hset user:1 name \"Alice\" email \"alice@example.com\" hgetall user:1 hget user:1 email","title":"Hashes (key \u2192 fields)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#lists-ordered-queue","text":"lpush queue job1 rpush queue job2 lrange queue 0 -1 lpop queue","title":"Lists (ordered queue)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#sets-unique-values","text":"sadd users \"edgaras\" \"alice\" smembers users sismember users \"bob\"","title":"Sets (unique values)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#sorted-sets-ranking","text":"zadd leaderboard 100 \"alice\" 95 \"bob\" zrevrange leaderboard 0 -1 WITHSCORES","title":"Sorted Sets (ranking)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#pubsub","text":"SUBSCRIBE news PUBLISH news \"Server update complete!\"","title":"Pub/Sub"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#5-persistence-modes","text":"Redis can persist data in two main ways: Mode Description RDB (Snapshot) Saves full dataset at intervals (default). Fast, minimal overhead. AOF (Append Only File) Logs every operation \u2014 safer but slower. Hybrid Combines both for speed + durability. Example in redis.conf : save 900 1 save 300 10 save 60 10000 appendonly yes","title":"\ud83e\udde0 5. Persistence Modes"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#6-running-redis-with-docker","text":"docker run -d \\ --name redis \\ -p 6379 :6379 \\ -v redis_data:/data \\ redis:7 Check connection: docker exec -it redis redis-cli ping With password: docker run -d \\ -p 6379 :6379 \\ -e REDIS_PASSWORD = secret \\ redis:7 \\ redis-server --requirepass secret","title":"\ud83e\uddf0 6. Running Redis with Docker"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#7-docker-compose-example","text":"version : \"3.9\" services : redis : image : redis:7 ports : - \"6379:6379\" volumes : - redis_data:/data command : redis-server --appendonly yes healthcheck : test : [ \"CMD\" , \"redis-cli\" , \"ping\" ] interval : 5s retries : 5 backend : build : ./backend environment : REDIS_HOST : redis REDIS_PORT : 6379 volumes : redis_data :","title":"\ud83e\udde9 7. Docker Compose Example"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#8-redis-application-integration-spring-boot-example","text":"application.properties : spring.data.redis.host = redis spring.data.redis.port = 6379 spring.data.redis.password = secret Simple cache usage with Spring: @Cacheable ( \"users\" ) public User getUserById ( Long id ) { return userRepository . findById ( id ). orElseThrow (); } Make sure caching is enabled: @EnableCaching @SpringBootApplication public class App {}","title":"\ud83d\udcbe 8. Redis + Application Integration (Spring Boot Example)"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#9-monitoring-and-admin-commands","text":"info # show metrics dbsize # number of keys monitor # live command log config get * # view config config rewrite # persist config changes slowlog get # show slow commands For real-time dashboards: RedisInsight redis-exporter for Prometheus / Grafana metrics.","title":"\ud83d\udce1 9. Monitoring and Admin Commands"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#10-security-performance-best-practices","text":"Set a password ( requirepass secret ) \u2014 Redis is open by default. Bind to localhost or internal networks ( bind 127.0.0.1 ). Disable FLUSHALL and CONFIG commands in production. Use connection pooling for app clients. For persistence: prefer AOF + fsync every second . Enable maxmemory and maxmemory-policy allkeys-lru for safe eviction. Example snippet: maxmemory 512mb maxmemory-policy allkeys-lru","title":"\ud83d\udd12 10. Security &amp; Performance Best Practices"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#11-ide-tool-integration","text":"","title":"\ud83d\udcbb 11. IDE &amp; Tool Integration"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#jetbrains-ides","text":"Use built-in Database Tool Window \u2192 Add Data Source \u2192 Redis. Visualize keys, TTLs, and values directly. Supports EVAL and Lua scripting.","title":"JetBrains IDEs"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#vs-code","text":"Recommended extensions: Redis Explorer \u2192 browse keys, TTLs, and memory usage. REST Client \u2192 test APIs that interact with Redis. .env files \u2192 store connection secrets. Example .env : REDIS_HOST=localhost REDIS_PORT=6379 REDIS_PASSWORD=secret","title":"VS Code"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#12-cicd-integration-example","text":"GitHub Actions \u2014 Redis as test dependency: services : redis : image : redis:7 ports : [ '6379:6379' ] options : >- --health-cmd=\"redis-cli ping\" --health-interval=5s --health-retries=5 steps : - uses : actions/checkout@v4 - name : Run integration tests env : REDIS_HOST : localhost REDIS_PORT : 6379 run : ./gradlew test","title":"\ud83d\ude80 12. CI/CD Integration Example"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#13-real-world-patterns","text":"Pattern Description Example Cache-Aside App reads from Redis; on miss, fetches DB + stores in Redis. Common with Spring or Django. Write-Through Writes go to Redis and DB simultaneously. Ensures consistency. Pub/Sub Services communicate via Redis channels. Real-time notifications. Streams Event queue with consumer groups. Great for jobs, analytics. Example stream usage: XADD jobs * type \"email\" user \"alice\" XREADGROUP GROUP workers 1 COUNT 1 STREAMS jobs >","title":"\ud83e\udde9 13. Real-World Patterns"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#14-troubleshooting","text":"Issue Fix Redis not reachable Check port 6379 and container health. Keys disappear TTL expired or memory eviction triggered. \u201cNOAUTH\u201d error Set password in config and client. High latency Tune maxmemory + eviction policy. Data not persistent Enable appendonly yes .","title":"\ud83e\udde0 14. Troubleshooting"},{"location":"cheatsheets/databases/in-memory/%F0%9F%94%B4%20redis/quick-refresher/#15-summary","text":"Redis = speed and simplicity \u2014 an in-memory data store with persistence options. Ideal for caching, pub/sub, queues, and rate limiting. Use Docker for easy setup and Compose for multi-service integration. Always secure, monitor, and limit memory. Combine with PostgreSQL for the best of both worlds: durability + velocity. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 redis/ \u2514\u2500 quick-refresher.md","title":"\u2705 15. Summary"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/","text":"\ud83d\udc18 Postgre-SQL: From Basics to Full-Stack Integration \u00b6 PostgreSQL (often just Postgres ) is a powerful, open-source relational database known for reliability, standards compliance, and extensibility. It\u2019s the database behind everything from small apps to enterprise-scale systems. Think of it as the \u201cdeveloper\u2019s Swiss army knife\u201d for data \u2014 solid, flexible, and endlessly scriptable. \u2699\ufe0f 1. What PostgreSQL Actually Does \u00b6 At its core, Postgres: - Stores structured data in tables (rows and columns). - Enforces relations via keys and constraints. - Lets you query and transform data using SQL . - Runs as a daemon/service on your system or inside a Docker container. - Manages concurrent access safely with MVCC (multi-version concurrency control). \ud83d\udc49 In short: PostgreSQL is a transactional data engine \u2014 designed for consistency, safety, and complex queries. \ud83e\uddf1 2. Core Concepts \u00b6 Concept Description Database Logical container for schemas, tables, and users. Schema Namespace inside a database (like a folder for tables). Table Structured data collection (rows = records, columns = fields). Row / Column Individual data unit / attribute. Primary key Unique identifier per row. Foreign key Relationship link between tables. Transaction Atomic unit of work \u2014 all or nothing. MVCC Allows simultaneous reads/writes safely via versioning. \ud83e\udde9 3. PostgreSQL in Action \u00b6 Start / Stop (Linux) \u00b6 sudo systemctl start postgresql sudo systemctl status postgresql sudo -u postgres psql Quick DB shell commands \u00b6 \\ l -- list databases \\ c mydb -- connect to database \\ dt -- list tables \\ d tablename -- describe table structure \\ q -- quit Create a user and database \u00b6 CREATE USER devuser WITH PASSWORD 'secret' ; CREATE DATABASE devdb OWNER devuser ; GRANT ALL PRIVILEGES ON DATABASE devdb TO devuser ; \ud83e\uddf0 4. SQL Basics Refresher \u00b6 -- Create table CREATE TABLE users ( id SERIAL PRIMARY KEY , name VARCHAR ( 100 ), email TEXT UNIQUE NOT NULL , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); -- Insert data INSERT INTO users ( name , email ) VALUES ( 'Alice' , 'alice@example.com' ); -- Query data SELECT * FROM users ; SELECT name FROM users WHERE email LIKE '%@example.com' ; -- Update UPDATE users SET name = 'Alicia' WHERE id = 1 ; -- Delete DELETE FROM users WHERE id = 1 ; \ud83e\udde9 5. PostgreSQL with Docker \u00b6 Simplify local setup \u2014 run everything isolated and disposable. docker run -d \\ --name postgres \\ -e POSTGRES_USER = devuser \\ -e POSTGRES_PASSWORD = secret \\ -e POSTGRES_DB = devdb \\ -p 5432 :5432 \\ -v pg_data:/var/lib/postgresql/data \\ postgres:16 Now you can connect from your host or app via: Host: localhost Port: 5432 Database: devdb User: devuser Password: secret Docker Compose Example \u00b6 services : postgres : image : postgres:16 environment : POSTGRES_USER : devuser POSTGRES_PASSWORD : secret POSTGRES_DB : devdb ports : - \"5432:5432\" volumes : - pg_data:/var/lib/postgresql/data pgadmin : image : dpage/pgadmin4 environment : PGADMIN_DEFAULT_EMAIL : admin@example.com PGADMIN_DEFAULT_PASSWORD : admin ports : - \"5050:80\" depends_on : - postgres volumes : pg_data : Access pgAdmin at http://localhost:5050 \u2192 connect to host postgres , port 5432 . \ud83e\udde0 6. Common Data Types \u00b6 Type Example Notes INTEGER 42 Whole numbers SERIAL auto-increment Shortcut for integer + sequence VARCHAR(n) 'Hello' Variable-length string TEXT Long article Unlimited string BOOLEAN TRUE / FALSE Logical flag DATE , TIMESTAMP 2025-10-15 Temporal data JSONB '{\"x\":1}' Binary JSON \u2014 queryable! ARRAY '{1,2,3}' PostgreSQL supports array columns \ud83e\udde9 7. User & Access Management \u00b6 -- Create user CREATE USER api_user WITH PASSWORD 'apipass' ; -- Grant permissions GRANT CONNECT ON DATABASE devdb TO api_user ; GRANT USAGE ON SCHEMA public TO api_user ; GRANT SELECT , INSERT , UPDATE ON ALL TABLES IN SCHEMA public TO api_user ; -- Future tables ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT , INSERT , UPDATE ON TABLES TO api_user ; \ud83d\udc49 Keep app-level users least-privileged \u2014 don\u2019t give them superuser rights. \ud83e\udde9 8. Useful CLI Commands \u00b6 psql -U devuser -d devdb # connect to DB psql -h localhost -U devuser # specify host pg_dump -U devuser devdb > dump.sql # backup psql -U devuser -d devdb < dump.sql # restore Check service status: sudo systemctl status postgresql \ud83e\uddf0 9. Troubleshooting \u00b6 Issue Fix Can't connect (local) Check pg_hba.conf and open port 5432. \u201crole does not exist\u201d Create user via CREATE USER . Permission denied Ensure grants on database and schema. Docker container forgets data Add a volume: -v pg_data:/var/lib/postgresql/data . Encoding issues Use UTF8 during DB creation. \ud83e\udde9 10. PostgreSQL Configuration Essentials \u00b6 Main config files (Linux or container): /etc/postgresql/16/main/postgresql.conf /etc/postgresql/16/main/pg_hba.conf Common tweaks: listen_addresses = '*' max_connections = 100 shared_buffers = 256MB work_mem = 16MB logging_collector = on log_directory = 'log' Reload without restart: sudo systemctl reload postgresql \ud83d\udcbb 11. PostgreSQL in IDEs (JetBrains / VS Code) \u00b6 JetBrains (DataGrip, IntelliJ Ultimate) \u00b6 Open \u201cDatabase\u201d panel \u2192 \u201c+\u201d \u2192 \u201cPostgreSQL\u201d. Set host/port/user/password. Can run SQL scripts directly, browse schema, or diff databases. Integration with .env variables and Docker Compose services . Shortcut magic: Alt+Enter \u2192 run query under cursor Ctrl+Enter \u2192 run entire script Ctrl+Shift+F10 \u2192 execute file VS Code Setup \u00b6 Extensions to install: SQLTools SQLTools PostgreSQL Driver vscode-database-client (optional GUI) Example .sqltools.json : { \"connections\" : [ { \"name\" : \"Local Postgres\" , \"driver\" : \"PostgreSQL\" , \"previewLimit\" : 50 , \"server\" : \"localhost\" , \"port\" : 5432 , \"database\" : \"devdb\" , \"username\" : \"devuser\" , \"password\" : \"secret\" } ] } Run queries directly in VS Code or integrated terminal. \ud83d\ude80 12. Spring Boot Integration Example \u00b6 In your application.properties : spring.datasource.url = jdbc:postgresql://localhost:5432/devdb spring.datasource.username = devuser spring.datasource.password = secret spring.jpa.hibernate.ddl-auto = update spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect Docker Compose-friendly URL: jdbc:postgresql://postgres:5432/devdb \ud83e\udde0 13. Developer Workflow Pattern \u00b6 Start your DB (local or Docker). Connect through IDE or pgAdmin. Run schema migrations (Liquibase/Flyway). Run app \u2192 verify connection. Backup before experimenting. Keep .env variables for credentials: POSTGRES_USER=devuser POSTGRES_PASSWORD=secret POSTGRES_DB=devdb POSTGRES_PORT=5432 Load via: export $( grep -v '^#' .env | xargs ) \ud83e\udde9 14. Optimization and Maintenance \u00b6 Analyze & Vacuum VACUUM ANALYZE ; Keeps statistics fresh and space reclaimed. Indexes CREATE INDEX idx_users_email ON users ( email ); Backups pg_dumpall > full_backup.sql Performance Prefer JSONB for flexible data. Avoid SELECT * in production queries. Tune work_mem , shared_buffers for heavy loads. \u2705 15. Summary \u00b6 PostgreSQL = reliable, standard, and developer-friendly. Use Docker for easy, isolated environments. Use pgAdmin or IDE integration for management. Integrate cleanly with Spring Boot via JDBC. Keep permissions minimal, backups regular, and queries explicit. \ud83d\udcbb 16. PostgreSQL in Developer Workflows (JetBrains & VS Code) \u00b6 Postgres is more than a database service \u2014 it\u2019s part of your daily dev feedback loop . Connecting it tightly to your IDE and environment lets you debug, test, and deploy confidently. \ud83e\udde9 JetBrains IDEs (IntelliJ Ultimate / DataGrip / PyCharm Pro) \u00b6 Action Description Add Data Source \u2192 PostgreSQL Connect via host/port or directly through Docker Compose service. Run SQL scripts inline Execute queries from .sql files, see live results. Compare Schemas Diff local vs. remote DB structures (great for migrations). Generate DDL from tables Auto-create SQL definitions for export or review. Inspect Query Plan (Ctrl+Shift+Enter) Visualize query performance via EXPLAIN ANALYZE . Quick habit loop: 1. Write query \u2192 Alt+Enter \u2192 Run. 2. Fix slow query \u2192 Inspect execution plan. 3. Save snippet in IDE\u2019s \u201cScratch File\u201d for reuse. You can connect directly to your Dockerized DB by pointing to host localhost:5432 or service name postgres inside Compose. \ud83e\udde0 VS Code Integration \u00b6 Recommended extensions: - SQLTools + SQLTools PostgreSQL Driver \u2192 simple queries, table explorer. - Database Client \u2192 visual schema browsing. - .env support \u2192 use environment variables for credentials. Connect via .sqltools.json : { \"connections\" : [ { \"name\" : \"Local Postgres\" , \"driver\" : \"PostgreSQL\" , \"server\" : \"localhost\" , \"port\" : 5432 , \"database\" : \"devdb\" , \"username\" : \"devuser\" , \"password\" : \"secret\" } ] } ```` You ca n ru n a n d test queries direc tl y i n `.sql` f iles wi t hou t swi t chi n g t ools. --- ## \ud83e\uddf0 17. Pos t greSQL + Docker Compose f or Mul t i -E n viro n me nts A si n gle Compose f ile ca n ha n dle bo t h **developme nt ** a n d ** test i n g** da ta bases. ```yaml versio n : \"3.9\" services : pos t gres : image : pos t gres : 16 e n viro n me nt : POSTGRES_USER : devuser POSTGRES_PASSWORD : secre t POSTGRES_DB : devdb por ts : - \"5432:5432\" volumes : - pg_da ta : /var/lib/pos t gresql/da ta heal t hcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U devuser -d devdb\" ] i nter val : 10 s re tr ies : 5 test db : image : pos t gres : 16 e n viro n me nt : POSTGRES_USER : testuser POSTGRES_PASSWORD : test pass POSTGRES_DB : test db por ts : - \"55432:5432\" t mp fs : - /var/lib/pos t gresql/da ta heal t hcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U testuser -d testdb\" ] i nter val : 5 s re tr ies : 3 volumes : pg_da ta : Why it matters: pg_data \u2192 persists your dev data. testdb \u2192 ephemeral; wiped between test runs. Healthchecks prevent dependent containers from starting too early. \ud83d\udc49 You can link your backend app to postgres (dev) or testdb (CI) just by switching env variables. \ud83d\ude80 18. Integration with CI/CD (GitHub Actions Example) \u00b6 name : Backend Tests on : [ push , pull_request ] jobs : test : runs-on : ubuntu-latest services : postgres : image : postgres:16 env : POSTGRES_USER : testuser POSTGRES_PASSWORD : testpass POSTGRES_DB : testdb ports : [ '5432:5432' ] options : >- --health-cmd=\"pg_isready -U testuser -d testdb\" --health-interval=5s --health-timeout=5s --health-retries=5 steps : - uses : actions/checkout@v4 - name : Wait for Postgres run : | until pg_isready -h localhost -U testuser; do sleep 1 done - name : Run Tests run : ./gradlew test env : SPRING_DATASOURCE_URL : jdbc:postgresql://localhost:5432/testdb SPRING_DATASOURCE_USERNAME : testuser SPRING_DATASOURCE_PASSWORD : testpass This pattern runs Postgres automatically for tests \u2014 no manual setup, no external dependencies. \ud83e\udde9 19. Managing Environments: Local \u2192 Staging \u2192 Production \u00b6 Environment separation rule: Keep configuration externalized ( .env , configmaps , or Secrets). Never commit real passwords or keys. Distinguish database URLs by environment: Environment Example URL Notes Local jdbc:postgresql://localhost:5432/devdb Docker or local install Staging jdbc:postgresql://staging-db.internal:5432/appdb Shared test data Production jdbc:postgresql://prod-db.cluster:5432/appdb High availability In Docker Compose: env_file : - .env.${ENVIRONMENT} In Spring Boot: spring.datasource.url = ${DB_URL} spring.datasource.username = ${DB_USER} spring.datasource.password = ${DB_PASS} Pro tip: version .env.example for onboarding new developers easily. \ud83d\udd12 20. Production Hardening & Maintenance Patterns \u00b6 Connection Pooling \u00b6 Postgres performs best with connection pooling (e.g., PgBouncer ). docker run -d \\ --name pgbouncer \\ -p 6432 :6432 \\ -e DB_USER = devuser \\ -e DB_PASSWORD = secret \\ -e DB_HOST = postgres \\ edoburu/pgbouncer App connects to localhost:6432 instead of 5432 . Backups \u00b6 pg_dump -U devuser devdb | gzip > backup_ $( date +%F ) .sql.gz Automate via cron or CI. Replication and Scaling \u00b6 Use Streaming Replication for read replicas. Or scale horizontally via logical replication . Consider Patroni or TimescaleDB for high-availability setups. Security \u00b6 Disable remote superuser login. Restrict listen_addresses in postgresql.conf . Rotate credentials regularly. Encrypt connections with SSL ( ssl = on ). \u2705 Summary (Developer Edition) \u00b6 Integrate Postgres into your IDE and CI/CD pipelines, not just your runtime. Run it via Docker Compose to match local and production schemas. Automate validation, migrations, and backups. Use .env files to keep environments cleanly separated. Monitor performance ( EXPLAIN ANALYZE , logs, connection stats) like a pro DBA.","title":"quick-refresher"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#postgre-sql-from-basics-to-full-stack-integration","text":"PostgreSQL (often just Postgres ) is a powerful, open-source relational database known for reliability, standards compliance, and extensibility. It\u2019s the database behind everything from small apps to enterprise-scale systems. Think of it as the \u201cdeveloper\u2019s Swiss army knife\u201d for data \u2014 solid, flexible, and endlessly scriptable.","title":"\ud83d\udc18 Postgre-SQL: From Basics to Full-Stack Integration"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#1-what-postgresql-actually-does","text":"At its core, Postgres: - Stores structured data in tables (rows and columns). - Enforces relations via keys and constraints. - Lets you query and transform data using SQL . - Runs as a daemon/service on your system or inside a Docker container. - Manages concurrent access safely with MVCC (multi-version concurrency control). \ud83d\udc49 In short: PostgreSQL is a transactional data engine \u2014 designed for consistency, safety, and complex queries.","title":"\u2699\ufe0f 1. What PostgreSQL Actually Does"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#2-core-concepts","text":"Concept Description Database Logical container for schemas, tables, and users. Schema Namespace inside a database (like a folder for tables). Table Structured data collection (rows = records, columns = fields). Row / Column Individual data unit / attribute. Primary key Unique identifier per row. Foreign key Relationship link between tables. Transaction Atomic unit of work \u2014 all or nothing. MVCC Allows simultaneous reads/writes safely via versioning.","title":"\ud83e\uddf1 2. Core Concepts"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#3-postgresql-in-action","text":"","title":"\ud83e\udde9 3. PostgreSQL in Action"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#start-stop-linux","text":"sudo systemctl start postgresql sudo systemctl status postgresql sudo -u postgres psql","title":"Start / Stop (Linux)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#quick-db-shell-commands","text":"\\ l -- list databases \\ c mydb -- connect to database \\ dt -- list tables \\ d tablename -- describe table structure \\ q -- quit","title":"Quick DB shell commands"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#create-a-user-and-database","text":"CREATE USER devuser WITH PASSWORD 'secret' ; CREATE DATABASE devdb OWNER devuser ; GRANT ALL PRIVILEGES ON DATABASE devdb TO devuser ;","title":"Create a user and database"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#4-sql-basics-refresher","text":"-- Create table CREATE TABLE users ( id SERIAL PRIMARY KEY , name VARCHAR ( 100 ), email TEXT UNIQUE NOT NULL , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); -- Insert data INSERT INTO users ( name , email ) VALUES ( 'Alice' , 'alice@example.com' ); -- Query data SELECT * FROM users ; SELECT name FROM users WHERE email LIKE '%@example.com' ; -- Update UPDATE users SET name = 'Alicia' WHERE id = 1 ; -- Delete DELETE FROM users WHERE id = 1 ;","title":"\ud83e\uddf0 4. SQL Basics Refresher"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#5-postgresql-with-docker","text":"Simplify local setup \u2014 run everything isolated and disposable. docker run -d \\ --name postgres \\ -e POSTGRES_USER = devuser \\ -e POSTGRES_PASSWORD = secret \\ -e POSTGRES_DB = devdb \\ -p 5432 :5432 \\ -v pg_data:/var/lib/postgresql/data \\ postgres:16 Now you can connect from your host or app via: Host: localhost Port: 5432 Database: devdb User: devuser Password: secret","title":"\ud83e\udde9 5. PostgreSQL with Docker"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#docker-compose-example","text":"services : postgres : image : postgres:16 environment : POSTGRES_USER : devuser POSTGRES_PASSWORD : secret POSTGRES_DB : devdb ports : - \"5432:5432\" volumes : - pg_data:/var/lib/postgresql/data pgadmin : image : dpage/pgadmin4 environment : PGADMIN_DEFAULT_EMAIL : admin@example.com PGADMIN_DEFAULT_PASSWORD : admin ports : - \"5050:80\" depends_on : - postgres volumes : pg_data : Access pgAdmin at http://localhost:5050 \u2192 connect to host postgres , port 5432 .","title":"Docker Compose Example"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#6-common-data-types","text":"Type Example Notes INTEGER 42 Whole numbers SERIAL auto-increment Shortcut for integer + sequence VARCHAR(n) 'Hello' Variable-length string TEXT Long article Unlimited string BOOLEAN TRUE / FALSE Logical flag DATE , TIMESTAMP 2025-10-15 Temporal data JSONB '{\"x\":1}' Binary JSON \u2014 queryable! ARRAY '{1,2,3}' PostgreSQL supports array columns","title":"\ud83e\udde0 6. Common Data Types"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#7-user-access-management","text":"-- Create user CREATE USER api_user WITH PASSWORD 'apipass' ; -- Grant permissions GRANT CONNECT ON DATABASE devdb TO api_user ; GRANT USAGE ON SCHEMA public TO api_user ; GRANT SELECT , INSERT , UPDATE ON ALL TABLES IN SCHEMA public TO api_user ; -- Future tables ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT , INSERT , UPDATE ON TABLES TO api_user ; \ud83d\udc49 Keep app-level users least-privileged \u2014 don\u2019t give them superuser rights.","title":"\ud83e\udde9 7. User &amp; Access Management"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#8-useful-cli-commands","text":"psql -U devuser -d devdb # connect to DB psql -h localhost -U devuser # specify host pg_dump -U devuser devdb > dump.sql # backup psql -U devuser -d devdb < dump.sql # restore Check service status: sudo systemctl status postgresql","title":"\ud83e\udde9 8. Useful CLI Commands"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#9-troubleshooting","text":"Issue Fix Can't connect (local) Check pg_hba.conf and open port 5432. \u201crole does not exist\u201d Create user via CREATE USER . Permission denied Ensure grants on database and schema. Docker container forgets data Add a volume: -v pg_data:/var/lib/postgresql/data . Encoding issues Use UTF8 during DB creation.","title":"\ud83e\uddf0 9. Troubleshooting"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#10-postgresql-configuration-essentials","text":"Main config files (Linux or container): /etc/postgresql/16/main/postgresql.conf /etc/postgresql/16/main/pg_hba.conf Common tweaks: listen_addresses = '*' max_connections = 100 shared_buffers = 256MB work_mem = 16MB logging_collector = on log_directory = 'log' Reload without restart: sudo systemctl reload postgresql","title":"\ud83e\udde9 10. PostgreSQL Configuration Essentials"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#11-postgresql-in-ides-jetbrains-vs-code","text":"","title":"\ud83d\udcbb 11. PostgreSQL in IDEs (JetBrains / VS Code)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#jetbrains-datagrip-intellij-ultimate","text":"Open \u201cDatabase\u201d panel \u2192 \u201c+\u201d \u2192 \u201cPostgreSQL\u201d. Set host/port/user/password. Can run SQL scripts directly, browse schema, or diff databases. Integration with .env variables and Docker Compose services . Shortcut magic: Alt+Enter \u2192 run query under cursor Ctrl+Enter \u2192 run entire script Ctrl+Shift+F10 \u2192 execute file","title":"JetBrains (DataGrip, IntelliJ Ultimate)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#vs-code-setup","text":"Extensions to install: SQLTools SQLTools PostgreSQL Driver vscode-database-client (optional GUI) Example .sqltools.json : { \"connections\" : [ { \"name\" : \"Local Postgres\" , \"driver\" : \"PostgreSQL\" , \"previewLimit\" : 50 , \"server\" : \"localhost\" , \"port\" : 5432 , \"database\" : \"devdb\" , \"username\" : \"devuser\" , \"password\" : \"secret\" } ] } Run queries directly in VS Code or integrated terminal.","title":"VS Code Setup"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#12-spring-boot-integration-example","text":"In your application.properties : spring.datasource.url = jdbc:postgresql://localhost:5432/devdb spring.datasource.username = devuser spring.datasource.password = secret spring.jpa.hibernate.ddl-auto = update spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect Docker Compose-friendly URL: jdbc:postgresql://postgres:5432/devdb","title":"\ud83d\ude80 12. Spring Boot Integration Example"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#13-developer-workflow-pattern","text":"Start your DB (local or Docker). Connect through IDE or pgAdmin. Run schema migrations (Liquibase/Flyway). Run app \u2192 verify connection. Backup before experimenting. Keep .env variables for credentials: POSTGRES_USER=devuser POSTGRES_PASSWORD=secret POSTGRES_DB=devdb POSTGRES_PORT=5432 Load via: export $( grep -v '^#' .env | xargs )","title":"\ud83e\udde0 13. Developer Workflow Pattern"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#14-optimization-and-maintenance","text":"Analyze & Vacuum VACUUM ANALYZE ; Keeps statistics fresh and space reclaimed. Indexes CREATE INDEX idx_users_email ON users ( email ); Backups pg_dumpall > full_backup.sql Performance Prefer JSONB for flexible data. Avoid SELECT * in production queries. Tune work_mem , shared_buffers for heavy loads.","title":"\ud83e\udde9 14. Optimization and Maintenance"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#15-summary","text":"PostgreSQL = reliable, standard, and developer-friendly. Use Docker for easy, isolated environments. Use pgAdmin or IDE integration for management. Integrate cleanly with Spring Boot via JDBC. Keep permissions minimal, backups regular, and queries explicit.","title":"\u2705 15. Summary"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#16-postgresql-in-developer-workflows-jetbrains-vs-code","text":"Postgres is more than a database service \u2014 it\u2019s part of your daily dev feedback loop . Connecting it tightly to your IDE and environment lets you debug, test, and deploy confidently.","title":"\ud83d\udcbb 16. PostgreSQL in Developer Workflows (JetBrains &amp; VS Code)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#jetbrains-ides-intellij-ultimate-datagrip-pycharm-pro","text":"Action Description Add Data Source \u2192 PostgreSQL Connect via host/port or directly through Docker Compose service. Run SQL scripts inline Execute queries from .sql files, see live results. Compare Schemas Diff local vs. remote DB structures (great for migrations). Generate DDL from tables Auto-create SQL definitions for export or review. Inspect Query Plan (Ctrl+Shift+Enter) Visualize query performance via EXPLAIN ANALYZE . Quick habit loop: 1. Write query \u2192 Alt+Enter \u2192 Run. 2. Fix slow query \u2192 Inspect execution plan. 3. Save snippet in IDE\u2019s \u201cScratch File\u201d for reuse. You can connect directly to your Dockerized DB by pointing to host localhost:5432 or service name postgres inside Compose.","title":"\ud83e\udde9 JetBrains IDEs (IntelliJ Ultimate / DataGrip / PyCharm Pro)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#vs-code-integration","text":"Recommended extensions: - SQLTools + SQLTools PostgreSQL Driver \u2192 simple queries, table explorer. - Database Client \u2192 visual schema browsing. - .env support \u2192 use environment variables for credentials. Connect via .sqltools.json : { \"connections\" : [ { \"name\" : \"Local Postgres\" , \"driver\" : \"PostgreSQL\" , \"server\" : \"localhost\" , \"port\" : 5432 , \"database\" : \"devdb\" , \"username\" : \"devuser\" , \"password\" : \"secret\" } ] } ```` You ca n ru n a n d test queries direc tl y i n `.sql` f iles wi t hou t swi t chi n g t ools. --- ## \ud83e\uddf0 17. Pos t greSQL + Docker Compose f or Mul t i -E n viro n me nts A si n gle Compose f ile ca n ha n dle bo t h **developme nt ** a n d ** test i n g** da ta bases. ```yaml versio n : \"3.9\" services : pos t gres : image : pos t gres : 16 e n viro n me nt : POSTGRES_USER : devuser POSTGRES_PASSWORD : secre t POSTGRES_DB : devdb por ts : - \"5432:5432\" volumes : - pg_da ta : /var/lib/pos t gresql/da ta heal t hcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U devuser -d devdb\" ] i nter val : 10 s re tr ies : 5 test db : image : pos t gres : 16 e n viro n me nt : POSTGRES_USER : testuser POSTGRES_PASSWORD : test pass POSTGRES_DB : test db por ts : - \"55432:5432\" t mp fs : - /var/lib/pos t gresql/da ta heal t hcheck : test : [ \"CMD-SHELL\" , \"pg_isready -U testuser -d testdb\" ] i nter val : 5 s re tr ies : 3 volumes : pg_da ta : Why it matters: pg_data \u2192 persists your dev data. testdb \u2192 ephemeral; wiped between test runs. Healthchecks prevent dependent containers from starting too early. \ud83d\udc49 You can link your backend app to postgres (dev) or testdb (CI) just by switching env variables.","title":"\ud83e\udde0 VS Code Integration"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#18-integration-with-cicd-github-actions-example","text":"name : Backend Tests on : [ push , pull_request ] jobs : test : runs-on : ubuntu-latest services : postgres : image : postgres:16 env : POSTGRES_USER : testuser POSTGRES_PASSWORD : testpass POSTGRES_DB : testdb ports : [ '5432:5432' ] options : >- --health-cmd=\"pg_isready -U testuser -d testdb\" --health-interval=5s --health-timeout=5s --health-retries=5 steps : - uses : actions/checkout@v4 - name : Wait for Postgres run : | until pg_isready -h localhost -U testuser; do sleep 1 done - name : Run Tests run : ./gradlew test env : SPRING_DATASOURCE_URL : jdbc:postgresql://localhost:5432/testdb SPRING_DATASOURCE_USERNAME : testuser SPRING_DATASOURCE_PASSWORD : testpass This pattern runs Postgres automatically for tests \u2014 no manual setup, no external dependencies.","title":"\ud83d\ude80 18. Integration with CI/CD (GitHub Actions Example)"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#19-managing-environments-local-staging-production","text":"Environment separation rule: Keep configuration externalized ( .env , configmaps , or Secrets). Never commit real passwords or keys. Distinguish database URLs by environment: Environment Example URL Notes Local jdbc:postgresql://localhost:5432/devdb Docker or local install Staging jdbc:postgresql://staging-db.internal:5432/appdb Shared test data Production jdbc:postgresql://prod-db.cluster:5432/appdb High availability In Docker Compose: env_file : - .env.${ENVIRONMENT} In Spring Boot: spring.datasource.url = ${DB_URL} spring.datasource.username = ${DB_USER} spring.datasource.password = ${DB_PASS} Pro tip: version .env.example for onboarding new developers easily.","title":"\ud83e\udde9 19. Managing Environments: Local \u2192 Staging \u2192 Production"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#20-production-hardening-maintenance-patterns","text":"","title":"\ud83d\udd12 20. Production Hardening &amp; Maintenance Patterns"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#connection-pooling","text":"Postgres performs best with connection pooling (e.g., PgBouncer ). docker run -d \\ --name pgbouncer \\ -p 6432 :6432 \\ -e DB_USER = devuser \\ -e DB_PASSWORD = secret \\ -e DB_HOST = postgres \\ edoburu/pgbouncer App connects to localhost:6432 instead of 5432 .","title":"Connection Pooling"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#backups","text":"pg_dump -U devuser devdb | gzip > backup_ $( date +%F ) .sql.gz Automate via cron or CI.","title":"Backups"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#replication-and-scaling","text":"Use Streaming Replication for read replicas. Or scale horizontally via logical replication . Consider Patroni or TimescaleDB for high-availability setups.","title":"Replication and Scaling"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#security","text":"Disable remote superuser login. Restrict listen_addresses in postgresql.conf . Rotate credentials regularly. Encrypt connections with SSL ( ssl = on ).","title":"Security"},{"location":"cheatsheets/databases/relational/%F0%9F%90%98%20postgresql/quick-refresher/#summary-developer-edition","text":"Integrate Postgres into your IDE and CI/CD pipelines, not just your runtime. Run it via Docker Compose to match local and production schemas. Automate validation, migrations, and backups. Use .env files to keep environments cleanly separated. Monitor performance ( EXPLAIN ANALYZE , logs, connection stats) like a pro DBA.","title":"\u2705 Summary (Developer Edition)"},{"location":"cheatsheets/languages/java/_meta/blueprint/","text":"\ud83e\udded Java Cheatsheet Blueprint \u2014 Folder Layout & Evolution Plan \u00b6 Purpose: This document defines the long-term structure for organizing Java-related cheatsheets. It starts simple but scales gracefully as new frameworks and tools appear. \ud83d\udcc1 Planned Folder Layout \u00b6 docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 languages/ \u2514\u2500 java/ \u251c\u2500 index.md \u251c\u2500 setup/ \u2502 \u251c\u2500 jdk-install.md # SDKMAN!, PATH, versions \u2502 \u2514\u2500 project-structure.md # src/main/java, resources, etc. \u251c\u2500 core/ \u2502 \u251c\u2500 syntax.md \u2502 \u251c\u2500 collections.md \u2502 \u251c\u2500 streams.md \u2502 \u251c\u2500 concurrency.md \u2502 \u251c\u2500 records.md \u2502 \u2514\u2500 io-nio.md \u251c\u2500 build/ \u2502 \u251c\u2500 maven/ \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u251c\u2500 dependencies.md \u2502 \u2502 \u251c\u2500 plugins.md \u2502 \u2502 \u2514\u2500 profiles.md \u2502 \u2514\u2500 gradle/ \u2502 \u251c\u2500 basics.md \u2502 \u251c\u2500 dependencies.md \u2502 \u251c\u2500 tasks.md \u2502 \u2514\u2500 multi-project.md \u251c\u2500 testing/ \u2502 \u251c\u2500 junit5.md \u2502 \u251c\u2500 mockito.md \u2502 \u2514\u2500 testcontainers.md \u251c\u2500 frameworks/ \u2502 \u251c\u2500 spring/ \u2502 \u2502 \u251c\u2500 boot/ \u2502 \u2502 \u2502 \u251c\u2500 starters.md \u2502 \u2502 \u2502 \u251c\u2500 config.md \u2502 \u2502 \u2502 \u2514\u2500 actuator.md \u2502 \u2502 \u251c\u2500 web/ \u2502 \u2502 \u2502 \u251c\u2500 rest-controller.md \u2502 \u2502 \u2502 \u2514\u2500 validation.md \u2502 \u2502 \u251c\u2500 data/ \u2502 \u2502 \u2502 \u251c\u2500 jpa.md \u2502 \u2502 \u2502 \u2514\u2500 transactions.md \u2502 \u2502 \u251c\u2500 security/ \u2502 \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2502 \u2514\u2500 jwt.md \u2502 \u2502 \u2514\u2500 testing.md \u2502 \u251c\u2500 micronaut/ \u2502 \u2514\u2500 quarkus/ \u2514\u2500 tooling/ \u251c\u2500 jdk-tools.md \u2514\u2500 lombok.md \ud83e\udde0 Design Principles \u00b6 1. Clear Separation of Concerns \u00b6 Core Java concepts live in core/ \u2014 language fundamentals. Frameworks (Spring, Micronaut, Quarkus) live under frameworks/ . Each gets its own namespace. Build tools (Maven, Gradle) belong to build/ , since they\u2019re language-tied. Testing tools (JUnit, Mockito, Testcontainers) share a top-level folder \u2014 they cross all projects. 2. Scalable and Future-Proof \u00b6 Spring starts as the main resident of frameworks/ . Micronaut and Quarkus get empty placeholders now \u2014 ready for future growth. If Spring grows large, subdivide it ( boot/ , web/ , data/ , security/ , testing/ ). 3. Flexibility for JVM Ecosystem \u00b6 If you later add Kotlin or Scala, they\u2019ll live beside Java under languages/ . Common JVM topics (like Gradle multi-language builds) can move to docs/concepts/build-systems.md for shared knowledge. \ud83d\ude80 Evolution Notes \u00b6 Keep the first version simple \u2014 start with core/ , setup/ , and frameworks/spring/boot/ . As you expand, let structure follow growth , not theory. When duplication or overlap emerges between frameworks, extract those notes into: docs/concepts/frameworks/java-frameworks-comparison.md \ud83d\udca1 Philosophy \u00b6 A good cheatsheet library grows organically , not architecturally. Structure should reveal what you\u2019ve learned \u2014 not cage what you haven\u2019t yet. Build clarity first; hierarchy will follow naturally.","title":"Java \u2014 Future Blueprint"},{"location":"cheatsheets/languages/java/_meta/blueprint/#java-cheatsheet-blueprint-folder-layout-evolution-plan","text":"Purpose: This document defines the long-term structure for organizing Java-related cheatsheets. It starts simple but scales gracefully as new frameworks and tools appear.","title":"\ud83e\udded Java Cheatsheet Blueprint \u2014 Folder Layout &amp; Evolution Plan"},{"location":"cheatsheets/languages/java/_meta/blueprint/#planned-folder-layout","text":"docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 languages/ \u2514\u2500 java/ \u251c\u2500 index.md \u251c\u2500 setup/ \u2502 \u251c\u2500 jdk-install.md # SDKMAN!, PATH, versions \u2502 \u2514\u2500 project-structure.md # src/main/java, resources, etc. \u251c\u2500 core/ \u2502 \u251c\u2500 syntax.md \u2502 \u251c\u2500 collections.md \u2502 \u251c\u2500 streams.md \u2502 \u251c\u2500 concurrency.md \u2502 \u251c\u2500 records.md \u2502 \u2514\u2500 io-nio.md \u251c\u2500 build/ \u2502 \u251c\u2500 maven/ \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u251c\u2500 dependencies.md \u2502 \u2502 \u251c\u2500 plugins.md \u2502 \u2502 \u2514\u2500 profiles.md \u2502 \u2514\u2500 gradle/ \u2502 \u251c\u2500 basics.md \u2502 \u251c\u2500 dependencies.md \u2502 \u251c\u2500 tasks.md \u2502 \u2514\u2500 multi-project.md \u251c\u2500 testing/ \u2502 \u251c\u2500 junit5.md \u2502 \u251c\u2500 mockito.md \u2502 \u2514\u2500 testcontainers.md \u251c\u2500 frameworks/ \u2502 \u251c\u2500 spring/ \u2502 \u2502 \u251c\u2500 boot/ \u2502 \u2502 \u2502 \u251c\u2500 starters.md \u2502 \u2502 \u2502 \u251c\u2500 config.md \u2502 \u2502 \u2502 \u2514\u2500 actuator.md \u2502 \u2502 \u251c\u2500 web/ \u2502 \u2502 \u2502 \u251c\u2500 rest-controller.md \u2502 \u2502 \u2502 \u2514\u2500 validation.md \u2502 \u2502 \u251c\u2500 data/ \u2502 \u2502 \u2502 \u251c\u2500 jpa.md \u2502 \u2502 \u2502 \u2514\u2500 transactions.md \u2502 \u2502 \u251c\u2500 security/ \u2502 \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2502 \u2514\u2500 jwt.md \u2502 \u2502 \u2514\u2500 testing.md \u2502 \u251c\u2500 micronaut/ \u2502 \u2514\u2500 quarkus/ \u2514\u2500 tooling/ \u251c\u2500 jdk-tools.md \u2514\u2500 lombok.md","title":"\ud83d\udcc1 Planned Folder Layout"},{"location":"cheatsheets/languages/java/_meta/blueprint/#design-principles","text":"","title":"\ud83e\udde0 Design Principles"},{"location":"cheatsheets/languages/java/_meta/blueprint/#1-clear-separation-of-concerns","text":"Core Java concepts live in core/ \u2014 language fundamentals. Frameworks (Spring, Micronaut, Quarkus) live under frameworks/ . Each gets its own namespace. Build tools (Maven, Gradle) belong to build/ , since they\u2019re language-tied. Testing tools (JUnit, Mockito, Testcontainers) share a top-level folder \u2014 they cross all projects.","title":"1. Clear Separation of Concerns"},{"location":"cheatsheets/languages/java/_meta/blueprint/#2-scalable-and-future-proof","text":"Spring starts as the main resident of frameworks/ . Micronaut and Quarkus get empty placeholders now \u2014 ready for future growth. If Spring grows large, subdivide it ( boot/ , web/ , data/ , security/ , testing/ ).","title":"2. Scalable and Future-Proof"},{"location":"cheatsheets/languages/java/_meta/blueprint/#3-flexibility-for-jvm-ecosystem","text":"If you later add Kotlin or Scala, they\u2019ll live beside Java under languages/ . Common JVM topics (like Gradle multi-language builds) can move to docs/concepts/build-systems.md for shared knowledge.","title":"3. Flexibility for JVM Ecosystem"},{"location":"cheatsheets/languages/java/_meta/blueprint/#evolution-notes","text":"Keep the first version simple \u2014 start with core/ , setup/ , and frameworks/spring/boot/ . As you expand, let structure follow growth , not theory. When duplication or overlap emerges between frameworks, extract those notes into: docs/concepts/frameworks/java-frameworks-comparison.md","title":"\ud83d\ude80 Evolution Notes"},{"location":"cheatsheets/languages/java/_meta/blueprint/#philosophy","text":"A good cheatsheet library grows organically , not architecturally. Structure should reveal what you\u2019ve learned \u2014 not cage what you haven\u2019t yet. Build clarity first; hierarchy will follow naturally.","title":"\ud83d\udca1 Philosophy"},{"location":"cheatsheets/languages/java/classes/Class/","text":"\ud83e\udde9 Class<?> \u2014 The Meta-Class Cheatsheet \u00b6 Essence: Every Java type (class, interface, enum, record, array, primitive) has one single Class object in the JVM \u2014 a runtime handle to its metadata. This is how frameworks discover , introspect , and instantiate things dynamically. 1. The Big Picture: Type \u2192 Bytecode \u2192 Class<?> \u2192 Object \u00b6 source (.java) \u2193 compiler bytecode (.class) \u2193 classloader Class<?> object in Metaspace \u2193 reflection runtime instances on Heap Class<?> lives in Metaspace , managed by a ClassLoader . Object lives on the Heap. Each loaded .class file gets exactly one Class object. Class<?> is like a mirror that describes structure and behavior. 2. Getting a Class<?> Reference \u00b6 Expression Description User.class Compile-time literal reference. Fast, safe, no reflection. obj.getClass() Runtime instance \u2192 class object of its type. Class.forName(\"com.example.User\") Dynamically load by fully qualified name (string). Throws ClassNotFoundException . ClassLoader.loadClass(\"...\") Lower-level control (no static init triggered). int.class , void.class , String[].class Works for primitives and arrays too. Example: Class <?> clazz = Class . forName ( \"com.example.model.User\" ); System . out . println ( clazz . getName ()); // com.example.model.User System . out . println ( clazz . getPackageName ()); // com.example.model 3. Why <?> ? \u00b6 Class is generic since Java 5: Class<T> . It tells the compiler what type this Class object represents. Examples: Class < String > stringClass = String . class ; Class <? extends Number > numClass = Integer . class ; // The wildcard form: Class<?> means \"Class of some type, unknown at compile-time\". void printClassInfo ( Class <?> c ) { System . out . println ( \"Name: \" + c . getName ()); } So: Use Class<T> when you know the type (compile-time safety). Use Class<?> when you don\u2019t know or don\u2019t care which type (runtime flexibility). 4. What You Can Do with It \u00b6 a) Inspect Structure \u00b6 Class <?> c = User . class ; System . out . println ( c . getSimpleName ()); // User System . out . println ( c . getSuperclass ()); // class java.lang.Object for ( var f : c . getDeclaredFields ()) System . out . println ( f . getName ()); for ( var m : c . getDeclaredMethods ()) System . out . println ( m . getName ()); You can fetch: getFields() \u2192 only public fields (inherited too) getDeclaredFields() \u2192 all fields in that class Same for methods, constructors, annotations b) Create Instances \u00b6 Class <?> c = Class . forName ( \"com.example.User\" ); Object instance = c . getConstructor ( String . class , String . class ) . newInstance ( \"42\" , \"Alice\" ); Equivalent to new User(\"42\", \"Alice\") , but at runtime. Used heavily by Spring , Jackson , JPA , etc. c) Access Fields \u00b6 Field f = c . getDeclaredField ( \"name\" ); f . setAccessible ( true ); // bypass private Object value = f . get ( instance ); System . out . println ( \"Name: \" + value ); d) Call Methods \u00b6 Method m = c . getDeclaredMethod ( \"setName\" , String . class ); m . setAccessible ( true ); m . invoke ( instance , \"Bob\" ); e) Annotations \u00b6 Annotation [] anns = c . getAnnotations (); for ( var a : anns ) System . out . println ( a . annotationType (). getSimpleName ()); Frameworks like Spring use this to detect @Component , @Controller , etc. 5. Class Object Internals \u00b6 Property Example / Meaning getName() \"com.example.User\" getSimpleName() \"User\" getTypeName() \"com.example.User\" isInterface() false isEnum() false isRecord() false (Java 16+) isArray() false isAnnotation() false getPackage() Package com.example getModifiers() use Modifier.toString() to decode flags getClassLoader() reveals which loader brought it in (Bootstrap, App, custom) 6. Arrays and Primitives \u00b6 Every primitive and array also has a Class<?> : System . out . println ( int . class ); // int System . out . println ( int [] . class ); // class [I System . out . println ( String [][] . class ); // class [[Ljava.lang.String; You can inspect component type: Class <?> arr = String [] . class ; System . out . println ( arr . getComponentType ()); // class java.lang.String 7. The ClassLoader Connection \u00b6 Each Class<?> is bound to one ClassLoader . If two different classloaders load the same .class bytes \u2014 they are different types to the JVM. ClassLoader loader = c . getClassLoader (); System . out . println ( loader . getName ()); This isolation is how Servlet containers , Spring Boot , or plugins keep separate worlds of classes. 8. Generics & Class<T> \u00b6 You can use type-safe factories: public static < T > T create ( Class < T > type ) throws ReflectiveOperationException { return type . getDeclaredConstructor (). newInstance (); } User u = create ( User . class ); // returns real User Here type carries the exact class into runtime \u2014 no need to cast. 9. Class Literals Everywhere \u00b6 Switch key for reflection-based APIs: mapper . readValue ( json , User . class ); Frameworks use the .class literal to: Parse generically typed data ( T ). Construct instances using reflection. Store type info for dependency injection or serialization. 10. Class<?> vs Object vs ClassLoader \u00b6 Concept Lives in Represents Created by Used for Object Heap instance new data & behavior Class<?> Metaspace type metadata ClassLoader reflection & discovery ClassLoader Heap code source JVM / user code loading .class \u2192 Class<?> Think: Object is a house; Class<?> is the blueprint; ClassLoader is the truck that brought it. 11. When You See It in Frameworks \u00b6 Framework How it uses Class<?> Spring Scans packages for annotations \u2192 builds beans via Class<?> . JPA/Hibernate Maps entity classes by introspection ( @Entity , @Id ). Jackson Needs Class<?> to know what to deserialize JSON into. JUnit Loads test classes reflectively, invokes annotated methods. ServiceLoader Loads service implementations via META-INF \u2192 returns Class<?> handles. In short: Class<?> is the entry point for framework magic . 12. Class<?> and Type Erasure \u00b6 Generics vanish at runtime \u2014 the JVM only knows the raw type. List < String > . class ; // \u274c illegal Class <?> c = List . class ; // \u2705 only raw type available That\u2019s why frameworks sometimes need extra info ( TypeToken , ParameterizedTypeReference ). 13. Class Objects Are Singleton per Loader \u00b6 Class < User > a = User . class ; Class <?> b = Class . forName ( \"com.example.User\" ); System . out . println ( a == b ); // true Equality check works: Class<?> is unique within its ClassLoader . 14. Safe Reflection Practices \u00b6 Prefer .class literal over forName() when possible. Catch specific exceptions: ClassNotFoundException , NoSuchMethodException . Minimize use of setAccessible(true) \u2014 it breaks encapsulation and modules. Cache reflected access for performance (like frameworks do). Use libraries (Jackson, Spring) rather than manual reflection when possible. 15. Bonus: Type , ParameterizedType , and Friends \u00b6 Class<?> is just one implementation of java.lang.reflect.Type . Others include: ParameterizedType \u2192 List<String> GenericArrayType \u2192 T[] WildcardType \u2192 ? extends Number Used in generic introspection , e.g. Spring\u2019s ResolvableType or Gson\u2019s TypeToken . 16. Debug Trick \u00b6 Print a class hierarchy at runtime: static void printHierarchy ( Class <?> c ) { while ( c != null ) { System . out . println ( c . getName ()); c = c . getSuperclass (); } } Or list interfaces: System . out . println ( Arrays . toString ( String . class . getInterfaces ())); 17. Quick Reference Summary \u00b6 Task Method Name getName() , getSimpleName() Superclass getSuperclass() Interfaces getInterfaces() Annotations getAnnotations() Fields getDeclaredFields() Methods getDeclaredMethods() Constructors getDeclaredConstructors() New Instance getDeclaredConstructor().newInstance() ClassLoader getClassLoader() 18. When to Use Class<?> Explicitly \u00b6 \u2705 When writing generic utilities: public static void debug ( Class <?> c ) { ... } \u2705 When storing heterogeneous type metadata: Map < String , Class <?>> typeMap = Map . of ( \"user\" , User . class , \"order\" , Order . class ); \u2705 When building reflection-based frameworks or serialization systems. 19. Common Pitfalls \u00b6 Confusing User.class (type literal) with user.getClass() (instance\u2019s runtime type). Forgetting checked exceptions around forName() and newInstance() . Using wrong constructor signatures. Expecting generics info from Class (it doesn\u2019t store it \u2014 use Type ). Assuming equality across classloaders ( == may be false if loaded twice). 20. Final Mind Model \u00b6 Source code \u2192 compiled \u2192 loaded User.java \u2193 \u2193 bytecode (.class) \u2192 Class<User> \u2192 used by Spring, JPA, etc. Object user = new User(); // data Class<?> meta = user.getClass(); // blueprint ClassLoader sys = meta.getClassLoader(); // brings it in That triangle \u2014 Object \u2194 Class \u2194 ClassLoader \u2014 is the beating heart of Java\u2019s runtime reflection model. Heck yes\u2014let\u2019s \u201cfull-methodify\u201d Class<?> the same way. Below is a drop-in appendix that turns your class-classobject.md into a complete, Javadoc-level quick-ref . I\u2019m grouping by intent, calling out Java-version quirks, and noting the gotchas frameworks rely on. 21. \ud83d\udd0e Full Method Coverage \u00b6 Goal: cover all the stuff you\u2019ll actually touch plus the rare but important edges that show up in frameworks, modules, enums, records, and arrays. 1) Identity, Names, and Modifiers \u00b6 Method What it returns Notes / Traps getName() JVM binary name Arrays/prim: \"[I\" , \"[Ljava.lang.String;\" getTypeName() Friendly name Often equals canonical for most types; arrays pretty-prints ( int[] ) getCanonicalName() Canonical source-ish name or null null for anonymous/local classes and some arrays getSimpleName() Unqualified name Anonymous \u2192 \"\" ; local adds $1 -style in getName() but not here getPackage() / getPackageName() Package / String getPackageName() is Java 9+ getModifiers() int bitset Use Modifier.toString(...) isInterface() isEnum() isRecord() isAnnotation() booleans isRecord() Java 16+ isPrimitive() isArray() booleans int.class.isPrimitive() \u2192 true getComponentType() Class<?> or null Arrays only Name formats cheat: Primitive: int.class.getName() \u2192 \"int\" 1D array of int: \"[I\" ; of String: \"[Ljava.lang.String;\" 2) Hierarchy & Relationships \u00b6 Method Use getSuperclass() null for Object , interfaces, primitives, and void getInterfaces() Direct interfaces only getGenericSuperclass() / getGenericInterfaces() Keep generic info (use with ParameterizedType ) asSubclass(Class<U>) Safe downcast for Class objects (throws ClassCastException on mismatch) cast(Object) Runtime cast using this class as the type token isAssignableFrom(Class<?>) Classic \u201cis-a\u201d test for types 3) Members: Fields, Methods, Ctors (Declared vs Public) \u00b6 Family Public (incl. inherited) Declared (this class only) Fields getFields() getDeclaredFields() Methods getMethods() getDeclaredMethods() Constructors getConstructors() getDeclaredConstructors() Singles getField(String) / getMethod(String, \u2026) / getConstructor(\u2026 ) getDeclaredField(String) / getDeclaredMethod(String, \u2026) / getDeclaredConstructor(\u2026 ) Why it matters: frameworks overwhelmingly use the declared variants, then set accessibility on AccessibleObject . 4) Construction & Instantiation \u00b6 Method Status Use getDeclaredConstructor(\u2026\u200b).newInstance(args\u2026) \u2705 Preferred since Java 9 (throws specific checked exceptions) newInstance() \u274c Deprecated Avoid: no args only, poor exception signaling Tip: favor getDeclaredConstructor().newInstance() and cache the Constructor<?> for speed. 5) Annotations \u00b6 Method Scope Repeats? getAnnotations() Public + inherited (class\u2010level) Yes getDeclaredAnnotations() Declared on this class only Yes getAnnotation(Class<A>) Single lookup (honors @Inherited ) \u2014 getDeclaredAnnotation(Class<A>) Single lookup (no inheritance) \u2014 getAnnotationsByType(Class<A>) Repeating annotations merged Yes getDeclaredAnnotationsByType(Class<A>) Repeating on this class only Yes Remember: @Inherited works only on class annotations and only via getAnnotation* . 6) Enclosing/Nesting (Local, Anonymous, Member classes) \u00b6 Method Purpose isMemberClass() Nested static /inner declared in another class isLocalClass() / isAnonymousClass() Inside a method / anonymous new Interface(){} getEnclosingClass() The class lexically enclosing this one getEnclosingMethod() / getEnclosingConstructor() For local/anonymous getDeclaringClass() For member classes (not local/anonymous) These differentiate real API types from compiler tricks\u2014handy for robust classpath scanners. 7) Enums, Records, Sealed \u00b6 Feature Methods Enums getEnumConstants() (may return null ), isEnum() Records (Java 16+) isRecord() , getRecordComponents() (then RecordComponent \u2192 name, type, accessor) Sealed (Java 17+) isSealed() , getPermittedSubclasses() Frameworks (Jackson, Spring) often use record components to bind constructor params. 8) Modules & ClassLoader \u00b6 Method What getModule() java.lang.Module of this class getClassLoader() May be null for bootstrap-loaded types desiredAssertionStatus() Oldschool; rarely used getClassLoader()==null \u2192 Bootstrap (e.g., String.class ). 9) Reflection + Types Ecosystem \u00b6 Class<?> implements Type . Related reflective types: TypeVariable , ParameterizedType , WildcardType , GenericArrayType Use when you need generic info (e.g., List<String> field). Helpers frequently paired with Class<?> : java.lang.reflect.Array.newInstance(componentType, length) for arrays Array.get/Array.set for reflective array ops 10) Loading & Initialization Semantics \u00b6 API Behavior Class.forName(String) Loads and initializes the class using the caller\u2019s loader (JLS rules) Class.forName(String, boolean initialize, ClassLoader loader) Fine-grained control: choose loader and whether to trigger <clinit> ClassLoader.loadClass(name) Loads but does not initialize; initialization occurs on first active use Rule of thumb: If you don\u2019t want static initializers yet, use the 3-arg forName(..., false, loader) or the loader\u2019s loadClass(...) . 11) Packages & Sealing (legacy but still around) \u00b6 Method Notes getPackage() / getPackageName() Package metadata/name Package \u201csealing\u201d Managed via Package / Manifest ; rare today, but some old libs still check it 12) Equality, Identity, and Class Objects \u00b6 Singleton per loader: For a given loader, there is exactly one Class<?> for a type. a == b works as identity test for the same type in the same loader. Same bytes loaded by different loaders \u2192 different types (will bite you with ClassCastException: X cannot be cast to X ). 13) Performance Notes (pragmatic) \u00b6 Cache reflective lookups ( Field , Method , Constructor )\u2014frameworks do. Avoid repeated setAccessible(true) calls; batch and cache. If crossing module boundaries, consider opens / --add-opens or MethodHandles for faster, legal access. 14) Mini \u201cWhen To Use What\u201d Map \u00b6 Compile-time known type : carry Class<T> and use generics ( T create(Class<T> t) ). Heterogeneous registry : Map<String, Class<?>> keyed by name/alias. Framework glue : prefer getDeclared*() + accessibility controls. Generic shapes : leave Class<?> and jump to Type / ParameterizedType when you need List<Foo> fidelity. 15) Quick-Ref Table \u00b6 Task Snippet Get friendly name c.getSimpleName() / c.getTypeName() Super + interfaces c.getSuperclass() , c.getInterfaces() Public vs declared methods c.getMethods() vs c.getDeclaredMethods() New instance (safe) c.getDeclaredConstructor().newInstance() Specific ctor c.getDeclaredConstructor(Arg1.class, Arg2.class) Field/method by name c.getDeclaredField(\"x\") , c.getDeclaredMethod(\"m\", P.class) Annotation lookup c.getAnnotation(Foo.class) / getDeclaredAnnotationsByType(Foo.class) Array component c.getComponentType() Cast a value T v = k.cast(obj); Downcast Class Class<? extends U> cu = c.asSubclass(U.class) Module / loader c.getModule() , c.getClassLoader() Enum constants c.getEnumConstants() 16) Canonical Pitfalls (and the fix) \u00b6 Expecting generics from Class \u2192 doesn\u2019t exist; use Field.getGenericType() or Method.getGenericReturnType() . Using newInstance() \u2192 stop; use constructors. Class not initialized when you thought \u2192 check forName(..., init, loader) vs loadClass(...) . Comparing types across loaders \u2192 your == may be false; compare names + packages + loader identity .","title":"Class<?>"},{"location":"cheatsheets/languages/java/classes/Class/#class-the-meta-class-cheatsheet","text":"Essence: Every Java type (class, interface, enum, record, array, primitive) has one single Class object in the JVM \u2014 a runtime handle to its metadata. This is how frameworks discover , introspect , and instantiate things dynamically.","title":"\ud83e\udde9 Class&lt;?&gt; \u2014 The Meta-Class Cheatsheet"},{"location":"cheatsheets/languages/java/classes/Class/#1-the-big-picture-type-bytecode-class-object","text":"source (.java) \u2193 compiler bytecode (.class) \u2193 classloader Class<?> object in Metaspace \u2193 reflection runtime instances on Heap Class<?> lives in Metaspace , managed by a ClassLoader . Object lives on the Heap. Each loaded .class file gets exactly one Class object. Class<?> is like a mirror that describes structure and behavior.","title":"1. The Big Picture: Type \u2192 Bytecode \u2192 Class&lt;?&gt; \u2192 Object"},{"location":"cheatsheets/languages/java/classes/Class/#2-getting-a-class-reference","text":"Expression Description User.class Compile-time literal reference. Fast, safe, no reflection. obj.getClass() Runtime instance \u2192 class object of its type. Class.forName(\"com.example.User\") Dynamically load by fully qualified name (string). Throws ClassNotFoundException . ClassLoader.loadClass(\"...\") Lower-level control (no static init triggered). int.class , void.class , String[].class Works for primitives and arrays too. Example: Class <?> clazz = Class . forName ( \"com.example.model.User\" ); System . out . println ( clazz . getName ()); // com.example.model.User System . out . println ( clazz . getPackageName ()); // com.example.model","title":"2. Getting a Class&lt;?&gt; Reference"},{"location":"cheatsheets/languages/java/classes/Class/#3-why","text":"Class is generic since Java 5: Class<T> . It tells the compiler what type this Class object represents. Examples: Class < String > stringClass = String . class ; Class <? extends Number > numClass = Integer . class ; // The wildcard form: Class<?> means \"Class of some type, unknown at compile-time\". void printClassInfo ( Class <?> c ) { System . out . println ( \"Name: \" + c . getName ()); } So: Use Class<T> when you know the type (compile-time safety). Use Class<?> when you don\u2019t know or don\u2019t care which type (runtime flexibility).","title":"3. Why &lt;?&gt;?"},{"location":"cheatsheets/languages/java/classes/Class/#4-what-you-can-do-with-it","text":"","title":"4. What You Can Do with It"},{"location":"cheatsheets/languages/java/classes/Class/#a-inspect-structure","text":"Class <?> c = User . class ; System . out . println ( c . getSimpleName ()); // User System . out . println ( c . getSuperclass ()); // class java.lang.Object for ( var f : c . getDeclaredFields ()) System . out . println ( f . getName ()); for ( var m : c . getDeclaredMethods ()) System . out . println ( m . getName ()); You can fetch: getFields() \u2192 only public fields (inherited too) getDeclaredFields() \u2192 all fields in that class Same for methods, constructors, annotations","title":"a) Inspect Structure"},{"location":"cheatsheets/languages/java/classes/Class/#b-create-instances","text":"Class <?> c = Class . forName ( \"com.example.User\" ); Object instance = c . getConstructor ( String . class , String . class ) . newInstance ( \"42\" , \"Alice\" ); Equivalent to new User(\"42\", \"Alice\") , but at runtime. Used heavily by Spring , Jackson , JPA , etc.","title":"b) Create Instances"},{"location":"cheatsheets/languages/java/classes/Class/#c-access-fields","text":"Field f = c . getDeclaredField ( \"name\" ); f . setAccessible ( true ); // bypass private Object value = f . get ( instance ); System . out . println ( \"Name: \" + value );","title":"c) Access Fields"},{"location":"cheatsheets/languages/java/classes/Class/#d-call-methods","text":"Method m = c . getDeclaredMethod ( \"setName\" , String . class ); m . setAccessible ( true ); m . invoke ( instance , \"Bob\" );","title":"d) Call Methods"},{"location":"cheatsheets/languages/java/classes/Class/#e-annotations","text":"Annotation [] anns = c . getAnnotations (); for ( var a : anns ) System . out . println ( a . annotationType (). getSimpleName ()); Frameworks like Spring use this to detect @Component , @Controller , etc.","title":"e) Annotations"},{"location":"cheatsheets/languages/java/classes/Class/#5-class-object-internals","text":"Property Example / Meaning getName() \"com.example.User\" getSimpleName() \"User\" getTypeName() \"com.example.User\" isInterface() false isEnum() false isRecord() false (Java 16+) isArray() false isAnnotation() false getPackage() Package com.example getModifiers() use Modifier.toString() to decode flags getClassLoader() reveals which loader brought it in (Bootstrap, App, custom)","title":"5. Class Object Internals"},{"location":"cheatsheets/languages/java/classes/Class/#6-arrays-and-primitives","text":"Every primitive and array also has a Class<?> : System . out . println ( int . class ); // int System . out . println ( int [] . class ); // class [I System . out . println ( String [][] . class ); // class [[Ljava.lang.String; You can inspect component type: Class <?> arr = String [] . class ; System . out . println ( arr . getComponentType ()); // class java.lang.String","title":"6. Arrays and Primitives"},{"location":"cheatsheets/languages/java/classes/Class/#7-the-classloader-connection","text":"Each Class<?> is bound to one ClassLoader . If two different classloaders load the same .class bytes \u2014 they are different types to the JVM. ClassLoader loader = c . getClassLoader (); System . out . println ( loader . getName ()); This isolation is how Servlet containers , Spring Boot , or plugins keep separate worlds of classes.","title":"7. The ClassLoader Connection"},{"location":"cheatsheets/languages/java/classes/Class/#8-generics-classt","text":"You can use type-safe factories: public static < T > T create ( Class < T > type ) throws ReflectiveOperationException { return type . getDeclaredConstructor (). newInstance (); } User u = create ( User . class ); // returns real User Here type carries the exact class into runtime \u2014 no need to cast.","title":"8. Generics &amp; Class&lt;T&gt;"},{"location":"cheatsheets/languages/java/classes/Class/#9-class-literals-everywhere","text":"Switch key for reflection-based APIs: mapper . readValue ( json , User . class ); Frameworks use the .class literal to: Parse generically typed data ( T ). Construct instances using reflection. Store type info for dependency injection or serialization.","title":"9. Class Literals Everywhere"},{"location":"cheatsheets/languages/java/classes/Class/#10-class-vs-object-vs-classloader","text":"Concept Lives in Represents Created by Used for Object Heap instance new data & behavior Class<?> Metaspace type metadata ClassLoader reflection & discovery ClassLoader Heap code source JVM / user code loading .class \u2192 Class<?> Think: Object is a house; Class<?> is the blueprint; ClassLoader is the truck that brought it.","title":"10. Class&lt;?&gt; vs Object vs ClassLoader"},{"location":"cheatsheets/languages/java/classes/Class/#11-when-you-see-it-in-frameworks","text":"Framework How it uses Class<?> Spring Scans packages for annotations \u2192 builds beans via Class<?> . JPA/Hibernate Maps entity classes by introspection ( @Entity , @Id ). Jackson Needs Class<?> to know what to deserialize JSON into. JUnit Loads test classes reflectively, invokes annotated methods. ServiceLoader Loads service implementations via META-INF \u2192 returns Class<?> handles. In short: Class<?> is the entry point for framework magic .","title":"11. When You See It in Frameworks"},{"location":"cheatsheets/languages/java/classes/Class/#12-class-and-type-erasure","text":"Generics vanish at runtime \u2014 the JVM only knows the raw type. List < String > . class ; // \u274c illegal Class <?> c = List . class ; // \u2705 only raw type available That\u2019s why frameworks sometimes need extra info ( TypeToken , ParameterizedTypeReference ).","title":"12. Class&lt;?&gt; and Type Erasure"},{"location":"cheatsheets/languages/java/classes/Class/#13-class-objects-are-singleton-per-loader","text":"Class < User > a = User . class ; Class <?> b = Class . forName ( \"com.example.User\" ); System . out . println ( a == b ); // true Equality check works: Class<?> is unique within its ClassLoader .","title":"13. Class Objects Are Singleton per Loader"},{"location":"cheatsheets/languages/java/classes/Class/#14-safe-reflection-practices","text":"Prefer .class literal over forName() when possible. Catch specific exceptions: ClassNotFoundException , NoSuchMethodException . Minimize use of setAccessible(true) \u2014 it breaks encapsulation and modules. Cache reflected access for performance (like frameworks do). Use libraries (Jackson, Spring) rather than manual reflection when possible.","title":"14. Safe Reflection Practices"},{"location":"cheatsheets/languages/java/classes/Class/#15-bonus-type-parameterizedtype-and-friends","text":"Class<?> is just one implementation of java.lang.reflect.Type . Others include: ParameterizedType \u2192 List<String> GenericArrayType \u2192 T[] WildcardType \u2192 ? extends Number Used in generic introspection , e.g. Spring\u2019s ResolvableType or Gson\u2019s TypeToken .","title":"15. Bonus: Type, ParameterizedType, and Friends"},{"location":"cheatsheets/languages/java/classes/Class/#16-debug-trick","text":"Print a class hierarchy at runtime: static void printHierarchy ( Class <?> c ) { while ( c != null ) { System . out . println ( c . getName ()); c = c . getSuperclass (); } } Or list interfaces: System . out . println ( Arrays . toString ( String . class . getInterfaces ()));","title":"16. Debug Trick"},{"location":"cheatsheets/languages/java/classes/Class/#17-quick-reference-summary","text":"Task Method Name getName() , getSimpleName() Superclass getSuperclass() Interfaces getInterfaces() Annotations getAnnotations() Fields getDeclaredFields() Methods getDeclaredMethods() Constructors getDeclaredConstructors() New Instance getDeclaredConstructor().newInstance() ClassLoader getClassLoader()","title":"17. Quick Reference Summary"},{"location":"cheatsheets/languages/java/classes/Class/#18-when-to-use-class-explicitly","text":"\u2705 When writing generic utilities: public static void debug ( Class <?> c ) { ... } \u2705 When storing heterogeneous type metadata: Map < String , Class <?>> typeMap = Map . of ( \"user\" , User . class , \"order\" , Order . class ); \u2705 When building reflection-based frameworks or serialization systems.","title":"18. When to Use Class&lt;?&gt; Explicitly"},{"location":"cheatsheets/languages/java/classes/Class/#19-common-pitfalls","text":"Confusing User.class (type literal) with user.getClass() (instance\u2019s runtime type). Forgetting checked exceptions around forName() and newInstance() . Using wrong constructor signatures. Expecting generics info from Class (it doesn\u2019t store it \u2014 use Type ). Assuming equality across classloaders ( == may be false if loaded twice).","title":"19. Common Pitfalls"},{"location":"cheatsheets/languages/java/classes/Class/#20-final-mind-model","text":"Source code \u2192 compiled \u2192 loaded User.java \u2193 \u2193 bytecode (.class) \u2192 Class<User> \u2192 used by Spring, JPA, etc. Object user = new User(); // data Class<?> meta = user.getClass(); // blueprint ClassLoader sys = meta.getClassLoader(); // brings it in That triangle \u2014 Object \u2194 Class \u2194 ClassLoader \u2014 is the beating heart of Java\u2019s runtime reflection model. Heck yes\u2014let\u2019s \u201cfull-methodify\u201d Class<?> the same way. Below is a drop-in appendix that turns your class-classobject.md into a complete, Javadoc-level quick-ref . I\u2019m grouping by intent, calling out Java-version quirks, and noting the gotchas frameworks rely on.","title":"20. Final Mind Model"},{"location":"cheatsheets/languages/java/classes/Class/#21-full-method-coverage","text":"Goal: cover all the stuff you\u2019ll actually touch plus the rare but important edges that show up in frameworks, modules, enums, records, and arrays.","title":"21. \ud83d\udd0e Full Method Coverage"},{"location":"cheatsheets/languages/java/classes/Class/#1-identity-names-and-modifiers","text":"Method What it returns Notes / Traps getName() JVM binary name Arrays/prim: \"[I\" , \"[Ljava.lang.String;\" getTypeName() Friendly name Often equals canonical for most types; arrays pretty-prints ( int[] ) getCanonicalName() Canonical source-ish name or null null for anonymous/local classes and some arrays getSimpleName() Unqualified name Anonymous \u2192 \"\" ; local adds $1 -style in getName() but not here getPackage() / getPackageName() Package / String getPackageName() is Java 9+ getModifiers() int bitset Use Modifier.toString(...) isInterface() isEnum() isRecord() isAnnotation() booleans isRecord() Java 16+ isPrimitive() isArray() booleans int.class.isPrimitive() \u2192 true getComponentType() Class<?> or null Arrays only Name formats cheat: Primitive: int.class.getName() \u2192 \"int\" 1D array of int: \"[I\" ; of String: \"[Ljava.lang.String;\"","title":"1) Identity, Names, and Modifiers"},{"location":"cheatsheets/languages/java/classes/Class/#2-hierarchy-relationships","text":"Method Use getSuperclass() null for Object , interfaces, primitives, and void getInterfaces() Direct interfaces only getGenericSuperclass() / getGenericInterfaces() Keep generic info (use with ParameterizedType ) asSubclass(Class<U>) Safe downcast for Class objects (throws ClassCastException on mismatch) cast(Object) Runtime cast using this class as the type token isAssignableFrom(Class<?>) Classic \u201cis-a\u201d test for types","title":"2) Hierarchy &amp; Relationships"},{"location":"cheatsheets/languages/java/classes/Class/#3-members-fields-methods-ctors-declared-vs-public","text":"Family Public (incl. inherited) Declared (this class only) Fields getFields() getDeclaredFields() Methods getMethods() getDeclaredMethods() Constructors getConstructors() getDeclaredConstructors() Singles getField(String) / getMethod(String, \u2026) / getConstructor(\u2026 ) getDeclaredField(String) / getDeclaredMethod(String, \u2026) / getDeclaredConstructor(\u2026 ) Why it matters: frameworks overwhelmingly use the declared variants, then set accessibility on AccessibleObject .","title":"3) Members: Fields, Methods, Ctors (Declared vs Public)"},{"location":"cheatsheets/languages/java/classes/Class/#4-construction-instantiation","text":"Method Status Use getDeclaredConstructor(\u2026\u200b).newInstance(args\u2026) \u2705 Preferred since Java 9 (throws specific checked exceptions) newInstance() \u274c Deprecated Avoid: no args only, poor exception signaling Tip: favor getDeclaredConstructor().newInstance() and cache the Constructor<?> for speed.","title":"4) Construction &amp; Instantiation"},{"location":"cheatsheets/languages/java/classes/Class/#5-annotations","text":"Method Scope Repeats? getAnnotations() Public + inherited (class\u2010level) Yes getDeclaredAnnotations() Declared on this class only Yes getAnnotation(Class<A>) Single lookup (honors @Inherited ) \u2014 getDeclaredAnnotation(Class<A>) Single lookup (no inheritance) \u2014 getAnnotationsByType(Class<A>) Repeating annotations merged Yes getDeclaredAnnotationsByType(Class<A>) Repeating on this class only Yes Remember: @Inherited works only on class annotations and only via getAnnotation* .","title":"5) Annotations"},{"location":"cheatsheets/languages/java/classes/Class/#6-enclosingnesting-local-anonymous-member-classes","text":"Method Purpose isMemberClass() Nested static /inner declared in another class isLocalClass() / isAnonymousClass() Inside a method / anonymous new Interface(){} getEnclosingClass() The class lexically enclosing this one getEnclosingMethod() / getEnclosingConstructor() For local/anonymous getDeclaringClass() For member classes (not local/anonymous) These differentiate real API types from compiler tricks\u2014handy for robust classpath scanners.","title":"6) Enclosing/Nesting (Local, Anonymous, Member classes)"},{"location":"cheatsheets/languages/java/classes/Class/#7-enums-records-sealed","text":"Feature Methods Enums getEnumConstants() (may return null ), isEnum() Records (Java 16+) isRecord() , getRecordComponents() (then RecordComponent \u2192 name, type, accessor) Sealed (Java 17+) isSealed() , getPermittedSubclasses() Frameworks (Jackson, Spring) often use record components to bind constructor params.","title":"7) Enums, Records, Sealed"},{"location":"cheatsheets/languages/java/classes/Class/#8-modules-classloader","text":"Method What getModule() java.lang.Module of this class getClassLoader() May be null for bootstrap-loaded types desiredAssertionStatus() Oldschool; rarely used getClassLoader()==null \u2192 Bootstrap (e.g., String.class ).","title":"8) Modules &amp; ClassLoader"},{"location":"cheatsheets/languages/java/classes/Class/#9-reflection-types-ecosystem","text":"Class<?> implements Type . Related reflective types: TypeVariable , ParameterizedType , WildcardType , GenericArrayType Use when you need generic info (e.g., List<String> field). Helpers frequently paired with Class<?> : java.lang.reflect.Array.newInstance(componentType, length) for arrays Array.get/Array.set for reflective array ops","title":"9) Reflection + Types Ecosystem"},{"location":"cheatsheets/languages/java/classes/Class/#10-loading-initialization-semantics","text":"API Behavior Class.forName(String) Loads and initializes the class using the caller\u2019s loader (JLS rules) Class.forName(String, boolean initialize, ClassLoader loader) Fine-grained control: choose loader and whether to trigger <clinit> ClassLoader.loadClass(name) Loads but does not initialize; initialization occurs on first active use Rule of thumb: If you don\u2019t want static initializers yet, use the 3-arg forName(..., false, loader) or the loader\u2019s loadClass(...) .","title":"10) Loading &amp; Initialization Semantics"},{"location":"cheatsheets/languages/java/classes/Class/#11-packages-sealing-legacy-but-still-around","text":"Method Notes getPackage() / getPackageName() Package metadata/name Package \u201csealing\u201d Managed via Package / Manifest ; rare today, but some old libs still check it","title":"11) Packages &amp; Sealing (legacy but still around)"},{"location":"cheatsheets/languages/java/classes/Class/#12-equality-identity-and-class-objects","text":"Singleton per loader: For a given loader, there is exactly one Class<?> for a type. a == b works as identity test for the same type in the same loader. Same bytes loaded by different loaders \u2192 different types (will bite you with ClassCastException: X cannot be cast to X ).","title":"12) Equality, Identity, and Class Objects"},{"location":"cheatsheets/languages/java/classes/Class/#13-performance-notes-pragmatic","text":"Cache reflective lookups ( Field , Method , Constructor )\u2014frameworks do. Avoid repeated setAccessible(true) calls; batch and cache. If crossing module boundaries, consider opens / --add-opens or MethodHandles for faster, legal access.","title":"13) Performance Notes (pragmatic)"},{"location":"cheatsheets/languages/java/classes/Class/#14-mini-when-to-use-what-map","text":"Compile-time known type : carry Class<T> and use generics ( T create(Class<T> t) ). Heterogeneous registry : Map<String, Class<?>> keyed by name/alias. Framework glue : prefer getDeclared*() + accessibility controls. Generic shapes : leave Class<?> and jump to Type / ParameterizedType when you need List<Foo> fidelity.","title":"14) Mini \u201cWhen To Use What\u201d Map"},{"location":"cheatsheets/languages/java/classes/Class/#15-quick-ref-table","text":"Task Snippet Get friendly name c.getSimpleName() / c.getTypeName() Super + interfaces c.getSuperclass() , c.getInterfaces() Public vs declared methods c.getMethods() vs c.getDeclaredMethods() New instance (safe) c.getDeclaredConstructor().newInstance() Specific ctor c.getDeclaredConstructor(Arg1.class, Arg2.class) Field/method by name c.getDeclaredField(\"x\") , c.getDeclaredMethod(\"m\", P.class) Annotation lookup c.getAnnotation(Foo.class) / getDeclaredAnnotationsByType(Foo.class) Array component c.getComponentType() Cast a value T v = k.cast(obj); Downcast Class Class<? extends U> cu = c.asSubclass(U.class) Module / loader c.getModule() , c.getClassLoader() Enum constants c.getEnumConstants()","title":"15) Quick-Ref Table"},{"location":"cheatsheets/languages/java/classes/Class/#16-canonical-pitfalls-and-the-fix","text":"Expecting generics from Class \u2192 doesn\u2019t exist; use Field.getGenericType() or Method.getGenericReturnType() . Using newInstance() \u2192 stop; use constructors. Class not initialized when you thought \u2192 check forName(..., init, loader) vs loadClass(...) . Comparing types across loaders \u2192 your == may be false; compare names + packages + loader identity .","title":"16) Canonical Pitfalls (and the fix)"},{"location":"cheatsheets/languages/java/classes/ClassLoader/","text":"\u2699\ufe0f ClassLoader \u2014 The JVM\u2019s Gatekeeper \u00b6 A ClassLoader is the bridge between the bytecode world ( .class files, JARs, modules) and the runtime world (objects and types). It tells the JVM where to find classes and how to bring them into memory. Every class in Java \u2014 from String to your own \u2014 is loaded by exactly one ClassLoader . 1. The Journey: From Source to Runtime \u00b6 source (.java) \u2193 compiled by javac bytecode (.class) \u2193 loaded by ClassLoader \u2193 defined in Class<?> (Metaspace) \u2193 instantiated into Object (Heap) ClassLoader \u2192 reads raw bytecode. Class<?> \u2192 the runtime representation of that type. Object \u2192 the actual instance living on the heap. 2. The Loading Chain \u2014 Delegation Model \u00b6 Java\u2019s loaders form a hierarchy \u2014 each loader delegates to its parent before loading itself. BootstrapClassLoader \u2191 PlatformClassLoader (JDK APIs) \u2191 AppClassLoader (your code & libs) \u2191 Custom Loaders (plugins, frameworks) This model prevents multiple copies of core classes like java.lang.Object . Only the top-most loader (Bootstrap) defines them once for the entire JVM. 3. The Classpath \u2014 The Loader\u2019s Search Map \u00b6 The classpath is not a directory \u2014 it\u2019s a runtime search list that tells the Application ClassLoader where to find .class and .jar files. When you run a Java program: java -cp \"out/:libs/*\" com.example.Main ```` or equivalently: ``` bash export CLASSPATH = out/:libs/* java com.example.Main the JVM passes that list to the AppClassLoader , which searches those paths in order. How the Classpath Works \u00b6 Linux/macOS \u2192 entries separated by : Windows \u2192 entries separated by ; Each entry can be: a directory (searched recursively by package path) a JAR file a wildcard ( * ) \u2014 includes all JARs in a directory Example: /project/out:/project/lib/*:/opt/javafx/lib/* You can inspect your runtime classpath with: System . out . println ( System . getProperty ( \"java.class.path\" )); Classpath vs Module Path \u00b6 Aspect Classpath (Traditional) Module Path (Java 9+) Used by AppClassLoader Module system (JPMS) Structure Flat list of dirs/JARs Graph of named modules Dependency visibility All-to-all Explicit requires / exports Common usage Spring, legacy apps, tools Modular apps, JLink runtimes Even modular apps still rely on the ClassLoader mechanism under the hood \u2014 modules just add structure on top. Quick Gotchas \u00b6 Wrong or missing classpath \u2192 ClassNotFoundException java -jar ignores -cp unless the JAR\u2019s manifest defines Class-Path IDEs and build tools (Maven, Gradle, IntelliJ) construct the classpath automatically Visual Summary \u00b6 +----------------------+ | Classpath | \u2190 directories & JARs +----------------------+ \u2193 AppClassLoader \u2193 JVM Runtime 4. Built-in ClassLoaders \u00b6 Loader Loads From Access in Code Example Classes Bootstrap Core JDK ( rt.jar / modules) null (native) java.lang.* , java.util.* Platform (Extension) jre/lib/ext (old) or JDK modules ClassLoader.getPlatformClassLoader() java.sql.* , java.xml.* Application (System) CLASSPATH / modulepath ClassLoader.getSystemClassLoader() your app & dependencies Custom Anywhere you define Subclass of ClassLoader plugins, agents, hot-reloaders Example: ClassLoader app = ClassLoader . getSystemClassLoader (); System . out . println ( app ); // AppClassLoader System . out . println ( app . getParent ()); // PlatformClassLoader System . out . println ( app . getParent (). getParent ()); // null (Bootstrap) 5. How Class Loading Works Internally \u00b6 Each class passes through these phases: Loading \u2014 read bytes from .class , JAR, or network. Linking \u2014 Verification : bytecode safety checks. Preparation : allocate static fields. Resolution : replace symbolic refs with direct ones. Initialization \u2014 run static blocks and field initializers. You can intercept loading by overriding findClass(name) . 6. Relationship with Class<?> \u00b6 Every loaded class has an associated Class<?> object that remembers its loader. Class <?> c = User . class ; System . out . println ( c . getClassLoader ()); // AppClassLoader If two identical classes are loaded by different loaders \u2192 they are different types to the JVM: boolean same = classA == classB ; // false if loaded by different ClassLoaders That\u2019s why app servers (Tomcat, Spring Boot) can isolate multiple apps with identical class names. 7. Writing a Custom ClassLoader \u00b6 public class MyLoader extends ClassLoader { @Override protected Class <?> findClass ( String name ) throws ClassNotFoundException { try { byte [] bytes = Files . readAllBytes ( Path . of ( name . replace ( '.' , '/' ) + \".class\" )); return defineClass ( name , bytes , 0 , bytes . length ); } catch ( IOException e ) { throw new ClassNotFoundException ( name , e ); } } } Usage: ClassLoader loader = new MyLoader (); Class <?> c = loader . loadClass ( \"com.example.Hello\" ); Object instance = c . getDeclaredConstructor (). newInstance (); 8. loadClass() vs findClass() \u00b6 Method Role loadClass(name) Handles delegation (calls parent first). findClass(name) Defines how your loader finds the class. If you override findClass() , always call super.loadClass(name, false) first to respect delegation. 9. Why Custom Loaders Exist \u00b6 Purpose Example Hot reloading Spring DevTools, JRebel Plugin isolation Tomcat webapps, OSGi Dynamic bytecode Hibernate proxies, generated classes Security / sandboxing Applets, custom interpreters 10. Metaspace: Where Classes Live \u00b6 Pre-Java 8: PermGen held class metadata. Since Java 8: Metaspace (native memory). Stores each loaded class\u2019s structure, methods, constants. Classes unload only when: No live references remain, and Their loader is garbage collected. Long-lived custom loaders can leak memory if they hold on to objects. 11. Loading From Different Sources \u00b6 You can load classes from anywhere \u2014 filesystem, JARs, or network. URL [] urls = { new URL ( \"file:/path/to/lib.jar\" ) }; URLClassLoader loader = new URLClassLoader ( urls ); Class <?> c = loader . loadClass ( \"com.lib.Tool\" ); Close it when done: loader . close (); // releases JAR handles 12. Debugging & Introspection \u00b6 Check which loader loaded a class: System . out . println ( String . class . getClassLoader ()); // null (Bootstrap) System . out . println ( User . class . getClassLoader ()); // AppClassLoader List all URLs in the system loader: URLClassLoader cl = ( URLClassLoader ) ClassLoader . getSystemClassLoader (); for ( URL url : cl . getURLs ()) System . out . println ( url ); Print the loader hierarchy: static void printHierarchy ( ClassLoader cl ) { while ( cl != null ) { System . out . println ( cl ); cl = cl . getParent (); } } 13. Class Unloading Rules \u00b6 A class can be unloaded only when: Its defining ClassLoader is unreachable. No live instances of that class remain. No reflective references ( Class<?> ) survive. In long-lived servers, leaked loaders = leaked memory . 14. Real-World Hierarchies \u00b6 Spring Boot Fat JAR: AppClassLoader \u21b3 LaunchedURLClassLoader (Spring Boot custom) \u21b3 PluginClassLoader (optional) Tomcat: CommonLoader \u21b3 CatalinaLoader (server classes) \u21b3 WebAppLoader (per webapp) Each webapp runs in isolation \u2014 same class names, different loaders. 15. ClassLoader + Reflection \u00b6 Frameworks often pair loaders with reflection: ClassLoader cl = Thread . currentThread (). getContextClassLoader (); Class <?> clazz = cl . loadClass ( \"com.example.ServiceImpl\" ); Annotation a = clazz . getAnnotation ( Service . class ); The Thread Context ClassLoader lets frameworks load user classes without hardcoding paths. 16. Common Pitfalls \u00b6 Forgetting to close URLClassLoader \u2192 file lock leaks (especially on Windows). Holding references to plugin classes \u2192 prevents GC/unloading. Violating delegation \u2192 LinkageError . Duplicate classes from different loaders \u2192 ClassCastException: X cannot be cast to X . Misusing context loader \u2192 ServiceLoader fails to locate providers. 17. Modern Evolution \u00b6 Java Modules (JPMS) \u2014 adds explicit dependencies; built atop loaders. Instrumentation API \u2014 allows runtime class redefinition. Lookup#defineClass() (Java 15+) \u2014 defines classes without subclassing ClassLoader . 18. The Mental Map \u00b6 [ClassLoader] \u2192 defines \u2192 [Class<?> in Metaspace] \u2191 \u2193 hierarchy used to create \u2191 \u2193 [App/Custom Loaders] [Objects on Heap] Concept Lives In Purpose ClassLoader Heap Loads and defines classes Class<?> Metaspace Metadata for a type Object Heap Runtime instance Classpath JVM property Search map for AppClassLoader Metaspace Native memory Class metadata store 19. Quick Reference \u00b6 Task Code System loader ClassLoader.getSystemClassLoader() Platform loader ClassLoader.getPlatformClassLoader() Loader of a class MyClass.class.getClassLoader() Get parent loader getParent() Define manually defineClass(name, bytes, 0, len) Close URL loader close() Get classpath System.getProperty(\"java.class.path\") 20. Final Mind Model \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ClassLoader\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2510 defines \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2193 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 Class<?> \u2502 (Metaspace) \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 instantiates \u2193 [Objects on Heap] Everything that exists at runtime passes through this chain. The classpath feeds it. The ClassLoader enacts it. The JVM sustains it. 21. \ud83d\udd0e Full Method Coverage \u00b6 Below are the main methods grouped by purpose, including those not yet explicitly mentioned in your version. 1. Core Loading Methods \u00b6 Method Description loadClass(String name) Main entry point. Performs parent-delegation before attempting to find the class. Usually not overridden . findClass(String name) Child loader\u2019s lookup logic. Usually overridden in custom loaders. defineClass(String name, byte[] b, int off, int len) Converts raw bytecode \u2192 Class<?> . Also checks security and defines it in the current loader\u2019s namespace. defineClass(String name, ByteBuffer b, ProtectionDomain pd) Same but accepts a ByteBuffer . resolveClass(Class<?> c) Links the class (resolves symbolic references). Often called after defining. findLoadedClass(String name) Checks whether the class has already been loaded by this loader. Useful to prevent re-definition. 2. Resource Lookup (not classes, but files inside JARs / paths) \u00b6 Method Description getResource(String name) Finds a single resource (delegates to parent first). getResources(String name) Returns all matches ( Enumeration<URL> ). getResourceAsStream(String name) Opens resource as stream. Convenient for configs inside JARs. findResource(String name) Child\u2019s own lookup (skip parent). findResources(String name) Same idea, but for multiple results. getResourceAsStream(String name) Handy wrapper combining both. Note: These work for .properties , .xml , images, or anything packaged in classpath/JARs \u2014 not .class files specifically. 3. Classpath / URL Access (via subclasses) \u00b6 Method Description getURLs() (only in URLClassLoader ) \u2014 lists all JARs and directories this loader reads from. addURL(URL url) (protected in URLClassLoader ) \u2014 dynamically extend classpath. close() (since Java 7) \u2014 release open JAR handles (critical on Windows). 4. Context & Hierarchy Methods \u00b6 Method Description getParent() Returns parent loader in the delegation chain. getName() Human-readable name of this loader (Java 9+). getDefinedPackage(String name) Returns metadata for a single package defined by this loader. getDefinedPackages() Returns all packages defined by this loader. setDefaultAssertionStatus(boolean enabled) Controls assertion checking. setPackageAssertionStatus(String pkg, boolean enabled) Per-package assertions. setClassAssertionStatus(String className, boolean enabled) Per-class assertions. clearAssertionStatus() Resets all assertion settings. These assertion methods were added when Java introduced assert \u2014 rarely used today, but still valid. 5. Security & ProtectionDomain \u00b6 Method Description getDefinedPackage(String name) Returns info about the package and its signing/sealing metadata. definePackage(...) Defines a package with attributes (version, vendor, sealBase). getPackage(String name) Legacy method (pre-Java 9). Returns info if the package was already defined. getPackages() Legacy variant returning all loaded packages. getSystemResource(String name) / getSystemResourceAsStream(String name) Static utility methods using the system classloader . 6. Thread Context Loader Utilities \u00b6 Method Description Thread.currentThread().getContextClassLoader() Retrieves the loader used for reflection, frameworks, and service loading. Thread.currentThread().setContextClassLoader(loader) Temporarily changes loader for current thread. Used heavily by Spring, Hibernate, and ServiceLoader . Not part of ClassLoader class itself, but conceptually essential. 7. Internal / Advanced (less common but still relevant) \u00b6 Method Description defineModule(...) Used by JPMS to define a Module for this loader. findModule(...) Looks up modules known by this loader. getUnnamedModule() Returns the \u201cdefault\u201d module (non-modular classes). registerAsParallelCapable() Declares that loader can safely load in parallel (multi-threaded). isRegisteredAsParallelCapable() Checks the above flag. 8. Deprecated / Historical \u00b6 Method Notes getSystemClassLoader() Still valid, but sometimes replaced by ModuleLayer.boot().findLoader(...) in modular apps. getSystemResource*() Static variants still used widely. defineClass variants with ProtectionDomain and CodeSource \u2014 older security model, still functional. Meta-Insight \u00b6 ClassLoader is deceptively deep. At first glance it looks like just a \u201cread bytes and define classes\u201d utility, but in modern JVMs it also manages: Module boundaries (post-Java 9) Parallel class loading safety Resource abstraction across JARs and layers Assertion control and package sealing The class is half relic, half skeleton key \u2014 much of the JVM\u2019s modular world still stands on its shoulders.","title":"ClassLoader"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#classloader-the-jvms-gatekeeper","text":"A ClassLoader is the bridge between the bytecode world ( .class files, JARs, modules) and the runtime world (objects and types). It tells the JVM where to find classes and how to bring them into memory. Every class in Java \u2014 from String to your own \u2014 is loaded by exactly one ClassLoader .","title":"\u2699\ufe0f ClassLoader \u2014 The JVM\u2019s Gatekeeper"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#1-the-journey-from-source-to-runtime","text":"source (.java) \u2193 compiled by javac bytecode (.class) \u2193 loaded by ClassLoader \u2193 defined in Class<?> (Metaspace) \u2193 instantiated into Object (Heap) ClassLoader \u2192 reads raw bytecode. Class<?> \u2192 the runtime representation of that type. Object \u2192 the actual instance living on the heap.","title":"1. The Journey: From Source to Runtime"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#2-the-loading-chain-delegation-model","text":"Java\u2019s loaders form a hierarchy \u2014 each loader delegates to its parent before loading itself. BootstrapClassLoader \u2191 PlatformClassLoader (JDK APIs) \u2191 AppClassLoader (your code & libs) \u2191 Custom Loaders (plugins, frameworks) This model prevents multiple copies of core classes like java.lang.Object . Only the top-most loader (Bootstrap) defines them once for the entire JVM.","title":"2. The Loading Chain \u2014 Delegation Model"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#3-the-classpath-the-loaders-search-map","text":"The classpath is not a directory \u2014 it\u2019s a runtime search list that tells the Application ClassLoader where to find .class and .jar files. When you run a Java program: java -cp \"out/:libs/*\" com.example.Main ```` or equivalently: ``` bash export CLASSPATH = out/:libs/* java com.example.Main the JVM passes that list to the AppClassLoader , which searches those paths in order.","title":"3. The Classpath \u2014 The Loader\u2019s Search Map"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#how-the-classpath-works","text":"Linux/macOS \u2192 entries separated by : Windows \u2192 entries separated by ; Each entry can be: a directory (searched recursively by package path) a JAR file a wildcard ( * ) \u2014 includes all JARs in a directory Example: /project/out:/project/lib/*:/opt/javafx/lib/* You can inspect your runtime classpath with: System . out . println ( System . getProperty ( \"java.class.path\" ));","title":"How the Classpath Works"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#classpath-vs-module-path","text":"Aspect Classpath (Traditional) Module Path (Java 9+) Used by AppClassLoader Module system (JPMS) Structure Flat list of dirs/JARs Graph of named modules Dependency visibility All-to-all Explicit requires / exports Common usage Spring, legacy apps, tools Modular apps, JLink runtimes Even modular apps still rely on the ClassLoader mechanism under the hood \u2014 modules just add structure on top.","title":"Classpath vs Module Path"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#quick-gotchas","text":"Wrong or missing classpath \u2192 ClassNotFoundException java -jar ignores -cp unless the JAR\u2019s manifest defines Class-Path IDEs and build tools (Maven, Gradle, IntelliJ) construct the classpath automatically","title":"Quick Gotchas"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#visual-summary","text":"+----------------------+ | Classpath | \u2190 directories & JARs +----------------------+ \u2193 AppClassLoader \u2193 JVM Runtime","title":"Visual Summary"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#4-built-in-classloaders","text":"Loader Loads From Access in Code Example Classes Bootstrap Core JDK ( rt.jar / modules) null (native) java.lang.* , java.util.* Platform (Extension) jre/lib/ext (old) or JDK modules ClassLoader.getPlatformClassLoader() java.sql.* , java.xml.* Application (System) CLASSPATH / modulepath ClassLoader.getSystemClassLoader() your app & dependencies Custom Anywhere you define Subclass of ClassLoader plugins, agents, hot-reloaders Example: ClassLoader app = ClassLoader . getSystemClassLoader (); System . out . println ( app ); // AppClassLoader System . out . println ( app . getParent ()); // PlatformClassLoader System . out . println ( app . getParent (). getParent ()); // null (Bootstrap)","title":"4. Built-in ClassLoaders"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#5-how-class-loading-works-internally","text":"Each class passes through these phases: Loading \u2014 read bytes from .class , JAR, or network. Linking \u2014 Verification : bytecode safety checks. Preparation : allocate static fields. Resolution : replace symbolic refs with direct ones. Initialization \u2014 run static blocks and field initializers. You can intercept loading by overriding findClass(name) .","title":"5. How Class Loading Works Internally"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#6-relationship-with-class","text":"Every loaded class has an associated Class<?> object that remembers its loader. Class <?> c = User . class ; System . out . println ( c . getClassLoader ()); // AppClassLoader If two identical classes are loaded by different loaders \u2192 they are different types to the JVM: boolean same = classA == classB ; // false if loaded by different ClassLoaders That\u2019s why app servers (Tomcat, Spring Boot) can isolate multiple apps with identical class names.","title":"6. Relationship with Class&lt;?&gt;"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#7-writing-a-custom-classloader","text":"public class MyLoader extends ClassLoader { @Override protected Class <?> findClass ( String name ) throws ClassNotFoundException { try { byte [] bytes = Files . readAllBytes ( Path . of ( name . replace ( '.' , '/' ) + \".class\" )); return defineClass ( name , bytes , 0 , bytes . length ); } catch ( IOException e ) { throw new ClassNotFoundException ( name , e ); } } } Usage: ClassLoader loader = new MyLoader (); Class <?> c = loader . loadClass ( \"com.example.Hello\" ); Object instance = c . getDeclaredConstructor (). newInstance ();","title":"7. Writing a Custom ClassLoader"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#8-loadclass-vs-findclass","text":"Method Role loadClass(name) Handles delegation (calls parent first). findClass(name) Defines how your loader finds the class. If you override findClass() , always call super.loadClass(name, false) first to respect delegation.","title":"8. loadClass() vs findClass()"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#9-why-custom-loaders-exist","text":"Purpose Example Hot reloading Spring DevTools, JRebel Plugin isolation Tomcat webapps, OSGi Dynamic bytecode Hibernate proxies, generated classes Security / sandboxing Applets, custom interpreters","title":"9. Why Custom Loaders Exist"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#10-metaspace-where-classes-live","text":"Pre-Java 8: PermGen held class metadata. Since Java 8: Metaspace (native memory). Stores each loaded class\u2019s structure, methods, constants. Classes unload only when: No live references remain, and Their loader is garbage collected. Long-lived custom loaders can leak memory if they hold on to objects.","title":"10. Metaspace: Where Classes Live"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#11-loading-from-different-sources","text":"You can load classes from anywhere \u2014 filesystem, JARs, or network. URL [] urls = { new URL ( \"file:/path/to/lib.jar\" ) }; URLClassLoader loader = new URLClassLoader ( urls ); Class <?> c = loader . loadClass ( \"com.lib.Tool\" ); Close it when done: loader . close (); // releases JAR handles","title":"11. Loading From Different Sources"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#12-debugging-introspection","text":"Check which loader loaded a class: System . out . println ( String . class . getClassLoader ()); // null (Bootstrap) System . out . println ( User . class . getClassLoader ()); // AppClassLoader List all URLs in the system loader: URLClassLoader cl = ( URLClassLoader ) ClassLoader . getSystemClassLoader (); for ( URL url : cl . getURLs ()) System . out . println ( url ); Print the loader hierarchy: static void printHierarchy ( ClassLoader cl ) { while ( cl != null ) { System . out . println ( cl ); cl = cl . getParent (); } }","title":"12. Debugging &amp; Introspection"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#13-class-unloading-rules","text":"A class can be unloaded only when: Its defining ClassLoader is unreachable. No live instances of that class remain. No reflective references ( Class<?> ) survive. In long-lived servers, leaked loaders = leaked memory .","title":"13. Class Unloading Rules"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#14-real-world-hierarchies","text":"Spring Boot Fat JAR: AppClassLoader \u21b3 LaunchedURLClassLoader (Spring Boot custom) \u21b3 PluginClassLoader (optional) Tomcat: CommonLoader \u21b3 CatalinaLoader (server classes) \u21b3 WebAppLoader (per webapp) Each webapp runs in isolation \u2014 same class names, different loaders.","title":"14. Real-World Hierarchies"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#15-classloader-reflection","text":"Frameworks often pair loaders with reflection: ClassLoader cl = Thread . currentThread (). getContextClassLoader (); Class <?> clazz = cl . loadClass ( \"com.example.ServiceImpl\" ); Annotation a = clazz . getAnnotation ( Service . class ); The Thread Context ClassLoader lets frameworks load user classes without hardcoding paths.","title":"15. ClassLoader + Reflection"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#16-common-pitfalls","text":"Forgetting to close URLClassLoader \u2192 file lock leaks (especially on Windows). Holding references to plugin classes \u2192 prevents GC/unloading. Violating delegation \u2192 LinkageError . Duplicate classes from different loaders \u2192 ClassCastException: X cannot be cast to X . Misusing context loader \u2192 ServiceLoader fails to locate providers.","title":"16. Common Pitfalls"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#17-modern-evolution","text":"Java Modules (JPMS) \u2014 adds explicit dependencies; built atop loaders. Instrumentation API \u2014 allows runtime class redefinition. Lookup#defineClass() (Java 15+) \u2014 defines classes without subclassing ClassLoader .","title":"17. Modern Evolution"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#18-the-mental-map","text":"[ClassLoader] \u2192 defines \u2192 [Class<?> in Metaspace] \u2191 \u2193 hierarchy used to create \u2191 \u2193 [App/Custom Loaders] [Objects on Heap] Concept Lives In Purpose ClassLoader Heap Loads and defines classes Class<?> Metaspace Metadata for a type Object Heap Runtime instance Classpath JVM property Search map for AppClassLoader Metaspace Native memory Class metadata store","title":"18. The Mental Map"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#19-quick-reference","text":"Task Code System loader ClassLoader.getSystemClassLoader() Platform loader ClassLoader.getPlatformClassLoader() Loader of a class MyClass.class.getClassLoader() Get parent loader getParent() Define manually defineClass(name, bytes, 0, len) Close URL loader close() Get classpath System.getProperty(\"java.class.path\")","title":"19. Quick Reference"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#20-final-mind-model","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ClassLoader\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2510 defines \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2193 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 Class<?> \u2502 (Metaspace) \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 instantiates \u2193 [Objects on Heap] Everything that exists at runtime passes through this chain. The classpath feeds it. The ClassLoader enacts it. The JVM sustains it.","title":"20. Final Mind Model"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#21-full-method-coverage","text":"Below are the main methods grouped by purpose, including those not yet explicitly mentioned in your version.","title":"21. \ud83d\udd0e Full Method Coverage"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#1-core-loading-methods","text":"Method Description loadClass(String name) Main entry point. Performs parent-delegation before attempting to find the class. Usually not overridden . findClass(String name) Child loader\u2019s lookup logic. Usually overridden in custom loaders. defineClass(String name, byte[] b, int off, int len) Converts raw bytecode \u2192 Class<?> . Also checks security and defines it in the current loader\u2019s namespace. defineClass(String name, ByteBuffer b, ProtectionDomain pd) Same but accepts a ByteBuffer . resolveClass(Class<?> c) Links the class (resolves symbolic references). Often called after defining. findLoadedClass(String name) Checks whether the class has already been loaded by this loader. Useful to prevent re-definition.","title":"1. Core Loading Methods"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#2-resource-lookup-not-classes-but-files-inside-jars-paths","text":"Method Description getResource(String name) Finds a single resource (delegates to parent first). getResources(String name) Returns all matches ( Enumeration<URL> ). getResourceAsStream(String name) Opens resource as stream. Convenient for configs inside JARs. findResource(String name) Child\u2019s own lookup (skip parent). findResources(String name) Same idea, but for multiple results. getResourceAsStream(String name) Handy wrapper combining both. Note: These work for .properties , .xml , images, or anything packaged in classpath/JARs \u2014 not .class files specifically.","title":"2. Resource Lookup (not classes, but files inside JARs / paths)"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#3-classpath-url-access-via-subclasses","text":"Method Description getURLs() (only in URLClassLoader ) \u2014 lists all JARs and directories this loader reads from. addURL(URL url) (protected in URLClassLoader ) \u2014 dynamically extend classpath. close() (since Java 7) \u2014 release open JAR handles (critical on Windows).","title":"3. Classpath / URL Access (via subclasses)"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#4-context-hierarchy-methods","text":"Method Description getParent() Returns parent loader in the delegation chain. getName() Human-readable name of this loader (Java 9+). getDefinedPackage(String name) Returns metadata for a single package defined by this loader. getDefinedPackages() Returns all packages defined by this loader. setDefaultAssertionStatus(boolean enabled) Controls assertion checking. setPackageAssertionStatus(String pkg, boolean enabled) Per-package assertions. setClassAssertionStatus(String className, boolean enabled) Per-class assertions. clearAssertionStatus() Resets all assertion settings. These assertion methods were added when Java introduced assert \u2014 rarely used today, but still valid.","title":"4. Context &amp; Hierarchy Methods"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#5-security-protectiondomain","text":"Method Description getDefinedPackage(String name) Returns info about the package and its signing/sealing metadata. definePackage(...) Defines a package with attributes (version, vendor, sealBase). getPackage(String name) Legacy method (pre-Java 9). Returns info if the package was already defined. getPackages() Legacy variant returning all loaded packages. getSystemResource(String name) / getSystemResourceAsStream(String name) Static utility methods using the system classloader .","title":"5. Security &amp; ProtectionDomain"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#6-thread-context-loader-utilities","text":"Method Description Thread.currentThread().getContextClassLoader() Retrieves the loader used for reflection, frameworks, and service loading. Thread.currentThread().setContextClassLoader(loader) Temporarily changes loader for current thread. Used heavily by Spring, Hibernate, and ServiceLoader . Not part of ClassLoader class itself, but conceptually essential.","title":"6. Thread Context Loader Utilities"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#7-internal-advanced-less-common-but-still-relevant","text":"Method Description defineModule(...) Used by JPMS to define a Module for this loader. findModule(...) Looks up modules known by this loader. getUnnamedModule() Returns the \u201cdefault\u201d module (non-modular classes). registerAsParallelCapable() Declares that loader can safely load in parallel (multi-threaded). isRegisteredAsParallelCapable() Checks the above flag.","title":"7. Internal / Advanced (less common but still relevant)"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#8-deprecated-historical","text":"Method Notes getSystemClassLoader() Still valid, but sometimes replaced by ModuleLayer.boot().findLoader(...) in modular apps. getSystemResource*() Static variants still used widely. defineClass variants with ProtectionDomain and CodeSource \u2014 older security model, still functional.","title":"8. Deprecated / Historical"},{"location":"cheatsheets/languages/java/classes/ClassLoader/#meta-insight","text":"ClassLoader is deceptively deep. At first glance it looks like just a \u201cread bytes and define classes\u201d utility, but in modern JVMs it also manages: Module boundaries (post-Java 9) Parallel class loading safety Resource abstraction across JARs and layers Assertion control and package sealing The class is half relic, half skeleton key \u2014 much of the JVM\u2019s modular world still stands on its shoulders.","title":"Meta-Insight"},{"location":"cheatsheets/languages/java/classes/Stream/","text":"Java Stream API Cheat Sheet \u00b6 What is a Stream? Why it\u2019s useful \u00b6 A Stream is a sequence of elements supporting functional-style operations (map, filter, reduce) on collections, arrays, files, etc. It helps you write concise, readable, parallelizable code without manual loops and temporary lists. Quick glossary \u00b6 Source : Where elements come from (e.g., List , array, file). Intermediate op : Returns a new stream (lazy). Examples: filter , map , sorted . Terminal op : Triggers processing, produces a value/collection/side-effect. Examples: collect , count , forEach . Lazy : Nothing runs until a terminal operation is called. Stateless vs stateful : map is stateless; sorted / distinct are stateful (need to see more than one element). Boxed vs primitive streams : Stream<T> vs IntStream/LongStream/DoubleStream (no boxing, extra math ops). Collector : Strategy to accumulate stream results (e.g., Collectors.toList() ). Short-circuiting : Stops early (e.g., findFirst , anyMatch , limit ). Ordered : Some sources are ordered ( List ); some aren\u2019t ( HashSet ). Creating instances \u00b6 // From collections & arrays List < String > names = List . of ( \"Ana\" , \"Bob\" , \"Anya\" , \"Bo\" ); Stream < String > s1 = names . stream (); Stream < String > s2 = names . parallelStream (); IntStream s3 = Arrays . stream ( new int [] { 1 , 2 , 3 }); // Literals / empty Stream < String > s4 = Stream . of ( \"a\" , \"b\" , \"c\" ); Stream < Object > s5 = Stream . empty (); // Ranges / iterate / generate IntStream s6 = IntStream . range ( 0 , 3 ); // 0,1,2 IntStream s7 = IntStream . rangeClosed ( 1 , 3 ); // 1,2,3 Stream < Integer > s8 = Stream . iterate ( 1 , n -> n + 1 ). limit ( 3 ); // 1,2,3 Stream < Integer > s9 = Stream . iterate ( 1 , n -> n <= 3 , n -> n + 1 ); // Java 9+ bounded Stream < Double > s10 = Stream . generate ( Math :: random ). limit ( 2 ); // Files, regex, builder // (wrap in try-with-resources in real code) try ( Stream < String > lines = java . nio . file . Files . lines ( java . nio . file . Path . of ( \"data.txt\" ))) {} Stream < String > words = java . util . regex . Pattern . compile ( \"\\\\s+\" ). splitAsStream ( \"hi there\" ); Stream < String > built = Stream . < String > builder (). add ( \"x\" ). add ( \"y\" ). build (); Typical output (examples): IntStream.range(0,3).boxed().toList() \u2192 [0, 1, 2] Stream.of(\"a\",\"b\").toList() (J16+) \u2192 [\"a\", \"b\"] Reading state / accessors (terminal) \u00b6 List < Integer > nums = List . of ( 3 , 1 , 4 , 1 , 5 ); long c = nums . stream (). count (); // -> 5 int min = nums . stream (). mapToInt ( i -> i ). min (). orElse ( - 1 ); // -> 1 int max = nums . stream (). mapToInt ( i -> i ). max (). orElse ( - 1 ); // -> 5 double avg = nums . stream (). mapToInt ( i -> i ). average (). orElse ( 0 ); // -> 2.8 Optional < Integer > first = nums . stream (). findFirst (); // -> Optional[3] Checking properties \u00b6 List < String > l = List . of ( \"a\" , \"bb\" , \"ccc\" ); boolean anyLong = l . stream (). anyMatch ( s -> s . length () >= 3 ); // -> true boolean allShort = l . stream (). allMatch ( s -> s . length () <= 3 ); // -> true boolean noneEmpty = l . stream (). noneMatch ( String :: isEmpty ); // -> true boolean isPar = l . parallelStream (). isParallel (); // -> true Transformations (pure ops, no side effects) \u00b6 List < String > raw = List . of ( \" a\" , \"b \" , \" c \" , \"b\" ); List < String > cleaned = raw . stream () . map ( String :: trim ) // [\"a\",\"b\",\"c\",\"b\"] . filter ( s -> ! s . isEmpty ()) // same . distinct () // [\"a\",\"b\",\"c\"] (order preserved) . sorted () // [\"a\",\"b\",\"c\"] . toList (); // J16+ // flatMap List < String > phrases = List . of ( \"a b\" , \"c\" ); List < String > tokens = phrases . stream () . flatMap ( p -> Arrays . stream ( p . split ( \"\\\\s+\" ))) . toList (); // -> [\"a\",\"b\",\"c\"] // limit / skip List < Integer > first2 = IntStream . rangeClosed ( 1 , 5 ). limit ( 2 ). boxed (). toList (); // [1,2] List < Integer > skip2 = IntStream . rangeClosed ( 1 , 5 ). skip ( 2 ). boxed (). toList (); // [3,4,5] // peek (debug only, don\u2019t mutate state!) List < Integer > out = IntStream . range ( 1 , 4 ) . peek ( i -> System . out . println ( \"saw \" + i )) // prints 1,2,3 during terminal op . map ( i -> i * i ) . boxed () . toList (); // -> [1,4,9] Conversions (to other types) \u00b6 // To collections List < String > list1 = Stream . of ( \"a\" , \"b\" ). toList (); // J16+ (unmodifiable) List < String > list2 = Stream . of ( \"a\" , \"b\" ). collect ( Collectors . toList ()); // modifiable (usually) Set < String > set = Stream . of ( \"a\" , \"b\" , \"a\" ). collect ( Collectors . toSet ()); // -> [\"a\",\"b\"] (order undefined) Map < Integer , String > map = Stream . of ( \"a\" , \"bb\" , \"ccc\" ) . collect ( Collectors . toMap ( String :: length , s -> s )); // beware duplicate keys // To array String [] arr = Stream . of ( \"x\" , \"y\" ). toArray ( String [] :: new ); // To primitives / from primitives IntStream ints = Stream . of ( 1 , 2 , 3 ). mapToInt ( Integer :: intValue ); Stream < Integer > boxed = IntStream . range ( 1 , 3 ). boxed (); // Joining & reducing String joined = Stream . of ( \"a\" , \"b\" , \"c\" ). collect ( Collectors . joining ( \",\" )); // -> \"a,b,c\" int sum = IntStream . of ( 1 , 2 , 3 ). sum (); // -> 6 int prod = IntStream . of ( 1 , 2 , 3 ). reduce ( 1 , ( a , b ) -> a * b ); // -> 6 Iteration & comparison \u00b6 // Iterate (with side effects) \u2014 prefer terminal ops for side effects, not intermediate List < String > items = List . of ( \"A\" , \"B\" , \"C\" ); items . stream (). forEach ( System . out :: println ); // prints in encounter order (or use forEachOrdered) items . stream (). forEachOrdered ( System . out :: println ); // stable order even in parallel streams // Compare two sequences (content equality) boolean same = List . of ( 1 , 2 , 3 ). stream (). toList (). equals ( List . of ( 1 , 2 , 3 )); // -> true // Or compare after materializing (common & simple): boolean same2 = Arrays . equals ( List . of ( 1 , 2 , 3 ). stream (). mapToInt ( Integer :: intValue ). toArray (), IntStream . of ( 1 , 2 , 3 ). toArray () ); // -> true Common utilities (helpers you\u2019ll reach for) \u00b6 // Comparators record Person ( String name , int age ) {} List < Person > people = List . of ( new Person ( \"Ana\" , 30 ), new Person ( \"Bob\" , 25 ), new Person ( \"Bo\" , 25 )); List < Person > byAgeThenName = people . stream () . sorted ( Comparator . comparingInt ( Person :: age ). thenComparing ( Person :: name )) . toList (); // -> [(Bob,25),(Bo,25),(Ana,30)] // Grouping / partitioning Map < Integer , List < Person >> byAge = people . stream (). collect ( Collectors . groupingBy ( Person :: age )); // -> {25=[(Bob,25),(Bo,25)], 30=[(Ana,30)]} Map < Boolean , List < Person >> partition = people . stream (). collect ( Collectors . partitioningBy ( p -> p . age () >= 30 )); // -> {true=[(Ana,30)], false=[(Bob,25),(Bo,25)]} // Summarizing IntSummaryStatistics stats = people . stream (). collect ( Collectors . summarizingInt ( Person :: age )); // stats.getCount()=3, getMin()=25, getMax()=30, getAverage()=26.666... Gotchas / anti-patterns / version notes \u00b6 Streams are single-use : Once a terminal op runs, the stream is consumed. Create a new stream if you need to run another terminal op. Side effects in intermediate ops ( map , filter , peek ) are error-prone. Keep them pure . Use peek only for debugging/logging. parallelStream() : Only beneficial for CPU-heavy, stateless, large workloads. Avoid for small lists, IO-bound work, or when order matters. Be careful with thread-unsafe code. Ordering : HashSet.stream() has no deterministic order; operations like sorted() will impose order at a cost. Collectors.toMap duplicate keys throw IllegalStateException . Provide a merge function: var m = Stream . of ( \"a\" , \"bb\" , \"aa\" ) . collect ( Collectors . toMap ( String :: length , s -> s , ( a , b ) -> a )); // keep first * Stream.toList() (Java 16+) returns unmodifiable list; Collectors.toList() usually returns a mutable list (implementation-dependent). * Files.lines(...) holds file resources\u2014use try-with-resources. * Boxing overhead : Prefer IntStream/LongStream/DoubleStream for numeric crunching. * Don\u2019t store streams in fields; build & consume locally. * Java 9+ goodies : Stream.iterate(seed, hasNext, next) , takeWhile , dropWhile (on ordered streams). var firstSmall = IntStream . of ( 1 , 2 , 3 , 2 , 1 ). takeWhile ( i -> i < 3 ). boxed (). toList (); // [1,2] Mini reference table \u00b6 Method What it does Example \u2192 Output filter(p) Keep elements matching predicate List.of(1,2,3).stream().filter(i->i%2==1).toList() \u2192 [1,3] map(f) Transform each element Stream.of(\"a\",\"bb\").map(String::length).toList() \u2192 [1,2] flatMap(f) Flatten nested streams Stream.of(\"a b\",\"c\").flatMap(s->Arrays.stream(s.split(\" \"))).toList() \u2192 [a,b,c] distinct() Remove duplicates (keeps first) Stream.of(1,1,2).distinct().toList() \u2192 [1,2] sorted() Sort using natural order Stream.of(3,1,2).sorted().toList() \u2192 [1,2,3] limit(n) / skip(n) Truncate / skip IntStream.range(1,6).limit(3).boxed().toList() \u2192 [1,2,3] anyMatch/allMatch/noneMatch Check membership conditions Stream.of(\"a\",\"bb\").anyMatch(s->s.length()==2) \u2192 true findFirst/findAny Get an element (Optional) Stream.of(10,20).findFirst() \u2192 Optional[10] reduce(id,acc) Fold elements IntStream.of(1,2,3).reduce(0,Integer::sum) \u2192 6 collect(...) Aggregate via collectors Stream.of(\"a\",\"b\").collect(Collectors.joining(\",\")) \u2192 \"a,b\" mapToInt/boxed Convert between primitive/boxed Stream.of(1,2).mapToInt(i->i).sum() \u2192 3 End-to-end example (typical outputs shown) \u00b6 Task: From a list of people, get the top 2 cities by average age, list residents per city alphabetically, and produce some quick stats. import java.util.* ; import java.util.stream.* ; import static java.util.stream.Collectors.* ; record Person ( String name , String city , int age ) {} public class Demo { public static void main ( String [] args ) { List < Person > people = List . of ( new Person ( \"Ana\" , \"Vilnius\" , 30 ), new Person ( \"Bob\" , \"Kaunas\" , 25 ), new Person ( \"Bo\" , \"Kaunas\" , 27 ), new Person ( \"Anya\" , \"Vilnius\" , 34 ), new Person ( \"Cara\" , \"Klaipeda\" , 22 ) ); // Group by city and compute average age Map < String , Double > avgAgeByCity = people . stream (). collect ( groupingBy ( Person :: city , averagingInt ( Person :: age ))); System . out . println ( \"avgAgeByCity=\" + avgAgeByCity ); // -> avgAgeByCity={Kaunas=26.0, Klaipeda=22.0, Vilnius=32.0} // Top 2 cities by average age (desc) List < String > top2Cities = avgAgeByCity . entrySet (). stream () . sorted ( Map . Entry . < String , Double > comparingByValue ( Comparator . reverseOrder ())) . limit ( 2 ) . map ( Map . Entry :: getKey ) . toList (); System . out . println ( \"top2Cities=\" + top2Cities ); // -> top2Cities=[Vilnius, Kaunas] // Residents per city alphabetically (for only top2) Map < String , List < String >> residents = people . stream () . filter ( p -> top2Cities . contains ( p . city ())) . collect ( groupingBy ( Person :: city , mapping ( Person :: name , collectingAndThen ( toList (), l -> { l . sort ( Comparator . naturalOrder ()); return l ; })))); System . out . println ( \"residents=\" + residents ); // -> residents={Kaunas=[Bo, Bob], Vilnius=[Ana, Anya]} // Quick stats overall IntSummaryStatistics stats = people . stream (). collect ( summarizingInt ( Person :: age )); System . out . println ( \"count=\" + stats . getCount () + \", min=\" + stats . getMin () + \", max=\" + stats . getMax () + \", avg=\" + String . format ( \"%.2f\" , stats . getAverage ())); // -> count=5, min=22, max=34, avg=27.60 } } Bottom line (best practices) \u00b6 Think pipelines : source \u2192 (map/filter/\u2026)* \u2192 terminal . Keep intermediate ops pure ; put side effects in terminal ops ( forEach , I/O). Prefer toList() (J16+) for concise unmodifiable results; use Collectors.toList() when you need a mutable list. Mind order & cost : Put cheap filters early; avoid unnecessary sorted / distinct . Prefer primitive streams for numeric performance. Avoid parallelStream() unless you\u2019ve measured a win and your operations are thread-safe, stateless, and CPU-bound. Handle Optional properly\u2014use orElse , orElseGet , ifPresent , not get() blindly. Don\u2019t over-stream : A plain for loop is fine for very simple, stateful, or performance-critical mutations. \ud83d\udd11 Wildcards in Stream API \u00b6 ? super T \u2192 Consumer \u00b6 Use when the API feeds stream elements into something . forEach(Consumer<? super T>) Stream < Integer > s = Stream . of ( 1 , 2 , 3 ); Consumer < Number > print = n -> System . out . println ( n ); s . forEach ( print ); // OK because Consumer<? super Integer> allMatch(Predicate<? super T>) Stream < String > words = Stream . of ( \"a\" , \"bb\" ); Predicate < Object > notNull = Objects :: nonNull ; // Predicate<Object> is super of String boolean all = words . allMatch ( notNull ); sorted(Comparator<? super T>) Stream < String > s = Stream . of ( \"c\" , \"a\" , \"b\" ); Comparator < Object > cmp = ( o1 , o2 ) -> o1 . toString (). compareTo ( o2 . toString ()); s . sorted ( cmp ). forEach ( System . out :: println ); ? extends R \u2192 Producer \u00b6 Use when the API returns new elements produced from the stream . map(Function<? super T, ? extends R>) Stream < Integer > s = Stream . of ( 1 , 2 , 3 ); Function < Number , String > f = n -> \"Num:\" + n ; Stream < String > out = s . map ( f ); // R is String flatMap(Function<? super T, ? extends Stream<? extends R>>) Stream < String > s = Stream . of ( \"a,b\" , \"c\" ); Stream < String > flat = s . flatMap ( str -> Arrays . stream ( str . split ( \",\" ))); \ud83d\udccc Rule of Thumb (PECS) \u00b6 Producer \u2192 Extends : output side ( map , flatMap ) Consumer \u2192 Super : input side ( forEach , allMatch , sorted ) \ud83d\udc49 That\u2019s really all you need: If the stream gives elements to your function = ? super T . If your function produces new elements = ? extends R .","title":"Stream"},{"location":"cheatsheets/languages/java/classes/Stream/#java-stream-api-cheat-sheet","text":"","title":"Java Stream API Cheat Sheet"},{"location":"cheatsheets/languages/java/classes/Stream/#what-is-a-stream-why-its-useful","text":"A Stream is a sequence of elements supporting functional-style operations (map, filter, reduce) on collections, arrays, files, etc. It helps you write concise, readable, parallelizable code without manual loops and temporary lists.","title":"What is a Stream? Why it\u2019s useful"},{"location":"cheatsheets/languages/java/classes/Stream/#quick-glossary","text":"Source : Where elements come from (e.g., List , array, file). Intermediate op : Returns a new stream (lazy). Examples: filter , map , sorted . Terminal op : Triggers processing, produces a value/collection/side-effect. Examples: collect , count , forEach . Lazy : Nothing runs until a terminal operation is called. Stateless vs stateful : map is stateless; sorted / distinct are stateful (need to see more than one element). Boxed vs primitive streams : Stream<T> vs IntStream/LongStream/DoubleStream (no boxing, extra math ops). Collector : Strategy to accumulate stream results (e.g., Collectors.toList() ). Short-circuiting : Stops early (e.g., findFirst , anyMatch , limit ). Ordered : Some sources are ordered ( List ); some aren\u2019t ( HashSet ).","title":"Quick glossary"},{"location":"cheatsheets/languages/java/classes/Stream/#creating-instances","text":"// From collections & arrays List < String > names = List . of ( \"Ana\" , \"Bob\" , \"Anya\" , \"Bo\" ); Stream < String > s1 = names . stream (); Stream < String > s2 = names . parallelStream (); IntStream s3 = Arrays . stream ( new int [] { 1 , 2 , 3 }); // Literals / empty Stream < String > s4 = Stream . of ( \"a\" , \"b\" , \"c\" ); Stream < Object > s5 = Stream . empty (); // Ranges / iterate / generate IntStream s6 = IntStream . range ( 0 , 3 ); // 0,1,2 IntStream s7 = IntStream . rangeClosed ( 1 , 3 ); // 1,2,3 Stream < Integer > s8 = Stream . iterate ( 1 , n -> n + 1 ). limit ( 3 ); // 1,2,3 Stream < Integer > s9 = Stream . iterate ( 1 , n -> n <= 3 , n -> n + 1 ); // Java 9+ bounded Stream < Double > s10 = Stream . generate ( Math :: random ). limit ( 2 ); // Files, regex, builder // (wrap in try-with-resources in real code) try ( Stream < String > lines = java . nio . file . Files . lines ( java . nio . file . Path . of ( \"data.txt\" ))) {} Stream < String > words = java . util . regex . Pattern . compile ( \"\\\\s+\" ). splitAsStream ( \"hi there\" ); Stream < String > built = Stream . < String > builder (). add ( \"x\" ). add ( \"y\" ). build (); Typical output (examples): IntStream.range(0,3).boxed().toList() \u2192 [0, 1, 2] Stream.of(\"a\",\"b\").toList() (J16+) \u2192 [\"a\", \"b\"]","title":"Creating instances"},{"location":"cheatsheets/languages/java/classes/Stream/#reading-state-accessors-terminal","text":"List < Integer > nums = List . of ( 3 , 1 , 4 , 1 , 5 ); long c = nums . stream (). count (); // -> 5 int min = nums . stream (). mapToInt ( i -> i ). min (). orElse ( - 1 ); // -> 1 int max = nums . stream (). mapToInt ( i -> i ). max (). orElse ( - 1 ); // -> 5 double avg = nums . stream (). mapToInt ( i -> i ). average (). orElse ( 0 ); // -> 2.8 Optional < Integer > first = nums . stream (). findFirst (); // -> Optional[3]","title":"Reading state / accessors (terminal)"},{"location":"cheatsheets/languages/java/classes/Stream/#checking-properties","text":"List < String > l = List . of ( \"a\" , \"bb\" , \"ccc\" ); boolean anyLong = l . stream (). anyMatch ( s -> s . length () >= 3 ); // -> true boolean allShort = l . stream (). allMatch ( s -> s . length () <= 3 ); // -> true boolean noneEmpty = l . stream (). noneMatch ( String :: isEmpty ); // -> true boolean isPar = l . parallelStream (). isParallel (); // -> true","title":"Checking properties"},{"location":"cheatsheets/languages/java/classes/Stream/#transformations-pure-ops-no-side-effects","text":"List < String > raw = List . of ( \" a\" , \"b \" , \" c \" , \"b\" ); List < String > cleaned = raw . stream () . map ( String :: trim ) // [\"a\",\"b\",\"c\",\"b\"] . filter ( s -> ! s . isEmpty ()) // same . distinct () // [\"a\",\"b\",\"c\"] (order preserved) . sorted () // [\"a\",\"b\",\"c\"] . toList (); // J16+ // flatMap List < String > phrases = List . of ( \"a b\" , \"c\" ); List < String > tokens = phrases . stream () . flatMap ( p -> Arrays . stream ( p . split ( \"\\\\s+\" ))) . toList (); // -> [\"a\",\"b\",\"c\"] // limit / skip List < Integer > first2 = IntStream . rangeClosed ( 1 , 5 ). limit ( 2 ). boxed (). toList (); // [1,2] List < Integer > skip2 = IntStream . rangeClosed ( 1 , 5 ). skip ( 2 ). boxed (). toList (); // [3,4,5] // peek (debug only, don\u2019t mutate state!) List < Integer > out = IntStream . range ( 1 , 4 ) . peek ( i -> System . out . println ( \"saw \" + i )) // prints 1,2,3 during terminal op . map ( i -> i * i ) . boxed () . toList (); // -> [1,4,9]","title":"Transformations (pure ops, no side effects)"},{"location":"cheatsheets/languages/java/classes/Stream/#conversions-to-other-types","text":"// To collections List < String > list1 = Stream . of ( \"a\" , \"b\" ). toList (); // J16+ (unmodifiable) List < String > list2 = Stream . of ( \"a\" , \"b\" ). collect ( Collectors . toList ()); // modifiable (usually) Set < String > set = Stream . of ( \"a\" , \"b\" , \"a\" ). collect ( Collectors . toSet ()); // -> [\"a\",\"b\"] (order undefined) Map < Integer , String > map = Stream . of ( \"a\" , \"bb\" , \"ccc\" ) . collect ( Collectors . toMap ( String :: length , s -> s )); // beware duplicate keys // To array String [] arr = Stream . of ( \"x\" , \"y\" ). toArray ( String [] :: new ); // To primitives / from primitives IntStream ints = Stream . of ( 1 , 2 , 3 ). mapToInt ( Integer :: intValue ); Stream < Integer > boxed = IntStream . range ( 1 , 3 ). boxed (); // Joining & reducing String joined = Stream . of ( \"a\" , \"b\" , \"c\" ). collect ( Collectors . joining ( \",\" )); // -> \"a,b,c\" int sum = IntStream . of ( 1 , 2 , 3 ). sum (); // -> 6 int prod = IntStream . of ( 1 , 2 , 3 ). reduce ( 1 , ( a , b ) -> a * b ); // -> 6","title":"Conversions (to other types)"},{"location":"cheatsheets/languages/java/classes/Stream/#iteration-comparison","text":"// Iterate (with side effects) \u2014 prefer terminal ops for side effects, not intermediate List < String > items = List . of ( \"A\" , \"B\" , \"C\" ); items . stream (). forEach ( System . out :: println ); // prints in encounter order (or use forEachOrdered) items . stream (). forEachOrdered ( System . out :: println ); // stable order even in parallel streams // Compare two sequences (content equality) boolean same = List . of ( 1 , 2 , 3 ). stream (). toList (). equals ( List . of ( 1 , 2 , 3 )); // -> true // Or compare after materializing (common & simple): boolean same2 = Arrays . equals ( List . of ( 1 , 2 , 3 ). stream (). mapToInt ( Integer :: intValue ). toArray (), IntStream . of ( 1 , 2 , 3 ). toArray () ); // -> true","title":"Iteration &amp; comparison"},{"location":"cheatsheets/languages/java/classes/Stream/#common-utilities-helpers-youll-reach-for","text":"// Comparators record Person ( String name , int age ) {} List < Person > people = List . of ( new Person ( \"Ana\" , 30 ), new Person ( \"Bob\" , 25 ), new Person ( \"Bo\" , 25 )); List < Person > byAgeThenName = people . stream () . sorted ( Comparator . comparingInt ( Person :: age ). thenComparing ( Person :: name )) . toList (); // -> [(Bob,25),(Bo,25),(Ana,30)] // Grouping / partitioning Map < Integer , List < Person >> byAge = people . stream (). collect ( Collectors . groupingBy ( Person :: age )); // -> {25=[(Bob,25),(Bo,25)], 30=[(Ana,30)]} Map < Boolean , List < Person >> partition = people . stream (). collect ( Collectors . partitioningBy ( p -> p . age () >= 30 )); // -> {true=[(Ana,30)], false=[(Bob,25),(Bo,25)]} // Summarizing IntSummaryStatistics stats = people . stream (). collect ( Collectors . summarizingInt ( Person :: age )); // stats.getCount()=3, getMin()=25, getMax()=30, getAverage()=26.666...","title":"Common utilities (helpers you\u2019ll reach for)"},{"location":"cheatsheets/languages/java/classes/Stream/#gotchas-anti-patterns-version-notes","text":"Streams are single-use : Once a terminal op runs, the stream is consumed. Create a new stream if you need to run another terminal op. Side effects in intermediate ops ( map , filter , peek ) are error-prone. Keep them pure . Use peek only for debugging/logging. parallelStream() : Only beneficial for CPU-heavy, stateless, large workloads. Avoid for small lists, IO-bound work, or when order matters. Be careful with thread-unsafe code. Ordering : HashSet.stream() has no deterministic order; operations like sorted() will impose order at a cost. Collectors.toMap duplicate keys throw IllegalStateException . Provide a merge function: var m = Stream . of ( \"a\" , \"bb\" , \"aa\" ) . collect ( Collectors . toMap ( String :: length , s -> s , ( a , b ) -> a )); // keep first * Stream.toList() (Java 16+) returns unmodifiable list; Collectors.toList() usually returns a mutable list (implementation-dependent). * Files.lines(...) holds file resources\u2014use try-with-resources. * Boxing overhead : Prefer IntStream/LongStream/DoubleStream for numeric crunching. * Don\u2019t store streams in fields; build & consume locally. * Java 9+ goodies : Stream.iterate(seed, hasNext, next) , takeWhile , dropWhile (on ordered streams). var firstSmall = IntStream . of ( 1 , 2 , 3 , 2 , 1 ). takeWhile ( i -> i < 3 ). boxed (). toList (); // [1,2]","title":"Gotchas / anti-patterns / version notes"},{"location":"cheatsheets/languages/java/classes/Stream/#mini-reference-table","text":"Method What it does Example \u2192 Output filter(p) Keep elements matching predicate List.of(1,2,3).stream().filter(i->i%2==1).toList() \u2192 [1,3] map(f) Transform each element Stream.of(\"a\",\"bb\").map(String::length).toList() \u2192 [1,2] flatMap(f) Flatten nested streams Stream.of(\"a b\",\"c\").flatMap(s->Arrays.stream(s.split(\" \"))).toList() \u2192 [a,b,c] distinct() Remove duplicates (keeps first) Stream.of(1,1,2).distinct().toList() \u2192 [1,2] sorted() Sort using natural order Stream.of(3,1,2).sorted().toList() \u2192 [1,2,3] limit(n) / skip(n) Truncate / skip IntStream.range(1,6).limit(3).boxed().toList() \u2192 [1,2,3] anyMatch/allMatch/noneMatch Check membership conditions Stream.of(\"a\",\"bb\").anyMatch(s->s.length()==2) \u2192 true findFirst/findAny Get an element (Optional) Stream.of(10,20).findFirst() \u2192 Optional[10] reduce(id,acc) Fold elements IntStream.of(1,2,3).reduce(0,Integer::sum) \u2192 6 collect(...) Aggregate via collectors Stream.of(\"a\",\"b\").collect(Collectors.joining(\",\")) \u2192 \"a,b\" mapToInt/boxed Convert between primitive/boxed Stream.of(1,2).mapToInt(i->i).sum() \u2192 3","title":"Mini reference table"},{"location":"cheatsheets/languages/java/classes/Stream/#end-to-end-example-typical-outputs-shown","text":"Task: From a list of people, get the top 2 cities by average age, list residents per city alphabetically, and produce some quick stats. import java.util.* ; import java.util.stream.* ; import static java.util.stream.Collectors.* ; record Person ( String name , String city , int age ) {} public class Demo { public static void main ( String [] args ) { List < Person > people = List . of ( new Person ( \"Ana\" , \"Vilnius\" , 30 ), new Person ( \"Bob\" , \"Kaunas\" , 25 ), new Person ( \"Bo\" , \"Kaunas\" , 27 ), new Person ( \"Anya\" , \"Vilnius\" , 34 ), new Person ( \"Cara\" , \"Klaipeda\" , 22 ) ); // Group by city and compute average age Map < String , Double > avgAgeByCity = people . stream (). collect ( groupingBy ( Person :: city , averagingInt ( Person :: age ))); System . out . println ( \"avgAgeByCity=\" + avgAgeByCity ); // -> avgAgeByCity={Kaunas=26.0, Klaipeda=22.0, Vilnius=32.0} // Top 2 cities by average age (desc) List < String > top2Cities = avgAgeByCity . entrySet (). stream () . sorted ( Map . Entry . < String , Double > comparingByValue ( Comparator . reverseOrder ())) . limit ( 2 ) . map ( Map . Entry :: getKey ) . toList (); System . out . println ( \"top2Cities=\" + top2Cities ); // -> top2Cities=[Vilnius, Kaunas] // Residents per city alphabetically (for only top2) Map < String , List < String >> residents = people . stream () . filter ( p -> top2Cities . contains ( p . city ())) . collect ( groupingBy ( Person :: city , mapping ( Person :: name , collectingAndThen ( toList (), l -> { l . sort ( Comparator . naturalOrder ()); return l ; })))); System . out . println ( \"residents=\" + residents ); // -> residents={Kaunas=[Bo, Bob], Vilnius=[Ana, Anya]} // Quick stats overall IntSummaryStatistics stats = people . stream (). collect ( summarizingInt ( Person :: age )); System . out . println ( \"count=\" + stats . getCount () + \", min=\" + stats . getMin () + \", max=\" + stats . getMax () + \", avg=\" + String . format ( \"%.2f\" , stats . getAverage ())); // -> count=5, min=22, max=34, avg=27.60 } }","title":"End-to-end example (typical outputs shown)"},{"location":"cheatsheets/languages/java/classes/Stream/#bottom-line-best-practices","text":"Think pipelines : source \u2192 (map/filter/\u2026)* \u2192 terminal . Keep intermediate ops pure ; put side effects in terminal ops ( forEach , I/O). Prefer toList() (J16+) for concise unmodifiable results; use Collectors.toList() when you need a mutable list. Mind order & cost : Put cheap filters early; avoid unnecessary sorted / distinct . Prefer primitive streams for numeric performance. Avoid parallelStream() unless you\u2019ve measured a win and your operations are thread-safe, stateless, and CPU-bound. Handle Optional properly\u2014use orElse , orElseGet , ifPresent , not get() blindly. Don\u2019t over-stream : A plain for loop is fine for very simple, stateful, or performance-critical mutations.","title":"Bottom line (best practices)"},{"location":"cheatsheets/languages/java/classes/Stream/#wildcards-in-stream-api","text":"","title":"\ud83d\udd11 Wildcards in Stream API"},{"location":"cheatsheets/languages/java/classes/Stream/#super-t-consumer","text":"Use when the API feeds stream elements into something . forEach(Consumer<? super T>) Stream < Integer > s = Stream . of ( 1 , 2 , 3 ); Consumer < Number > print = n -> System . out . println ( n ); s . forEach ( print ); // OK because Consumer<? super Integer> allMatch(Predicate<? super T>) Stream < String > words = Stream . of ( \"a\" , \"bb\" ); Predicate < Object > notNull = Objects :: nonNull ; // Predicate<Object> is super of String boolean all = words . allMatch ( notNull ); sorted(Comparator<? super T>) Stream < String > s = Stream . of ( \"c\" , \"a\" , \"b\" ); Comparator < Object > cmp = ( o1 , o2 ) -> o1 . toString (). compareTo ( o2 . toString ()); s . sorted ( cmp ). forEach ( System . out :: println );","title":"? super T \u2192 Consumer"},{"location":"cheatsheets/languages/java/classes/Stream/#extends-r-producer","text":"Use when the API returns new elements produced from the stream . map(Function<? super T, ? extends R>) Stream < Integer > s = Stream . of ( 1 , 2 , 3 ); Function < Number , String > f = n -> \"Num:\" + n ; Stream < String > out = s . map ( f ); // R is String flatMap(Function<? super T, ? extends Stream<? extends R>>) Stream < String > s = Stream . of ( \"a,b\" , \"c\" ); Stream < String > flat = s . flatMap ( str -> Arrays . stream ( str . split ( \",\" )));","title":"? extends R \u2192 Producer"},{"location":"cheatsheets/languages/java/classes/Stream/#rule-of-thumb-pecs","text":"Producer \u2192 Extends : output side ( map , flatMap ) Consumer \u2192 Super : input side ( forEach , allMatch , sorted ) \ud83d\udc49 That\u2019s really all you need: If the stream gives elements to your function = ? super T . If your function produces new elements = ? extends R .","title":"\ud83d\udccc Rule of Thumb (PECS)"},{"location":"cheatsheets/languages/java/classes/nio/path/","text":"Java Path (and a quick note on Paths ) \u00b6 Path is the main interface in java.nio.file that models a filesystem path (like \"images/cat.png\" or \"/usr/local/bin\" ). About Paths : since Java 11 , you can use Path.of(...) instead of Paths.get(...) . They do the same thing. Because of that, this guide uses Path.of and ignores Paths . Quick glossary (beginner-friendly) \u00b6 Absolute path : a full address from the filesystem root, e.g. \"/home/alex/report.txt\" (Unix) or \"C:\\Users\\Alex\\report.txt\" (Windows). It doesn\u2019t depend on the \u201ccurrent folder\u201d. Relative path : a path relative to a base (usually the app\u2019s current working directory), e.g. \"docs/report.txt\" or \"../images/logo.png\" . Root : the topmost starting point of the filesystem ( \"/\" on Unix; a drive like \"C:\\\" on Windows). Normalize : clean a path by removing . (current dir) and resolving .. (go up one folder) without touching the disk . Resolve : join paths like URLs: base.resolve(child) \u2192 \u201cappend\u201d child to base. Relativize : create a relative path that goes from one path to another . Real path : an absolute, normalized path with symlinks resolved on disk . Creating Path instances \u00b6 Path.of(String first, String... more) \u00b6 Create a path from one or more parts. Path p1 = Path . of ( \"images\" , \"icons\" , \"cat.png\" ); // \"images/icons/cat.png\" Path p2 = Path . of ( \"/usr\" , \"local\" , \"bin\" ); // \"/usr/local/bin\" (absolute on Unix) Output examples p1.toString() \u2192 \"images/icons/cat.png\" p2.isAbsolute() \u2192 true Use this instead of Paths.get(...) on Java 11+. Reading path structure \u00b6 getFileName() \u00b6 Last element of the path (the \u201cleaf\u201d). Path p = Path . of ( \"/var/log/system.log\" ); p . getFileName (). toString (); // \"system.log\" getParent() \u00b6 Everything except the last element (or null if none). Path p = Path . of ( \"/var/log/system.log\" ); p . getParent (). toString (); // \"/var/log\" getRoot() \u00b6 The root component (or null if relative). Path p1 = Path . of ( \"/var/log/system.log\" ); Path p2 = Path . of ( \"docs/readme.md\" ); p1 . getRoot (). toString (); // \"/\" p2 . getRoot (); // null (relative path) getNameCount() and getName(int index) \u00b6 Count and access individual name elements (0-based, root excluded). Path p = Path . of ( \"/usr/local/bin\" ); p . getNameCount (); // 3 (\"usr\",\"local\",\"bin\") p . getName ( 1 ). toString (); // \"local\" subpath(int beginIndex, int endIndex) \u00b6 Slice out a portion of the names (root not included). Path p = Path . of ( \"/usr/local/share/docs\" ); p . subpath ( 1 , 3 ). toString (); // \"local/share\" Checking path properties \u00b6 isAbsolute() \u00b6 Is this path absolute? Path . of ( \"/etc/hosts\" ). isAbsolute (); // true Path . of ( \"etc/hosts\" ). isAbsolute (); // false startsWith(...) / endsWith(...) \u00b6 Compare by path elements (not plain string). Path p = Path . of ( \"src/main/java/App.java\" ); p . startsWith ( \"src\" ); // true p . endsWith ( \"App.java\" ); // true p . endsWith ( Path . of ( \"java\" , \"App.java\" )); // true Transforming paths (no filesystem access) \u00b6 normalize() \u00b6 Remove . and fold .. where possible. Path . of ( \"a/./b/../c\" ). normalize (). toString (); // \"a/c\" resolve(String|Path other) \u00b6 Append other to this path (unless other is absolute , then other is returned). Path base = Path . of ( \"/home/alex\" ); base . resolve ( \"docs/report.txt\" ). toString (); // \"/home/alex/docs/report.txt\" base . resolve ( \"/etc/hosts\" ). toString (); // \"/etc/hosts\" (absolute wins) resolveSibling(String|Path other) \u00b6 Replace the last element with other . Path p = Path . of ( \"/home/alex/docs/report.txt\" ); p . resolveSibling ( \"notes.txt\" ). toString (); // \"/home/alex/docs/notes.txt\" relativize(Path other) \u00b6 Create a relative path from this to other . Both must be both absolute or both relative, and on the same root/drive. Path a = Path . of ( \"/home/alex/docs\" ); Path b = Path . of ( \"/home/alex/images/pic.png\" ); a . relativize ( b ). toString (); // \"../images/pic.png\" Converting paths \u00b6 toAbsolutePath() \u00b6 Turn a relative path into an absolute one using the current working directory ; already-absolute paths are returned as-is. (No disk access.) Path . of ( \"logs/app.log\" ). toAbsolutePath (). toString (); // e.g. \"/Users/alex/project/logs/app.log\" toRealPath(LinkOption... options) \u00b6 Return the real absolute path: normalized and with symlinks resolved. Touches the filesystem and can throw if missing. Path . of ( \"symlink/to/file.txt\" ). toRealPath (). toString (); // e.g. \"/actual/location/file.txt\" If you pass LinkOption.NOFOLLOW_LINKS , it won\u2019t resolve symlinks (still checks existence). toUri() \u00b6 Convert to a file: URI. Path . of ( \"/tmp/test.txt\" ). toUri (). toString (); // \"file:///tmp/test.txt\" toFile() \u00b6 Convert to the old java.io.File object. Path . of ( \"docs/readme.md\" ). toFile (); // java.io.File Interop & utilities \u00b6 iterator() (implements Iterable<Path> ) \u00b6 Iterate path elements. Path p = Path . of ( \"src/main/java\" ); for ( Path part : p ) { // \"src\", then \"main\", then \"java\" } compareTo(Path other) (and equals , hashCode ) \u00b6 Lexicographic comparison based on the filesystem\u2019s rules. Path a = Path . of ( \"a\" ); Path b = Path . of ( \"b\" ); a . compareTo ( b ); // negative value (a < b) getFileSystem() \u00b6 The FileSystem this Path belongs to (useful with custom/ZIP filesystems). Path . of ( \"README.md\" ). getFileSystem (). provider (). getScheme (); // \"file\" Common Files helpers you\u2019ll often use with Path (not methods on Path , but handy) \u00b6 Files . exists ( Path . of ( \"notes.txt\" )); // true/false Files . createDirectories ( Path . of ( \"out/logs\" )); // create all missing dirs Files . copy ( srcPath , destPath , REPLACE_EXISTING ); // copy a file Files . move ( srcPath , destPath , ATOMIC_MOVE ); // move/rename Files . delete ( Path . of ( \"old.txt\" )); // delete Files . readString ( Path . of ( \"data.txt\" )); // read whole file as String Files . writeString ( Path . of ( \"out.txt\" ), \"hello\" ); // write text Windows vs. Unix notes (gotchas) \u00b6 Roots : Unix root is \"/\" . Windows roots are drives like \"C:\\\" and UNC roots like \"\\\\server\\share\" . Separators : Path uses the platform\u2019s separator under the hood. You can write either '/' or '\\' in string literals, but prefer Path.of(\"a\",\"b\",\"c\") to stay portable. Relativize/resolve : You can\u2019t relativize/resolve across different roots/drives. Mini reference (method \u2192 what it does \u2192 example I/O) \u00b6 Method What it does Example input \u2192 output Path.of(\"a\",\"b\",\"c\") Make a path from parts \u2192 \"a/b/c\" getFileName() Last path segment \"/x/y/z.txt\" \u2192 \"z.txt\" getParent() Path without the last segment \"/x/y/z.txt\" \u2192 \"/x/y\" getRoot() The root component or null \"/x/y\" \u2192 \"/\" ; \"x/y\" \u2192 null getNameCount() Number of segments (no root) \"/a/b/c\" \u2192 3 getName(i) Segment at index i \"/a/b/c\" & i=1 \u2192 \"b\" subpath(i,j) Slice of segments [i,j) \"/a/b/c/d\" , (1,3) \u2192 \"b/c\" isAbsolute() Is it a full path from the root? \"/a/b\" \u2192 true ; \"a/b\" \u2192 false startsWith(x) Starts with segment(s) x ? \"src/main/App.java\" & \"src\" \u2192 true endsWith(x) Ends with segment(s) x ? \"src/main/App.java\" & \"App.java\" \u2192 true normalize() Remove . and fold .. \"a/./b/../c\" \u2192 \"a/c\" resolve(x) Append x (unless x is absolute) \"/home/a\" + \"docs/r.txt\" \u2192 \"/home/a/docs/r.txt\" resolveSibling(x) Replace the last segment \"/a/b/c.txt\" + \"d.txt\" \u2192 \"/a/b/d.txt\" relativize(other) Path from this to other \"/a/b\" \u2192 \"/a/c/d\" gives \"../c/d\" toAbsolutePath() Make absolute using CWD \"logs/app.log\" \u2192 \"/\u2026/logs/app.log\" toRealPath() Absolute, normalized, resolve symlinks (touches disk) \"link/file\" \u2192 \"/actual/file\" toUri() Convert to file: URI \"/tmp/t.txt\" \u2192 \"file:///tmp/t.txt\" toFile() Convert to java.io.File \"docs/readme.md\" \u2192 File(\"docs/readme.md\") iterator() Iterate segments \"a/b/c\" \u2192 \"a\" , \"b\" , \"c\" compareTo() Order paths lexicographically \"a\" vs \"b\" \u2192 < 0 Tiny end-to-end example \u00b6 Path base = Path . of ( \"/home/alex/projects\" ); Path rel = Path . of ( \"demo/../lib/utils.java\" ); // relative Path norm = rel . normalize (); // \"lib/utils.java\" Path abs = base . resolve ( norm ); // \"/home/alex/projects/lib/utils.java\" Path here = Path . of ( \".\" ). toAbsolutePath (); // absolute CWD Path linkFree = abs . toRealPath (); // resolves symlinks (if any; hits disk) Path back = base . relativize ( linkFree ); // relative from base to real file Typical outputs norm.toString() \u2192 \"lib/utils.java\" abs.toString() \u2192 \"/home/alex/projects/lib/utils.java\" back.toString() \u2192 \"lib/utils.java\" Important behaviors & gotchas \u00b6 Relative vs Absolute Path.of(\"docs/file.txt\") is relative : it depends on the program\u2019s current working directory . Path.of(\"/home/user/docs/file.txt\") (Unix) or Path.of(\"C:\\\\Users\\\\Alex\\\\file.txt\") (Windows) is absolute : it always points to the same place, no matter where the program is run. Normalize doesn\u2019t touch the disk normalize() just cleans up the string form of the path ( . and .. ). It doesn\u2019t check if the file exists. Real path touches the disk toRealPath() does check the filesystem. It resolves symlinks, checks existence, and can throw exceptions if the file isn\u2019t there. Resolve vs. Relativize confusion resolve(child) \u2192 go deeper into the tree. relativize(other) \u2192 calculate the path between two paths. You can\u2019t relativize across different drives/roots ( C:\\ vs D:\\ on Windows, or / vs a network share on Unix). StartsWith/EndsWith are by segments, not plain strings \"src/main/java/App.java\".endsWith(\"java\") \u2192 false (last segment is \"App.java\" ). \"src/main/java/App.java\".endsWith(\"App.java\") \u2192 true . Iterating excludes root /usr/local/bin will give elements \"usr\" , \"local\" , \"bin\" \u2014 the root / is not included. Cross-platform differences On Windows: roots are drives ( C:\\ ), case-insensitive by default. On Unix: root is / , case-sensitive. Bottom line \u00b6 Use Path instead of string concatenation : It handles separators, OS differences, and path logic safely. Prefer Path.of(...) (Java 11+) over Paths.get(...) . Use normalize() when you want a clean path string. Use toRealPath() only if you need the true location on disk (and are ready to handle errors). Combine with Files class for actual file operations ( exists , read , write , delete ). Remember : Path itself is just a description of a location \u2014 it doesn\u2019t create, delete, or read files.","title":"Path"},{"location":"cheatsheets/languages/java/classes/nio/path/#java-path-and-a-quick-note-on-paths","text":"Path is the main interface in java.nio.file that models a filesystem path (like \"images/cat.png\" or \"/usr/local/bin\" ). About Paths : since Java 11 , you can use Path.of(...) instead of Paths.get(...) . They do the same thing. Because of that, this guide uses Path.of and ignores Paths .","title":"Java Path (and a quick note on Paths)"},{"location":"cheatsheets/languages/java/classes/nio/path/#quick-glossary-beginner-friendly","text":"Absolute path : a full address from the filesystem root, e.g. \"/home/alex/report.txt\" (Unix) or \"C:\\Users\\Alex\\report.txt\" (Windows). It doesn\u2019t depend on the \u201ccurrent folder\u201d. Relative path : a path relative to a base (usually the app\u2019s current working directory), e.g. \"docs/report.txt\" or \"../images/logo.png\" . Root : the topmost starting point of the filesystem ( \"/\" on Unix; a drive like \"C:\\\" on Windows). Normalize : clean a path by removing . (current dir) and resolving .. (go up one folder) without touching the disk . Resolve : join paths like URLs: base.resolve(child) \u2192 \u201cappend\u201d child to base. Relativize : create a relative path that goes from one path to another . Real path : an absolute, normalized path with symlinks resolved on disk .","title":"Quick glossary (beginner-friendly)"},{"location":"cheatsheets/languages/java/classes/nio/path/#creating-path-instances","text":"","title":"Creating Path instances"},{"location":"cheatsheets/languages/java/classes/nio/path/#pathofstring-first-string-more","text":"Create a path from one or more parts. Path p1 = Path . of ( \"images\" , \"icons\" , \"cat.png\" ); // \"images/icons/cat.png\" Path p2 = Path . of ( \"/usr\" , \"local\" , \"bin\" ); // \"/usr/local/bin\" (absolute on Unix) Output examples p1.toString() \u2192 \"images/icons/cat.png\" p2.isAbsolute() \u2192 true Use this instead of Paths.get(...) on Java 11+.","title":"Path.of(String first, String... more)"},{"location":"cheatsheets/languages/java/classes/nio/path/#reading-path-structure","text":"","title":"Reading path structure"},{"location":"cheatsheets/languages/java/classes/nio/path/#getfilename","text":"Last element of the path (the \u201cleaf\u201d). Path p = Path . of ( \"/var/log/system.log\" ); p . getFileName (). toString (); // \"system.log\"","title":"getFileName()"},{"location":"cheatsheets/languages/java/classes/nio/path/#getparent","text":"Everything except the last element (or null if none). Path p = Path . of ( \"/var/log/system.log\" ); p . getParent (). toString (); // \"/var/log\"","title":"getParent()"},{"location":"cheatsheets/languages/java/classes/nio/path/#getroot","text":"The root component (or null if relative). Path p1 = Path . of ( \"/var/log/system.log\" ); Path p2 = Path . of ( \"docs/readme.md\" ); p1 . getRoot (). toString (); // \"/\" p2 . getRoot (); // null (relative path)","title":"getRoot()"},{"location":"cheatsheets/languages/java/classes/nio/path/#getnamecount-and-getnameint-index","text":"Count and access individual name elements (0-based, root excluded). Path p = Path . of ( \"/usr/local/bin\" ); p . getNameCount (); // 3 (\"usr\",\"local\",\"bin\") p . getName ( 1 ). toString (); // \"local\"","title":"getNameCount() and getName(int index)"},{"location":"cheatsheets/languages/java/classes/nio/path/#subpathint-beginindex-int-endindex","text":"Slice out a portion of the names (root not included). Path p = Path . of ( \"/usr/local/share/docs\" ); p . subpath ( 1 , 3 ). toString (); // \"local/share\"","title":"subpath(int beginIndex, int endIndex)"},{"location":"cheatsheets/languages/java/classes/nio/path/#checking-path-properties","text":"","title":"Checking path properties"},{"location":"cheatsheets/languages/java/classes/nio/path/#isabsolute","text":"Is this path absolute? Path . of ( \"/etc/hosts\" ). isAbsolute (); // true Path . of ( \"etc/hosts\" ). isAbsolute (); // false","title":"isAbsolute()"},{"location":"cheatsheets/languages/java/classes/nio/path/#startswith-endswith","text":"Compare by path elements (not plain string). Path p = Path . of ( \"src/main/java/App.java\" ); p . startsWith ( \"src\" ); // true p . endsWith ( \"App.java\" ); // true p . endsWith ( Path . of ( \"java\" , \"App.java\" )); // true","title":"startsWith(...) / endsWith(...)"},{"location":"cheatsheets/languages/java/classes/nio/path/#transforming-paths-no-filesystem-access","text":"","title":"Transforming paths (no filesystem access)"},{"location":"cheatsheets/languages/java/classes/nio/path/#normalize","text":"Remove . and fold .. where possible. Path . of ( \"a/./b/../c\" ). normalize (). toString (); // \"a/c\"","title":"normalize()"},{"location":"cheatsheets/languages/java/classes/nio/path/#resolvestringpath-other","text":"Append other to this path (unless other is absolute , then other is returned). Path base = Path . of ( \"/home/alex\" ); base . resolve ( \"docs/report.txt\" ). toString (); // \"/home/alex/docs/report.txt\" base . resolve ( \"/etc/hosts\" ). toString (); // \"/etc/hosts\" (absolute wins)","title":"resolve(String|Path other)"},{"location":"cheatsheets/languages/java/classes/nio/path/#resolvesiblingstringpath-other","text":"Replace the last element with other . Path p = Path . of ( \"/home/alex/docs/report.txt\" ); p . resolveSibling ( \"notes.txt\" ). toString (); // \"/home/alex/docs/notes.txt\"","title":"resolveSibling(String|Path other)"},{"location":"cheatsheets/languages/java/classes/nio/path/#relativizepath-other","text":"Create a relative path from this to other . Both must be both absolute or both relative, and on the same root/drive. Path a = Path . of ( \"/home/alex/docs\" ); Path b = Path . of ( \"/home/alex/images/pic.png\" ); a . relativize ( b ). toString (); // \"../images/pic.png\"","title":"relativize(Path other)"},{"location":"cheatsheets/languages/java/classes/nio/path/#converting-paths","text":"","title":"Converting paths"},{"location":"cheatsheets/languages/java/classes/nio/path/#toabsolutepath","text":"Turn a relative path into an absolute one using the current working directory ; already-absolute paths are returned as-is. (No disk access.) Path . of ( \"logs/app.log\" ). toAbsolutePath (). toString (); // e.g. \"/Users/alex/project/logs/app.log\"","title":"toAbsolutePath()"},{"location":"cheatsheets/languages/java/classes/nio/path/#torealpathlinkoption-options","text":"Return the real absolute path: normalized and with symlinks resolved. Touches the filesystem and can throw if missing. Path . of ( \"symlink/to/file.txt\" ). toRealPath (). toString (); // e.g. \"/actual/location/file.txt\" If you pass LinkOption.NOFOLLOW_LINKS , it won\u2019t resolve symlinks (still checks existence).","title":"toRealPath(LinkOption... options)"},{"location":"cheatsheets/languages/java/classes/nio/path/#touri","text":"Convert to a file: URI. Path . of ( \"/tmp/test.txt\" ). toUri (). toString (); // \"file:///tmp/test.txt\"","title":"toUri()"},{"location":"cheatsheets/languages/java/classes/nio/path/#tofile","text":"Convert to the old java.io.File object. Path . of ( \"docs/readme.md\" ). toFile (); // java.io.File","title":"toFile()"},{"location":"cheatsheets/languages/java/classes/nio/path/#interop-utilities","text":"","title":"Interop &amp; utilities"},{"location":"cheatsheets/languages/java/classes/nio/path/#iterator-implements-iterablepath","text":"Iterate path elements. Path p = Path . of ( \"src/main/java\" ); for ( Path part : p ) { // \"src\", then \"main\", then \"java\" }","title":"iterator() (implements Iterable&lt;Path&gt;)"},{"location":"cheatsheets/languages/java/classes/nio/path/#comparetopath-other-and-equals-hashcode","text":"Lexicographic comparison based on the filesystem\u2019s rules. Path a = Path . of ( \"a\" ); Path b = Path . of ( \"b\" ); a . compareTo ( b ); // negative value (a < b)","title":"compareTo(Path other) (and equals, hashCode)"},{"location":"cheatsheets/languages/java/classes/nio/path/#getfilesystem","text":"The FileSystem this Path belongs to (useful with custom/ZIP filesystems). Path . of ( \"README.md\" ). getFileSystem (). provider (). getScheme (); // \"file\"","title":"getFileSystem()"},{"location":"cheatsheets/languages/java/classes/nio/path/#common-files-helpers-youll-often-use-with-path-not-methods-on-path-but-handy","text":"Files . exists ( Path . of ( \"notes.txt\" )); // true/false Files . createDirectories ( Path . of ( \"out/logs\" )); // create all missing dirs Files . copy ( srcPath , destPath , REPLACE_EXISTING ); // copy a file Files . move ( srcPath , destPath , ATOMIC_MOVE ); // move/rename Files . delete ( Path . of ( \"old.txt\" )); // delete Files . readString ( Path . of ( \"data.txt\" )); // read whole file as String Files . writeString ( Path . of ( \"out.txt\" ), \"hello\" ); // write text","title":"Common Files helpers you\u2019ll often use with Path (not methods on Path, but handy)"},{"location":"cheatsheets/languages/java/classes/nio/path/#windows-vs-unix-notes-gotchas","text":"Roots : Unix root is \"/\" . Windows roots are drives like \"C:\\\" and UNC roots like \"\\\\server\\share\" . Separators : Path uses the platform\u2019s separator under the hood. You can write either '/' or '\\' in string literals, but prefer Path.of(\"a\",\"b\",\"c\") to stay portable. Relativize/resolve : You can\u2019t relativize/resolve across different roots/drives.","title":"Windows vs. Unix notes (gotchas)"},{"location":"cheatsheets/languages/java/classes/nio/path/#mini-reference-method-what-it-does-example-io","text":"Method What it does Example input \u2192 output Path.of(\"a\",\"b\",\"c\") Make a path from parts \u2192 \"a/b/c\" getFileName() Last path segment \"/x/y/z.txt\" \u2192 \"z.txt\" getParent() Path without the last segment \"/x/y/z.txt\" \u2192 \"/x/y\" getRoot() The root component or null \"/x/y\" \u2192 \"/\" ; \"x/y\" \u2192 null getNameCount() Number of segments (no root) \"/a/b/c\" \u2192 3 getName(i) Segment at index i \"/a/b/c\" & i=1 \u2192 \"b\" subpath(i,j) Slice of segments [i,j) \"/a/b/c/d\" , (1,3) \u2192 \"b/c\" isAbsolute() Is it a full path from the root? \"/a/b\" \u2192 true ; \"a/b\" \u2192 false startsWith(x) Starts with segment(s) x ? \"src/main/App.java\" & \"src\" \u2192 true endsWith(x) Ends with segment(s) x ? \"src/main/App.java\" & \"App.java\" \u2192 true normalize() Remove . and fold .. \"a/./b/../c\" \u2192 \"a/c\" resolve(x) Append x (unless x is absolute) \"/home/a\" + \"docs/r.txt\" \u2192 \"/home/a/docs/r.txt\" resolveSibling(x) Replace the last segment \"/a/b/c.txt\" + \"d.txt\" \u2192 \"/a/b/d.txt\" relativize(other) Path from this to other \"/a/b\" \u2192 \"/a/c/d\" gives \"../c/d\" toAbsolutePath() Make absolute using CWD \"logs/app.log\" \u2192 \"/\u2026/logs/app.log\" toRealPath() Absolute, normalized, resolve symlinks (touches disk) \"link/file\" \u2192 \"/actual/file\" toUri() Convert to file: URI \"/tmp/t.txt\" \u2192 \"file:///tmp/t.txt\" toFile() Convert to java.io.File \"docs/readme.md\" \u2192 File(\"docs/readme.md\") iterator() Iterate segments \"a/b/c\" \u2192 \"a\" , \"b\" , \"c\" compareTo() Order paths lexicographically \"a\" vs \"b\" \u2192 < 0","title":"Mini reference (method \u2192 what it does \u2192 example I/O)"},{"location":"cheatsheets/languages/java/classes/nio/path/#tiny-end-to-end-example","text":"Path base = Path . of ( \"/home/alex/projects\" ); Path rel = Path . of ( \"demo/../lib/utils.java\" ); // relative Path norm = rel . normalize (); // \"lib/utils.java\" Path abs = base . resolve ( norm ); // \"/home/alex/projects/lib/utils.java\" Path here = Path . of ( \".\" ). toAbsolutePath (); // absolute CWD Path linkFree = abs . toRealPath (); // resolves symlinks (if any; hits disk) Path back = base . relativize ( linkFree ); // relative from base to real file Typical outputs norm.toString() \u2192 \"lib/utils.java\" abs.toString() \u2192 \"/home/alex/projects/lib/utils.java\" back.toString() \u2192 \"lib/utils.java\"","title":"Tiny end-to-end example"},{"location":"cheatsheets/languages/java/classes/nio/path/#important-behaviors-gotchas","text":"Relative vs Absolute Path.of(\"docs/file.txt\") is relative : it depends on the program\u2019s current working directory . Path.of(\"/home/user/docs/file.txt\") (Unix) or Path.of(\"C:\\\\Users\\\\Alex\\\\file.txt\") (Windows) is absolute : it always points to the same place, no matter where the program is run. Normalize doesn\u2019t touch the disk normalize() just cleans up the string form of the path ( . and .. ). It doesn\u2019t check if the file exists. Real path touches the disk toRealPath() does check the filesystem. It resolves symlinks, checks existence, and can throw exceptions if the file isn\u2019t there. Resolve vs. Relativize confusion resolve(child) \u2192 go deeper into the tree. relativize(other) \u2192 calculate the path between two paths. You can\u2019t relativize across different drives/roots ( C:\\ vs D:\\ on Windows, or / vs a network share on Unix). StartsWith/EndsWith are by segments, not plain strings \"src/main/java/App.java\".endsWith(\"java\") \u2192 false (last segment is \"App.java\" ). \"src/main/java/App.java\".endsWith(\"App.java\") \u2192 true . Iterating excludes root /usr/local/bin will give elements \"usr\" , \"local\" , \"bin\" \u2014 the root / is not included. Cross-platform differences On Windows: roots are drives ( C:\\ ), case-insensitive by default. On Unix: root is / , case-sensitive.","title":"Important behaviors &amp; gotchas"},{"location":"cheatsheets/languages/java/classes/nio/path/#bottom-line","text":"Use Path instead of string concatenation : It handles separators, OS differences, and path logic safely. Prefer Path.of(...) (Java 11+) over Paths.get(...) . Use normalize() when you want a clean path string. Use toRealPath() only if you need the true location on disk (and are ready to handle errors). Combine with Files class for actual file operations ( exists , read , write , delete ). Remember : Path itself is just a description of a location \u2014 it doesn\u2019t create, delete, or read files.","title":"Bottom line"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/","text":"\ud83e\udde9 Spring Knowledge Architecture \u2014 Blueprint & Growth Map \u00b6 Purpose: Define the structure, hierarchy, and future direction of your Spring documentation. This blueprint ensures every new topic \u2014 from reflection to reactive web \u2014 fits logically into a layered, evolving system. \ud83c\udf31 1. Philosophy \u2014 Spring as a Living System \u00b6 Spring behaves like a living organism \u2014 each layer adds a new organ of capability: reflection gives perception, beans give life, containers give order, AOP gives adaptation, events give awareness. Reflection \u2192 Beans \u2192 Container \u2192 AOP \u2192 Events \u2191 (Foundation for all higher Spring modules) Each upper domain \u2014 Web, Data, Security, Boot, Cloud \u2014 grows organically from these foundations. \ud83e\udded 2. Current Core Structure \u00b6 cheatsheets/frameworks/spring/core/ \u251c\u2500 reflection/ \u2502 \u2514\u2500 reflection-layer.md \u251c\u2500 beans/ \u2502 \u2514\u2500 beans-layer.md \u251c\u2500 container/ \u2502 \u2514\u2500 container-layer.md \u251c\u2500 aop/ \u2502 \u2514\u2500 aop-layer.md \u251c\u2500 events/ \u2502 \u2514\u2500 events-layer.md \u2514\u2500 core-layers.md This represents Spring\u2019s internal engine \u2014 the parts that make everything else possible. \u2699\ufe0f 3. Planned Expansion \u2014 Future Layer Groups \u00b6 Spring grows upward from the Core into specialized ecosystems: spring/ \u251c\u2500 core/ # Engine: reflection, beans, IoC, AOP, events \u251c\u2500 web/ # HTTP layer: controllers, requests, responses \u251c\u2500 data/ # Persistence: repositories, JPA, transactions \u251c\u2500 security/ # Authorization & authentication (AOP-backed) \u251c\u2500 boot/ # Application orchestration & autoconfiguration \u2514\u2500 cloud/ # Distributed services, config, resilience Each directory can hold: concepts/ \u2014 the \u201cwhy\u201d and architecture cheatsheets/ \u2014 the \u201chow\u201d and quick syntax \ud83e\udde9 4. How Layers Depend on Each Other \u00b6 Layer Depends On Provides Core JVM Reflection, IoC, lifecycle, AOP Web Core MVC, DispatcherServlet, REST Data Core + AOP ORM, transactions, repository abstraction Security Core + AOP Authentication, authorization, method interception Boot Core + All Autoconfiguration, environment, profiles, startup Cloud Boot Microservice integration, config, discovery, resilience Every new layer extends the container model \u2014 the same brain, just with more senses and muscles. \ud83e\udde0 5. Authoring Pattern \u2014 \u201cConcept + Cheatsheet Pair\u201d \u00b6 Each topic should exist as a pair : concepts/frameworks/spring/web/05-dispatcher-servlet.md cheatsheets/frameworks/spring/web/dispatcher-servlet.md This keeps your documentation balanced: Concepts explain the system. Cheatsheets show the syntax. \u2699\ufe0f 6. Meta Files \u00b6 File Purpose core-layers.md The Core overview and navigation map meta/blueprint.md This file \u2014 defines growth architecture structure-notes.md Records design and organizational decisions future-improvements.md Lists expansion goals or pending refactors \ud83e\uddec 7. Evolution Strategy \u00b6 Start each new module with a conceptual Quick Starter ( quick-starter.md ) Explain how it extends Core. Define key mechanisms (annotations, interfaces, core classes). Create concept + cheatsheet pairs for each mechanism. Link everything back to Core ( applicationcontext.md , aop-layer.md , etc.). Maintain consistent tone: from JVM \u2192 Reflection \u2192 IoC \u2192 Web/Data/Security \u2192 Cloud. \ud83c\udf10 8. Future Path \u2014 How Boot Orchestrates the Stack \u00b6 Spring Boot is not a separate system \u2014 it\u2019s Spring Core on autopilot . It wires, configures, and starts everything from Core upward. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING CLOUD \u2502 \u2502 Distributed config, discovery, circuit breakers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING BOOT \u2502 \u2502 Auto-configures context, loads Web/Data/Security \u2502 \u2502 Profiles, Actuator, CLI, starters \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING WEB & SECURITY \u2502 \u2502 REST controllers, filters, interceptors, AOP auth \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING DATA \u2502 \u2502 Repositories, JPA, transactions \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING CORE \u2502 \u2502 Reflection \u2192 Beans \u2192 IoC \u2192 AOP \u2192 Events \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 JVM \u2502 \u2502 ClassLoader, Metaspace, Threads \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Interpretation: Spring Core gives structure (container, lifecycle). Spring Boot gives automation (auto-configuration, scanning). Spring Web/Data/Security give purpose (interacting with clients, data, and users). Spring Cloud gives scale (distributed, resilient systems). \ud83e\udded 9. Visual Knowledge Architecture Summary \u00b6 meta/ \u2514\u2500 blueprint.md # This file frameworks/ \u2514\u2500 spring/ \u251c\u2500 core/ # Internal engine \u251c\u2500 web/ # REST & MVC layer \u251c\u2500 data/ # Persistence layer \u251c\u2500 security/ # Access control layer \u251c\u2500 boot/ # Startup & orchestration \u2514\u2500 cloud/ # Distributed extensions Each folder: starts with a quick-starter.md ends with a layer-map.md or overview links back downward to its foundation \ud83e\ude9e 10. Core Takeaway \u00b6 Your Spring vault is not static documentation \u2014 it\u2019s a dynamic knowledge graph. Each layer represents an evolutionary step in Spring\u2019s ability to manage complexity. Core : how Spring thinks Web & Data : how it acts Security : how it protects Boot : how it awakens Cloud : how it scales and cooperates Together they form a unified ecosystem \u2014 one heartbeat from reflection to distributed orchestration.","title":"Spring Core \u2014 Future Blueprint"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#spring-knowledge-architecture-blueprint-growth-map","text":"Purpose: Define the structure, hierarchy, and future direction of your Spring documentation. This blueprint ensures every new topic \u2014 from reflection to reactive web \u2014 fits logically into a layered, evolving system.","title":"\ud83e\udde9 Spring Knowledge Architecture \u2014 Blueprint &amp; Growth Map"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#1-philosophy-spring-as-a-living-system","text":"Spring behaves like a living organism \u2014 each layer adds a new organ of capability: reflection gives perception, beans give life, containers give order, AOP gives adaptation, events give awareness. Reflection \u2192 Beans \u2192 Container \u2192 AOP \u2192 Events \u2191 (Foundation for all higher Spring modules) Each upper domain \u2014 Web, Data, Security, Boot, Cloud \u2014 grows organically from these foundations.","title":"\ud83c\udf31 1. Philosophy \u2014 Spring as a Living System"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#2-current-core-structure","text":"cheatsheets/frameworks/spring/core/ \u251c\u2500 reflection/ \u2502 \u2514\u2500 reflection-layer.md \u251c\u2500 beans/ \u2502 \u2514\u2500 beans-layer.md \u251c\u2500 container/ \u2502 \u2514\u2500 container-layer.md \u251c\u2500 aop/ \u2502 \u2514\u2500 aop-layer.md \u251c\u2500 events/ \u2502 \u2514\u2500 events-layer.md \u2514\u2500 core-layers.md This represents Spring\u2019s internal engine \u2014 the parts that make everything else possible.","title":"\ud83e\udded 2. Current Core Structure"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#3-planned-expansion-future-layer-groups","text":"Spring grows upward from the Core into specialized ecosystems: spring/ \u251c\u2500 core/ # Engine: reflection, beans, IoC, AOP, events \u251c\u2500 web/ # HTTP layer: controllers, requests, responses \u251c\u2500 data/ # Persistence: repositories, JPA, transactions \u251c\u2500 security/ # Authorization & authentication (AOP-backed) \u251c\u2500 boot/ # Application orchestration & autoconfiguration \u2514\u2500 cloud/ # Distributed services, config, resilience Each directory can hold: concepts/ \u2014 the \u201cwhy\u201d and architecture cheatsheets/ \u2014 the \u201chow\u201d and quick syntax","title":"\u2699\ufe0f 3. Planned Expansion \u2014 Future Layer Groups"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#4-how-layers-depend-on-each-other","text":"Layer Depends On Provides Core JVM Reflection, IoC, lifecycle, AOP Web Core MVC, DispatcherServlet, REST Data Core + AOP ORM, transactions, repository abstraction Security Core + AOP Authentication, authorization, method interception Boot Core + All Autoconfiguration, environment, profiles, startup Cloud Boot Microservice integration, config, discovery, resilience Every new layer extends the container model \u2014 the same brain, just with more senses and muscles.","title":"\ud83e\udde9 4. How Layers Depend on Each Other"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#5-authoring-pattern-concept-cheatsheet-pair","text":"Each topic should exist as a pair : concepts/frameworks/spring/web/05-dispatcher-servlet.md cheatsheets/frameworks/spring/web/dispatcher-servlet.md This keeps your documentation balanced: Concepts explain the system. Cheatsheets show the syntax.","title":"\ud83e\udde0 5. Authoring Pattern \u2014 \u201cConcept + Cheatsheet Pair\u201d"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#6-meta-files","text":"File Purpose core-layers.md The Core overview and navigation map meta/blueprint.md This file \u2014 defines growth architecture structure-notes.md Records design and organizational decisions future-improvements.md Lists expansion goals or pending refactors","title":"\u2699\ufe0f 6. Meta Files"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#7-evolution-strategy","text":"Start each new module with a conceptual Quick Starter ( quick-starter.md ) Explain how it extends Core. Define key mechanisms (annotations, interfaces, core classes). Create concept + cheatsheet pairs for each mechanism. Link everything back to Core ( applicationcontext.md , aop-layer.md , etc.). Maintain consistent tone: from JVM \u2192 Reflection \u2192 IoC \u2192 Web/Data/Security \u2192 Cloud.","title":"\ud83e\uddec 7. Evolution Strategy"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#8-future-path-how-boot-orchestrates-the-stack","text":"Spring Boot is not a separate system \u2014 it\u2019s Spring Core on autopilot . It wires, configures, and starts everything from Core upward. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING CLOUD \u2502 \u2502 Distributed config, discovery, circuit breakers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING BOOT \u2502 \u2502 Auto-configures context, loads Web/Data/Security \u2502 \u2502 Profiles, Actuator, CLI, starters \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING WEB & SECURITY \u2502 \u2502 REST controllers, filters, interceptors, AOP auth \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING DATA \u2502 \u2502 Repositories, JPA, transactions \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 SPRING CORE \u2502 \u2502 Reflection \u2192 Beans \u2192 IoC \u2192 AOP \u2192 Events \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 JVM \u2502 \u2502 ClassLoader, Metaspace, Threads \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Interpretation: Spring Core gives structure (container, lifecycle). Spring Boot gives automation (auto-configuration, scanning). Spring Web/Data/Security give purpose (interacting with clients, data, and users). Spring Cloud gives scale (distributed, resilient systems).","title":"\ud83c\udf10 8. Future Path \u2014 How Boot Orchestrates the Stack"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#9-visual-knowledge-architecture-summary","text":"meta/ \u2514\u2500 blueprint.md # This file frameworks/ \u2514\u2500 spring/ \u251c\u2500 core/ # Internal engine \u251c\u2500 web/ # REST & MVC layer \u251c\u2500 data/ # Persistence layer \u251c\u2500 security/ # Access control layer \u251c\u2500 boot/ # Startup & orchestration \u2514\u2500 cloud/ # Distributed extensions Each folder: starts with a quick-starter.md ends with a layer-map.md or overview links back downward to its foundation","title":"\ud83e\udded 9. Visual Knowledge Architecture Summary"},{"location":"cheatsheets/languages/java/spring/_meta/blueprint/#10-core-takeaway","text":"Your Spring vault is not static documentation \u2014 it\u2019s a dynamic knowledge graph. Each layer represents an evolutionary step in Spring\u2019s ability to manage complexity. Core : how Spring thinks Web & Data : how it acts Security : how it protects Boot : how it awakens Cloud : how it scales and cooperates Together they form a unified ecosystem \u2014 one heartbeat from reflection to distributed orchestration.","title":"\ud83e\ude9e 10. Core Takeaway"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/","text":"\ud83e\udde9 Blueprint \u2014 Spring Annotations Cheatsheets \u00b6 Goal: Create a modular, future-proof structure for documenting Spring annotations , grouped by capability (not by module). This ensures scalability as the ecosystem grows (Boot, WebFlux, Security, Kafka, etc.) without fragmenting related topics. \ud83d\udcc1 Folder Layout \u00b6 cheatsheets/ \u2514\u2500 frameworks/ \u2514\u2500 spring/ \u2514\u2500 annotations/ \u251c\u2500 index.md # master overview & quick links \u251c\u2500 core-di/ \u2502 \u251c\u2500 stereotypes.md # @Component, @Service, @Repository, @Controller \u2502 \u251c\u2500 configuration-beans.md # @Configuration, @Bean, @Import, @Lazy, @Scope \u2502 \u251c\u2500 wiring-and-profiles.md # @Autowired, @Qualifier, @Primary, @Value, @Profile \u2502 \u251c\u2500 conditions.md # @Conditional*, meta-annotations \u2502 \u2514\u2500 lifecycle-events.md # @PostConstruct, @PreDestroy, @EventListener \u251c\u2500 mvc-rest/ \u2502 \u251c\u2500 controller-basics.md # @Controller, @RestController, @ControllerAdvice \u2502 \u251c\u2500 mapping.md # @RequestMapping, @Get/Post/Put/Delete/PatchMapping \u2502 \u251c\u2500 params-and-bodies.md # @PathVariable, @RequestParam, @RequestBody, @ResponseBody \u2502 \u251c\u2500 responses-and-errors.md # @ResponseStatus, @ExceptionHandler, @ResponseEntity* \u2502 \u2514\u2500 cors-and-versioning.md # @CrossOrigin, versioning patterns \u251c\u2500 webflux/ \u2502 \u251c\u2500 enable-and-config.md # @EnableWebFlux, functional routing notes \u2502 \u2514\u2500 controller-notes.md # shared controller annotations + reactive caveats \u251c\u2500 validation/ \u2502 \u251c\u2500 method-level.md # @Validated, @Valid \u2502 \u2514\u2500 bean-constraints.md # Jakarta validation annotations \u251c\u2500 data/ \u2502 \u251c\u2500 repositories.md # @Repository, @EnableJpaRepositories, @EnableMongoRepositories \u2502 \u251c\u2500 jpa-entity-auditing.md # @Entity*, @Id*, @CreatedDate, @Version, @EnableJpaAuditing \u2502 \u251c\u2500 queries.md # @Query, @Modifying, projections \u2502 \u2514\u2500 converters.md # @ReadingConverter, @WritingConverter \u251c\u2500 transactions/ \u2502 \u251c\u2500 transactional-basics.md # @Transactional, propagation/isolation \u2502 \u2514\u2500 enable-tx.md # @EnableTransactionManagement \u251c\u2500 security/ \u2502 \u251c\u2500 enable-and-config.md # @EnableWebSecurity, @EnableMethodSecurity \u2502 \u251c\u2500 method-security.md # @PreAuthorize, @PostAuthorize, @Secured, @RolesAllowed \u2502 \u2514\u2500 auth-context.md # @AuthenticationPrincipal, @CurrentSecurityContext \u251c\u2500 async-scheduling/ \u2502 \u251c\u2500 async.md # @Async, thread pool notes \u2502 \u2514\u2500 scheduling.md # @Scheduled, @EnableScheduling, cron \u251c\u2500 caching/ \u2502 \u2514\u2500 cache-annotations.md # @EnableCaching, @Cacheable, @CachePut, @CacheEvict, @Caching \u251c\u2500 messaging/ \u2502 \u251c\u2500 kafka.md # @EnableKafka, @KafkaListener, @SendTo \u2502 \u251c\u2500 rabbitmq.md # @EnableRabbit, @RabbitListener \u2502 \u2514\u2500 jms.md # @JmsListener \u251c\u2500 actuator/ \u2502 \u2514\u2500 endpoints.md # @Endpoint, @ReadOperation, @WriteOperation \u2514\u2500 boot/ \u251c\u2500 application-and-auto.md # @SpringBootApplication, @AutoConfiguration \u251c\u2500 config-properties.md # @ConfigurationProperties, @EnableConfigurationProperties \u2514\u2500 conditional-on.md # @ConditionalOnProperty/Bean/Class/MissingBean/Resource ResponseEntity is not an annotation but belongs conceptually to REST responses \u2014 keep a mini reference for context. \ud83e\udde0 Philosophy \u00b6 Organize by capability , not dependency. Jump straight to \u201ctransactions\u201d or \u201csecurity\u201d without recalling which starter or module they live in. Keep pages thin. Each .md covers one concept cluster (e.g., mappings , transactions ). Avoid giant scrolls; prefer clear entry points. Cross-link ruthlessly. Example: @Transactional \u2192 links to data/queries.md @PreAuthorize \u2192 links to security/method-security.md and core-di/conditions.md Reactive-ready. WebFlux lives in its own corner but reuses MVC annotations; highlight differences, don\u2019t duplicate content. Boot awareness without dependency. Boot annotations live under /boot , but pages cross-reference corresponding Core features. \ud83e\udeb6 Page Template (per-annotation file) \u00b6 # @AnnotationName \u2014 Cheatsheet **Essence:** One-line summary of its purpose. **When to use:** Typical scenario or trigger condition. **Gotchas:** Common pitfalls or side effects. ## 1) Minimal Example ```java // 10\u201320 lines max, compile-ready Effect: Short description of runtime behavior. 2) Options that Matter \u00b6 Option Default What It Changes Use When name \u2014 Bean name Custom wiring 3) Interactions \u00b6 Works with: @A, @B Conflicts with: @C (explain why) Boot tie-ins: @ConditionalOnProperty(\"...\") 4) Troubleshooting \u00b6 Symptom \u2192 Likely cause \u2192 Fix See also: Links to related pages. Optional front-matter for search and freshness tracking: --- title : \"@Transactional\" category : \"transactions\" tags : [ \"propagation\" , \"isolation\" , \"rollback\" ] tested_on : [ \"Spring Boot 3.3\" , \"Spring 6\" ] last_update : 2025-10-22 --- \ud83d\uddc2 Canonical Annotation Sets \u00b6 Core & DI \u00b6 @Component , @Service , @Repository , @Controller , @Configuration , @Bean , @Import , @Scope , @Lazy , @Autowired , @Qualifier , @Primary , @Value , @Profile , @Conditional , @PostConstruct , @PreDestroy , @EventListener MVC / REST \u00b6 @Controller , @RestController , @ControllerAdvice , @RequestMapping , @GetMapping , @PostMapping , @PutMapping , @DeleteMapping , @PathVariable , @RequestParam , @RequestBody , @ResponseBody , @ResponseStatus , @ExceptionHandler , @CrossOrigin WebFlux \u00b6 @EnableWebFlux , reactive controller differences (same annotations) Validation \u00b6 @Validated , @Valid , plus Jakarta annotations ( @NotNull , @Size , @Email \u2026) Data \u00b6 @Repository , @EnableJpaRepositories , @EnableMongoRepositories , @Query , @Modifying , @CreatedDate , @LastModifiedDate , @EnableJpaAuditing , @Entity , @Id , @GeneratedValue , @Version Transactions \u00b6 @Transactional , @EnableTransactionManagement Security \u00b6 @EnableWebSecurity , @EnableMethodSecurity , @PreAuthorize , @PostAuthorize , @Secured , @RolesAllowed , @AuthenticationPrincipal , @CurrentSecurityContext Async / Scheduling \u00b6 @Async , @EnableAsync , @Scheduled , @EnableScheduling Caching \u00b6 @EnableCaching , @Cacheable , @CachePut , @CacheEvict , @Caching Messaging \u00b6 Kafka \u2192 @EnableKafka , @KafkaListener , @SendTo RabbitMQ \u2192 @EnableRabbit , @RabbitListener JMS \u2192 @JmsListener Actuator \u00b6 @Endpoint , @ReadOperation , @WriteOperation Boot \u00b6 @SpringBootApplication , @AutoConfiguration , @ConfigurationProperties , @EnableConfigurationProperties , @ConditionalOnProperty , @ConditionalOnBean , @ConditionalOnClass , etc. \ud83e\udded index.md Template (master overview) \u00b6 Spring Annotations \u2014 Master Map \u00b6 Jump by capability: Core & DI \u2192 Stereotypes \u00b7 Beans \u00b7 Profiles MVC / REST \u2192 Controllers \u00b7 Mappings \u00b7 Errors WebFlux \u2192 Enable & Config Validation \u2192 @Valid & @Validated Data \u2192 Repositories \u00b7 Queries Transactions \u2192 @Transactional Security \u2192 Method Security Async / Scheduling \u2192 @Async \u00b7 @Scheduled Caching \u2192 Cache annotations Messaging \u2192 Kafka \u00b7 RabbitMQ Actuator \u2192 Custom endpoints Boot \u2192 Auto-Config \u00b7 ConfigurationProperties Legend: Each page starts with \u201cEssence / When to use / Gotchas\u201d and ends with \u201cTroubleshooting / See also\u201d. \ud83e\udde9 Maintenance Discipline \u00b6 One page = one concept cluster. Avoid \u201ceverything about @Controller in 500 lines\u201d pages. Short code, clear output. Examples must compile and demonstrate only the annotation\u2019s core purpose. Cross-references are mandatory. Use links liberally to show relationships and dependencies. Track freshness. Use last_update: and framework version tags for periodic review when Spring 7+ arrives. \u2705 Outcome: A clean, extensible system for documenting Spring annotations \u2014 capable of absorbing future frameworks (Micronaut, Quarkus) by mirroring this blueprint under their own namespaces.","title":"Spring Annotations \u2014 Future Blueprint"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#blueprint-spring-annotations-cheatsheets","text":"Goal: Create a modular, future-proof structure for documenting Spring annotations , grouped by capability (not by module). This ensures scalability as the ecosystem grows (Boot, WebFlux, Security, Kafka, etc.) without fragmenting related topics.","title":"\ud83e\udde9 Blueprint \u2014 Spring Annotations Cheatsheets"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#folder-layout","text":"cheatsheets/ \u2514\u2500 frameworks/ \u2514\u2500 spring/ \u2514\u2500 annotations/ \u251c\u2500 index.md # master overview & quick links \u251c\u2500 core-di/ \u2502 \u251c\u2500 stereotypes.md # @Component, @Service, @Repository, @Controller \u2502 \u251c\u2500 configuration-beans.md # @Configuration, @Bean, @Import, @Lazy, @Scope \u2502 \u251c\u2500 wiring-and-profiles.md # @Autowired, @Qualifier, @Primary, @Value, @Profile \u2502 \u251c\u2500 conditions.md # @Conditional*, meta-annotations \u2502 \u2514\u2500 lifecycle-events.md # @PostConstruct, @PreDestroy, @EventListener \u251c\u2500 mvc-rest/ \u2502 \u251c\u2500 controller-basics.md # @Controller, @RestController, @ControllerAdvice \u2502 \u251c\u2500 mapping.md # @RequestMapping, @Get/Post/Put/Delete/PatchMapping \u2502 \u251c\u2500 params-and-bodies.md # @PathVariable, @RequestParam, @RequestBody, @ResponseBody \u2502 \u251c\u2500 responses-and-errors.md # @ResponseStatus, @ExceptionHandler, @ResponseEntity* \u2502 \u2514\u2500 cors-and-versioning.md # @CrossOrigin, versioning patterns \u251c\u2500 webflux/ \u2502 \u251c\u2500 enable-and-config.md # @EnableWebFlux, functional routing notes \u2502 \u2514\u2500 controller-notes.md # shared controller annotations + reactive caveats \u251c\u2500 validation/ \u2502 \u251c\u2500 method-level.md # @Validated, @Valid \u2502 \u2514\u2500 bean-constraints.md # Jakarta validation annotations \u251c\u2500 data/ \u2502 \u251c\u2500 repositories.md # @Repository, @EnableJpaRepositories, @EnableMongoRepositories \u2502 \u251c\u2500 jpa-entity-auditing.md # @Entity*, @Id*, @CreatedDate, @Version, @EnableJpaAuditing \u2502 \u251c\u2500 queries.md # @Query, @Modifying, projections \u2502 \u2514\u2500 converters.md # @ReadingConverter, @WritingConverter \u251c\u2500 transactions/ \u2502 \u251c\u2500 transactional-basics.md # @Transactional, propagation/isolation \u2502 \u2514\u2500 enable-tx.md # @EnableTransactionManagement \u251c\u2500 security/ \u2502 \u251c\u2500 enable-and-config.md # @EnableWebSecurity, @EnableMethodSecurity \u2502 \u251c\u2500 method-security.md # @PreAuthorize, @PostAuthorize, @Secured, @RolesAllowed \u2502 \u2514\u2500 auth-context.md # @AuthenticationPrincipal, @CurrentSecurityContext \u251c\u2500 async-scheduling/ \u2502 \u251c\u2500 async.md # @Async, thread pool notes \u2502 \u2514\u2500 scheduling.md # @Scheduled, @EnableScheduling, cron \u251c\u2500 caching/ \u2502 \u2514\u2500 cache-annotations.md # @EnableCaching, @Cacheable, @CachePut, @CacheEvict, @Caching \u251c\u2500 messaging/ \u2502 \u251c\u2500 kafka.md # @EnableKafka, @KafkaListener, @SendTo \u2502 \u251c\u2500 rabbitmq.md # @EnableRabbit, @RabbitListener \u2502 \u2514\u2500 jms.md # @JmsListener \u251c\u2500 actuator/ \u2502 \u2514\u2500 endpoints.md # @Endpoint, @ReadOperation, @WriteOperation \u2514\u2500 boot/ \u251c\u2500 application-and-auto.md # @SpringBootApplication, @AutoConfiguration \u251c\u2500 config-properties.md # @ConfigurationProperties, @EnableConfigurationProperties \u2514\u2500 conditional-on.md # @ConditionalOnProperty/Bean/Class/MissingBean/Resource ResponseEntity is not an annotation but belongs conceptually to REST responses \u2014 keep a mini reference for context.","title":"\ud83d\udcc1 Folder Layout"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#philosophy","text":"Organize by capability , not dependency. Jump straight to \u201ctransactions\u201d or \u201csecurity\u201d without recalling which starter or module they live in. Keep pages thin. Each .md covers one concept cluster (e.g., mappings , transactions ). Avoid giant scrolls; prefer clear entry points. Cross-link ruthlessly. Example: @Transactional \u2192 links to data/queries.md @PreAuthorize \u2192 links to security/method-security.md and core-di/conditions.md Reactive-ready. WebFlux lives in its own corner but reuses MVC annotations; highlight differences, don\u2019t duplicate content. Boot awareness without dependency. Boot annotations live under /boot , but pages cross-reference corresponding Core features.","title":"\ud83e\udde0 Philosophy"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#page-template-per-annotation-file","text":"# @AnnotationName \u2014 Cheatsheet **Essence:** One-line summary of its purpose. **When to use:** Typical scenario or trigger condition. **Gotchas:** Common pitfalls or side effects. ## 1) Minimal Example ```java // 10\u201320 lines max, compile-ready Effect: Short description of runtime behavior.","title":"\ud83e\udeb6 Page Template (per-annotation file)"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#2-options-that-matter","text":"Option Default What It Changes Use When name \u2014 Bean name Custom wiring","title":"2) Options that Matter"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#3-interactions","text":"Works with: @A, @B Conflicts with: @C (explain why) Boot tie-ins: @ConditionalOnProperty(\"...\")","title":"3) Interactions"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#4-troubleshooting","text":"Symptom \u2192 Likely cause \u2192 Fix See also: Links to related pages. Optional front-matter for search and freshness tracking: --- title : \"@Transactional\" category : \"transactions\" tags : [ \"propagation\" , \"isolation\" , \"rollback\" ] tested_on : [ \"Spring Boot 3.3\" , \"Spring 6\" ] last_update : 2025-10-22 ---","title":"4) Troubleshooting"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#canonical-annotation-sets","text":"","title":"\ud83d\uddc2 Canonical Annotation Sets"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#core-di","text":"@Component , @Service , @Repository , @Controller , @Configuration , @Bean , @Import , @Scope , @Lazy , @Autowired , @Qualifier , @Primary , @Value , @Profile , @Conditional , @PostConstruct , @PreDestroy , @EventListener","title":"Core &amp; DI"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#mvc-rest","text":"@Controller , @RestController , @ControllerAdvice , @RequestMapping , @GetMapping , @PostMapping , @PutMapping , @DeleteMapping , @PathVariable , @RequestParam , @RequestBody , @ResponseBody , @ResponseStatus , @ExceptionHandler , @CrossOrigin","title":"MVC / REST"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#webflux","text":"@EnableWebFlux , reactive controller differences (same annotations)","title":"WebFlux"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#validation","text":"@Validated , @Valid , plus Jakarta annotations ( @NotNull , @Size , @Email \u2026)","title":"Validation"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#data","text":"@Repository , @EnableJpaRepositories , @EnableMongoRepositories , @Query , @Modifying , @CreatedDate , @LastModifiedDate , @EnableJpaAuditing , @Entity , @Id , @GeneratedValue , @Version","title":"Data"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#transactions","text":"@Transactional , @EnableTransactionManagement","title":"Transactions"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#security","text":"@EnableWebSecurity , @EnableMethodSecurity , @PreAuthorize , @PostAuthorize , @Secured , @RolesAllowed , @AuthenticationPrincipal , @CurrentSecurityContext","title":"Security"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#async-scheduling","text":"@Async , @EnableAsync , @Scheduled , @EnableScheduling","title":"Async / Scheduling"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#caching","text":"@EnableCaching , @Cacheable , @CachePut , @CacheEvict , @Caching","title":"Caching"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#messaging","text":"Kafka \u2192 @EnableKafka , @KafkaListener , @SendTo RabbitMQ \u2192 @EnableRabbit , @RabbitListener JMS \u2192 @JmsListener","title":"Messaging"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#actuator","text":"@Endpoint , @ReadOperation , @WriteOperation","title":"Actuator"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#boot","text":"@SpringBootApplication , @AutoConfiguration , @ConfigurationProperties , @EnableConfigurationProperties , @ConditionalOnProperty , @ConditionalOnBean , @ConditionalOnClass , etc.","title":"Boot"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#indexmd-template-master-overview","text":"","title":"\ud83e\udded index.md Template (master overview)"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#spring-annotations-master-map","text":"Jump by capability: Core & DI \u2192 Stereotypes \u00b7 Beans \u00b7 Profiles MVC / REST \u2192 Controllers \u00b7 Mappings \u00b7 Errors WebFlux \u2192 Enable & Config Validation \u2192 @Valid & @Validated Data \u2192 Repositories \u00b7 Queries Transactions \u2192 @Transactional Security \u2192 Method Security Async / Scheduling \u2192 @Async \u00b7 @Scheduled Caching \u2192 Cache annotations Messaging \u2192 Kafka \u00b7 RabbitMQ Actuator \u2192 Custom endpoints Boot \u2192 Auto-Config \u00b7 ConfigurationProperties Legend: Each page starts with \u201cEssence / When to use / Gotchas\u201d and ends with \u201cTroubleshooting / See also\u201d.","title":"Spring Annotations \u2014 Master Map"},{"location":"cheatsheets/languages/java/spring/annotations/_meta/blueprint/#maintenance-discipline","text":"One page = one concept cluster. Avoid \u201ceverything about @Controller in 500 lines\u201d pages. Short code, clear output. Examples must compile and demonstrate only the annotation\u2019s core purpose. Cross-references are mandatory. Use links liberally to show relationships and dependencies. Track freshness. Use last_update: and framework version tags for periodic review when Spring 7+ arrives. \u2705 Outcome: A clean, extensible system for documenting Spring annotations \u2014 capable of absorbing future frameworks (Micronaut, Quarkus) by mirroring this blueprint under their own namespaces.","title":"\ud83e\udde9 Maintenance Discipline"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/","text":"\ud83d\udd11 ID Generation in Hibernate (Summary) \u00b6 Hibernate/JPA gives you several ways to generate primary keys. Each has different trade-offs depending on your database and performance needs . Here\u2019s the all-in-one master summary of Hibernate ID generation strategies (AUTO, SEQUENCE, IDENTITY, TABLE, UUID), including everything about batching, allocation, gaps, pros/cons, and when to use what. 1. GenerationType.AUTO \u00b6 Meaning Hibernate chooses the best strategy for the underlying database. Behavior (typical) PostgreSQL / Oracle \u2192 SEQUENCE MySQL / MariaDB / SQL Server \u2192 IDENTITY If nothing else fits \u2192 TABLE Pros Very simple, portable, no DB-specific code. Cons Hibernate\u2019s choice may change when you switch DBs \u2192 unpredictable performance. Use when Portability > performance. Good for prototypes or apps that may switch DBs. @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Long id ; 2. GenerationType.SEQUENCE \u00b6 Meaning Use a database sequence object ( nextval in PostgreSQL, seq.NEXTVAL in Oracle). How it works Hibernate fetches IDs from the sequence. Can pre-fetch blocks of IDs ( allocationSize ). IDs are known before insert , so batching works well. Pros Best performance with JDBC batching. IDs assigned in memory before flush. Efficient for high-volume inserts. Cons Requires sequence object in DB (Hibernate can create one if allowed). With pooled allocation ( allocationSize > 1 ), gaps appear. Use when On PostgreSQL/Oracle (databases with strong sequence support). High-throughput insert-heavy workloads. Example @Id @SequenceGenerator ( name = \"user_seq_gen\" , sequenceName = \"user_id_seq\" , allocationSize = 50 // prefetch 50 IDs at a time ) @GeneratedValue ( strategy = GenerationType . SEQUENCE , generator = \"user_seq_gen\" ) private Long id ; SQL (PostgreSQL) CREATE SEQUENCE user_id_seq START WITH 1 INCREMENT BY 1 ; 3. GenerationType.IDENTITY \u00b6 Meaning Use DB\u2019s auto-increment/identity column . The DB assigns IDs during INSERT . How it works Hibernate issues the INSERT . The DB generates the ID. Hibernate fetches it afterward. Pros Very simple. Fits MySQL / SQL Server defaults. No sequence object needed. Cons Hibernate doesn\u2019t know ID until after insert \u2192 batching is limited. Insert throughput lower than SEQUENCE. Use when On MySQL / SQL Server (legacy schemas). When simplicity matters more than insert performance. Example @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) private Long id ; DDL id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY ; 4. GenerationType.TABLE \u00b6 Meaning Use a special table as a pseudo-sequence. How it works Hibernate stores current value in a table ( hibernate_sequences or custom). Reads/updates the row to generate IDs. Pros Portable to any DB , even those without sequences or identity. Cons Slowest, requires extra table reads/writes. High contention under concurrency. Use when Extreme portability is needed. Rare in modern production apps. Example @Id @TableGenerator ( name = \"user_tbl_gen\" , table = \"id_generator\" , pkColumnName = \"gen_name\" , valueColumnName = \"gen_val\" , pkColumnValue = \"user_id\" , allocationSize = 50 ) @GeneratedValue ( strategy = GenerationType . TABLE , generator = \"user_tbl_gen\" ) private Long id ; SQL CREATE TABLE id_generator ( gen_name VARCHAR ( 64 ) PRIMARY KEY , gen_val BIGINT NOT NULL ); INSERT INTO id_generator ( gen_name , gen_val ) VALUES ( 'user_id' , 1 ); 5. UUID / GUID (Hibernate-specific) \u00b6 Meaning Use UUID (128-bit identifier) instead of numeric IDs. How it works Hibernate (6+) can generate UUIDs in the app ( @UuidGenerator ). Stored as BINARY(16) (compact) or CHAR(36) (readable) in DB. Pros Globally unique \u2014 good for distributed systems. IDs generated without DB round-trip . Known before persist \u2014 useful for references/events. Cons Larger (16 bytes vs 8). Random UUIDs fragment B-trees \u2192 prefer time-ordered UUIDs (v7/ULID) . Harder to debug than numbers. Use when You need distributed ID generation across multiple services/nodes. You want IDs before hitting the DB. Microservices, offline clients, event-driven systems. Example (MySQL, compact storage) @Id @UuidGenerator @JdbcTypeCode ( SqlTypes . BINARY ) // store UUID in 16 bytes @Column ( columnDefinition = \"BINARY(16)\" ) private UUID id ; DDL CREATE TABLE users ( id BINARY ( 16 ) NOT NULL PRIMARY KEY , name VARCHAR ( 100 ) NOT NULL , uuid_txt CHAR ( 36 ) AS ( BIN_TO_UUID ( id )) STORED ); \u2699\ufe0f Key Cross-Cutting Concepts \u00b6 \ud83d\udd04 Batching \u00b6 JDBC batching = send multiple inserts in one round trip. Best with SEQUENCE (IDs known up front). Limited with IDENTITY (IDs only known after insert). Enable in Hibernate: hibernate.jdbc.batch_size = 50 \ud83d\udce6 Allocation / Prefetching \u00b6 With SEQUENCE and TABLE , Hibernate can fetch blocks of IDs using allocationSize . Example: allocationSize=50 \u2192 Hibernate grabs 50 IDs and consumes them gradually. Benefits: fewer DB calls, better batching. Downsides: gaps if app crashes or restarts. \u26a0\ufe0f Gaps \u00b6 All strategies may produce gaps: Rollbacks Crashes Pooled allocations Don\u2019t use IDs as business order \u2014 always add a created_at column. \u2705 When to Use What (Cheat Sheet) \u00b6 Strategy Best Fit Pros Cons AUTO Portability Easiest, automatic choice Unpredictable per DB SEQUENCE PostgreSQL / Oracle Best batching, performance, pre-fetch Needs sequence object, gaps IDENTITY MySQL / SQL Server (legacy schemas) Simple, DB-native Weak batching, slower inserts TABLE Exotic DBs, portability needed Works everywhere Slow, contention-heavy UUID Distributed / microservices / offline Global uniqueness, no DB round-trip Larger index, may fragment \ud83d\ude80 Quick Rules of Thumb \u00b6 High throughput inserts (Postgres/Oracle) \u2192 SEQUENCE + batching. MySQL/SQL Server legacy \u2192 IDENTITY . Distributed/microservices \u2192 UUID (prefer time-ordered). Extreme portability \u2192 TABLE . Don\u2019t care / just starting \u2192 AUTO . \u2705 In short: Use SEQUENCE when you can (best batching). Use IDENTITY if schema/DB requires it. Use UUID if you need IDs outside the DB or in distributed systems. Expect gaps with any method. Never use PK for business ordering \u2192 add timestamps. MySQL \u00b6 UUID Primary Keys (Compact BINARY(16) Storage) \u00b6 When using UUIDs as primary keys in MySQL, storing them as CHAR(36) strings is common but inefficient. A better approach is to store them in a compact binary format using BINARY(16) . This reduces storage space and improves index performance. Here\u2019s a tiny, end-to-end example of UUID primary keys on MySQL , stored compactly as BINARY(16) and generated in the app with Hibernate 6. 1) MySQL table (compact PK + easy-to-read helper) \u00b6 CREATE TABLE users ( id BINARY ( 16 ) NOT NULL PRIMARY KEY , -- packed UUID name VARCHAR ( 100 ) NOT NULL , created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP , -- Optional: human-readable mirror (handy for ad-hoc queries) uuid_txt CHAR ( 36 ) AS ( BIN_TO_UUID ( id )) STORED ) ENGINE = InnoDB ; You don\u2019t have to keep uuid_txt \u2014it\u2019s just convenient. The real PK is BINARY(16) . 2) Hibernate/JPA entity (Hibernate 6) \u00b6 import jakarta.persistence.* ; import java.time.Instant ; import java.util.UUID ; import org.hibernate.annotations.CreationTimestamp ; import org.hibernate.annotations.UuidGenerator ; import org.hibernate.annotations.JdbcTypeCode ; import org.hibernate.type.SqlTypes ; @Entity @Table ( name = \"users\" ) public class User { @Id @UuidGenerator // generates java.util.UUID in the app (no DB round-trip) @JdbcTypeCode ( SqlTypes . BINARY ) // map UUID -> BINARY(16) @Column ( name = \"id\" , columnDefinition = \"BINARY(16)\" ) private UUID id ; @Column ( nullable = false ) private String name ; @CreationTimestamp @Column ( name = \"created_at\" , nullable = false , updatable = false ) private Instant createdAt ; // getters/setters ... } If your Hibernate exposes a time-ordered style, you can do @UuidGenerator(style = UuidGenerator.Style.TIME) to reduce index fragmentation vs random v4. 3) Spring/JPA settings (example) \u00b6 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect spring.jpa.hibernate.ddl-auto = none # or update/create at your own risk spring.jpa.properties.hibernate.jdbc.batch_size = 50 4) Using it \u00b6 User u = new User (); u . setName ( \"Alice\" ); userRepository . save ( u ); // Hibernate generates UUID in-memory and sends as 16 bytes System . out . println ( u . getId ()); // you already have the ID before insert 5) Handy SQL when querying manually \u00b6 -- Find by a textual UUID SELECT id , name , created_at FROM users WHERE id = UUID_TO_BIN ( '550e8400-e29b-41d4-a716-446655440000' ); -- See the UUIDs in text form (thanks to the generated column) SELECT uuid_txt , name , created_at FROM users ; Notes & options \u00b6 Why BINARY(16) ? 2\u00d7 smaller than CHAR(36) , faster indexes. Time-ordered UUIDs: Random v4 UUIDs fragment B-trees. Prefer v7 (time-ordered) if possible: Generate UUIDv7 in your code (library) and assign it to id before save() , or Use a Hibernate generator with a time-ordered style if your version supports it. MySQL\u2019s UUID_TO_BIN(..., 1) trick: When you generate IDs in SQL (not here), using UUID_TO_BIN(uuid, 1) stores bytes in a time-friendly order. If you go that route, be consistent and also read with BIN_TO_UUID(id, 1) . With Hibernate generating IDs as Java UUID , you typically stick to the straightforward mapping above (no swap flag). FAQs: UUID vs SEQUENCE vs IDENTITY \u00b6 1) When to pick UUID / GUID (Hibernate 6) \u00b6 Choose a UUID/GUID primary key when one or more of these are true: You need to generate IDs outside the DB (e.g., in services, message producers, offline/mobile clients) and later upsert/merge in the DB. You have multiple writer nodes / multi-region and want globally unique IDs without coordinating with the DB first. You want to avoid an extra DB round-trip per ID assignment (helpful when using IDENTITY , or when you don\u2019t want to call a sequence). You want stable IDs before persistence (useful for building relationships in memory, emitting events, logs, URLs, etc.). You\u2019re using an event-driven or CQRS setup and need IDs as soon as aggregates are created. Trade-offs \u00b6 Pros: globally unique across services, no DB trip to get an ID, easy replication/sharding, IDs exist before insert. Cons: bigger indexes; random UUIDs (v4) fragment B-trees and bloat indexes. Prefer time-ordered IDs (UUIDv7, v1, ULID-style) to keep inserts mostly append-only and indexes tighter. Practical mapping tips \u00b6 PostgreSQL: use uuid column type. MySQL/MariaDB: use BINARY(16) and store packed UUIDs (don\u2019t store as 36-char strings). SQL Server: UNIQUEIDENTIFIER . Oracle: RAW(16) . Hibernate 6 examples: // Postgres-friendly @Id @org.hibernate.annotations.UuidGenerator // Hibernate 6 @org.hibernate.annotations.JdbcTypeCode ( org . hibernate . type . SqlTypes . UUID ) @Column ( columnDefinition = \"uuid\" ) private java . util . UUID id ; // MySQL-friendly (packed) @Id @org.hibernate.annotations.UuidGenerator @org.hibernate.annotations.JdbcTypeCode ( org . hibernate . type . SqlTypes . BINARY ) @Column ( columnDefinition = \"BINARY(16)\" ) private java . util . UUID id ; (If your Hibernate version exposes a \u201ctime\u201d style for the generator, use it to get time-ordered UUIDs.) 2) \u201cIf we can pre-order IDs with SEQUENCE, why do we need IDENTITY? Can we pre-fetch 50 and use them one by one?\u201d \u00b6 Yes, you can pre-fetch and reuse \u00b6 With GenerationType.SEQUENCE plus @SequenceGenerator(allocationSize = 50) , Hibernate will fetch a block of 50 IDs from the DB sequence and cache them in memory . It then consumes those IDs: for batched inserts , or for individual inserts over time , until the block is exhausted , then it fetches the next block automatically. This is not limited to a single \u201cbatch operation\u201d. It\u2019s a pool that gets used as your app persists entities. Note you may see gaps (e.g., app restarts with unused IDs in the block). @Id @SequenceGenerator ( name = \"user_seq\" , sequenceName = \"user_id_seq\" , allocationSize = 50 // prefetch 50 at a time ) @GeneratedValue ( strategy = GenerationType . SEQUENCE , generator = \"user_seq\" ) private Long id ; So\u2026 why use IDENTITY at all? \u00b6 IDENTITY remains common because: Database choice / legacy: MySQL and SQL Server schemas traditionally rely on identity/auto-increment. Many shops, tools, and DBAs default to it. Simplicity: No separate sequence object to manage. One column with AUTO_INCREMENT / IDENTITY . Existing systems & tooling: ETL, ORM defaults, migration scripts, audit triggers, etc., may expect identity columns. DB feature set: Some environments don\u2019t use sequences; identity is the \u201cnative\u201d and operationally familiar option. Downside: with IDENTITY , Hibernate learns the key after each insert, which weakens true JDBC insert batching. (That\u2019s exactly why sequences or UUIDs tend to perform better for heavy write loads.) Quick chooser \u00b6 High write throughput on Postgres/Oracle: SEQUENCE + allocationSize (pooled) + JDBC batching. Multi-service / offline ID generation / pre-persistence IDs: UUID (prefer time-ordered variants). Legacy MySQL/SQL Server or simplest ops: IDENTITY is fine; accept weaker batching. Maximum portability to odd DBs: TABLE (understand it\u2019s slower). Extra tips \u00b6 Don\u2019t rely on PK order for business sorting; use created_at or a business key. Expect gaps with any strategy (rollbacks, pooling, restarts). If you use UUIDs on MySQL, store as BINARY(16) and consider time-ordered UUIDs (e.g., v7) to reduce index fragmentation.","title":"ID Generation"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#id-generation-in-hibernate-summary","text":"Hibernate/JPA gives you several ways to generate primary keys. Each has different trade-offs depending on your database and performance needs . Here\u2019s the all-in-one master summary of Hibernate ID generation strategies (AUTO, SEQUENCE, IDENTITY, TABLE, UUID), including everything about batching, allocation, gaps, pros/cons, and when to use what.","title":"\ud83d\udd11 ID Generation in Hibernate (Summary)"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#1-generationtypeauto","text":"Meaning Hibernate chooses the best strategy for the underlying database. Behavior (typical) PostgreSQL / Oracle \u2192 SEQUENCE MySQL / MariaDB / SQL Server \u2192 IDENTITY If nothing else fits \u2192 TABLE Pros Very simple, portable, no DB-specific code. Cons Hibernate\u2019s choice may change when you switch DBs \u2192 unpredictable performance. Use when Portability > performance. Good for prototypes or apps that may switch DBs. @Id @GeneratedValue ( strategy = GenerationType . AUTO ) private Long id ;","title":"1. GenerationType.AUTO"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#2-generationtypesequence","text":"Meaning Use a database sequence object ( nextval in PostgreSQL, seq.NEXTVAL in Oracle). How it works Hibernate fetches IDs from the sequence. Can pre-fetch blocks of IDs ( allocationSize ). IDs are known before insert , so batching works well. Pros Best performance with JDBC batching. IDs assigned in memory before flush. Efficient for high-volume inserts. Cons Requires sequence object in DB (Hibernate can create one if allowed). With pooled allocation ( allocationSize > 1 ), gaps appear. Use when On PostgreSQL/Oracle (databases with strong sequence support). High-throughput insert-heavy workloads. Example @Id @SequenceGenerator ( name = \"user_seq_gen\" , sequenceName = \"user_id_seq\" , allocationSize = 50 // prefetch 50 IDs at a time ) @GeneratedValue ( strategy = GenerationType . SEQUENCE , generator = \"user_seq_gen\" ) private Long id ; SQL (PostgreSQL) CREATE SEQUENCE user_id_seq START WITH 1 INCREMENT BY 1 ;","title":"2. GenerationType.SEQUENCE"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#3-generationtypeidentity","text":"Meaning Use DB\u2019s auto-increment/identity column . The DB assigns IDs during INSERT . How it works Hibernate issues the INSERT . The DB generates the ID. Hibernate fetches it afterward. Pros Very simple. Fits MySQL / SQL Server defaults. No sequence object needed. Cons Hibernate doesn\u2019t know ID until after insert \u2192 batching is limited. Insert throughput lower than SEQUENCE. Use when On MySQL / SQL Server (legacy schemas). When simplicity matters more than insert performance. Example @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) private Long id ; DDL id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY ;","title":"3. GenerationType.IDENTITY"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#4-generationtypetable","text":"Meaning Use a special table as a pseudo-sequence. How it works Hibernate stores current value in a table ( hibernate_sequences or custom). Reads/updates the row to generate IDs. Pros Portable to any DB , even those without sequences or identity. Cons Slowest, requires extra table reads/writes. High contention under concurrency. Use when Extreme portability is needed. Rare in modern production apps. Example @Id @TableGenerator ( name = \"user_tbl_gen\" , table = \"id_generator\" , pkColumnName = \"gen_name\" , valueColumnName = \"gen_val\" , pkColumnValue = \"user_id\" , allocationSize = 50 ) @GeneratedValue ( strategy = GenerationType . TABLE , generator = \"user_tbl_gen\" ) private Long id ; SQL CREATE TABLE id_generator ( gen_name VARCHAR ( 64 ) PRIMARY KEY , gen_val BIGINT NOT NULL ); INSERT INTO id_generator ( gen_name , gen_val ) VALUES ( 'user_id' , 1 );","title":"4. GenerationType.TABLE"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#5-uuid-guid-hibernate-specific","text":"Meaning Use UUID (128-bit identifier) instead of numeric IDs. How it works Hibernate (6+) can generate UUIDs in the app ( @UuidGenerator ). Stored as BINARY(16) (compact) or CHAR(36) (readable) in DB. Pros Globally unique \u2014 good for distributed systems. IDs generated without DB round-trip . Known before persist \u2014 useful for references/events. Cons Larger (16 bytes vs 8). Random UUIDs fragment B-trees \u2192 prefer time-ordered UUIDs (v7/ULID) . Harder to debug than numbers. Use when You need distributed ID generation across multiple services/nodes. You want IDs before hitting the DB. Microservices, offline clients, event-driven systems. Example (MySQL, compact storage) @Id @UuidGenerator @JdbcTypeCode ( SqlTypes . BINARY ) // store UUID in 16 bytes @Column ( columnDefinition = \"BINARY(16)\" ) private UUID id ; DDL CREATE TABLE users ( id BINARY ( 16 ) NOT NULL PRIMARY KEY , name VARCHAR ( 100 ) NOT NULL , uuid_txt CHAR ( 36 ) AS ( BIN_TO_UUID ( id )) STORED );","title":"5. UUID / GUID (Hibernate-specific)"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#key-cross-cutting-concepts","text":"","title":"\u2699\ufe0f Key Cross-Cutting Concepts"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#batching","text":"JDBC batching = send multiple inserts in one round trip. Best with SEQUENCE (IDs known up front). Limited with IDENTITY (IDs only known after insert). Enable in Hibernate: hibernate.jdbc.batch_size = 50","title":"\ud83d\udd04 Batching"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#allocation-prefetching","text":"With SEQUENCE and TABLE , Hibernate can fetch blocks of IDs using allocationSize . Example: allocationSize=50 \u2192 Hibernate grabs 50 IDs and consumes them gradually. Benefits: fewer DB calls, better batching. Downsides: gaps if app crashes or restarts.","title":"\ud83d\udce6 Allocation / Prefetching"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#gaps","text":"All strategies may produce gaps: Rollbacks Crashes Pooled allocations Don\u2019t use IDs as business order \u2014 always add a created_at column.","title":"\u26a0\ufe0f Gaps"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#when-to-use-what-cheat-sheet","text":"Strategy Best Fit Pros Cons AUTO Portability Easiest, automatic choice Unpredictable per DB SEQUENCE PostgreSQL / Oracle Best batching, performance, pre-fetch Needs sequence object, gaps IDENTITY MySQL / SQL Server (legacy schemas) Simple, DB-native Weak batching, slower inserts TABLE Exotic DBs, portability needed Works everywhere Slow, contention-heavy UUID Distributed / microservices / offline Global uniqueness, no DB round-trip Larger index, may fragment","title":"\u2705 When to Use What (Cheat Sheet)"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#quick-rules-of-thumb","text":"High throughput inserts (Postgres/Oracle) \u2192 SEQUENCE + batching. MySQL/SQL Server legacy \u2192 IDENTITY . Distributed/microservices \u2192 UUID (prefer time-ordered). Extreme portability \u2192 TABLE . Don\u2019t care / just starting \u2192 AUTO . \u2705 In short: Use SEQUENCE when you can (best batching). Use IDENTITY if schema/DB requires it. Use UUID if you need IDs outside the DB or in distributed systems. Expect gaps with any method. Never use PK for business ordering \u2192 add timestamps.","title":"\ud83d\ude80 Quick Rules of Thumb"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#mysql","text":"","title":"MySQL"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#uuid-primary-keys-compact-binary16-storage","text":"When using UUIDs as primary keys in MySQL, storing them as CHAR(36) strings is common but inefficient. A better approach is to store them in a compact binary format using BINARY(16) . This reduces storage space and improves index performance. Here\u2019s a tiny, end-to-end example of UUID primary keys on MySQL , stored compactly as BINARY(16) and generated in the app with Hibernate 6.","title":"UUID Primary Keys (Compact BINARY(16) Storage)"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#1-mysql-table-compact-pk-easy-to-read-helper","text":"CREATE TABLE users ( id BINARY ( 16 ) NOT NULL PRIMARY KEY , -- packed UUID name VARCHAR ( 100 ) NOT NULL , created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP , -- Optional: human-readable mirror (handy for ad-hoc queries) uuid_txt CHAR ( 36 ) AS ( BIN_TO_UUID ( id )) STORED ) ENGINE = InnoDB ; You don\u2019t have to keep uuid_txt \u2014it\u2019s just convenient. The real PK is BINARY(16) .","title":"1) MySQL table (compact PK + easy-to-read helper)"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#2-hibernatejpa-entity-hibernate-6","text":"import jakarta.persistence.* ; import java.time.Instant ; import java.util.UUID ; import org.hibernate.annotations.CreationTimestamp ; import org.hibernate.annotations.UuidGenerator ; import org.hibernate.annotations.JdbcTypeCode ; import org.hibernate.type.SqlTypes ; @Entity @Table ( name = \"users\" ) public class User { @Id @UuidGenerator // generates java.util.UUID in the app (no DB round-trip) @JdbcTypeCode ( SqlTypes . BINARY ) // map UUID -> BINARY(16) @Column ( name = \"id\" , columnDefinition = \"BINARY(16)\" ) private UUID id ; @Column ( nullable = false ) private String name ; @CreationTimestamp @Column ( name = \"created_at\" , nullable = false , updatable = false ) private Instant createdAt ; // getters/setters ... } If your Hibernate exposes a time-ordered style, you can do @UuidGenerator(style = UuidGenerator.Style.TIME) to reduce index fragmentation vs random v4.","title":"2) Hibernate/JPA entity (Hibernate 6)"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#3-springjpa-settings-example","text":"spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect spring.jpa.hibernate.ddl-auto = none # or update/create at your own risk spring.jpa.properties.hibernate.jdbc.batch_size = 50","title":"3) Spring/JPA settings (example)"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#4-using-it","text":"User u = new User (); u . setName ( \"Alice\" ); userRepository . save ( u ); // Hibernate generates UUID in-memory and sends as 16 bytes System . out . println ( u . getId ()); // you already have the ID before insert","title":"4) Using it"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#5-handy-sql-when-querying-manually","text":"-- Find by a textual UUID SELECT id , name , created_at FROM users WHERE id = UUID_TO_BIN ( '550e8400-e29b-41d4-a716-446655440000' ); -- See the UUIDs in text form (thanks to the generated column) SELECT uuid_txt , name , created_at FROM users ;","title":"5) Handy SQL when querying manually"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#notes-options","text":"Why BINARY(16) ? 2\u00d7 smaller than CHAR(36) , faster indexes. Time-ordered UUIDs: Random v4 UUIDs fragment B-trees. Prefer v7 (time-ordered) if possible: Generate UUIDv7 in your code (library) and assign it to id before save() , or Use a Hibernate generator with a time-ordered style if your version supports it. MySQL\u2019s UUID_TO_BIN(..., 1) trick: When you generate IDs in SQL (not here), using UUID_TO_BIN(uuid, 1) stores bytes in a time-friendly order. If you go that route, be consistent and also read with BIN_TO_UUID(id, 1) . With Hibernate generating IDs as Java UUID , you typically stick to the straightforward mapping above (no swap flag).","title":"Notes &amp; options"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#faqs-uuid-vs-sequence-vs-identity","text":"","title":"FAQs: UUID vs SEQUENCE vs IDENTITY"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#1-when-to-pick-uuid-guid-hibernate-6","text":"Choose a UUID/GUID primary key when one or more of these are true: You need to generate IDs outside the DB (e.g., in services, message producers, offline/mobile clients) and later upsert/merge in the DB. You have multiple writer nodes / multi-region and want globally unique IDs without coordinating with the DB first. You want to avoid an extra DB round-trip per ID assignment (helpful when using IDENTITY , or when you don\u2019t want to call a sequence). You want stable IDs before persistence (useful for building relationships in memory, emitting events, logs, URLs, etc.). You\u2019re using an event-driven or CQRS setup and need IDs as soon as aggregates are created.","title":"1) When to pick UUID / GUID (Hibernate 6)"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#trade-offs","text":"Pros: globally unique across services, no DB trip to get an ID, easy replication/sharding, IDs exist before insert. Cons: bigger indexes; random UUIDs (v4) fragment B-trees and bloat indexes. Prefer time-ordered IDs (UUIDv7, v1, ULID-style) to keep inserts mostly append-only and indexes tighter.","title":"Trade-offs"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#practical-mapping-tips","text":"PostgreSQL: use uuid column type. MySQL/MariaDB: use BINARY(16) and store packed UUIDs (don\u2019t store as 36-char strings). SQL Server: UNIQUEIDENTIFIER . Oracle: RAW(16) . Hibernate 6 examples: // Postgres-friendly @Id @org.hibernate.annotations.UuidGenerator // Hibernate 6 @org.hibernate.annotations.JdbcTypeCode ( org . hibernate . type . SqlTypes . UUID ) @Column ( columnDefinition = \"uuid\" ) private java . util . UUID id ; // MySQL-friendly (packed) @Id @org.hibernate.annotations.UuidGenerator @org.hibernate.annotations.JdbcTypeCode ( org . hibernate . type . SqlTypes . BINARY ) @Column ( columnDefinition = \"BINARY(16)\" ) private java . util . UUID id ; (If your Hibernate version exposes a \u201ctime\u201d style for the generator, use it to get time-ordered UUIDs.)","title":"Practical mapping tips"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#2-if-we-can-pre-order-ids-with-sequence-why-do-we-need-identity-can-we-pre-fetch-50-and-use-them-one-by-one","text":"","title":"2) \u201cIf we can pre-order IDs with SEQUENCE, why do we need IDENTITY? Can we pre-fetch 50 and use them one by one?\u201d"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#yes-you-can-pre-fetch-and-reuse","text":"With GenerationType.SEQUENCE plus @SequenceGenerator(allocationSize = 50) , Hibernate will fetch a block of 50 IDs from the DB sequence and cache them in memory . It then consumes those IDs: for batched inserts , or for individual inserts over time , until the block is exhausted , then it fetches the next block automatically. This is not limited to a single \u201cbatch operation\u201d. It\u2019s a pool that gets used as your app persists entities. Note you may see gaps (e.g., app restarts with unused IDs in the block). @Id @SequenceGenerator ( name = \"user_seq\" , sequenceName = \"user_id_seq\" , allocationSize = 50 // prefetch 50 at a time ) @GeneratedValue ( strategy = GenerationType . SEQUENCE , generator = \"user_seq\" ) private Long id ;","title":"Yes, you can pre-fetch and reuse"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#so-why-use-identity-at-all","text":"IDENTITY remains common because: Database choice / legacy: MySQL and SQL Server schemas traditionally rely on identity/auto-increment. Many shops, tools, and DBAs default to it. Simplicity: No separate sequence object to manage. One column with AUTO_INCREMENT / IDENTITY . Existing systems & tooling: ETL, ORM defaults, migration scripts, audit triggers, etc., may expect identity columns. DB feature set: Some environments don\u2019t use sequences; identity is the \u201cnative\u201d and operationally familiar option. Downside: with IDENTITY , Hibernate learns the key after each insert, which weakens true JDBC insert batching. (That\u2019s exactly why sequences or UUIDs tend to perform better for heavy write loads.)","title":"So\u2026 why use IDENTITY at all?"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#quick-chooser","text":"High write throughput on Postgres/Oracle: SEQUENCE + allocationSize (pooled) + JDBC batching. Multi-service / offline ID generation / pre-persistence IDs: UUID (prefer time-ordered variants). Legacy MySQL/SQL Server or simplest ops: IDENTITY is fine; accept weaker batching. Maximum portability to odd DBs: TABLE (understand it\u2019s slower).","title":"Quick chooser"},{"location":"cheatsheets/languages/java/spring/annotations/database/id-generation%20/#extra-tips","text":"Don\u2019t rely on PK order for business sorting; use created_at or a business key. Expect gaps with any strategy (rollbacks, pooling, restarts). If you use UUIDs on MySQL, store as BINARY(16) and consider time-ordered UUIDs (e.g., v7) to reduce index fragmentation.","title":"Extra tips"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/","text":"\ud83d\udea6 Controllers & Request Mapping \u2014 The Practical Map \u00b6 0) Stereotypes (what the class is) \u00b6 @Controller // Returns views (templates); methods default to view names. @RestController // = @Controller + @ResponseBody on every method (JSON by default). Use @RestController for APIs. If you need both views and JSON in one class, stick to @Controller and annotate JSON methods with @ResponseBody . 1) Mapping annotations (what path/verb hits the method) \u00b6 The base: @RequestMapping ( path = \"/users\" , // or \"value\" method = GET , // or multiple: {GET, HEAD} consumes = \"application/json\" , produces = \"application/json\" , params = \"active=true\" , // require or negate (e.g., \"!debug\") headers = \"X-Api-Version=1\" // same idea for headers ) Composed, ergonomic variants (internally @RequestMapping(method=...) ): @GetMapping ( \"/users/{id}\" ) // GET @PostMapping ( \"/users\" ) // POST @PutMapping ( \"/users/{id}\" ) // PUT @PatchMapping ( \"/users/{id}\" ) // PATCH @DeleteMapping ( \"/users/{id}\" ) // DELETE Class + method composition: @RestController @RequestMapping ( \"/v1/users\" ) // base path, base produces/consumes can live here class UserApi { @GetMapping ( \"/{id}\" ) // \u2192 /v1/users/{id} UserDto get ( @PathVariable long id ) { ... } @PostMapping ( consumes = \"application/json\" ) UserDto create ( @RequestBody CreateUser dto ) { ... } } 2) Mapping attributes \u2014 quick semantics \u00b6 Attribute Where What it does Example path / value class/method URL template(s) \"/orders/{id}\" , {\"\",\"/list\"} method method or @RequestMapping HTTP verb(s) {GET, HEAD} consumes method/class Require content type of request \"application/json\" , \"multipart/form-data\" produces method/class Content type of response \"application/json\" , \"text/csv\" params method/class Require/forbid query param(s) \"mode=debug\" , \"!page\" headers method/class Require/forbid header(s) \"X-Auth-Token\" Notes produces participates in content negotiation ; Spring also checks Accept header. params/headers are underrated: use them to separate HTML vs JSON for same path if needed. 3) Bind incoming data (arguments you\u2019ll actually use) \u00b6 @PathVariable Long id // /items/{id} @RequestParam Integer page // ?page=2 (query or form) @RequestParam ( defaultValue = \"20\" ) int size @RequestHeader ( \"X-Trace\" ) String traceId @CookieValue ( \"sid\" ) String session @RequestBody OrderCreate dto // JSON/XML/etc. @ModelAttribute Filter f // group simple params into a bean (query/form) @RequestPart ( \"file\" ) MultipartFile f // explicit part name in multipart For full details, see your binding/ cheatsheets, but this table helps decide fast: You have\u2026 Use Example Identifier in the path @PathVariable /users/{id} Filter/sort/toggle @RequestParam ?active=true&page=2 Headers/cookies @RequestHeader / @CookieValue X-Trace , sid JSON body @RequestBody POST {\u2026} Many simple params as one bean @ModelAttribute Filter{q,page,size} Multipart upload @RequestParam MultipartFile / @RequestPart file forms 4) Return types (what you send back) \u00b6 // JSON (in @RestController this is default): UserDto // body is the object, status 200 ResponseEntity < UserDto > // control status/headers/body void // often with 204 or set via @ResponseStatus String // in @Controller \u2192 view name; in @RestController \u2192 plain text Helpful extras: @ResponseStatus ( HttpStatus . CREATED ) @PostMapping ( \"/users\" ) UserDto create ( @RequestBody CreateUser dto ) { ... } @GetMapping ( \"/health\" ) ResponseEntity < Void > ok () { return ResponseEntity . noContent (). build (); } 5) Cross-cutting web annotations that matter \u00b6 @CrossOrigin ( origins = \"https://app.example.com\" ) // CORS at method/class level @ExceptionHandler ( MyAppException . class ) // handle errors in this controller @ControllerAdvice // global error/advice across controllers @InitBinder // register binders/validators for params Prefer a global @RestControllerAdvice with typed handlers to shape your API errors. 6) Practical recipes \u00b6 A) CRUD slice with good defaults @RestController @RequestMapping ( path = \"/v1/items\" , produces = \"application/json\" ) class ItemsApi { @GetMapping ( \"/{id}\" ) ItemDto one ( @PathVariable long id ) { ... } @GetMapping PageDto < ItemDto > list ( @RequestParam ( defaultValue = \"1\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size , @RequestParam ( required = false ) String q ) { ... } @PostMapping ( consumes = \"application/json\" ) @ResponseStatus ( HttpStatus . CREATED ) ItemDto create ( @RequestBody CreateItem dto ) { ... } @PutMapping ( path = \"/{id}\" , consumes = \"application/json\" ) ItemDto replace ( @PathVariable long id , @RequestBody UpdateItem dto ) { ... } @DeleteMapping ( \"/{id}\" ) @ResponseStatus ( HttpStatus . NO_CONTENT ) void delete ( @PathVariable long id ) { ... } } B) Same path, different produces (HTML vs JSON) @Controller @RequestMapping ( \"/reports\" ) class Reports { @GetMapping ( produces = \"text/html\" ) String page ( Model m ) { /* put attrs \u2192 m */ return \"reports\" ; } @GetMapping ( produces = \"application/json\" ) @ResponseBody List < ReportDto > api () { ... } } C) Distinguish by params (classic) @GetMapping ( value = \"/search\" , params = \"mode=fast\" ) List < Result > fast ( @RequestParam String q ) { ... } @GetMapping ( value = \"/search\" , params = \"mode=deep\" ) List < Result > deep ( @RequestParam String q , @RequestParam int limit ) { ... } D) Multipart form (file + fields) @PostMapping ( path = \"/avatar\" , consumes = MediaType . MULTIPART_FORM_DATA_VALUE ) void upload ( @RequestParam ( \"file\" ) MultipartFile file , @RequestParam ( required = false ) String note ) { ... } 7) Matching engine, paths & regex \u00b6 Modern Spring (Boot 2.6+/3+) favors PathPatternParser (fast, precise). Catch-all: /{*path} Regex per segment: \"/tickets/{num:\\\\d+}\" Legacy Ant engine: Catch-all: /{path:**} Avoid \u201csuffix pattern matching\u201d; keep dots ( . ) safe for names like report.pdf . 8) WebFlux notes (if you\u2019re reactive) \u00b6 Same annotations and attributes. Return types are Mono<T> / Flux<T> (or ServerSentEvent<T> for SSE). ResponseEntity<Mono<T>> is valid, but idiomatic is Mono<ResponseEntity<T>> . 9) Error taxonomy you\u2019ll see \u00b6 Situation Exception Typical HTTP No route matched NoHandlerFoundException (if enabled) 404 Missing path var/param MissingPathVariableException / MissingServletRequestParameterException 400/500 Type conversion fail MethodArgumentTypeMismatchException 400 Unsupported media type HttpMediaTypeNotSupportedException 415 Not acceptable (produces) HttpMediaTypeNotAcceptableException 406 Centralize via: @RestControllerAdvice class ApiErrors { @ExceptionHandler ( MethodArgumentTypeMismatchException . class ) @ResponseStatus ( HttpStatus . BAD_REQUEST ) ErrorDto badArg ( Exception e ) { return new ErrorDto ( \"BAD_REQUEST\" , e . getMessage ()); } } 10) Gotchas checklist (the foot-guns) \u00b6 Expecting CSV auto-split in @RequestParam \u2192 won\u2019t happen ; either repeat keys or split yourself. Using @RequestParam for JSON bodies \u2192 use @RequestBody . Optional primitives ( int , boolean ) \u2192 can\u2019t be null. Use wrappers or defaults. Multiple mappings that collide (same path/verb/produces) \u2192 ambiguous mapping error. Forgetting produces while returning non-JSON in a @RestController \u2192 set it explicitly (e.g., CSV). Mixed engines (Ant vs PathPattern) \u2192 catch-all syntax differs; be consistent project-wide. 11) Ultra-compact reference tables \u00b6 A) Mapping annotations Annotation Verb Notes @RequestMapping any Full control over attributes @GetMapping GET Idempotent retrieval @PostMapping POST Create/commands @PutMapping PUT Replace resource @PatchMapping PATCH Partial update @DeleteMapping DELETE Remove resource @RequestMapping(name=...) \u2014 Optional logical name B) Common attributes Attribute Accepts Works with path / value String/String[] all method RequestMethod[] @RequestMapping consumes MediaType(s) all produces MediaType(s) all params String[] all headers String[] all Folder placement (fits your structure) \u00b6 cheatsheets/frameworks/spring/web/ \u251c\u2500 controllers-and-mapping.md # \u2190 this file \u251c\u2500 binding/ # @PathVariable / @RequestParam / @RequestBody / overview \u2514\u2500 routing/ # (optional later) path patterns, CORS, interceptors Mental model to keep handy: Map who/where with @RequestMapping / @*Mapping , bring data in with binding annotations, shape the response with a return type or ResponseEntity , and centralize errors with @RestControllerAdvice .","title":"Spring Controller Annotations & Mapping"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#controllers-request-mapping-the-practical-map","text":"","title":"\ud83d\udea6 Controllers &amp; Request Mapping \u2014 The Practical Map"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#0-stereotypes-what-the-class-is","text":"@Controller // Returns views (templates); methods default to view names. @RestController // = @Controller + @ResponseBody on every method (JSON by default). Use @RestController for APIs. If you need both views and JSON in one class, stick to @Controller and annotate JSON methods with @ResponseBody .","title":"0) Stereotypes (what the class is)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#1-mapping-annotations-what-pathverb-hits-the-method","text":"The base: @RequestMapping ( path = \"/users\" , // or \"value\" method = GET , // or multiple: {GET, HEAD} consumes = \"application/json\" , produces = \"application/json\" , params = \"active=true\" , // require or negate (e.g., \"!debug\") headers = \"X-Api-Version=1\" // same idea for headers ) Composed, ergonomic variants (internally @RequestMapping(method=...) ): @GetMapping ( \"/users/{id}\" ) // GET @PostMapping ( \"/users\" ) // POST @PutMapping ( \"/users/{id}\" ) // PUT @PatchMapping ( \"/users/{id}\" ) // PATCH @DeleteMapping ( \"/users/{id}\" ) // DELETE Class + method composition: @RestController @RequestMapping ( \"/v1/users\" ) // base path, base produces/consumes can live here class UserApi { @GetMapping ( \"/{id}\" ) // \u2192 /v1/users/{id} UserDto get ( @PathVariable long id ) { ... } @PostMapping ( consumes = \"application/json\" ) UserDto create ( @RequestBody CreateUser dto ) { ... } }","title":"1) Mapping annotations (what path/verb hits the method)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#2-mapping-attributes-quick-semantics","text":"Attribute Where What it does Example path / value class/method URL template(s) \"/orders/{id}\" , {\"\",\"/list\"} method method or @RequestMapping HTTP verb(s) {GET, HEAD} consumes method/class Require content type of request \"application/json\" , \"multipart/form-data\" produces method/class Content type of response \"application/json\" , \"text/csv\" params method/class Require/forbid query param(s) \"mode=debug\" , \"!page\" headers method/class Require/forbid header(s) \"X-Auth-Token\" Notes produces participates in content negotiation ; Spring also checks Accept header. params/headers are underrated: use them to separate HTML vs JSON for same path if needed.","title":"2) Mapping attributes \u2014 quick semantics"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#3-bind-incoming-data-arguments-youll-actually-use","text":"@PathVariable Long id // /items/{id} @RequestParam Integer page // ?page=2 (query or form) @RequestParam ( defaultValue = \"20\" ) int size @RequestHeader ( \"X-Trace\" ) String traceId @CookieValue ( \"sid\" ) String session @RequestBody OrderCreate dto // JSON/XML/etc. @ModelAttribute Filter f // group simple params into a bean (query/form) @RequestPart ( \"file\" ) MultipartFile f // explicit part name in multipart For full details, see your binding/ cheatsheets, but this table helps decide fast: You have\u2026 Use Example Identifier in the path @PathVariable /users/{id} Filter/sort/toggle @RequestParam ?active=true&page=2 Headers/cookies @RequestHeader / @CookieValue X-Trace , sid JSON body @RequestBody POST {\u2026} Many simple params as one bean @ModelAttribute Filter{q,page,size} Multipart upload @RequestParam MultipartFile / @RequestPart file forms","title":"3) Bind incoming data (arguments you\u2019ll actually use)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#4-return-types-what-you-send-back","text":"// JSON (in @RestController this is default): UserDto // body is the object, status 200 ResponseEntity < UserDto > // control status/headers/body void // often with 204 or set via @ResponseStatus String // in @Controller \u2192 view name; in @RestController \u2192 plain text Helpful extras: @ResponseStatus ( HttpStatus . CREATED ) @PostMapping ( \"/users\" ) UserDto create ( @RequestBody CreateUser dto ) { ... } @GetMapping ( \"/health\" ) ResponseEntity < Void > ok () { return ResponseEntity . noContent (). build (); }","title":"4) Return types (what you send back)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#5-cross-cutting-web-annotations-that-matter","text":"@CrossOrigin ( origins = \"https://app.example.com\" ) // CORS at method/class level @ExceptionHandler ( MyAppException . class ) // handle errors in this controller @ControllerAdvice // global error/advice across controllers @InitBinder // register binders/validators for params Prefer a global @RestControllerAdvice with typed handlers to shape your API errors.","title":"5) Cross-cutting web annotations that matter"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#6-practical-recipes","text":"A) CRUD slice with good defaults @RestController @RequestMapping ( path = \"/v1/items\" , produces = \"application/json\" ) class ItemsApi { @GetMapping ( \"/{id}\" ) ItemDto one ( @PathVariable long id ) { ... } @GetMapping PageDto < ItemDto > list ( @RequestParam ( defaultValue = \"1\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size , @RequestParam ( required = false ) String q ) { ... } @PostMapping ( consumes = \"application/json\" ) @ResponseStatus ( HttpStatus . CREATED ) ItemDto create ( @RequestBody CreateItem dto ) { ... } @PutMapping ( path = \"/{id}\" , consumes = \"application/json\" ) ItemDto replace ( @PathVariable long id , @RequestBody UpdateItem dto ) { ... } @DeleteMapping ( \"/{id}\" ) @ResponseStatus ( HttpStatus . NO_CONTENT ) void delete ( @PathVariable long id ) { ... } } B) Same path, different produces (HTML vs JSON) @Controller @RequestMapping ( \"/reports\" ) class Reports { @GetMapping ( produces = \"text/html\" ) String page ( Model m ) { /* put attrs \u2192 m */ return \"reports\" ; } @GetMapping ( produces = \"application/json\" ) @ResponseBody List < ReportDto > api () { ... } } C) Distinguish by params (classic) @GetMapping ( value = \"/search\" , params = \"mode=fast\" ) List < Result > fast ( @RequestParam String q ) { ... } @GetMapping ( value = \"/search\" , params = \"mode=deep\" ) List < Result > deep ( @RequestParam String q , @RequestParam int limit ) { ... } D) Multipart form (file + fields) @PostMapping ( path = \"/avatar\" , consumes = MediaType . MULTIPART_FORM_DATA_VALUE ) void upload ( @RequestParam ( \"file\" ) MultipartFile file , @RequestParam ( required = false ) String note ) { ... }","title":"6) Practical recipes"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#7-matching-engine-paths-regex","text":"Modern Spring (Boot 2.6+/3+) favors PathPatternParser (fast, precise). Catch-all: /{*path} Regex per segment: \"/tickets/{num:\\\\d+}\" Legacy Ant engine: Catch-all: /{path:**} Avoid \u201csuffix pattern matching\u201d; keep dots ( . ) safe for names like report.pdf .","title":"7) Matching engine, paths &amp; regex"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#8-webflux-notes-if-youre-reactive","text":"Same annotations and attributes. Return types are Mono<T> / Flux<T> (or ServerSentEvent<T> for SSE). ResponseEntity<Mono<T>> is valid, but idiomatic is Mono<ResponseEntity<T>> .","title":"8) WebFlux notes (if you\u2019re reactive)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#9-error-taxonomy-youll-see","text":"Situation Exception Typical HTTP No route matched NoHandlerFoundException (if enabled) 404 Missing path var/param MissingPathVariableException / MissingServletRequestParameterException 400/500 Type conversion fail MethodArgumentTypeMismatchException 400 Unsupported media type HttpMediaTypeNotSupportedException 415 Not acceptable (produces) HttpMediaTypeNotAcceptableException 406 Centralize via: @RestControllerAdvice class ApiErrors { @ExceptionHandler ( MethodArgumentTypeMismatchException . class ) @ResponseStatus ( HttpStatus . BAD_REQUEST ) ErrorDto badArg ( Exception e ) { return new ErrorDto ( \"BAD_REQUEST\" , e . getMessage ()); } }","title":"9) Error taxonomy you\u2019ll see"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#10-gotchas-checklist-the-foot-guns","text":"Expecting CSV auto-split in @RequestParam \u2192 won\u2019t happen ; either repeat keys or split yourself. Using @RequestParam for JSON bodies \u2192 use @RequestBody . Optional primitives ( int , boolean ) \u2192 can\u2019t be null. Use wrappers or defaults. Multiple mappings that collide (same path/verb/produces) \u2192 ambiguous mapping error. Forgetting produces while returning non-JSON in a @RestController \u2192 set it explicitly (e.g., CSV). Mixed engines (Ant vs PathPattern) \u2192 catch-all syntax differs; be consistent project-wide.","title":"10) Gotchas checklist (the foot-guns)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#11-ultra-compact-reference-tables","text":"A) Mapping annotations Annotation Verb Notes @RequestMapping any Full control over attributes @GetMapping GET Idempotent retrieval @PostMapping POST Create/commands @PutMapping PUT Replace resource @PatchMapping PATCH Partial update @DeleteMapping DELETE Remove resource @RequestMapping(name=...) \u2014 Optional logical name B) Common attributes Attribute Accepts Works with path / value String/String[] all method RequestMethod[] @RequestMapping consumes MediaType(s) all produces MediaType(s) all params String[] all headers String[] all","title":"11) Ultra-compact reference tables"},{"location":"cheatsheets/languages/java/spring/annotations/rest/controllers-and-mapping/#folder-placement-fits-your-structure","text":"cheatsheets/frameworks/spring/web/ \u251c\u2500 controllers-and-mapping.md # \u2190 this file \u251c\u2500 binding/ # @PathVariable / @RequestParam / @RequestBody / overview \u2514\u2500 routing/ # (optional later) path patterns, CORS, interceptors Mental model to keep handy: Map who/where with @RequestMapping / @*Mapping , bring data in with binding annotations, shape the response with a return type or ResponseEntity , and centralize errors with @RestControllerAdvice .","title":"Folder placement (fits your structure)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/overview/","text":"\ud83c\udf10 Request Binding in Spring MVC \u00b6 When an HTTP request hits your controller, Spring must bind the incoming data \u2014 path, query, form, or JSON body \u2014 to your method parameters. There are three main \u201cdoors\u201d for that data: Layer Annotation Source Typical Example Identity @PathVariable Path segment /users/{id} Filters / form inputs @RequestParam Query string or form field /users?active=true&page=2 Payload @RequestBody Request body (JSON/XML) { \"name\": \"Ana\" } \ud83e\udde0 Mental Model \u2014 \u201cWhere does the data live?\u201d \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 HTTP REQUEST \u2502 \u2502 \u2502 \u2502 GET /users/42?active=true \u2502 \u2502 Body: { \"name\": \"Ana\" } \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Controller Method \u2502 \u2502 \u2502 \u2502 @PathVariable Long id \u2502 \u2190 /users/42 \u2502 @RequestParam Boolean active \u2502 \u2190 ?active=true \u2502 @RequestBody UserDto body \u2502 \u2190 JSON body \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2699\ufe0f Core Purposes \u00b6 Intent Use Example Identify a resource @PathVariable /users/{id} Filter, sort, paginate @RequestParam /users?active=true&page=2 Create or update data @RequestBody POST /users with {...} \ud83e\udde9 Engine Differences \u00b6 Annotation Bound from Conversion Engine Typical Content-Type @PathVariable URL template ConversionService text/plain (implicit) @RequestParam Query/form field ConversionService application/x-www-form-urlencoded , multipart/form-data @RequestBody Request body HttpMessageConverter (e.g., Jackson JSON) application/json , application/xml \u2696\ufe0f Comparison Summary \u00b6 Dimension @PathVariable @RequestParam @RequestBody Source URL segment Query string / form HTTP body When used Identify which resource Filter or adjust request Send or receive structured data Default scope Required Required (can default/optional) Required Type conversion String \u2192 simple type String \u2192 simple type JSON/XML \u2192 object Cache key relevance Yes (different URL = different resource) Yes (different query = different resource) No (body not used in cache key) Validation level Simple Simple Deep (object graph) Good for REST paths Filters, toggles, pagination DTOs for create/update Don\u2019t use for JSON bodies Complex objects Filters or identifiers \ud83d\udd0d Real-World Mapping Example \u00b6 POST /shops/7/orders?express=true Body: { \"item\": \"Book\", \"qty\": 3 } @PostMapping ( \"/shops/{shopId}/orders\" ) public OrderDto createOrder ( @PathVariable long shopId , // /shops/7 @RequestParam ( defaultValue = \"false\" ) boolean express , // ?express=true @RequestBody OrderCreateRequest body // { \"item\": \"Book\", \"qty\": 3 } ) { ... } \ud83e\udded Folder Placement \u00b6 cheatsheets/frameworks/spring/web/ \u2514\u2500 binding/ \u251c\u2500 overview.md # \u2190 this file \u251c\u2500 path-variable.md \u251c\u2500 request-param.md \u2514\u2500 request-body.md In MkDocs navigation: - Spring Web : - Binding (overview) : cheatsheets/frameworks/spring/web/binding/overview.md - PathVariable : cheatsheets/frameworks/spring/web/binding/path-variable.md - RequestParam : cheatsheets/frameworks/spring/web/binding/request-param.md - RequestBody : cheatsheets/frameworks/spring/web/binding/request-body.md \ud83e\ude9c Next Layers \u00b6 Once you master these three, your next frontier: @ModelAttribute \u2014 group multiple @RequestParam s into a validated object. @ResponseBody \u2014 the reverse: converting your method return value to JSON/XML. @MatrixVariable \u2014 niche but powerful for REST-like filtering in path segments. Bottom line: @PathVariable locates the thing, @RequestParam describes how to get it, @RequestBody tells what it is. Use this trinity as your mental compass for every REST endpoint you design.","title":"Request Binding Overview"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/overview/#request-binding-in-spring-mvc","text":"When an HTTP request hits your controller, Spring must bind the incoming data \u2014 path, query, form, or JSON body \u2014 to your method parameters. There are three main \u201cdoors\u201d for that data: Layer Annotation Source Typical Example Identity @PathVariable Path segment /users/{id} Filters / form inputs @RequestParam Query string or form field /users?active=true&page=2 Payload @RequestBody Request body (JSON/XML) { \"name\": \"Ana\" }","title":"\ud83c\udf10 Request Binding in Spring MVC"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/overview/#mental-model-where-does-the-data-live","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 HTTP REQUEST \u2502 \u2502 \u2502 \u2502 GET /users/42?active=true \u2502 \u2502 Body: { \"name\": \"Ana\" } \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Controller Method \u2502 \u2502 \u2502 \u2502 @PathVariable Long id \u2502 \u2190 /users/42 \u2502 @RequestParam Boolean active \u2502 \u2190 ?active=true \u2502 @RequestBody UserDto body \u2502 \u2190 JSON body \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"\ud83e\udde0 Mental Model \u2014 \u201cWhere does the data live?\u201d"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/overview/#core-purposes","text":"Intent Use Example Identify a resource @PathVariable /users/{id} Filter, sort, paginate @RequestParam /users?active=true&page=2 Create or update data @RequestBody POST /users with {...}","title":"\u2699\ufe0f Core Purposes"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/overview/#engine-differences","text":"Annotation Bound from Conversion Engine Typical Content-Type @PathVariable URL template ConversionService text/plain (implicit) @RequestParam Query/form field ConversionService application/x-www-form-urlencoded , multipart/form-data @RequestBody Request body HttpMessageConverter (e.g., Jackson JSON) application/json , application/xml","title":"\ud83e\udde9 Engine Differences"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/overview/#comparison-summary","text":"Dimension @PathVariable @RequestParam @RequestBody Source URL segment Query string / form HTTP body When used Identify which resource Filter or adjust request Send or receive structured data Default scope Required Required (can default/optional) Required Type conversion String \u2192 simple type String \u2192 simple type JSON/XML \u2192 object Cache key relevance Yes (different URL = different resource) Yes (different query = different resource) No (body not used in cache key) Validation level Simple Simple Deep (object graph) Good for REST paths Filters, toggles, pagination DTOs for create/update Don\u2019t use for JSON bodies Complex objects Filters or identifiers","title":"\u2696\ufe0f Comparison Summary"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/overview/#real-world-mapping-example","text":"POST /shops/7/orders?express=true Body: { \"item\": \"Book\", \"qty\": 3 } @PostMapping ( \"/shops/{shopId}/orders\" ) public OrderDto createOrder ( @PathVariable long shopId , // /shops/7 @RequestParam ( defaultValue = \"false\" ) boolean express , // ?express=true @RequestBody OrderCreateRequest body // { \"item\": \"Book\", \"qty\": 3 } ) { ... }","title":"\ud83d\udd0d Real-World Mapping Example"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/overview/#folder-placement","text":"cheatsheets/frameworks/spring/web/ \u2514\u2500 binding/ \u251c\u2500 overview.md # \u2190 this file \u251c\u2500 path-variable.md \u251c\u2500 request-param.md \u2514\u2500 request-body.md In MkDocs navigation: - Spring Web : - Binding (overview) : cheatsheets/frameworks/spring/web/binding/overview.md - PathVariable : cheatsheets/frameworks/spring/web/binding/path-variable.md - RequestParam : cheatsheets/frameworks/spring/web/binding/request-param.md - RequestBody : cheatsheets/frameworks/spring/web/binding/request-body.md","title":"\ud83e\udded Folder Placement"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/overview/#next-layers","text":"Once you master these three, your next frontier: @ModelAttribute \u2014 group multiple @RequestParam s into a validated object. @ResponseBody \u2014 the reverse: converting your method return value to JSON/XML. @MatrixVariable \u2014 niche but powerful for REST-like filtering in path segments. Bottom line: @PathVariable locates the thing, @RequestParam describes how to get it, @RequestBody tells what it is. Use this trinity as your mental compass for every REST endpoint you design.","title":"\ud83e\ude9c Next Layers"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/","text":"\ud83e\udded @PathVariable \u2014 URL Path Segments \u00b6 What it does: Binds URL template variables from the path to controller method parameters. Use it when the variable is part of the resource identity : /users/{id} , /shops/{shopId}/orders/{orderId} . For query filters or toggles, prefer @RequestParam . 1) Daily patterns \u00b6 // /users/42 @GetMapping ( \"/users/{id}\" ) public UserDto get ( @PathVariable long id ) { /* ... */ } // Multiple variables: /shops/7/orders/99 @GetMapping ( \"/shops/{shopId}/orders/{orderId}\" ) public OrderDto get ( @PathVariable long shopId , @PathVariable long orderId ) { /* ... */ } // Rename the variable: /files/2025-10/report.pdf @GetMapping ( \"/files/{fileName}\" ) public FileDto get ( @PathVariable ( \"fileName\" ) String name ) { /* ... */ } // Grab them all (debuggy): /echo/anything/here @GetMapping ( \"/echo/{x}/{y}\" ) public Map < String , String > echo ( @PathVariable Map < String , String > vars ) { return vars ; } 2) Type conversion (built-in + custom) \u00b6 Spring converts strings from the path via the ConversionService . Works out-of-the-box for: primitives/wrappers, UUID , enums, LocalDate/LocalDateTime , BigDecimal , etc. // /invoices/550e8400-e29b-41d4-a716-446655440000 @GetMapping ( \"/invoices/{id}\" ) public InvoiceDto get ( @PathVariable UUID id ) { /* ... */ } // Custom type @Component class SlugToProductId implements Converter < String , ProductId > { public ProductId convert ( String s ) { return ProductId . of ( s . toLowerCase ()); } } @GetMapping ( \"/products/{pid}\" ) public ProductDto get ( @PathVariable ProductId pid ) { /* ... */ } 3) Constraining with regex \u00b6 Lock paths down to valid shapes: // digits only: /users/123 @GetMapping ( \"/users/{id:\\\\d+}\" ) // year-month: /reports/2025-10 @GetMapping ( \"/reports/{ym:\\\\d{4}-\\\\d{2}}\" ) // enum-like set: /status/ACTIVE @GetMapping ( \"/status/{s:ACTIVE|SUSPENDED}\" ) Regex is per-segment (no slashes unless you use a catch-all\u2014see below). 4) Catch-all (include slashes) \u00b6 Sometimes you need \u201cthe rest of the path,\u201d e.g., serving files under a base. AntPathMatcher style (older config): \"{path:**}\" PathPatternParser style (modern Spring/Boot 3+): \"{*path}\" // /raw/a/b/c.txt \u2192 path = \"a/b/c.txt\" @GetMapping ( \"/raw/{*path}\" ) // If PathPatternParser is enabled (default in recent Boot) public Resource raw ( @PathVariable String path ) { /* ... */ } // Fallback if using AntPathMatcher: @GetMapping ( \"/raw/{path:**}\" ) public Resource rawLegacy ( @PathVariable ( \"path\" ) String path ) { /* ... */ } 5) Optional path variables (the right way) \u00b6 Path variables are required by default . To make a segment optional, provide two mappings and mark the parameter optional. // /users \u2192 id = null // /users/42 \u2192 id = 42 @GetMapping ({ \"/users\" , \"/users/{id}\" }) public List < UserDto > list ( @PathVariable ( required = false ) Long id ) { /* ... */ } There\u2019s no native \u201coptional segment\u201d syntax in a single pattern for MVC; use multiple paths. 6) Dots, dashes, spaces & URL decoding \u00b6 Spring decodes %20 \u2192 space, %2B \u2192 + , etc. Dots ( . ) are safe in recent Spring Boot defaults (suffix pattern matching is off by default). If you still see truncation after a dot, ensure you\u2019re using the modern PathPatternParser and not legacy suffix pattern matching. A single {var} never includes slashes . Use a catch-all to include / . 7) Validation & error handling \u00b6 If binding fails: Missing variable \u2192 MissingPathVariableException (500 if your method signature requires it but mapping doesn\u2019t define it; usually a route/config bug). Type mismatch \u2192 MethodArgumentTypeMismatchException (400). Centralize: @RestControllerAdvice class ApiErrors { @ExceptionHandler ( MethodArgumentTypeMismatchException . class ) @ResponseStatus ( HttpStatus . BAD_REQUEST ) ErrorDto badPath ( MethodArgumentTypeMismatchException ex ) { return new ErrorDto ( \"BAD_PATH\" , ex . getMessage ()); } } You can add Bean Validation to converted types if you bind to a record/POJO via @ModelAttribute (less common for pure path vars). 8) Versioning & hierarchy examples \u00b6 // Identity first, then sub-resource @GetMapping ( \"/users/{id}/addresses/{addrId}\" ) public AddressDto get ( @PathVariable long id , @PathVariable long addrId ) { /* ... */ } // API version in the path @GetMapping ( \"/v1/users/{id}\" ) public UserDto v1 ( @PathVariable long id ) { /* ... */ } 9) @PathVariable vs friends \u00b6 @PathVariable \u2014 identity in the URL: /users/{id} . @RequestParam \u2014 filters/sorting/pagination: /users?page=2&active=true . @RequestBody \u2014 JSON body for create/update. @MatrixVariable \u2014 semi-colon parameters in a path segment ( /cars;color=red;year=2025 ) when matrix vars are enabled. 10) Trailing slashes, case, and matching engine \u00b6 Trailing slash : /users/42/ vs /users/42 \u2014 by default, treated differently. Add both mappings or configure to be tolerant. Case sensitivity : paths are case-sensitive by default. Matching engine : Modern Spring MVC favors PathPatternParser (faster, more precise). It changes catch-all syntax ( {*var} ) compared to the older Ant style ( {var:**} ). Pick one and stick with it across your project. 11) Minimal idiomatic set \u00b6 // 1) Simple identity @GetMapping ( \"/items/{id}\" ) public ItemDto one ( @PathVariable long id ) { /* ... */ } // 2) Nested resource @GetMapping ( \"/shops/{shopId}/items/{itemId}\" ) public ItemDto shopItem ( @PathVariable long shopId , @PathVariable long itemId ) { /* ... */ } // 3) Regex guard @GetMapping ( \"/tickets/{num:\\\\d+}\" ) public TicketDto ticket ( @PathVariable int num ) { /* ... */ } // 4) Catch-all @GetMapping ( \"/assets/{*path}\" ) public Resource asset ( @PathVariable String path ) { /* ... */ } 12) Quick reference table \u00b6 Need Pattern Example Single segment /{id} /users/42 Rename arg @PathVariable(\"userId\") Long id /users/42 Multiple vars /{a}/{b} /a/10/b/20 Regex constraint /{id:\\\\d+} /users/123 only Catch-all (modern) /{*path} /raw/a/b/c.txt Catch-all (legacy Ant) /{path:**} /raw/a/b/c.txt Optional segment @GetMapping({\"/u\", \"/u/{id}\"}) /u or /u/7 Map of vars @PathVariable Map<String,String> /x/1/y/2 Type conversion UUID , Enum , LocalDate , custom Converter /inv/uuid Mental model \u00b6 @PathVariable is about identity baked into the URL . It\u2019s segment-based, decoded to types, and happiest when the path shape is explicit : constrain with regex when it helps, and use catch-alls only where they truly make sense.","title":"@PathVariable"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#pathvariable-url-path-segments","text":"What it does: Binds URL template variables from the path to controller method parameters. Use it when the variable is part of the resource identity : /users/{id} , /shops/{shopId}/orders/{orderId} . For query filters or toggles, prefer @RequestParam .","title":"\ud83e\udded @PathVariable \u2014 URL Path Segments"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#1-daily-patterns","text":"// /users/42 @GetMapping ( \"/users/{id}\" ) public UserDto get ( @PathVariable long id ) { /* ... */ } // Multiple variables: /shops/7/orders/99 @GetMapping ( \"/shops/{shopId}/orders/{orderId}\" ) public OrderDto get ( @PathVariable long shopId , @PathVariable long orderId ) { /* ... */ } // Rename the variable: /files/2025-10/report.pdf @GetMapping ( \"/files/{fileName}\" ) public FileDto get ( @PathVariable ( \"fileName\" ) String name ) { /* ... */ } // Grab them all (debuggy): /echo/anything/here @GetMapping ( \"/echo/{x}/{y}\" ) public Map < String , String > echo ( @PathVariable Map < String , String > vars ) { return vars ; }","title":"1) Daily patterns"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#2-type-conversion-built-in-custom","text":"Spring converts strings from the path via the ConversionService . Works out-of-the-box for: primitives/wrappers, UUID , enums, LocalDate/LocalDateTime , BigDecimal , etc. // /invoices/550e8400-e29b-41d4-a716-446655440000 @GetMapping ( \"/invoices/{id}\" ) public InvoiceDto get ( @PathVariable UUID id ) { /* ... */ } // Custom type @Component class SlugToProductId implements Converter < String , ProductId > { public ProductId convert ( String s ) { return ProductId . of ( s . toLowerCase ()); } } @GetMapping ( \"/products/{pid}\" ) public ProductDto get ( @PathVariable ProductId pid ) { /* ... */ }","title":"2) Type conversion (built-in + custom)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#3-constraining-with-regex","text":"Lock paths down to valid shapes: // digits only: /users/123 @GetMapping ( \"/users/{id:\\\\d+}\" ) // year-month: /reports/2025-10 @GetMapping ( \"/reports/{ym:\\\\d{4}-\\\\d{2}}\" ) // enum-like set: /status/ACTIVE @GetMapping ( \"/status/{s:ACTIVE|SUSPENDED}\" ) Regex is per-segment (no slashes unless you use a catch-all\u2014see below).","title":"3) Constraining with regex"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#4-catch-all-include-slashes","text":"Sometimes you need \u201cthe rest of the path,\u201d e.g., serving files under a base. AntPathMatcher style (older config): \"{path:**}\" PathPatternParser style (modern Spring/Boot 3+): \"{*path}\" // /raw/a/b/c.txt \u2192 path = \"a/b/c.txt\" @GetMapping ( \"/raw/{*path}\" ) // If PathPatternParser is enabled (default in recent Boot) public Resource raw ( @PathVariable String path ) { /* ... */ } // Fallback if using AntPathMatcher: @GetMapping ( \"/raw/{path:**}\" ) public Resource rawLegacy ( @PathVariable ( \"path\" ) String path ) { /* ... */ }","title":"4) Catch-all (include slashes)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#5-optional-path-variables-the-right-way","text":"Path variables are required by default . To make a segment optional, provide two mappings and mark the parameter optional. // /users \u2192 id = null // /users/42 \u2192 id = 42 @GetMapping ({ \"/users\" , \"/users/{id}\" }) public List < UserDto > list ( @PathVariable ( required = false ) Long id ) { /* ... */ } There\u2019s no native \u201coptional segment\u201d syntax in a single pattern for MVC; use multiple paths.","title":"5) Optional path variables (the right way)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#6-dots-dashes-spaces-url-decoding","text":"Spring decodes %20 \u2192 space, %2B \u2192 + , etc. Dots ( . ) are safe in recent Spring Boot defaults (suffix pattern matching is off by default). If you still see truncation after a dot, ensure you\u2019re using the modern PathPatternParser and not legacy suffix pattern matching. A single {var} never includes slashes . Use a catch-all to include / .","title":"6) Dots, dashes, spaces &amp; URL decoding"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#7-validation-error-handling","text":"If binding fails: Missing variable \u2192 MissingPathVariableException (500 if your method signature requires it but mapping doesn\u2019t define it; usually a route/config bug). Type mismatch \u2192 MethodArgumentTypeMismatchException (400). Centralize: @RestControllerAdvice class ApiErrors { @ExceptionHandler ( MethodArgumentTypeMismatchException . class ) @ResponseStatus ( HttpStatus . BAD_REQUEST ) ErrorDto badPath ( MethodArgumentTypeMismatchException ex ) { return new ErrorDto ( \"BAD_PATH\" , ex . getMessage ()); } } You can add Bean Validation to converted types if you bind to a record/POJO via @ModelAttribute (less common for pure path vars).","title":"7) Validation &amp; error handling"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#8-versioning-hierarchy-examples","text":"// Identity first, then sub-resource @GetMapping ( \"/users/{id}/addresses/{addrId}\" ) public AddressDto get ( @PathVariable long id , @PathVariable long addrId ) { /* ... */ } // API version in the path @GetMapping ( \"/v1/users/{id}\" ) public UserDto v1 ( @PathVariable long id ) { /* ... */ }","title":"8) Versioning &amp; hierarchy examples"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#9-pathvariable-vs-friends","text":"@PathVariable \u2014 identity in the URL: /users/{id} . @RequestParam \u2014 filters/sorting/pagination: /users?page=2&active=true . @RequestBody \u2014 JSON body for create/update. @MatrixVariable \u2014 semi-colon parameters in a path segment ( /cars;color=red;year=2025 ) when matrix vars are enabled.","title":"9) @PathVariable vs friends"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#10-trailing-slashes-case-and-matching-engine","text":"Trailing slash : /users/42/ vs /users/42 \u2014 by default, treated differently. Add both mappings or configure to be tolerant. Case sensitivity : paths are case-sensitive by default. Matching engine : Modern Spring MVC favors PathPatternParser (faster, more precise). It changes catch-all syntax ( {*var} ) compared to the older Ant style ( {var:**} ). Pick one and stick with it across your project.","title":"10) Trailing slashes, case, and matching engine"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#11-minimal-idiomatic-set","text":"// 1) Simple identity @GetMapping ( \"/items/{id}\" ) public ItemDto one ( @PathVariable long id ) { /* ... */ } // 2) Nested resource @GetMapping ( \"/shops/{shopId}/items/{itemId}\" ) public ItemDto shopItem ( @PathVariable long shopId , @PathVariable long itemId ) { /* ... */ } // 3) Regex guard @GetMapping ( \"/tickets/{num:\\\\d+}\" ) public TicketDto ticket ( @PathVariable int num ) { /* ... */ } // 4) Catch-all @GetMapping ( \"/assets/{*path}\" ) public Resource asset ( @PathVariable String path ) { /* ... */ }","title":"11) Minimal idiomatic set"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#12-quick-reference-table","text":"Need Pattern Example Single segment /{id} /users/42 Rename arg @PathVariable(\"userId\") Long id /users/42 Multiple vars /{a}/{b} /a/10/b/20 Regex constraint /{id:\\\\d+} /users/123 only Catch-all (modern) /{*path} /raw/a/b/c.txt Catch-all (legacy Ant) /{path:**} /raw/a/b/c.txt Optional segment @GetMapping({\"/u\", \"/u/{id}\"}) /u or /u/7 Map of vars @PathVariable Map<String,String> /x/1/y/2 Type conversion UUID , Enum , LocalDate , custom Converter /inv/uuid","title":"12) Quick reference table"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/path-variable/#mental-model","text":"@PathVariable is about identity baked into the URL . It\u2019s segment-based, decoded to types, and happiest when the path shape is explicit : constrain with regex when it helps, and use catch-alls only where they truly make sense.","title":"Mental model"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/","text":"\ud83d\udcdd Spring @RequestBody \u2014 The Complete Cheatsheet \u00b6 What @RequestBody Does \u00b6 Purpose: Bind the HTTP request body to a controller method parameter. How: Delegates to HttpMessageConverters (Jackson for JSON by default) to deserialize bytes \u2192 Java object. Content-type aware: Chooses a converter based on Content-Type (e.g., application/json , application/xml , text/plain , etc.). @PostMapping ( \"/contacts\" ) public Contact create ( @RequestBody Contact contact ) { ... } Lifecycle & Flow \u00b6 Client sends body + Content-Type . Spring picks the first compatible HttpMessageConverter . Converter reads the body and converts into the parameter type. (Optional) Validation runs if you add @Valid / @Validated . Controller logic executes with the hydrated object. Key Options & Defaults \u00b6 Required: @RequestBody is required by default \u2192 missing body \u21d2 400. Make optional: @RequestBody(required = false) (parameter may be null ). Validation: Add @Valid and bean validation annotations ( jakarta.validation ). Failures throw MethodArgumentNotValidException \u2192 typically 400 (customize with @ControllerAdvice ). Unknown fields: Jackson behavior controlled by ObjectMapper (e.g., FAIL_ON_UNKNOWN_PROPERTIES ). Supported Parameter Shapes \u00b6 Domain types / DTOs: Typical case. Collections / arrays: e.g., List<Contact> . Maps: Map<String,Object> for ad-hoc JSON. Raw types: String , byte[] , InputStream , Resource (for streaming). Records / Lombok / Kotlin data classes: Fully supported with Jackson. Common Converters (MVC) \u00b6 MappingJackson2HttpMessageConverter (JSON \u2194 POJO) StringHttpMessageConverter (text) ByteArrayResource/ResourceHttpMessageConverter (binary/streams) Jaxb2RootElementHttpMessageConverter (XML, if on classpath) (You can register custom ones via WebMvcConfigurer#extendMessageConverters .) Error Handling You\u2019ll See \u00b6 400 Bad Request for: Missing body (when required), Malformed JSON ( HttpMessageNotReadableException ), Validation failures ( MethodArgumentNotValidException ). 415 Unsupported Media Type: Content-Type not supported. 406 Not Acceptable (response side) if you also do content negotiation for the return type. Customize responses with: @RestControllerAdvice class GlobalErrors { @ExceptionHandler ( MethodArgumentNotValidException . class ) @ResponseStatus ( HttpStatus . BAD_REQUEST ) ApiError handleValidation ( MethodArgumentNotValidException ex ) { ... } } Best Practices \u00b6 Use DTOs, not entities for request bodies (prevents over-posting, stabilizes API). Validate aggressively: @Valid + constraints ( @NotBlank , @Email , etc.). Document required fields and payload shape (OpenAPI/Swagger). Return saved instance/DTO and set Location for creates (201 Created). Harden ObjectMapper: decide on unknown properties, null handling, date formats, etc. Use @JsonView or separate DTOs when you need different read/write projections. @RequestBody vs. Others \u00b6 @PathVariable : pulls from the URL path, not the body. @RequestParam : query string/form fields, not the body JSON. @ModelAttribute : binds from form data/params; not raw JSON (unless combined differently). @RequestPart : for multipart/form-data parts (e.g., JSON + file upload). Multipart & Files \u00b6 For uploads like \u201cJSON + file\u201d use: @PostMapping ( consumes = MediaType . MULTIPART_FORM_DATA_VALUE ) public void upload ( @RequestPart ( \"meta\" ) MyDto meta , @RequestPart ( \"file\" ) MultipartFile file ) { ... } @RequestBody alone is not for multipart. Response Side Symmetry \u00b6 @ResponseBody (or @RestController ) serializes return values to the response using the same converter family (e.g., Jackson for JSON). Content negotiation uses the request Accept header to select format. Advanced Customization \u00b6 Custom converters: implement HttpMessageConverter<T> for exotic media types. Per-endpoint ObjectMapper tweaks: @JsonView , mix-ins, @JsonDeserialize , @JsonFormat . Streaming: accept InputStream / Reader for huge payloads; parse manually. Generics: for generic containers, Spring/Jackson can preserve type info with @RequestBody List<MyType> or HttpEntity<List<MyType>> . Typical Patterns \u00b6 Create with validation + Location header @PostMapping public ResponseEntity < ContactDto > create ( @Valid @RequestBody ContactCreateDto in ) { Contact saved = service . create ( map ( in )); URI location = ServletUriComponentsBuilder . fromCurrentRequest () . path ( \"/{id}\" ). buildAndExpand ( saved . getId ()). toUri (); return ResponseEntity . created ( location ). body ( map ( saved )); } Bulk create @PostMapping ( \"/bulk\" ) public List < ContactDto > bulk ( @Valid @RequestBody List < ContactCreateDto > items ) { ... } Optional body @PostMapping ( \"/maybe\" ) public ResponseEntity < Void > maybe ( @RequestBody ( required = false ) Foo body ) { if ( body == null ) return ResponseEntity . noContent (). build (); ... } Gotchas & Pitfalls \u00b6 Double-creating by calling your service twice (once to save, once again in body(...) ). Wrong Content-Type : client sends JSON but forgets application/json . Silently ignored fields if your mapper allows unknown properties and you expect strictness. Binding to entities may expose writeable fields you didn\u2019t intend (prefer DTOs). Time/Zone formats : standardize ISO-8601; configure Jackson JavaTimeModule . WebFlux Note \u00b6 In reactive controllers, use Mono<T> / Flux<T> with @RequestBody : @PostMapping public Mono < Contact > create ( @RequestBody Mono < Contact > contactMono ) { ... } TL;DR: @RequestBody takes the raw request body and, using HttpMessageConverters (Jackson for JSON), deserializes it into your parameter type , optionally validates it, and surfaces errors as 400/415 . Use DTOs, add @Valid , set the correct Content-Type , and craft clear error responses.","title":"@RequestBody"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#spring-requestbody-the-complete-cheatsheet","text":"","title":"\ud83d\udcdd Spring @RequestBody \u2014 The Complete Cheatsheet"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#what-requestbody-does","text":"Purpose: Bind the HTTP request body to a controller method parameter. How: Delegates to HttpMessageConverters (Jackson for JSON by default) to deserialize bytes \u2192 Java object. Content-type aware: Chooses a converter based on Content-Type (e.g., application/json , application/xml , text/plain , etc.). @PostMapping ( \"/contacts\" ) public Contact create ( @RequestBody Contact contact ) { ... }","title":"What @RequestBody Does"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#lifecycle-flow","text":"Client sends body + Content-Type . Spring picks the first compatible HttpMessageConverter . Converter reads the body and converts into the parameter type. (Optional) Validation runs if you add @Valid / @Validated . Controller logic executes with the hydrated object.","title":"Lifecycle &amp; Flow"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#key-options-defaults","text":"Required: @RequestBody is required by default \u2192 missing body \u21d2 400. Make optional: @RequestBody(required = false) (parameter may be null ). Validation: Add @Valid and bean validation annotations ( jakarta.validation ). Failures throw MethodArgumentNotValidException \u2192 typically 400 (customize with @ControllerAdvice ). Unknown fields: Jackson behavior controlled by ObjectMapper (e.g., FAIL_ON_UNKNOWN_PROPERTIES ).","title":"Key Options &amp; Defaults"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#supported-parameter-shapes","text":"Domain types / DTOs: Typical case. Collections / arrays: e.g., List<Contact> . Maps: Map<String,Object> for ad-hoc JSON. Raw types: String , byte[] , InputStream , Resource (for streaming). Records / Lombok / Kotlin data classes: Fully supported with Jackson.","title":"Supported Parameter Shapes"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#common-converters-mvc","text":"MappingJackson2HttpMessageConverter (JSON \u2194 POJO) StringHttpMessageConverter (text) ByteArrayResource/ResourceHttpMessageConverter (binary/streams) Jaxb2RootElementHttpMessageConverter (XML, if on classpath) (You can register custom ones via WebMvcConfigurer#extendMessageConverters .)","title":"Common Converters (MVC)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#error-handling-youll-see","text":"400 Bad Request for: Missing body (when required), Malformed JSON ( HttpMessageNotReadableException ), Validation failures ( MethodArgumentNotValidException ). 415 Unsupported Media Type: Content-Type not supported. 406 Not Acceptable (response side) if you also do content negotiation for the return type. Customize responses with: @RestControllerAdvice class GlobalErrors { @ExceptionHandler ( MethodArgumentNotValidException . class ) @ResponseStatus ( HttpStatus . BAD_REQUEST ) ApiError handleValidation ( MethodArgumentNotValidException ex ) { ... } }","title":"Error Handling You\u2019ll See"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#best-practices","text":"Use DTOs, not entities for request bodies (prevents over-posting, stabilizes API). Validate aggressively: @Valid + constraints ( @NotBlank , @Email , etc.). Document required fields and payload shape (OpenAPI/Swagger). Return saved instance/DTO and set Location for creates (201 Created). Harden ObjectMapper: decide on unknown properties, null handling, date formats, etc. Use @JsonView or separate DTOs when you need different read/write projections.","title":"Best Practices"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#requestbody-vs-others","text":"@PathVariable : pulls from the URL path, not the body. @RequestParam : query string/form fields, not the body JSON. @ModelAttribute : binds from form data/params; not raw JSON (unless combined differently). @RequestPart : for multipart/form-data parts (e.g., JSON + file upload).","title":"@RequestBody vs. Others"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#multipart-files","text":"For uploads like \u201cJSON + file\u201d use: @PostMapping ( consumes = MediaType . MULTIPART_FORM_DATA_VALUE ) public void upload ( @RequestPart ( \"meta\" ) MyDto meta , @RequestPart ( \"file\" ) MultipartFile file ) { ... } @RequestBody alone is not for multipart.","title":"Multipart &amp; Files"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#response-side-symmetry","text":"@ResponseBody (or @RestController ) serializes return values to the response using the same converter family (e.g., Jackson for JSON). Content negotiation uses the request Accept header to select format.","title":"Response Side Symmetry"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#advanced-customization","text":"Custom converters: implement HttpMessageConverter<T> for exotic media types. Per-endpoint ObjectMapper tweaks: @JsonView , mix-ins, @JsonDeserialize , @JsonFormat . Streaming: accept InputStream / Reader for huge payloads; parse manually. Generics: for generic containers, Spring/Jackson can preserve type info with @RequestBody List<MyType> or HttpEntity<List<MyType>> .","title":"Advanced Customization"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#typical-patterns","text":"Create with validation + Location header @PostMapping public ResponseEntity < ContactDto > create ( @Valid @RequestBody ContactCreateDto in ) { Contact saved = service . create ( map ( in )); URI location = ServletUriComponentsBuilder . fromCurrentRequest () . path ( \"/{id}\" ). buildAndExpand ( saved . getId ()). toUri (); return ResponseEntity . created ( location ). body ( map ( saved )); } Bulk create @PostMapping ( \"/bulk\" ) public List < ContactDto > bulk ( @Valid @RequestBody List < ContactCreateDto > items ) { ... } Optional body @PostMapping ( \"/maybe\" ) public ResponseEntity < Void > maybe ( @RequestBody ( required = false ) Foo body ) { if ( body == null ) return ResponseEntity . noContent (). build (); ... }","title":"Typical Patterns"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#gotchas-pitfalls","text":"Double-creating by calling your service twice (once to save, once again in body(...) ). Wrong Content-Type : client sends JSON but forgets application/json . Silently ignored fields if your mapper allows unknown properties and you expect strictness. Binding to entities may expose writeable fields you didn\u2019t intend (prefer DTOs). Time/Zone formats : standardize ISO-8601; configure Jackson JavaTimeModule .","title":"Gotchas &amp; Pitfalls"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-body/#webflux-note","text":"In reactive controllers, use Mono<T> / Flux<T> with @RequestBody : @PostMapping public Mono < Contact > create ( @RequestBody Mono < Contact > contactMono ) { ... } TL;DR: @RequestBody takes the raw request body and, using HttpMessageConverters (Jackson for JSON), deserializes it into your parameter type , optionally validates it, and surfaces errors as 400/415 . Use DTOs, add @Valid , set the correct Content-Type , and craft clear error responses.","title":"WebFlux Note"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/","text":"\u2699\ufe0f @RequestParam \u2014 Query & Form Parameters \u00b6 What it does: Binds query string parameters ( /api?q=java&page=2 ) and form fields ( application/x-www-form-urlencoded or simple multipart/form-data ) to your controller method arguments. Remember: @RequestParam is for simple scalars & small structs . For complex request bodies (JSON), use @RequestBody . For URL path pieces, use @PathVariable . 1) Fast patterns you\u2019ll use daily \u00b6 @GetMapping ( \"/search\" ) public List < BookDto > search ( @RequestParam String q , // required by default @RequestParam ( defaultValue = \"1\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size , @RequestParam ( required = false ) String lang // nullable wrapper ) { /* ... */ } // Multi-values: ?tag=java&tag=spring @GetMapping ( \"/articles\" ) public List < ArticleDto > byTags ( @RequestParam List < String > tag ) { /* ... */ } // Optional without defaults @GetMapping ( \"/users\" ) public List < UserDto > users ( @RequestParam Optional < String > email ) { /* ... */ } // Arbitrary parameter bag: ?a=1&b=2 @GetMapping ( \"/echo\" ) public Map < String , String > echo ( @RequestParam Map < String , String > params ) { /* ... */ } // MultiValueMap to preserve duplicates: ?k=1&k=2 @GetMapping ( \"/kv\" ) public String kv ( @RequestParam MultiValueMap < String , String > params ) { /* ... */ } 2) Required vs default vs Optional \u00b6 Required by default: @RequestParam String q \u2192 400 if missing. Make optional: @RequestParam(required = false) String q or use Optional<String> . Provide a default: @RequestParam(defaultValue = \"java\") String q Setting defaultValue implicitly makes it not required . With Optional<T> and defaultValue , you\u2019ll get Optional.of(default) . Primitive vs wrapper: prefer wrappers ( Integer , Boolean ) for optional params; primitives can\u2019t be null . 3) Name inference & renaming \u00b6 Spring infers parameter name from the Java arg name (if compiled with -parameters , which Spring Boot enables by default). To use a different query key: @GetMapping ( \"/files\" ) public List < FileDto > list ( @RequestParam ( \"dir\" ) String directory ) { /* ... */ } 4) Multi-value binding \u00b6 // ?id=1&id=2&id=3 @GetMapping ( \"/batch\" ) public List < UserDto > getBatch ( @RequestParam List < Long > id ) { /* ... */ } // Arrays also work public List < UserDto > getBatch ( @RequestParam ( \"id\" ) long [] ids ) { /* ... */ } // CSV? Not automatic. Parse yourself: @GetMapping ( \"/batch2\" ) public List < UserDto > getBatchCsv ( @RequestParam String idsCsv ) { var ids = Arrays . stream ( idsCsv . split ( \",\" )). map ( Long :: parseLong ). toList (); /* ... */ } 5) Supported sources (Spring MVC) \u00b6 Query string: /api?q=java&page=1 Form body: Content-Type: application/x-www-form-urlencoded Multipart fields: alongside files in multipart/form-data (see below) JSON bodies are not @RequestParam ; use @RequestBody . 6) File upload quickies \u00b6 @PostMapping ( path = \"/upload\" , consumes = MediaType . MULTIPART_FORM_DATA_VALUE ) public UploadResult upload ( @RequestParam ( \"file\" ) MultipartFile file , // single file @RequestParam ( required = false ) String note , @RequestParam ( \"tags\" ) List < String > tags // multi-values OK ) { /* ... */ } // multiple files: @RequestParam(\"files\") List<MultipartFile> files 7) Type conversion & custom formats \u00b6 Spring converts strings \u2192 target types via the ConversionService . Works out-of-the-box for: primitives, wrappers, enums, UUID, LocalDate/LocalDateTime , BigDecimal , etc. For custom types: @Component public class SlugToProductIdConverter implements Converter < String , ProductId > { public ProductId convert ( String s ) { return ProductId . of ( s . trim (). toLowerCase ()); } } Then: @GetMapping ( \"/product\" ) public ProductDto product ( @RequestParam ProductId id ) { /* ... */ } Dates: @GetMapping ( \"/events\" ) public List < EventDto > events ( @RequestParam @DateTimeFormat ( iso = DateTimeFormat . ISO . DATE ) LocalDate day ) { /* ... */ } 8) Validation \u00b6 You can validate @RequestParam arguments with @Validated on the controller and JSR-380/Bean Validation annotations: @Validated @RestController class Api { @GetMapping ( \"/offers\" ) public List < OfferDto > offers ( @RequestParam @Min ( 1 ) @Max ( 100 ) int size , @RequestParam @Pattern ( regexp = \"[a-z]{2}\" ) String lang ) { /* ... */ } } For compound inputs, bind to a small DTO via @ModelAttribute (still query/form backed) and validate that object. 9) Empty vs missing vs default (edge-cases) \u00b6 Missing param (no key) + required \u2192 400. Empty present ( ?q= ) is present with \"\" . With required=true , that\u2019s fine; with @NotBlank , it will fail validation. defaultValue triggers when missing or empty ( \"\" ), i.e., ?q= yields default. 10) Encoding & weird characters \u00b6 Browsers encode spaces as + in query/form; Spring decodes to space. %2B is literal + . If a value needs commas/semicolons, encode them. Don\u2019t rely on CSV unless you control the client. 11) @RequestParam vs the others \u00b6 @PathVariable \u2014 part of the URL structure: /users/{id} . Good for identity. @RequestParam \u2014 filters/toggles/pagination/search: /users?active=true&page=2 . @RequestBody \u2014 JSON/XML payloads for create/update. @ModelAttribute \u2014 groups many simple params into a bean (query/form), supports validation. 12) Defaults that mirror product behavior \u00b6 @GetMapping ( \"/list\" ) public PageDto list ( @RequestParam ( defaultValue = \"1\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size , @RequestParam ( defaultValue = \"name\" ) String sortBy , @RequestParam ( defaultValue = \"asc\" ) String order ) { /* ... */ } This keeps your API forgiving while still deterministic. 13) Enum handling \u00b6 enum Status { ACTIVE , SUSPENDED } @GetMapping ( \"/accounts\" ) public List < AccountDto > list ( @RequestParam Status status ) { /* ?status=ACTIVE */ } // Case-insensitive by default? No. Make a Converter or enable relaxed binding (WebDataBinder). 14) Error handling (missing/invalid params) \u00b6 Missing required \u2192 MissingServletRequestParameterException (400). Type mismatch \u2192 MethodArgumentTypeMismatchException (400). Centralize with @ControllerAdvice : @RestControllerAdvice class ApiErrors { @ExceptionHandler ({ MissingServletRequestParameterException . class , MethodArgumentTypeMismatchException . class }) @ResponseStatus ( HttpStatus . BAD_REQUEST ) public ErrorDto badRequest ( Exception ex ) { return new ErrorDto ( \"BAD_REQUEST\" , ex . getMessage ()); } } 15) Records / small DTOs with @ModelAttribute \u00b6 When a method has a POJO/record parameter without @RequestBody , Spring treats it as a model attribute backed by query/form params: record Filter ( String q , Integer page , Integer size ) {} @GetMapping ( \"/search\" ) public List < ItemDto > search ( Filter f ) { /* /search?q=java&page=2 */ } You can combine with @Validated on the type. 16) WebFlux notes (reactive) \u00b6 Everything conceptually the same, but your method returns Mono/Flux . @RequestParam usage is identical; parameters are still decoded eagerly before the handler executes. 17) Common pitfalls checklist \u00b6 Using @RequestParam for JSON \u2192 don\u2019t; use @RequestBody . Expecting CSV to auto-split \u2192 it won\u2019t; use List<T> with repeated keys, or split yourself. Forgetting defaultValue makes it required \u2192 add it or use wrappers/ Optional . Primitives for optional params \u2192 switch to wrappers. Enum case mismatches \u2192 add a Converter<String, Enum> or normalize input. Relying on empty string vs default \u2192 defaultValue fires for empty too. 18) Minimal, idiomatic examples \u00b6 // 1) Search with sane defaults @GetMapping ( \"/v1/search\" ) public List < Item > search ( @RequestParam String q , @RequestParam ( defaultValue = \"1\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size ) { /* ... */ } // 2) Filters: multi-value categories @GetMapping ( \"/v1/items\" ) public List < Item > byCategory ( @RequestParam List < String > category ) { /* ... */ } // 3) Optional toggle @GetMapping ( \"/v1/users\" ) public List < User > users ( @RequestParam Optional < Boolean > active ) { /* ... */ } // 4) File + form fields @PostMapping ( value = \"/v1/avatar\" , consumes = MediaType . MULTIPART_FORM_DATA_VALUE ) public void avatar ( @RequestParam MultipartFile file , @RequestParam ( required = false ) String note ) { /* ... */ } 19) Quick reference table \u00b6 Need Annotation & type Example Required scalar @RequestParam String ?q=java Optional scalar @RequestParam(required=false) String / Optional<String> ?q= or missing Defaulted scalar @RequestParam(defaultValue=\"1\") int missing \u2192 1 Multi-value @RequestParam List<T> / T[] ?tag=a&tag=b Arbitrary bag @RequestParam Map<String,String> any keys Preserve duplicates @RequestParam MultiValueMap<String,String> ?k=1&k=2 File @RequestParam MultipartFile multipart/form-data Date/Time @DateTimeFormat(...) + type ISO formats Custom type Converter<String,T> global converter Mental model \u00b6 @RequestParam is thin glue between text in the URL or form and your Java types. Keep it small, explicit, and validated. When data gets complex, graduate to @ModelAttribute or @RequestBody .","title":"@RequestParam"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#requestparam-query-form-parameters","text":"What it does: Binds query string parameters ( /api?q=java&page=2 ) and form fields ( application/x-www-form-urlencoded or simple multipart/form-data ) to your controller method arguments. Remember: @RequestParam is for simple scalars & small structs . For complex request bodies (JSON), use @RequestBody . For URL path pieces, use @PathVariable .","title":"\u2699\ufe0f @RequestParam \u2014 Query &amp; Form Parameters"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#1-fast-patterns-youll-use-daily","text":"@GetMapping ( \"/search\" ) public List < BookDto > search ( @RequestParam String q , // required by default @RequestParam ( defaultValue = \"1\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size , @RequestParam ( required = false ) String lang // nullable wrapper ) { /* ... */ } // Multi-values: ?tag=java&tag=spring @GetMapping ( \"/articles\" ) public List < ArticleDto > byTags ( @RequestParam List < String > tag ) { /* ... */ } // Optional without defaults @GetMapping ( \"/users\" ) public List < UserDto > users ( @RequestParam Optional < String > email ) { /* ... */ } // Arbitrary parameter bag: ?a=1&b=2 @GetMapping ( \"/echo\" ) public Map < String , String > echo ( @RequestParam Map < String , String > params ) { /* ... */ } // MultiValueMap to preserve duplicates: ?k=1&k=2 @GetMapping ( \"/kv\" ) public String kv ( @RequestParam MultiValueMap < String , String > params ) { /* ... */ }","title":"1) Fast patterns you\u2019ll use daily"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#2-required-vs-default-vs-optional","text":"Required by default: @RequestParam String q \u2192 400 if missing. Make optional: @RequestParam(required = false) String q or use Optional<String> . Provide a default: @RequestParam(defaultValue = \"java\") String q Setting defaultValue implicitly makes it not required . With Optional<T> and defaultValue , you\u2019ll get Optional.of(default) . Primitive vs wrapper: prefer wrappers ( Integer , Boolean ) for optional params; primitives can\u2019t be null .","title":"2) Required vs default vs Optional"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#3-name-inference-renaming","text":"Spring infers parameter name from the Java arg name (if compiled with -parameters , which Spring Boot enables by default). To use a different query key: @GetMapping ( \"/files\" ) public List < FileDto > list ( @RequestParam ( \"dir\" ) String directory ) { /* ... */ }","title":"3) Name inference &amp; renaming"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#4-multi-value-binding","text":"// ?id=1&id=2&id=3 @GetMapping ( \"/batch\" ) public List < UserDto > getBatch ( @RequestParam List < Long > id ) { /* ... */ } // Arrays also work public List < UserDto > getBatch ( @RequestParam ( \"id\" ) long [] ids ) { /* ... */ } // CSV? Not automatic. Parse yourself: @GetMapping ( \"/batch2\" ) public List < UserDto > getBatchCsv ( @RequestParam String idsCsv ) { var ids = Arrays . stream ( idsCsv . split ( \",\" )). map ( Long :: parseLong ). toList (); /* ... */ }","title":"4) Multi-value binding"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#5-supported-sources-spring-mvc","text":"Query string: /api?q=java&page=1 Form body: Content-Type: application/x-www-form-urlencoded Multipart fields: alongside files in multipart/form-data (see below) JSON bodies are not @RequestParam ; use @RequestBody .","title":"5) Supported sources (Spring MVC)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#6-file-upload-quickies","text":"@PostMapping ( path = \"/upload\" , consumes = MediaType . MULTIPART_FORM_DATA_VALUE ) public UploadResult upload ( @RequestParam ( \"file\" ) MultipartFile file , // single file @RequestParam ( required = false ) String note , @RequestParam ( \"tags\" ) List < String > tags // multi-values OK ) { /* ... */ } // multiple files: @RequestParam(\"files\") List<MultipartFile> files","title":"6) File upload quickies"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#7-type-conversion-custom-formats","text":"Spring converts strings \u2192 target types via the ConversionService . Works out-of-the-box for: primitives, wrappers, enums, UUID, LocalDate/LocalDateTime , BigDecimal , etc. For custom types: @Component public class SlugToProductIdConverter implements Converter < String , ProductId > { public ProductId convert ( String s ) { return ProductId . of ( s . trim (). toLowerCase ()); } } Then: @GetMapping ( \"/product\" ) public ProductDto product ( @RequestParam ProductId id ) { /* ... */ } Dates: @GetMapping ( \"/events\" ) public List < EventDto > events ( @RequestParam @DateTimeFormat ( iso = DateTimeFormat . ISO . DATE ) LocalDate day ) { /* ... */ }","title":"7) Type conversion &amp; custom formats"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#8-validation","text":"You can validate @RequestParam arguments with @Validated on the controller and JSR-380/Bean Validation annotations: @Validated @RestController class Api { @GetMapping ( \"/offers\" ) public List < OfferDto > offers ( @RequestParam @Min ( 1 ) @Max ( 100 ) int size , @RequestParam @Pattern ( regexp = \"[a-z]{2}\" ) String lang ) { /* ... */ } } For compound inputs, bind to a small DTO via @ModelAttribute (still query/form backed) and validate that object.","title":"8) Validation"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#9-empty-vs-missing-vs-default-edge-cases","text":"Missing param (no key) + required \u2192 400. Empty present ( ?q= ) is present with \"\" . With required=true , that\u2019s fine; with @NotBlank , it will fail validation. defaultValue triggers when missing or empty ( \"\" ), i.e., ?q= yields default.","title":"9) Empty vs missing vs default (edge-cases)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#10-encoding-weird-characters","text":"Browsers encode spaces as + in query/form; Spring decodes to space. %2B is literal + . If a value needs commas/semicolons, encode them. Don\u2019t rely on CSV unless you control the client.","title":"10) Encoding &amp; weird characters"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#11-requestparam-vs-the-others","text":"@PathVariable \u2014 part of the URL structure: /users/{id} . Good for identity. @RequestParam \u2014 filters/toggles/pagination/search: /users?active=true&page=2 . @RequestBody \u2014 JSON/XML payloads for create/update. @ModelAttribute \u2014 groups many simple params into a bean (query/form), supports validation.","title":"11) @RequestParam vs the others"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#12-defaults-that-mirror-product-behavior","text":"@GetMapping ( \"/list\" ) public PageDto list ( @RequestParam ( defaultValue = \"1\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size , @RequestParam ( defaultValue = \"name\" ) String sortBy , @RequestParam ( defaultValue = \"asc\" ) String order ) { /* ... */ } This keeps your API forgiving while still deterministic.","title":"12) Defaults that mirror product behavior"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#13-enum-handling","text":"enum Status { ACTIVE , SUSPENDED } @GetMapping ( \"/accounts\" ) public List < AccountDto > list ( @RequestParam Status status ) { /* ?status=ACTIVE */ } // Case-insensitive by default? No. Make a Converter or enable relaxed binding (WebDataBinder).","title":"13) Enum handling"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#14-error-handling-missinginvalid-params","text":"Missing required \u2192 MissingServletRequestParameterException (400). Type mismatch \u2192 MethodArgumentTypeMismatchException (400). Centralize with @ControllerAdvice : @RestControllerAdvice class ApiErrors { @ExceptionHandler ({ MissingServletRequestParameterException . class , MethodArgumentTypeMismatchException . class }) @ResponseStatus ( HttpStatus . BAD_REQUEST ) public ErrorDto badRequest ( Exception ex ) { return new ErrorDto ( \"BAD_REQUEST\" , ex . getMessage ()); } }","title":"14) Error handling (missing/invalid params)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#15-records-small-dtos-with-modelattribute","text":"When a method has a POJO/record parameter without @RequestBody , Spring treats it as a model attribute backed by query/form params: record Filter ( String q , Integer page , Integer size ) {} @GetMapping ( \"/search\" ) public List < ItemDto > search ( Filter f ) { /* /search?q=java&page=2 */ } You can combine with @Validated on the type.","title":"15) Records / small DTOs with @ModelAttribute"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#16-webflux-notes-reactive","text":"Everything conceptually the same, but your method returns Mono/Flux . @RequestParam usage is identical; parameters are still decoded eagerly before the handler executes.","title":"16) WebFlux notes (reactive)"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#17-common-pitfalls-checklist","text":"Using @RequestParam for JSON \u2192 don\u2019t; use @RequestBody . Expecting CSV to auto-split \u2192 it won\u2019t; use List<T> with repeated keys, or split yourself. Forgetting defaultValue makes it required \u2192 add it or use wrappers/ Optional . Primitives for optional params \u2192 switch to wrappers. Enum case mismatches \u2192 add a Converter<String, Enum> or normalize input. Relying on empty string vs default \u2192 defaultValue fires for empty too.","title":"17) Common pitfalls checklist"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#18-minimal-idiomatic-examples","text":"// 1) Search with sane defaults @GetMapping ( \"/v1/search\" ) public List < Item > search ( @RequestParam String q , @RequestParam ( defaultValue = \"1\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size ) { /* ... */ } // 2) Filters: multi-value categories @GetMapping ( \"/v1/items\" ) public List < Item > byCategory ( @RequestParam List < String > category ) { /* ... */ } // 3) Optional toggle @GetMapping ( \"/v1/users\" ) public List < User > users ( @RequestParam Optional < Boolean > active ) { /* ... */ } // 4) File + form fields @PostMapping ( value = \"/v1/avatar\" , consumes = MediaType . MULTIPART_FORM_DATA_VALUE ) public void avatar ( @RequestParam MultipartFile file , @RequestParam ( required = false ) String note ) { /* ... */ }","title":"18) Minimal, idiomatic examples"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#19-quick-reference-table","text":"Need Annotation & type Example Required scalar @RequestParam String ?q=java Optional scalar @RequestParam(required=false) String / Optional<String> ?q= or missing Defaulted scalar @RequestParam(defaultValue=\"1\") int missing \u2192 1 Multi-value @RequestParam List<T> / T[] ?tag=a&tag=b Arbitrary bag @RequestParam Map<String,String> any keys Preserve duplicates @RequestParam MultiValueMap<String,String> ?k=1&k=2 File @RequestParam MultipartFile multipart/form-data Date/Time @DateTimeFormat(...) + type ISO formats Custom type Converter<String,T> global converter","title":"19) Quick reference table"},{"location":"cheatsheets/languages/java/spring/annotations/rest/binding/request-param/#mental-model","text":"@RequestParam is thin glue between text in the URL or form and your Java types. Keep it small, explicit, and validated. When data gets complex, graduate to @ModelAttribute or @RequestBody .","title":"Mental model"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/","text":"jackson JSON serialization & deserialization annotations \u2014 cheat sheet \u00b6 jackson in one sentence Jackson turns Java objects \u21c4 JSON . It works out of the box, and you use annotations on your DTOs when the default JSON isn\u2019t what you want. jackson common annotations & patterns \u00b6 1) @JsonProperty \u2014 rename or control access \u00b6 Why : your Java field names don\u2019t match the API JSON, or you want a field to be read-only/write-only in JSON. How it affects direction Serialization (object \u2192 JSON): field appears using the name you give. Deserialization (JSON \u2192 object): field is read from that JSON name. public class UserDto { @JsonProperty ( \"user_id\" ) private Long id ; @JsonProperty ( value = \"email\" , access = JsonProperty . Access . WRITE_ONLY ) private String email ; // accepted on input but hidden in output } Input \u2192 Object { \"user_id\" : 1 , \"email\" : \"a@b.com\" } Object \u2192 Output { \"user_id\" : 1 } Handy flags (max 5) value = \"name\" \u2192 JSON field name. access = READ_ONLY \u2192 show in output only. access = WRITE_ONLY \u2192 accept on input only. required = true \u2192 fail if missing on input. defaultValue = \"...\" \u2192 used if absent on input. 2) @JsonInclude \u2014 drop noise (nulls, empties, defaults) \u00b6 Why : make responses smaller/cleaner. @JsonInclude ( JsonInclude . Include . NON_NULL ) public class ProfileDto { private String name ; private String bio ; // null \u2192 omitted } Object \u2192 Output { \"name\" : \"Lin\" } Useful modes (pick what you need) ALWAYS \u2014 include everything (default). NON_NULL \u2014 drop only null . NON_EMPTY \u2014 drop null , \"\" , [] , {} . NON_DEFAULT \u2014 drop values equal to field defaults (e.g., 0 , false , empty). NON_ABSENT \u2014 drop Optional.empty() (keeps non-empty Optionals). Per-field override : you can also put @JsonInclude(...) directly on a field. 3) @JsonIgnore / @JsonIgnoreProperties \u2014 hide or tolerate extras \u00b6 Why : hide sensitive/internal fields, or ignore unknown JSON fields so clients don\u2019t break you. @JsonIgnoreProperties ( ignoreUnknown = true ) // ignore extra JSON input public class AccountDto { private String email ; @JsonIgnore // never show in JSON private String passwordHash ; } Input with extras \u2192 Object { \"email\" : \"a@b.com\" , \"unexpected\" : 123 } Object \u2192 Output { \"email\" : \"a@b.com\" } Useful options (max 5) ignoreUnknown = true \u2014 skip unexpected input fields. value = {\"field1\",\"field2\"} \u2014 ignore these by name. allowGetters = true \u2014 still serialize (getters allowed). allowSetters = true \u2014 still deserialize (setters allowed). @JsonIgnore (field or getter) \u2014 hard hide that one property. Tip: prefer @JsonIgnore for single fields; use @JsonIgnoreProperties for class-level rules. 4) @JsonFormat \u2014 make dates predictable \u00b6 Why : you control the exact text format instead of gambling on defaults. public class EventDto { @JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"yyyy-MM-dd'T'HH:mm:ssXXX\" ) private ZonedDateTime startsAt ; } Object \u2192 Output { \"startsAt\" : \"2025-10-04T09:30:00+03:00\" } Useful options (max 5) shape = STRING \u2014 format as text (common for dates). shape = NUMBER \u2014 epoch millis/seconds (with @JsonFormat + config). pattern = \"...\" \u2014 custom date pattern. timezone = \"UTC\" \u2014 force a TZ (or Europe/Vilnius ). locale = \"en\" \u2014 locale for month/day names, etc. 5) @JsonAlias \u2014 accept many input names, output one \u00b6 Why : smooth migrations: multiple incoming names map to one field. public class ProductDto { @JsonProperty ( \"price\" ) // output as \"price\" @JsonAlias ({ \"cost\" , \"amount\" }) // accept these on input private BigDecimal price ; } Valid Inputs { \"price\" : 10.99 } { \"cost\" : 10.99 } { \"amount\" : 10.99 } Object \u2192 Output { \"price\" : 10.99 } 6) @JsonCreator \u2014 build immutable objects from JSON \u00b6 Why : records/immutables or no no-arg constructor? Tell Jackson which ctor/factory to use. public class PointDto { private final int x ; private final int y ; @JsonCreator ( mode = JsonCreator . Mode . PROPERTIES ) public PointDto ( @JsonProperty ( \"x\" ) int x , @JsonProperty ( \"y\" ) int y ) { this . x = x ; this . y = y ; } } Input \u2192 Object { \"x\" : 3 , \"y\" : 4 } Useful modes (max 5) Mode.PROPERTIES \u2014 match by property names (most common). Mode.DELEGATING \u2014 pass the whole input into one param (single-value wrapper). Works with static factory + @JsonCreator too. Combine with @JsonProperty(required = true) on params. Pair with @JsonValue on the other side to serialize as a single value. 7) @JsonValue \u2014 serialize as a single value (enums/value objects) \u00b6 Why : make an enum or tiny object show up as a simple string/number. public enum Role { ADMIN ( \"admin\" ), USER ( \"user\" ); private final String label ; Role ( String l ) { this . label = l ; } @JsonValue public String toJson () { return label ; } } Enum \u2192 Output \"admin\" For deserializing back , add a @JsonCreator factory that turns the string into the enum/value object. 8) Bidirectional relations \u2014 stop infinite loops \u00b6 Problem : parent \u2192 child \u2192 parent \u2192 \u2026 during serialization. Option A: \u201cmanaged/back\u201d pair public class OrderDto { @JsonManagedReference private List < OrderItemDto > items ; } public class OrderItemDto { @JsonBackReference private OrderDto order ; } Object \u2192 Output (simplified) { \"items\" : [ { /* no \"order\" back-ref here */ } ] } Option B: identity by id @JsonIdentityInfo ( generator = ObjectIdGenerators . PropertyGenerator . class , property = \"id\" ) public class CategoryDto { private Long id ; private String name ; private List < CategoryDto > children ; private CategoryDto parent ; } Object \u2192 Output { \"id\" : 1 , \"name\" : \"Root\" , \"children\" : [ { \"id\" : 2 , \"name\" : \"Child\" , \"parent\" : 1 } ], \"parent\" : null } When to choose Use A for simple parent\u2194child where you just want to drop the back link. Use B when the graph is more complex or you want references by id. 9) Polymorphism \u2014 @JsonTypeInfo + @JsonSubTypes \u00b6 Why : a field/collection holds different concrete types; you need a type hint. @JsonTypeInfo ( use = JsonTypeInfo . Id . NAME , include = JsonTypeInfo . As . PROPERTY , property = \"type\" ) @JsonSubTypes ({ @JsonSubTypes.Type ( value = CardPaymentDto . class , name = \"card\" ), @JsonSubTypes.Type ( value = BankTransferDto . class , name = \"bank\" ) }) public abstract class PaymentDto { } public class CardPaymentDto extends PaymentDto { public String cardLast4 ; } public class BankTransferDto extends PaymentDto { public String iban ; } Object \u2192 Output { \"type\" : \"card\" , \"cardLast4\" : \"4242\" } Input \u2192 Object { \"type\" : \"bank\" , \"iban\" : \"LT12 3456 7890 1234\" } Useful options for @JsonTypeInfo (max 5) use = Id.NAME \u2014 symbolic names (most common with @JsonSubTypes ). use = Id.CLASS \u2014 fully qualified class name (tightly couples API to Java). include = As.PROPERTY \u2014 add \"type\": \"...\" field (most common). include = As.EXISTING_PROPERTY \u2014 reuse an existing field as the type key. property = \"type\" \u2014 name of that discriminator field. quick \u201cwhen do i use what?\u201d map \u00b6 Names don\u2019t match? \u2192 @JsonProperty (maybe with access ). Hide or tolerate extras? \u2192 @JsonIgnore , @JsonIgnoreProperties . Too many nulls/empties? \u2192 @JsonInclude with NON_NULL / NON_EMPTY . Dates weird? \u2192 @JsonFormat (pattern + timezone). Legacy input names? \u2192 @JsonAlias . Immutable DTOs? \u2192 @JsonCreator (+ @JsonProperty params). Graph cycles? \u2192 managed/back or identity ids. Mixed subtypes? \u2192 @JsonTypeInfo + @JsonSubTypes . tiny end-to-end example (mixing a few) \u00b6 @JsonInclude ( JsonInclude . Include . NON_EMPTY ) public class UserDto { @JsonProperty ( \"id\" ) private Long id ; @JsonProperty ( \"name\" ) private String fullName ; @JsonIgnore private String internalNote ; @JsonProperty ( value = \"email\" , access = JsonProperty . Access . WRITE_ONLY ) private String email ; // input only @JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"yyyy-MM-dd\" ) private LocalDate birthday ; @JsonProperty ( \"role\" ) private Role role ; // enum with @JsonValue as shown earlier } Input { \"id\" : 10 , \"name\" : \"Sam\" , \"email\" : \"sam@ex.com\" , \"birthday\" : \"1990-05-01\" , \"role\" : \"admin\" , \"extra\" : \"ignored client junk\" } Output { \"id\" : 10 , \"name\" : \"Sam\" , \"birthday\" : \"1990-05-01\" , \"role\" : \"admin\" } jackson advanced annotations & patterns \u00b6 Jackson has many more annotations and patterns for advanced use cases. Here are some of the most useful ones, explained with examples. 1) global vs per-class: when to annotate vs configure \u00b6 Rule of thumb If it\u2019s about a DTO\u2019s contract , prefer annotations (portable, self-documenting). If it\u2019s a cross-cutting policy , prefer mapper config (Spring Boot auto-config or your ObjectMapper bean). (No snippet here because you asked to include code only where annotations appear. Below, everything is annotation-first.) 2) @JsonInclude \u2014 advanced tricks (field-level + value filters) \u00b6 Why : fine-tune which values are omitted. // class-level: drop nulls by default @JsonInclude ( JsonInclude . Include . NON_NULL ) public class ProductDto { private String name ; // field override: drop empty strings/collections too @JsonInclude ( JsonInclude . Include . NON_EMPTY ) private String description ; // drop defaults (e.g., 0, false, empty) \u2014 great for PATCH-like responses @JsonInclude ( JsonInclude . Include . NON_DEFAULT ) private int stock ; // drop Optional.empty but keep present values @JsonInclude ( JsonInclude . Include . NON_ABSENT ) private Optional < String > ean ; // contentInclude: drop nulls inside collections/maps (keeps container) @JsonInclude ( content = JsonInclude . Include . NON_NULL ) private List < String > tags ; } Object \u2192 Output { \"name\" : \"Desk\" , \"stock\" : 0 , // NOTE: kept unless default value is actually 0 at field init \"tags\" : [] // container kept; null elements dropped } Useful modes (max 5) ALWAYS , NON_NULL , NON_EMPTY , NON_DEFAULT , NON_ABSENT content = ... \u2014 apply rule to elements of collections/maps tip: NON_DEFAULT compares to the field\u2019s initialized default . If int stock = 0; , zero will be dropped; if uninitialized, zero may be kept. 3) @JsonProperty \u2014 access, required, defaults, ordering partner \u00b6 Why : total control over naming and read/write visibility. @JsonPropertyOrder ({ \"id\" , \"name\" , \"email\" }) public class UserDto { @JsonProperty ( \"id\" ) private Long id ; // write-only: accepted on input, hidden on output @JsonProperty ( value = \"email\" , access = JsonProperty . Access . WRITE_ONLY , required = true , defaultValue = \"unknown@local\" ) private String email ; // read-only: shown in output, ignored on input @JsonProperty ( value = \"name\" , access = JsonProperty . Access . READ_ONLY ) private String fullName ; } Input \u2192 Object { \"id\" : 7 , \"email\" : \"a@b.com\" , \"name\" : \"ignored on input\" } Object \u2192 Output { \"id\" : 7 , \"name\" : \"Ada Lovelace\" } Useful options (max 5) value = \"...\" (json name) access = READ_ONLY | WRITE_ONLY | READ_WRITE required = true defaultValue = \"...\" (used if missing on input) pair with @JsonPropertyOrder (stable field order) 4) @JsonSetter / @JsonDeserialize \u2014 input rules & null handling \u00b6 Why : control how JSON becomes fields. public class SettingsDto { // treat empty string as null on input @JsonSetter ( nulls = Nulls . SKIP , contentNulls = Nulls . SKIP ) private String theme ; // custom deserializer for tricky field (e.g., \"yes\"/\"no\" \u2192 boolean) @JsonDeserialize ( using = YesNoBooleanDeserializer . class ) private boolean marketingConsent ; } Input \u2192 Object { \"theme\" : \"\" , \"marketingConsent\" : \"yes\" } \u2192 theme stays null (skipped), marketingConsent becomes true . Useful options (max 5) @JsonSetter(nulls = Nulls.SKIP | Nulls.SET | Nulls.FAIL) contentNulls = ... (for collection/map elements) @JsonDeserialize(using = YourDeserializer.class) @JsonDeserialize(contentUsing = ... , keyUsing = ...) (elements/keys) @JsonDeserialize(builder = ...) (for builder patterns) 5) @JsonSerialize \u2014 output shaping (single field or keys/elements) \u00b6 Why : teach Jackson how to write a field. public class ReportDto { // custom serializer: mask last 6 of IBAN @JsonSerialize ( using = MaskingSerializer . class ) private String iban ; // map with non-string keys \u2014 serialize keys in a custom way @JsonSerialize ( keyUsing = ComplexKeySerializer . class ) private Map < UUID , Integer > balancesByAccount ; } Object \u2192 Output (conceptual) { \"iban\" : \"LT****************90\" , \"balancesByAccount\" : { \"acc:550e8400-e29b-41d4-a716-446655440000\" : 120 } } Useful options (max 5) using = ... (value serializer) keyUsing = ... (map key serializer) contentUsing = ... (collection/map element serializer) works with @JsonFormat (dates/numbers) \u2014 format first, then serialize combine with @JsonInclude to omit post-serialization empties 6) @JsonAnySetter / @JsonAnyGetter \u2014 \u201cthe rest of the fields\u201d \u00b6 Why : capture unknown/variable properties into a map and optionally emit them back. public class FlexibleDto { private Map < String , Object > other = new HashMap <> (); @JsonAnySetter public void put ( String name , Object value ) { other . put ( name , value ); } @JsonAnyGetter public Map < String , Object > getOther () { return other ; } } Input \u2192 Object { \"x\" : 1 , \"y\" : 2 , \"anythingElse\" : 3 } Object \u2192 Output { \"x\" : 1 , \"y\" : 2 , \"anythingElse\" : 3 } Useful notes (max 5) great with evolving schemas coexists with @JsonIgnoreProperties(ignoreUnknown = true) (but you usually pick one) values can be typed ( Map<String, JsonNode> or specific DTO) pair with validation after deserialization beware of over-accepting junk (log or validate) 7) @JsonUnwrapped \u2014 flatten nested objects \u00b6 Why : emit a child object\u2019s fields at the parent level (and read them back). public class OrderDto { private String id ; @JsonUnwrapped ( prefix = \"ship_\" , suffix = \"\" ) private AddressDto shipping ; } Object \u2192 Output { \"id\" : \"o1\" , \"ship_street\" : \"Baker St\" , \"ship_city\" : \"Vilnius\" } Useful options (max 5) prefix = \"...\" , suffix = \"...\" (avoid collisions) works both ways (serialize + deserialize) avoid name clashes with parent fields can nest multiple unwrapped sub-objects with careful prefixes combine with @JsonInclude on the nested type 8) @JsonNaming \u2014 automatic casing conventions \u00b6 Why : avoid sprinkling @JsonProperty everywhere for simple case mappings. @JsonNaming ( PropertyNamingStrategies . SnakeCaseStrategy . class ) public class MetricsDto { private long requestCount ; private double errorRate ; } Object \u2192 Output { \"request_count\" : 120 , \"error_rate\" : 0.01 } Useful strategies (max 5) SnakeCaseStrategy SNAKE_CASE (enum alias) LowerCamelCaseStrategy (default) KebabCaseStrategy UpperCamelCaseStrategy tip: prefer @JsonProperty for exceptions , @JsonNaming for bulk rules. 9) @JsonView \u2014 role-based field visibility \u00b6 Why : one DTO, different audiences (public vs admin). public class Views { public static class Public {} public static class Admin extends Public {} } public class UserDto { @JsonView ( Views . Public . class ) public Long id ; @JsonView ( Views . Public . class ) public String displayName ; @JsonView ( Views . Admin . class ) public String email ; } Serialize with a view (Spring controller example) // @JsonView(Views.Public.class) on method or return type Public Output { \"id\" : 1 , \"displayName\" : \"Ada\" } Admin Output { \"id\" : 1 , \"displayName\" : \"Ada\" , \"email\" : \"ada@b.com\" } Useful notes (max 5) views compose via inheritance annotate fields and/or getters controller-level @JsonView applies to response tests: use mapper.writerWithView(Views.Public.class) don\u2019t overuse; it increases complexity 10) polymorphism deeper \u2014 names, existing/external type ids, wrappers \u00b6 Why : control where the type info lives. // common base @JsonTypeInfo ( use = JsonTypeInfo . Id . NAME , include = JsonTypeInfo . As . PROPERTY , property = \"type\" ) @JsonSubTypes ({ @JsonSubTypes.Type ( value = CardPaymentDto . class , name = \"card\" ), @JsonSubTypes.Type ( value = BankTransferDto . class , name = \"bank\" ) }) public abstract class PaymentDto {} // optional: name at subtype (instead of listing in @JsonSubTypes) @JsonTypeName ( \"card\" ) public class CardPaymentDto extends PaymentDto { public String cardLast4 ; } Variants (most used) include = As.EXISTING_PROPERTY \u2014 reuse a real field as the discriminator. include = As.EXTERNAL_PROPERTY \u2014 type sits next to the property holding the object (used inside containers). include = As.WRAPPER_OBJECT \u2014 {\"card\": {...}} style. I/O (wrapper example) // With As.WRAPPER_OBJECT { \"card\" : { \"cardLast4\" : \"4242\" } } Useful options (max 5) use = Id.NAME | Id.CLASS | Id.MINIMAL_CLASS include = As.PROPERTY | As.EXISTING_PROPERTY | As.EXTERNAL_PROPERTY | As.WRAPPER_OBJECT property = \"type\" visible = true (keep the type property in POJO if also a real field) defaultImpl = ... (fallback subtype) 11) identity & cycles advanced \u2014 scopes and resolvers \u00b6 Why : control how object identity is generated and resolved. @JsonIdentityInfo ( generator = ObjectIdGenerators . PropertyGenerator . class , property = \"id\" , resolver = MyIdResolver . class , // optional custom lookups scope = ProjectDto . class // id uniqueness per scope ) public class ProjectDto { public Long id ; public String name ; public List < ProjectDto > children ; } Output (with refs) { \"id\" : 1 , \"name\" : \"Root\" , \"children\" : [ { \"id\" : 2 , \"name\" : \"Child\" , \"children\" : [ 1 ] } ] } Useful knobs (max 5) generator = PropertyGenerator | IntSequenceGenerator | UUIDGenerator property = \"...\" for property-based ids scope = ... limit id space resolver = ... custom id resolution pair with @JsonIdentityReference(alwaysAsId = true) to always emit just the id 12) mixins \u2014 annotate without touching the class \u00b6 Why : 3rd-party classes or you want \u201cannotation profiles\u201d. // mixin type: only annotations, same shape as target public abstract class UserMixin { @JsonProperty ( \"id\" ) abstract Long getId (); @JsonIgnore abstract String getInternalNote (); } // register mixin with mapper (Spring bean config, not shown per your ask) Effect : your DTO JSON changes as if you had annotated the original class. Useful notes (max 5) great for libraries/records you can\u2019t modify test different API contracts in tests combine with views or filters keep mixins close to config for discoverability annotate getters/setters/fields in the mixin 13) dynamic filters \u2014 @JsonFilter \u00b6 Why : choose at runtime which fields to include. @JsonFilter ( \"userFilter\" ) public class UserDto { public Long id ; public String name ; public String email ; } (You apply a FilterProvider at write time \u2014 code lives outside the DTO; included here just to show the annotation anchor.) Useful notes (max 5) per-write control (good for ad-hoc projections) combine with SimpleBeanPropertyFilter can whitelist or blacklist fields filters stack with other annotations more flexible but harder to reason about than @JsonView 14) records & immutables \u2014 minimal ceremony \u00b6 Why : concise DTOs with stable contracts. public record CustomerDto ( @JsonProperty ( \"id\" ) Long id , @JsonProperty ( \"name\" ) String name , @JsonFormat ( pattern = \"yyyy-MM-dd\" ) LocalDate since ) {} Input { \"id\" : 5 , \"name\" : \"Mila\" , \"since\" : \"2021-01-01\" } Output { \"id\" : 5 , \"name\" : \"Mila\" , \"since\" : \"2021-01-01\" } quick chooser (deep cut) \u00b6 Mass renaming \u2192 @JsonNaming ; exceptions \u2192 @JsonProperty . Selective omission \u2192 @JsonInclude (field or content-level). Input cleanup \u2192 @JsonSetter(nulls=...) or custom @JsonDeserialize . Dynamic & role-based views \u2192 @JsonView or @JsonFilter (runtime). Graphy models \u2192 @JsonManagedReference/@JsonBackReference (simple) or @JsonIdentityInfo (complex). Flat API shape \u2192 @JsonUnwrapped (use prefixes). Polymorphism \u2192 @JsonTypeInfo + @JsonSubTypes (pick include mode carefully).","title":"@Json"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#jackson-json-serialization-deserialization-annotations-cheat-sheet","text":"jackson in one sentence Jackson turns Java objects \u21c4 JSON . It works out of the box, and you use annotations on your DTOs when the default JSON isn\u2019t what you want.","title":"jackson JSON serialization &amp; deserialization annotations \u2014 cheat sheet"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#jackson-common-annotations-patterns","text":"","title":"jackson common annotations &amp; patterns"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#1-jsonproperty-rename-or-control-access","text":"Why : your Java field names don\u2019t match the API JSON, or you want a field to be read-only/write-only in JSON. How it affects direction Serialization (object \u2192 JSON): field appears using the name you give. Deserialization (JSON \u2192 object): field is read from that JSON name. public class UserDto { @JsonProperty ( \"user_id\" ) private Long id ; @JsonProperty ( value = \"email\" , access = JsonProperty . Access . WRITE_ONLY ) private String email ; // accepted on input but hidden in output } Input \u2192 Object { \"user_id\" : 1 , \"email\" : \"a@b.com\" } Object \u2192 Output { \"user_id\" : 1 } Handy flags (max 5) value = \"name\" \u2192 JSON field name. access = READ_ONLY \u2192 show in output only. access = WRITE_ONLY \u2192 accept on input only. required = true \u2192 fail if missing on input. defaultValue = \"...\" \u2192 used if absent on input.","title":"1) @JsonProperty \u2014 rename or control access"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#2-jsoninclude-drop-noise-nulls-empties-defaults","text":"Why : make responses smaller/cleaner. @JsonInclude ( JsonInclude . Include . NON_NULL ) public class ProfileDto { private String name ; private String bio ; // null \u2192 omitted } Object \u2192 Output { \"name\" : \"Lin\" } Useful modes (pick what you need) ALWAYS \u2014 include everything (default). NON_NULL \u2014 drop only null . NON_EMPTY \u2014 drop null , \"\" , [] , {} . NON_DEFAULT \u2014 drop values equal to field defaults (e.g., 0 , false , empty). NON_ABSENT \u2014 drop Optional.empty() (keeps non-empty Optionals). Per-field override : you can also put @JsonInclude(...) directly on a field.","title":"2) @JsonInclude \u2014 drop noise (nulls, empties, defaults)"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#3-jsonignore-jsonignoreproperties-hide-or-tolerate-extras","text":"Why : hide sensitive/internal fields, or ignore unknown JSON fields so clients don\u2019t break you. @JsonIgnoreProperties ( ignoreUnknown = true ) // ignore extra JSON input public class AccountDto { private String email ; @JsonIgnore // never show in JSON private String passwordHash ; } Input with extras \u2192 Object { \"email\" : \"a@b.com\" , \"unexpected\" : 123 } Object \u2192 Output { \"email\" : \"a@b.com\" } Useful options (max 5) ignoreUnknown = true \u2014 skip unexpected input fields. value = {\"field1\",\"field2\"} \u2014 ignore these by name. allowGetters = true \u2014 still serialize (getters allowed). allowSetters = true \u2014 still deserialize (setters allowed). @JsonIgnore (field or getter) \u2014 hard hide that one property. Tip: prefer @JsonIgnore for single fields; use @JsonIgnoreProperties for class-level rules.","title":"3) @JsonIgnore / @JsonIgnoreProperties \u2014 hide or tolerate extras"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#4-jsonformat-make-dates-predictable","text":"Why : you control the exact text format instead of gambling on defaults. public class EventDto { @JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"yyyy-MM-dd'T'HH:mm:ssXXX\" ) private ZonedDateTime startsAt ; } Object \u2192 Output { \"startsAt\" : \"2025-10-04T09:30:00+03:00\" } Useful options (max 5) shape = STRING \u2014 format as text (common for dates). shape = NUMBER \u2014 epoch millis/seconds (with @JsonFormat + config). pattern = \"...\" \u2014 custom date pattern. timezone = \"UTC\" \u2014 force a TZ (or Europe/Vilnius ). locale = \"en\" \u2014 locale for month/day names, etc.","title":"4) @JsonFormat \u2014 make dates predictable"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#5-jsonalias-accept-many-input-names-output-one","text":"Why : smooth migrations: multiple incoming names map to one field. public class ProductDto { @JsonProperty ( \"price\" ) // output as \"price\" @JsonAlias ({ \"cost\" , \"amount\" }) // accept these on input private BigDecimal price ; } Valid Inputs { \"price\" : 10.99 } { \"cost\" : 10.99 } { \"amount\" : 10.99 } Object \u2192 Output { \"price\" : 10.99 }","title":"5) @JsonAlias \u2014 accept many input names, output one"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#6-jsoncreator-build-immutable-objects-from-json","text":"Why : records/immutables or no no-arg constructor? Tell Jackson which ctor/factory to use. public class PointDto { private final int x ; private final int y ; @JsonCreator ( mode = JsonCreator . Mode . PROPERTIES ) public PointDto ( @JsonProperty ( \"x\" ) int x , @JsonProperty ( \"y\" ) int y ) { this . x = x ; this . y = y ; } } Input \u2192 Object { \"x\" : 3 , \"y\" : 4 } Useful modes (max 5) Mode.PROPERTIES \u2014 match by property names (most common). Mode.DELEGATING \u2014 pass the whole input into one param (single-value wrapper). Works with static factory + @JsonCreator too. Combine with @JsonProperty(required = true) on params. Pair with @JsonValue on the other side to serialize as a single value.","title":"6) @JsonCreator \u2014 build immutable objects from JSON"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#7-jsonvalue-serialize-as-a-single-value-enumsvalue-objects","text":"Why : make an enum or tiny object show up as a simple string/number. public enum Role { ADMIN ( \"admin\" ), USER ( \"user\" ); private final String label ; Role ( String l ) { this . label = l ; } @JsonValue public String toJson () { return label ; } } Enum \u2192 Output \"admin\" For deserializing back , add a @JsonCreator factory that turns the string into the enum/value object.","title":"7) @JsonValue \u2014 serialize as a single value (enums/value objects)"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#8-bidirectional-relations-stop-infinite-loops","text":"Problem : parent \u2192 child \u2192 parent \u2192 \u2026 during serialization. Option A: \u201cmanaged/back\u201d pair public class OrderDto { @JsonManagedReference private List < OrderItemDto > items ; } public class OrderItemDto { @JsonBackReference private OrderDto order ; } Object \u2192 Output (simplified) { \"items\" : [ { /* no \"order\" back-ref here */ } ] } Option B: identity by id @JsonIdentityInfo ( generator = ObjectIdGenerators . PropertyGenerator . class , property = \"id\" ) public class CategoryDto { private Long id ; private String name ; private List < CategoryDto > children ; private CategoryDto parent ; } Object \u2192 Output { \"id\" : 1 , \"name\" : \"Root\" , \"children\" : [ { \"id\" : 2 , \"name\" : \"Child\" , \"parent\" : 1 } ], \"parent\" : null } When to choose Use A for simple parent\u2194child where you just want to drop the back link. Use B when the graph is more complex or you want references by id.","title":"8) Bidirectional relations \u2014 stop infinite loops"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#9-polymorphism-jsontypeinfo-jsonsubtypes","text":"Why : a field/collection holds different concrete types; you need a type hint. @JsonTypeInfo ( use = JsonTypeInfo . Id . NAME , include = JsonTypeInfo . As . PROPERTY , property = \"type\" ) @JsonSubTypes ({ @JsonSubTypes.Type ( value = CardPaymentDto . class , name = \"card\" ), @JsonSubTypes.Type ( value = BankTransferDto . class , name = \"bank\" ) }) public abstract class PaymentDto { } public class CardPaymentDto extends PaymentDto { public String cardLast4 ; } public class BankTransferDto extends PaymentDto { public String iban ; } Object \u2192 Output { \"type\" : \"card\" , \"cardLast4\" : \"4242\" } Input \u2192 Object { \"type\" : \"bank\" , \"iban\" : \"LT12 3456 7890 1234\" } Useful options for @JsonTypeInfo (max 5) use = Id.NAME \u2014 symbolic names (most common with @JsonSubTypes ). use = Id.CLASS \u2014 fully qualified class name (tightly couples API to Java). include = As.PROPERTY \u2014 add \"type\": \"...\" field (most common). include = As.EXISTING_PROPERTY \u2014 reuse an existing field as the type key. property = \"type\" \u2014 name of that discriminator field.","title":"9) Polymorphism \u2014 @JsonTypeInfo + @JsonSubTypes"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#quick-when-do-i-use-what-map","text":"Names don\u2019t match? \u2192 @JsonProperty (maybe with access ). Hide or tolerate extras? \u2192 @JsonIgnore , @JsonIgnoreProperties . Too many nulls/empties? \u2192 @JsonInclude with NON_NULL / NON_EMPTY . Dates weird? \u2192 @JsonFormat (pattern + timezone). Legacy input names? \u2192 @JsonAlias . Immutable DTOs? \u2192 @JsonCreator (+ @JsonProperty params). Graph cycles? \u2192 managed/back or identity ids. Mixed subtypes? \u2192 @JsonTypeInfo + @JsonSubTypes .","title":"quick \u201cwhen do i use what?\u201d map"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#tiny-end-to-end-example-mixing-a-few","text":"@JsonInclude ( JsonInclude . Include . NON_EMPTY ) public class UserDto { @JsonProperty ( \"id\" ) private Long id ; @JsonProperty ( \"name\" ) private String fullName ; @JsonIgnore private String internalNote ; @JsonProperty ( value = \"email\" , access = JsonProperty . Access . WRITE_ONLY ) private String email ; // input only @JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"yyyy-MM-dd\" ) private LocalDate birthday ; @JsonProperty ( \"role\" ) private Role role ; // enum with @JsonValue as shown earlier } Input { \"id\" : 10 , \"name\" : \"Sam\" , \"email\" : \"sam@ex.com\" , \"birthday\" : \"1990-05-01\" , \"role\" : \"admin\" , \"extra\" : \"ignored client junk\" } Output { \"id\" : 10 , \"name\" : \"Sam\" , \"birthday\" : \"1990-05-01\" , \"role\" : \"admin\" }","title":"tiny end-to-end example (mixing a few)"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#jackson-advanced-annotations-patterns","text":"Jackson has many more annotations and patterns for advanced use cases. Here are some of the most useful ones, explained with examples.","title":"jackson advanced annotations &amp; patterns"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#1-global-vs-per-class-when-to-annotate-vs-configure","text":"Rule of thumb If it\u2019s about a DTO\u2019s contract , prefer annotations (portable, self-documenting). If it\u2019s a cross-cutting policy , prefer mapper config (Spring Boot auto-config or your ObjectMapper bean). (No snippet here because you asked to include code only where annotations appear. Below, everything is annotation-first.)","title":"1) global vs per-class: when to annotate vs configure"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#2-jsoninclude-advanced-tricks-field-level-value-filters","text":"Why : fine-tune which values are omitted. // class-level: drop nulls by default @JsonInclude ( JsonInclude . Include . NON_NULL ) public class ProductDto { private String name ; // field override: drop empty strings/collections too @JsonInclude ( JsonInclude . Include . NON_EMPTY ) private String description ; // drop defaults (e.g., 0, false, empty) \u2014 great for PATCH-like responses @JsonInclude ( JsonInclude . Include . NON_DEFAULT ) private int stock ; // drop Optional.empty but keep present values @JsonInclude ( JsonInclude . Include . NON_ABSENT ) private Optional < String > ean ; // contentInclude: drop nulls inside collections/maps (keeps container) @JsonInclude ( content = JsonInclude . Include . NON_NULL ) private List < String > tags ; } Object \u2192 Output { \"name\" : \"Desk\" , \"stock\" : 0 , // NOTE: kept unless default value is actually 0 at field init \"tags\" : [] // container kept; null elements dropped } Useful modes (max 5) ALWAYS , NON_NULL , NON_EMPTY , NON_DEFAULT , NON_ABSENT content = ... \u2014 apply rule to elements of collections/maps tip: NON_DEFAULT compares to the field\u2019s initialized default . If int stock = 0; , zero will be dropped; if uninitialized, zero may be kept.","title":"2) @JsonInclude \u2014 advanced tricks (field-level + value filters)"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#3-jsonproperty-access-required-defaults-ordering-partner","text":"Why : total control over naming and read/write visibility. @JsonPropertyOrder ({ \"id\" , \"name\" , \"email\" }) public class UserDto { @JsonProperty ( \"id\" ) private Long id ; // write-only: accepted on input, hidden on output @JsonProperty ( value = \"email\" , access = JsonProperty . Access . WRITE_ONLY , required = true , defaultValue = \"unknown@local\" ) private String email ; // read-only: shown in output, ignored on input @JsonProperty ( value = \"name\" , access = JsonProperty . Access . READ_ONLY ) private String fullName ; } Input \u2192 Object { \"id\" : 7 , \"email\" : \"a@b.com\" , \"name\" : \"ignored on input\" } Object \u2192 Output { \"id\" : 7 , \"name\" : \"Ada Lovelace\" } Useful options (max 5) value = \"...\" (json name) access = READ_ONLY | WRITE_ONLY | READ_WRITE required = true defaultValue = \"...\" (used if missing on input) pair with @JsonPropertyOrder (stable field order)","title":"3) @JsonProperty \u2014 access, required, defaults, ordering partner"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#4-jsonsetter-jsondeserialize-input-rules-null-handling","text":"Why : control how JSON becomes fields. public class SettingsDto { // treat empty string as null on input @JsonSetter ( nulls = Nulls . SKIP , contentNulls = Nulls . SKIP ) private String theme ; // custom deserializer for tricky field (e.g., \"yes\"/\"no\" \u2192 boolean) @JsonDeserialize ( using = YesNoBooleanDeserializer . class ) private boolean marketingConsent ; } Input \u2192 Object { \"theme\" : \"\" , \"marketingConsent\" : \"yes\" } \u2192 theme stays null (skipped), marketingConsent becomes true . Useful options (max 5) @JsonSetter(nulls = Nulls.SKIP | Nulls.SET | Nulls.FAIL) contentNulls = ... (for collection/map elements) @JsonDeserialize(using = YourDeserializer.class) @JsonDeserialize(contentUsing = ... , keyUsing = ...) (elements/keys) @JsonDeserialize(builder = ...) (for builder patterns)","title":"4) @JsonSetter / @JsonDeserialize \u2014 input rules &amp; null handling"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#5-jsonserialize-output-shaping-single-field-or-keyselements","text":"Why : teach Jackson how to write a field. public class ReportDto { // custom serializer: mask last 6 of IBAN @JsonSerialize ( using = MaskingSerializer . class ) private String iban ; // map with non-string keys \u2014 serialize keys in a custom way @JsonSerialize ( keyUsing = ComplexKeySerializer . class ) private Map < UUID , Integer > balancesByAccount ; } Object \u2192 Output (conceptual) { \"iban\" : \"LT****************90\" , \"balancesByAccount\" : { \"acc:550e8400-e29b-41d4-a716-446655440000\" : 120 } } Useful options (max 5) using = ... (value serializer) keyUsing = ... (map key serializer) contentUsing = ... (collection/map element serializer) works with @JsonFormat (dates/numbers) \u2014 format first, then serialize combine with @JsonInclude to omit post-serialization empties","title":"5) @JsonSerialize \u2014 output shaping (single field or keys/elements)"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#6-jsonanysetter-jsonanygetter-the-rest-of-the-fields","text":"Why : capture unknown/variable properties into a map and optionally emit them back. public class FlexibleDto { private Map < String , Object > other = new HashMap <> (); @JsonAnySetter public void put ( String name , Object value ) { other . put ( name , value ); } @JsonAnyGetter public Map < String , Object > getOther () { return other ; } } Input \u2192 Object { \"x\" : 1 , \"y\" : 2 , \"anythingElse\" : 3 } Object \u2192 Output { \"x\" : 1 , \"y\" : 2 , \"anythingElse\" : 3 } Useful notes (max 5) great with evolving schemas coexists with @JsonIgnoreProperties(ignoreUnknown = true) (but you usually pick one) values can be typed ( Map<String, JsonNode> or specific DTO) pair with validation after deserialization beware of over-accepting junk (log or validate)","title":"6) @JsonAnySetter / @JsonAnyGetter \u2014 \u201cthe rest of the fields\u201d"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#7-jsonunwrapped-flatten-nested-objects","text":"Why : emit a child object\u2019s fields at the parent level (and read them back). public class OrderDto { private String id ; @JsonUnwrapped ( prefix = \"ship_\" , suffix = \"\" ) private AddressDto shipping ; } Object \u2192 Output { \"id\" : \"o1\" , \"ship_street\" : \"Baker St\" , \"ship_city\" : \"Vilnius\" } Useful options (max 5) prefix = \"...\" , suffix = \"...\" (avoid collisions) works both ways (serialize + deserialize) avoid name clashes with parent fields can nest multiple unwrapped sub-objects with careful prefixes combine with @JsonInclude on the nested type","title":"7) @JsonUnwrapped \u2014 flatten nested objects"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#8-jsonnaming-automatic-casing-conventions","text":"Why : avoid sprinkling @JsonProperty everywhere for simple case mappings. @JsonNaming ( PropertyNamingStrategies . SnakeCaseStrategy . class ) public class MetricsDto { private long requestCount ; private double errorRate ; } Object \u2192 Output { \"request_count\" : 120 , \"error_rate\" : 0.01 } Useful strategies (max 5) SnakeCaseStrategy SNAKE_CASE (enum alias) LowerCamelCaseStrategy (default) KebabCaseStrategy UpperCamelCaseStrategy tip: prefer @JsonProperty for exceptions , @JsonNaming for bulk rules.","title":"8) @JsonNaming \u2014 automatic casing conventions"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#9-jsonview-role-based-field-visibility","text":"Why : one DTO, different audiences (public vs admin). public class Views { public static class Public {} public static class Admin extends Public {} } public class UserDto { @JsonView ( Views . Public . class ) public Long id ; @JsonView ( Views . Public . class ) public String displayName ; @JsonView ( Views . Admin . class ) public String email ; } Serialize with a view (Spring controller example) // @JsonView(Views.Public.class) on method or return type Public Output { \"id\" : 1 , \"displayName\" : \"Ada\" } Admin Output { \"id\" : 1 , \"displayName\" : \"Ada\" , \"email\" : \"ada@b.com\" } Useful notes (max 5) views compose via inheritance annotate fields and/or getters controller-level @JsonView applies to response tests: use mapper.writerWithView(Views.Public.class) don\u2019t overuse; it increases complexity","title":"9) @JsonView \u2014 role-based field visibility"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#10-polymorphism-deeper-names-existingexternal-type-ids-wrappers","text":"Why : control where the type info lives. // common base @JsonTypeInfo ( use = JsonTypeInfo . Id . NAME , include = JsonTypeInfo . As . PROPERTY , property = \"type\" ) @JsonSubTypes ({ @JsonSubTypes.Type ( value = CardPaymentDto . class , name = \"card\" ), @JsonSubTypes.Type ( value = BankTransferDto . class , name = \"bank\" ) }) public abstract class PaymentDto {} // optional: name at subtype (instead of listing in @JsonSubTypes) @JsonTypeName ( \"card\" ) public class CardPaymentDto extends PaymentDto { public String cardLast4 ; } Variants (most used) include = As.EXISTING_PROPERTY \u2014 reuse a real field as the discriminator. include = As.EXTERNAL_PROPERTY \u2014 type sits next to the property holding the object (used inside containers). include = As.WRAPPER_OBJECT \u2014 {\"card\": {...}} style. I/O (wrapper example) // With As.WRAPPER_OBJECT { \"card\" : { \"cardLast4\" : \"4242\" } } Useful options (max 5) use = Id.NAME | Id.CLASS | Id.MINIMAL_CLASS include = As.PROPERTY | As.EXISTING_PROPERTY | As.EXTERNAL_PROPERTY | As.WRAPPER_OBJECT property = \"type\" visible = true (keep the type property in POJO if also a real field) defaultImpl = ... (fallback subtype)","title":"10) polymorphism deeper \u2014 names, existing/external type ids, wrappers"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#11-identity-cycles-advanced-scopes-and-resolvers","text":"Why : control how object identity is generated and resolved. @JsonIdentityInfo ( generator = ObjectIdGenerators . PropertyGenerator . class , property = \"id\" , resolver = MyIdResolver . class , // optional custom lookups scope = ProjectDto . class // id uniqueness per scope ) public class ProjectDto { public Long id ; public String name ; public List < ProjectDto > children ; } Output (with refs) { \"id\" : 1 , \"name\" : \"Root\" , \"children\" : [ { \"id\" : 2 , \"name\" : \"Child\" , \"children\" : [ 1 ] } ] } Useful knobs (max 5) generator = PropertyGenerator | IntSequenceGenerator | UUIDGenerator property = \"...\" for property-based ids scope = ... limit id space resolver = ... custom id resolution pair with @JsonIdentityReference(alwaysAsId = true) to always emit just the id","title":"11) identity &amp; cycles advanced \u2014 scopes and resolvers"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#12-mixins-annotate-without-touching-the-class","text":"Why : 3rd-party classes or you want \u201cannotation profiles\u201d. // mixin type: only annotations, same shape as target public abstract class UserMixin { @JsonProperty ( \"id\" ) abstract Long getId (); @JsonIgnore abstract String getInternalNote (); } // register mixin with mapper (Spring bean config, not shown per your ask) Effect : your DTO JSON changes as if you had annotated the original class. Useful notes (max 5) great for libraries/records you can\u2019t modify test different API contracts in tests combine with views or filters keep mixins close to config for discoverability annotate getters/setters/fields in the mixin","title":"12) mixins \u2014 annotate without touching the class"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#13-dynamic-filters-jsonfilter","text":"Why : choose at runtime which fields to include. @JsonFilter ( \"userFilter\" ) public class UserDto { public Long id ; public String name ; public String email ; } (You apply a FilterProvider at write time \u2014 code lives outside the DTO; included here just to show the annotation anchor.) Useful notes (max 5) per-write control (good for ad-hoc projections) combine with SimpleBeanPropertyFilter can whitelist or blacklist fields filters stack with other annotations more flexible but harder to reason about than @JsonView","title":"13) dynamic filters \u2014 @JsonFilter"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#14-records-immutables-minimal-ceremony","text":"Why : concise DTOs with stable contracts. public record CustomerDto ( @JsonProperty ( \"id\" ) Long id , @JsonProperty ( \"name\" ) String name , @JsonFormat ( pattern = \"yyyy-MM-dd\" ) LocalDate since ) {} Input { \"id\" : 5 , \"name\" : \"Mila\" , \"since\" : \"2021-01-01\" } Output { \"id\" : 5 , \"name\" : \"Mila\" , \"since\" : \"2021-01-01\" }","title":"14) records &amp; immutables \u2014 minimal ceremony"},{"location":"cheatsheets/languages/java/spring/annotations/serialization/json/#quick-chooser-deep-cut","text":"Mass renaming \u2192 @JsonNaming ; exceptions \u2192 @JsonProperty . Selective omission \u2192 @JsonInclude (field or content-level). Input cleanup \u2192 @JsonSetter(nulls=...) or custom @JsonDeserialize . Dynamic & role-based views \u2192 @JsonView or @JsonFilter (runtime). Graphy models \u2192 @JsonManagedReference/@JsonBackReference (simple) or @JsonIdentityInfo (complex). Flat API shape \u2192 @JsonUnwrapped (use prefixes). Polymorphism \u2192 @JsonTypeInfo + @JsonSubTypes (pick include mode carefully).","title":"quick chooser (deep cut)"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/","text":"\ud83e\uddfe Spring @Transactional \u2014 Rollback Rules, Propagation, and Read-Only Patterns \u00b6 A hands-on reference for Spring and Jakarta/JTA transaction management. Focuses on what actually bites developers in production: rollback semantics , propagation chains , and read-only optimizations . \ud83e\udde9 1. The essence of @Transactional \u00b6 Transactions wrap a series of DB operations into an atomic unit \u2014 all succeed or all fail. @Transactional public void process () { repo . save (...); repo . update (...); if ( somethingWrong ()) throw new RuntimeException (); } If an unchecked exception occurs, Spring marks the transaction for rollback . Default rules \u00b6 Type of Exception Spring Default Jakarta Default Fix / Override RuntimeException / Error rollback rollback \u2014 Checked Exception commit commit add rollbackFor=Exception.class (Spring) or rollbackOn=Exception.class (Jakarta) Caught exception commit commit call setRollbackOnly() manually \u2699\ufe0f 2. Rollback in practice \u00b6 A) Unchecked exception \u2192 rollback automatically \u00b6 @Transactional public void placeOrder ( Long userId ) { orderRepo . save ( new Order (...)); paymentRepo . save ( new Payment (...)); throw new IllegalStateException ( \"payment gateway down\" ); // rollback } Both inserts roll back. B) Checked exception \u2192 commits unless configured \u00b6 @Transactional public void placeOrderChecked ( Long userId ) throws IOException { orderRepo . save (...); throw new IOException ( \"printer failed\" ); // commits } C) Fix: include checked in rollback \u00b6 @Transactional ( rollbackFor = Exception . class ) public void placeOrderCheckedRollback ( Long userId ) throws IOException { orderRepo . save (...); throw new IOException ( \"printer failed\" ); // rolls back } D) Jakarta equivalent \u00b6 import jakarta.transaction.Transactional ; @Transactional ( rollbackOn = Exception . class ) public void placeOrderJakarta ( Long userId ) throws IOException { ... } \ud83d\udd04 3. Propagation behavior \u00b6 Each transaction can join, suspend, or create a new one. Propagation Meaning Typical Use REQUIRED (default) Join if exists, else start new Normal service calls REQUIRES_NEW Suspend current, start new Auditing/logging NESTED Create savepoint (rollback inner only) Partial rollback inside parent SUPPORTS Run within tx if one exists Read-only operations NOT_SUPPORTED Run non-transactionally Reporting NEVER Throw error if a tx exists Safety guard Example \u00b6 @Transactional public void placeOrder () { saveOrder (); // same tx audit_requiresNew (); // separate tx throw new RuntimeException ( \"outer fails\" ); } @Transactional ( propagation = Propagation . REQUIRES_NEW ) public void audit_requiresNew () { auditRepo . save ( new AuditLog ( \"order saved\" )); } Audit commits, even though the outer one rolls back. \ud83d\udcd8 4. Read-only transactions \u00b6 @Transactional ( readOnly = true ) public List < Order > listRecentOrders ( int limit ) { return orderRepo . findTopNByOrderByCreatedAtDesc ( limit ); } Hints ORM and drivers that no writes will occur. Improves performance (skips dirty checking, can use read-only DB replicas). \ud83e\uddee 5. Isolation levels and timeout \u00b6 Spring-only attributes: @Transactional ( isolation = Isolation . REPEATABLE_READ , timeout = 10 , readOnly = true ) public List < User > queryActiveUsers () { ... } Isolation.READ_COMMITTED (default) \u2192 prevents dirty reads. Isolation.REPEATABLE_READ \u2192 consistent view of rows. Isolation.SERIALIZABLE \u2192 full locking, slowest but safest. timeout (seconds) \u2192 rollback if exceeded. Jakarta/JTA @Transactional lacks these attributes \u2014 you configure them via the datasource. \ud83e\uddf0 6. Catching exceptions & marking rollback \u00b6 If you catch an exception, the framework assumes everything\u2019s fine \u2014 it will commit unless you mark rollback manually. import org.springframework.transaction.interceptor.TransactionAspectSupport ; @Transactional public void catchButRollback () { try { doWork (); } catch ( Exception e ) { TransactionAspectSupport . currentTransactionStatus (). setRollbackOnly (); } } Jakarta equivalent: import jakarta.transaction.TransactionSynchronizationRegistry ; import jakarta.annotation.Resource ; @Resource TransactionSynchronizationRegistry tsr ; @jakarta.transaction.Transactional public void catchButRollbackJta () { try { doWork (); } catch ( Exception e ) { tsr . setRollbackOnly (); } } \ud83e\uddf1 7. Self-invocation pitfall (proxy mechanics) \u00b6 @Service public class MyService { @Transactional public void outer () { inner (); // self-call bypasses proxy \u2014 no tx applied } @Transactional ( propagation = Propagation . REQUIRES_NEW ) public void inner () { ... } } Spring proxies intercept external calls only. Solutions: Call via another bean ( otherBean.inner() ). Use interface-based proxy injection. Or enable AspectJ mode ( @EnableAspectJAutoProxy(exposeProxy = true) ). \u2696\ufe0f 8. Choosing between Spring & Jakarta \u00b6 Feature Spring @Transactional Jakarta/JTA @Transactional isolation , timeout , readOnly \u2705 yes \u274c no rollbackFor , noRollbackFor \u2705 yes \u274c no propagation (REQUIRES_NEW, NESTED) \u2705 yes limited (TxType.*) Multiple transaction managers \u2705 yes \u274c global TM only XA / JTA compatibility \u2705 via JtaTransactionManager \u2705 native Simplicity / portability moderate lightweight Rule of thumb: Use Spring if you rely on JPA, multiple datasources, or fine-grained control. Use Jakarta if you\u2019re targeting EE containers or minimal portability. \ud83e\udded 9. Targeting specific transaction managers \u00b6 @Transactional ( transactionManager = \"ordersTxManager\" ) public void writeOrder () { ... } @Transactional ( transactionManager = \"billingTxManager\" ) public void writeInvoice () { ... } Used when your app has multiple datasources or distinct persistence contexts. \ud83d\udd10 10. Common pitfalls checklist \u00b6 \u2611 Rollback only happens if the framework sees the exception. \u2611 Checked exceptions need rollbackFor or rollbackOn . \u2611 Self-calls bypass proxy transactions. \u2611 readOnly=true is a hint, not a guarantee. \u2611 Use REQUIRES_NEW for independent commits (audits, logs). \u2611 Catching exceptions? Set rollback manually. \u2611 Pick one annotation style consistently. \u2611 Log transaction boundaries when debugging ( DEBUG org.springframework.transaction ). \ud83e\uddfe Summary Table \u00b6 Concept Spring syntax Jakarta syntax Notes Rollback on RuntimeException \u2714\ufe0f (default) \u2714\ufe0f (default) \u2014 Rollback on checked Exception rollbackFor=Exception.class rollbackOn=Exception.class must opt-in Independent tx Propagation.REQUIRES_NEW TxType.REQUIRES_NEW inner commit survives outer failure Read-only @Transactional(readOnly=true) \u2014 optimization hint Isolation/timeout attributes container config Spring feature Nested tx Propagation.NESTED \u2014 savepoint-based, JDBC only \ud83d\ude80 TL;DR Mental Model \u00b6 A transaction begins at the first @Transactional boundary. If an exception escapes the boundary, rollback occurs (runtime-only by default). Nested calls usually share the same tx unless marked otherwise. Caught exceptions commit unless you flag rollback manually. Read-only methods are lighter, safer for queries. Always log resolved propagation chains when debugging weird commits. Outcome: You now have a complete transactional playbook \u2014 clear rollback rules, predictable propagation, and a memory-safe mental map for every @Transactional boundary.","title":"@Transactional"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#spring-transactional-rollback-rules-propagation-and-read-only-patterns","text":"A hands-on reference for Spring and Jakarta/JTA transaction management. Focuses on what actually bites developers in production: rollback semantics , propagation chains , and read-only optimizations .","title":"\ud83e\uddfe Spring @Transactional \u2014 Rollback Rules, Propagation, and Read-Only Patterns"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#1-the-essence-of-transactional","text":"Transactions wrap a series of DB operations into an atomic unit \u2014 all succeed or all fail. @Transactional public void process () { repo . save (...); repo . update (...); if ( somethingWrong ()) throw new RuntimeException (); } If an unchecked exception occurs, Spring marks the transaction for rollback .","title":"\ud83e\udde9 1. The essence of @Transactional"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#default-rules","text":"Type of Exception Spring Default Jakarta Default Fix / Override RuntimeException / Error rollback rollback \u2014 Checked Exception commit commit add rollbackFor=Exception.class (Spring) or rollbackOn=Exception.class (Jakarta) Caught exception commit commit call setRollbackOnly() manually","title":"Default rules"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#2-rollback-in-practice","text":"","title":"\u2699\ufe0f 2. Rollback in practice"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#a-unchecked-exception-rollback-automatically","text":"@Transactional public void placeOrder ( Long userId ) { orderRepo . save ( new Order (...)); paymentRepo . save ( new Payment (...)); throw new IllegalStateException ( \"payment gateway down\" ); // rollback } Both inserts roll back.","title":"A) Unchecked exception \u2192 rollback automatically"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#b-checked-exception-commits-unless-configured","text":"@Transactional public void placeOrderChecked ( Long userId ) throws IOException { orderRepo . save (...); throw new IOException ( \"printer failed\" ); // commits }","title":"B) Checked exception \u2192 commits unless configured"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#c-fix-include-checked-in-rollback","text":"@Transactional ( rollbackFor = Exception . class ) public void placeOrderCheckedRollback ( Long userId ) throws IOException { orderRepo . save (...); throw new IOException ( \"printer failed\" ); // rolls back }","title":"C) Fix: include checked in rollback"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#d-jakarta-equivalent","text":"import jakarta.transaction.Transactional ; @Transactional ( rollbackOn = Exception . class ) public void placeOrderJakarta ( Long userId ) throws IOException { ... }","title":"D) Jakarta equivalent"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#3-propagation-behavior","text":"Each transaction can join, suspend, or create a new one. Propagation Meaning Typical Use REQUIRED (default) Join if exists, else start new Normal service calls REQUIRES_NEW Suspend current, start new Auditing/logging NESTED Create savepoint (rollback inner only) Partial rollback inside parent SUPPORTS Run within tx if one exists Read-only operations NOT_SUPPORTED Run non-transactionally Reporting NEVER Throw error if a tx exists Safety guard","title":"\ud83d\udd04 3. Propagation behavior"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#example","text":"@Transactional public void placeOrder () { saveOrder (); // same tx audit_requiresNew (); // separate tx throw new RuntimeException ( \"outer fails\" ); } @Transactional ( propagation = Propagation . REQUIRES_NEW ) public void audit_requiresNew () { auditRepo . save ( new AuditLog ( \"order saved\" )); } Audit commits, even though the outer one rolls back.","title":"Example"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#4-read-only-transactions","text":"@Transactional ( readOnly = true ) public List < Order > listRecentOrders ( int limit ) { return orderRepo . findTopNByOrderByCreatedAtDesc ( limit ); } Hints ORM and drivers that no writes will occur. Improves performance (skips dirty checking, can use read-only DB replicas).","title":"\ud83d\udcd8 4. Read-only transactions"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#5-isolation-levels-and-timeout","text":"Spring-only attributes: @Transactional ( isolation = Isolation . REPEATABLE_READ , timeout = 10 , readOnly = true ) public List < User > queryActiveUsers () { ... } Isolation.READ_COMMITTED (default) \u2192 prevents dirty reads. Isolation.REPEATABLE_READ \u2192 consistent view of rows. Isolation.SERIALIZABLE \u2192 full locking, slowest but safest. timeout (seconds) \u2192 rollback if exceeded. Jakarta/JTA @Transactional lacks these attributes \u2014 you configure them via the datasource.","title":"\ud83e\uddee 5. Isolation levels and timeout"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#6-catching-exceptions-marking-rollback","text":"If you catch an exception, the framework assumes everything\u2019s fine \u2014 it will commit unless you mark rollback manually. import org.springframework.transaction.interceptor.TransactionAspectSupport ; @Transactional public void catchButRollback () { try { doWork (); } catch ( Exception e ) { TransactionAspectSupport . currentTransactionStatus (). setRollbackOnly (); } } Jakarta equivalent: import jakarta.transaction.TransactionSynchronizationRegistry ; import jakarta.annotation.Resource ; @Resource TransactionSynchronizationRegistry tsr ; @jakarta.transaction.Transactional public void catchButRollbackJta () { try { doWork (); } catch ( Exception e ) { tsr . setRollbackOnly (); } }","title":"\ud83e\uddf0 6. Catching exceptions &amp; marking rollback"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#7-self-invocation-pitfall-proxy-mechanics","text":"@Service public class MyService { @Transactional public void outer () { inner (); // self-call bypasses proxy \u2014 no tx applied } @Transactional ( propagation = Propagation . REQUIRES_NEW ) public void inner () { ... } } Spring proxies intercept external calls only. Solutions: Call via another bean ( otherBean.inner() ). Use interface-based proxy injection. Or enable AspectJ mode ( @EnableAspectJAutoProxy(exposeProxy = true) ).","title":"\ud83e\uddf1 7. Self-invocation pitfall (proxy mechanics)"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#8-choosing-between-spring-jakarta","text":"Feature Spring @Transactional Jakarta/JTA @Transactional isolation , timeout , readOnly \u2705 yes \u274c no rollbackFor , noRollbackFor \u2705 yes \u274c no propagation (REQUIRES_NEW, NESTED) \u2705 yes limited (TxType.*) Multiple transaction managers \u2705 yes \u274c global TM only XA / JTA compatibility \u2705 via JtaTransactionManager \u2705 native Simplicity / portability moderate lightweight Rule of thumb: Use Spring if you rely on JPA, multiple datasources, or fine-grained control. Use Jakarta if you\u2019re targeting EE containers or minimal portability.","title":"\u2696\ufe0f 8. Choosing between Spring &amp; Jakarta"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#9-targeting-specific-transaction-managers","text":"@Transactional ( transactionManager = \"ordersTxManager\" ) public void writeOrder () { ... } @Transactional ( transactionManager = \"billingTxManager\" ) public void writeInvoice () { ... } Used when your app has multiple datasources or distinct persistence contexts.","title":"\ud83e\udded 9. Targeting specific transaction managers"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#10-common-pitfalls-checklist","text":"\u2611 Rollback only happens if the framework sees the exception. \u2611 Checked exceptions need rollbackFor or rollbackOn . \u2611 Self-calls bypass proxy transactions. \u2611 readOnly=true is a hint, not a guarantee. \u2611 Use REQUIRES_NEW for independent commits (audits, logs). \u2611 Catching exceptions? Set rollback manually. \u2611 Pick one annotation style consistently. \u2611 Log transaction boundaries when debugging ( DEBUG org.springframework.transaction ).","title":"\ud83d\udd10 10. Common pitfalls checklist"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#summary-table","text":"Concept Spring syntax Jakarta syntax Notes Rollback on RuntimeException \u2714\ufe0f (default) \u2714\ufe0f (default) \u2014 Rollback on checked Exception rollbackFor=Exception.class rollbackOn=Exception.class must opt-in Independent tx Propagation.REQUIRES_NEW TxType.REQUIRES_NEW inner commit survives outer failure Read-only @Transactional(readOnly=true) \u2014 optimization hint Isolation/timeout attributes container config Spring feature Nested tx Propagation.NESTED \u2014 savepoint-based, JDBC only","title":"\ud83e\uddfe Summary Table"},{"location":"cheatsheets/languages/java/spring/annotations/transactions/transactional/#tldr-mental-model","text":"A transaction begins at the first @Transactional boundary. If an exception escapes the boundary, rollback occurs (runtime-only by default). Nested calls usually share the same tx unless marked otherwise. Caught exceptions commit unless you flag rollback manually. Read-only methods are lighter, safer for queries. Always log resolved propagation chains when debugging weird commits. Outcome: You now have a complete transactional playbook \u2014 clear rollback rules, predictable propagation, and a memory-safe mental map for every @Transactional boundary.","title":"\ud83d\ude80 TL;DR Mental Model"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/","text":"\ud83c\udf3f Spring ApplicationContext \u2014 The Heart of Spring \u00b6 \ud83e\udde0 What it really is \u00b6 The ApplicationContext is the core container of Spring \u2014 the part that knows about every bean in your project: how to create it, when to wire it, and when to destroy it. If your application were a city, the ApplicationContext would be the city hall \u2014 it keeps the registry of all citizens (beans), their relationships, and their lifecycle rules. \ud83e\ude9e The mental model \u00b6 @Configuration class \u2192 metadata AnnotationConfigApplicationContext \u2192 container Beans \u2192 live objects managed by the container In practice: AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); That single line starts Spring\u2019s world . \ud83e\udde9 Step 1: You hand Spring your blueprint \u00b6 AppConfig.class is your blueprint \u2014 the configuration that tells Spring: \u201cHere\u2019s what classes exist, and here\u2019s how to make them.\u201d It might define beans directly: @Configuration public class AppConfig { @Bean public PaymentService paymentService () { return new PaymentService ( auditService ()); } @Bean public AuditService auditService () { return new AuditService (); } } Or it might tell Spring where to look: @Configuration @ComponentScan ( \"com.example\" ) public class AppConfig {} Either way, you\u2019re not giving Spring the beans \u2014 you\u2019re giving it the map to find or create them later. \ud83e\udde9 Step 2: Spring reads and registers \u00b6 AnnotationConfigApplicationContext reads the annotations on AppConfig : @Configuration \u2192 this class defines beans. @Bean \u2192 register this method\u2019s return type as a bean. @ComponentScan \u2192 search for annotated components ( @Service , @Controller , etc.). Spring doesn\u2019t build anything yet \u2014 it just collects metadata and builds an internal BeanDefinition registry (a big plan for what to create). \ud83e\udde9 Step 3: You request beans \u00b6 When you ask: Object bean = ctx . getBean ( \"paymentService\" ); Spring checks if that bean already exists. If not, it: Looks up its BeanDefinition . Uses reflection to create the object. Injects dependencies (also via reflection). Runs any init methods ( @PostConstruct , afterPropertiesSet() ). After that, the bean becomes part of the live ApplicationContext . \ud83e\udde9 Step 4: Context lifecycle \u00b6 ctx . close (); When the context closes: Spring calls all @PreDestroy or destroy() methods. Releases resources (DB pools, thread pools, etc.). Clears internal caches. That\u2019s the end of the bean lifecycle. \ud83d\udd0d Under the hood \u00b6 When you run: AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); Spring does roughly this: // Pseudo code AppConfig metadata = readAnnotations ( AppConfig . class ); List < BeanDefinition > beans = scanPackages ( metadata ); for ( BeanDefinition def : beans ) { Class <?> type = def . getBeanClass (); Object instance = type . getDeclaredConstructor (). newInstance (); // reflection injectDependencies ( instance ); storeInContext ( def . getName (), instance ); } Spring uses reflection to: Load classes ( Class.forName() ) Create instances ( newInstance() ) Inject fields and methods ( setAccessible(true) \u2192 field.set() ) Call initialization methods \ud83e\udde9 Relationship between AppConfig and AnnotationConfigApplicationContext \u00b6 Concept Role Analogy AppConfig Blueprint that describes beans (metadata). Recipe book AnnotationConfigApplicationContext The engine that reads the blueprint and builds beans. Chef Bean Actual instance built from metadata. The dish Reflection The way the chef uses the recipe (reads annotations, calls constructors). Cooking process So yes \u2014 your earlier understanding was right: AppConfig holds metadata. The ApplicationContext reads it and builds the beans dynamically. \ud83e\udde9 Visual summary \u00b6 AppConfig.class (metadata) \u2193 AnnotationConfigApplicationContext \u2193 reads annotations via reflection BeanDefinitions (blueprints) \u2193 reflectively instantiate + inject Live Beans in ApplicationContext \u2705 TL;DR Summary \u00b6 Concept Description ApplicationContext The Spring container that manages all beans. AppConfig Blueprint class defining or locating beans. Annotations Metadata for Spring to interpret. Reflection The mechanism Spring uses to create and wire beans dynamically. Lifecycle AppConfig \u2192 bean definitions \u2192 creation \u2192 injection \u2192 destruction. \ud83e\ude9e Core takeaway \u00b6 AnnotationConfigApplicationContext is Spring\u2019s brain. AppConfig is its map. Together, they let the framework reflectively build, connect, and manage your entire application at runtime.","title":"ApplicationContext"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#spring-applicationcontext-the-heart-of-spring","text":"","title":"\ud83c\udf3f Spring ApplicationContext \u2014 The Heart of Spring"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#what-it-really-is","text":"The ApplicationContext is the core container of Spring \u2014 the part that knows about every bean in your project: how to create it, when to wire it, and when to destroy it. If your application were a city, the ApplicationContext would be the city hall \u2014 it keeps the registry of all citizens (beans), their relationships, and their lifecycle rules.","title":"\ud83e\udde0 What it really is"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#the-mental-model","text":"@Configuration class \u2192 metadata AnnotationConfigApplicationContext \u2192 container Beans \u2192 live objects managed by the container In practice: AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); That single line starts Spring\u2019s world .","title":"\ud83e\ude9e The mental model"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#step-1-you-hand-spring-your-blueprint","text":"AppConfig.class is your blueprint \u2014 the configuration that tells Spring: \u201cHere\u2019s what classes exist, and here\u2019s how to make them.\u201d It might define beans directly: @Configuration public class AppConfig { @Bean public PaymentService paymentService () { return new PaymentService ( auditService ()); } @Bean public AuditService auditService () { return new AuditService (); } } Or it might tell Spring where to look: @Configuration @ComponentScan ( \"com.example\" ) public class AppConfig {} Either way, you\u2019re not giving Spring the beans \u2014 you\u2019re giving it the map to find or create them later.","title":"\ud83e\udde9 Step 1: You hand Spring your blueprint"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#step-2-spring-reads-and-registers","text":"AnnotationConfigApplicationContext reads the annotations on AppConfig : @Configuration \u2192 this class defines beans. @Bean \u2192 register this method\u2019s return type as a bean. @ComponentScan \u2192 search for annotated components ( @Service , @Controller , etc.). Spring doesn\u2019t build anything yet \u2014 it just collects metadata and builds an internal BeanDefinition registry (a big plan for what to create).","title":"\ud83e\udde9 Step 2: Spring reads and registers"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#step-3-you-request-beans","text":"When you ask: Object bean = ctx . getBean ( \"paymentService\" ); Spring checks if that bean already exists. If not, it: Looks up its BeanDefinition . Uses reflection to create the object. Injects dependencies (also via reflection). Runs any init methods ( @PostConstruct , afterPropertiesSet() ). After that, the bean becomes part of the live ApplicationContext .","title":"\ud83e\udde9 Step 3: You request beans"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#step-4-context-lifecycle","text":"ctx . close (); When the context closes: Spring calls all @PreDestroy or destroy() methods. Releases resources (DB pools, thread pools, etc.). Clears internal caches. That\u2019s the end of the bean lifecycle.","title":"\ud83e\udde9 Step 4: Context lifecycle"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#under-the-hood","text":"When you run: AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); Spring does roughly this: // Pseudo code AppConfig metadata = readAnnotations ( AppConfig . class ); List < BeanDefinition > beans = scanPackages ( metadata ); for ( BeanDefinition def : beans ) { Class <?> type = def . getBeanClass (); Object instance = type . getDeclaredConstructor (). newInstance (); // reflection injectDependencies ( instance ); storeInContext ( def . getName (), instance ); } Spring uses reflection to: Load classes ( Class.forName() ) Create instances ( newInstance() ) Inject fields and methods ( setAccessible(true) \u2192 field.set() ) Call initialization methods","title":"\ud83d\udd0d Under the hood"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#relationship-between-appconfig-and-annotationconfigapplicationcontext","text":"Concept Role Analogy AppConfig Blueprint that describes beans (metadata). Recipe book AnnotationConfigApplicationContext The engine that reads the blueprint and builds beans. Chef Bean Actual instance built from metadata. The dish Reflection The way the chef uses the recipe (reads annotations, calls constructors). Cooking process So yes \u2014 your earlier understanding was right: AppConfig holds metadata. The ApplicationContext reads it and builds the beans dynamically.","title":"\ud83e\udde9 Relationship between AppConfig and AnnotationConfigApplicationContext"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#visual-summary","text":"AppConfig.class (metadata) \u2193 AnnotationConfigApplicationContext \u2193 reads annotations via reflection BeanDefinitions (blueprints) \u2193 reflectively instantiate + inject Live Beans in ApplicationContext","title":"\ud83e\udde9 Visual summary"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#tldr-summary","text":"Concept Description ApplicationContext The Spring container that manages all beans. AppConfig Blueprint class defining or locating beans. Annotations Metadata for Spring to interpret. Reflection The mechanism Spring uses to create and wire beans dynamically. Lifecycle AppConfig \u2192 bean definitions \u2192 creation \u2192 injection \u2192 destruction.","title":"\u2705 TL;DR Summary"},{"location":"cheatsheets/languages/java/spring/classes/core/ApplicationContext/#core-takeaway","text":"AnnotationConfigApplicationContext is Spring\u2019s brain. AppConfig is its map. Together, they let the framework reflectively build, connect, and manage your entire application at runtime.","title":"\ud83e\ude9e Core takeaway"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/","text":"Spring Data Pagination \u2014 Page , Pageable , PageRequest (Cheatsheet) \u00b6 Offset pagination done right. Clean endpoints, predictable metadata, no hand-rolled foot-guns. TL;DR \u00b6 Page<T> = results + metadata (total, pages, etc.). Pageable = request (page, size, sort). PageRequest.of(page, size, sort...) builds a Pageable . Slice<T> = cheaper cousin when you don\u2019t need totals. Core Types (where they live) \u00b6 import org.springframework.data.domain.Page ; import org.springframework.data.domain.Pageable ; import org.springframework.data.domain.PageRequest ; import org.springframework.data.domain.Sort ; Building a PageRequest \u00b6 int page = Math . max ( 0 , requestedPage ); // zero-based int size = Math . min ( Math . max ( requestedSize , 1 ), 100 ); // clamp (e.g., 1..100) Sort sort = Sort . by ( Sort . Order . desc ( \"createdAt\" ), Sort . Order . asc ( \"lastName\" ) ); PageRequest pr = PageRequest . of ( page , size , sort ); Common one-liners: PageRequest . of ( 0 , 20 ); PageRequest . of ( page , size , Sort . by ( \"lastName\" ). ascending ()); PageRequest . of ( page , size , Sort . by ( Sort . Order . desc ( \"createdAt\" ))); Repository patterns \u00b6 public interface ContactRepository extends JpaRepository < Contact , Long > { Page < Contact > findAll ( Pageable pageable ); // built-in Page < Contact > findByLastNameContainingIgnoreCase ( String q , Pageable pageable ); } Controller patterns \u00b6 1) Return Page<T> directly (quickest) \u00b6 @GetMapping ( \"/contacts\" ) public Page < Contact > list ( @PageableDefault ( size = 20 , sort = \"id\" ) Pageable pageable ) { return repo . findAll ( pageable ); } // supports: ?page=0&size=50&sort=lastName,desc&sort=createdAt,asc 2) Wrap into DTO + meta (client-friendly) \u00b6 record PageMeta ( int page , int size , long totalElements , int totalPages , boolean first , boolean last ) {} record PageResponse < T > ( List < T > items , PageMeta meta ) {} @GetMapping ( \"/contacts\" ) public ResponseEntity < PageResponse < ContactDto >> list ( @RequestParam ( defaultValue = \"0\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size ) { PageRequest pr = PageRequest . of ( Math . max ( 0 , page ), Math . min ( Math . max ( size , 1 ), 100 ), Sort . by ( Sort . Order . desc ( \"createdAt\" )) ); Page < ContactDto > p = repo . findAll ( pr ). map ( ContactDto :: from ); var body = new PageResponse <> ( p . getContent (), new PageMeta ( p . getNumber (), p . getSize (), p . getTotalElements (), p . getTotalPages (), p . isFirst (), p . isLast ()) ); return ResponseEntity . ok ( body ); } 3) Add pagination headers (for tables/infinite scroll UIs) \u00b6 @GetMapping ( \"/contacts\" ) public ResponseEntity < List < ContactDto >> list ( Pageable pageable ) { Page < ContactDto > p = repo . findAll ( pageable ). map ( ContactDto :: from ); return ResponseEntity . ok () . header ( \"X-Total-Count\" , String . valueOf ( p . getTotalElements ())) . header ( \"X-Total-Pages\" , String . valueOf ( p . getTotalPages ())) . header ( \"X-Page\" , String . valueOf ( p . getNumber ())) . header ( \"X-Size\" , String . valueOf ( p . getSize ())) . body ( p . getContent ()); } Optional: RFC-5988 Link header for navigation: Link: </contacts?page=0&size=20>; rel=\"first\", </contacts?page=3&size=20>; rel=\"prev\", </contacts?page=5&size=20>; rel=\"next\", </contacts?page=12&size=20>; rel=\"last\" Sorting: safe, explicit \u00b6 Sort sort = Sort . by ( Sort . Order . desc ( \"createdAt\" ). ignoreCase (), // ignoreCase only applies to strings Sort . Order . asc ( \"lastName\" ) ); PageRequest pr = PageRequest . of ( page , size , sort ); Multiple sort params are supported out of the box: /contacts?sort=lastName,desc&sort=createdAt,asc Validating page / size \u00b6 page is zero-based . Clamp size to a sane range (e.g., 1..100) to avoid DOS-by-oversized pages. Consider a global clamp: @RestControllerAdvice class PagingAdvice { @InitBinder void clamp ( WebDataBinder binder ) { binder . registerCustomEditor ( Integer . class , \"size\" , new PropertyEditorSupport () { @Override public void setAsText ( String text ) { int v = Integer . parseInt ( text ); setValue ( Math . min ( Math . max ( v , 1 ), 100 )); } }); } } Mapping Entities \u2192 DTOs (without N+1 drama) \u00b6 Page < ContactDto > page = repo . findAll ( pr ). map ( ContactDto :: from ); List < ContactDto > items = page . getContent (); If DTO needs joined fields, prefer JPA projections or fetch joins in the repository to avoid lazy loading per row. Slice<T> for infinite scroll \u00b6 No COUNT(*) \u2192 faster on large datasets. Still has hasNext() . Slice < Contact > slice = repo . findAllByActiveTrue ( PageRequest . of ( page , size )); boolean more = slice . hasNext (); Performance notes (don\u2019t learn these the hard way) \u00b6 COUNT(*) can dominate. On huge tables, Page<T> can be expensive. If you don\u2019t need totals, switch to Slice<T> . Index your sort keys. Sorting on unindexed columns = slow. Deterministic sorting. Add a tiebreaker (e.g., createdAt desc, id desc ) for stable paging. Offset pagination drifts when rows are inserted/deleted between pages. For ultra-stable feeds, consider keyset (seek) pagination later. Error handling & edge cases \u00b6 Out-of-range page numbers still return content: [] with valid meta. That\u2019s fine. Do not return 204 for an empty page; clients expect paging metadata. Validate sort properties against a whitelist if you expose user-driven sorts. Tests (WebMvc) \u00b6 @WebMvcTest ( ContactResource . class ) class ContactResourcePagingTests { @Autowired MockMvc mvc ; @MockBean ContactRepository repo ; @Test void list_paginated_ok () throws Exception { PageRequest pr = PageRequest . of ( 0 , 2 , Sort . by ( \"id\" ). ascending ()); Page < Contact > page = new PageImpl <> ( List . of ( new Contact ( 1L , \"A\" ), new Contact ( 2L , \"B\" )), pr , 5 ); when ( repo . findAll ( any ( Pageable . class ))). thenReturn ( page ); mvc . perform ( get ( \"/contacts?page=0&size=2&sort=id,asc\" )) . andExpect ( status (). isOk ()) . andExpect ( jsonPath ( \"$.items.length()\" ). value ( 2 )) . andExpect ( jsonPath ( \"$.meta.totalElements\" ). value ( 5 )); } } Anti-patterns to avoid \u00b6 Building PageRequest from raw strings without clamping. Returning List<T> with separate \u201ccount\u201d endpoint \u2014 brittle and chatty. Accepting a comma-delimited sort string and manually parsing it when Pageable already handles multi-sort. Doing DTO mapping after the transaction closes if you rely on lazy associations. Copy-paste templates \u00b6 Simple endpoint with Pageable injection @GetMapping ( \"/contacts\" ) public Page < ContactDto > list ( @PageableDefault ( size = 20 , sort = \"id\" ) Pageable pageable ) { return repo . findAll ( pageable ). map ( ContactDto :: from ); } Explicit clamped params + DTO wrapper @GetMapping ( \"/contacts\" ) public ResponseEntity < PageResponse < ContactDto >> list ( @RequestParam ( defaultValue = \"0\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size ) { page = Math . max ( 0 , page ); size = Math . min ( Math . max ( size , 1 ), 100 ); Page < ContactDto > p = repo . findAll ( PageRequest . of ( page , size , Sort . by ( \"id\" ). ascending ())) . map ( ContactDto :: from ); return ResponseEntity . ok ( new PageResponse <> ( p . getContent (), new PageMeta ( p . getNumber (), p . getSize (), p . getTotalElements (), p . getTotalPages (), p . isFirst (), p . isLast ()) )); } When to graduate beyond Page<T> \u00b6 Timelines / streams where order is append-only \u2192 keyset (seek) pagination . Very large datasets where global counts are expensive \u2192 Slice or approximate counts . API contracts that need stable cursors \u2192 cursor pagination . Naming recap \u00b6 Use: cheatsheets/frameworks/spring/data/pageable.md If you plan sections like slice.md , keyset-pagination.md , keep this file focused on offset paging; otherwise rename to pagination.md and add sections over time.","title":"Pagination"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#spring-data-pagination-page-pageable-pagerequest-cheatsheet","text":"Offset pagination done right. Clean endpoints, predictable metadata, no hand-rolled foot-guns.","title":"Spring Data Pagination \u2014 Page, Pageable, PageRequest (Cheatsheet)"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#tldr","text":"Page<T> = results + metadata (total, pages, etc.). Pageable = request (page, size, sort). PageRequest.of(page, size, sort...) builds a Pageable . Slice<T> = cheaper cousin when you don\u2019t need totals.","title":"TL;DR"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#core-types-where-they-live","text":"import org.springframework.data.domain.Page ; import org.springframework.data.domain.Pageable ; import org.springframework.data.domain.PageRequest ; import org.springframework.data.domain.Sort ;","title":"Core Types (where they live)"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#building-a-pagerequest","text":"int page = Math . max ( 0 , requestedPage ); // zero-based int size = Math . min ( Math . max ( requestedSize , 1 ), 100 ); // clamp (e.g., 1..100) Sort sort = Sort . by ( Sort . Order . desc ( \"createdAt\" ), Sort . Order . asc ( \"lastName\" ) ); PageRequest pr = PageRequest . of ( page , size , sort ); Common one-liners: PageRequest . of ( 0 , 20 ); PageRequest . of ( page , size , Sort . by ( \"lastName\" ). ascending ()); PageRequest . of ( page , size , Sort . by ( Sort . Order . desc ( \"createdAt\" )));","title":"Building a PageRequest"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#repository-patterns","text":"public interface ContactRepository extends JpaRepository < Contact , Long > { Page < Contact > findAll ( Pageable pageable ); // built-in Page < Contact > findByLastNameContainingIgnoreCase ( String q , Pageable pageable ); }","title":"Repository patterns"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#controller-patterns","text":"","title":"Controller patterns"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#1-return-paget-directly-quickest","text":"@GetMapping ( \"/contacts\" ) public Page < Contact > list ( @PageableDefault ( size = 20 , sort = \"id\" ) Pageable pageable ) { return repo . findAll ( pageable ); } // supports: ?page=0&size=50&sort=lastName,desc&sort=createdAt,asc","title":"1) Return Page&lt;T&gt; directly (quickest)"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#2-wrap-into-dto-meta-client-friendly","text":"record PageMeta ( int page , int size , long totalElements , int totalPages , boolean first , boolean last ) {} record PageResponse < T > ( List < T > items , PageMeta meta ) {} @GetMapping ( \"/contacts\" ) public ResponseEntity < PageResponse < ContactDto >> list ( @RequestParam ( defaultValue = \"0\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size ) { PageRequest pr = PageRequest . of ( Math . max ( 0 , page ), Math . min ( Math . max ( size , 1 ), 100 ), Sort . by ( Sort . Order . desc ( \"createdAt\" )) ); Page < ContactDto > p = repo . findAll ( pr ). map ( ContactDto :: from ); var body = new PageResponse <> ( p . getContent (), new PageMeta ( p . getNumber (), p . getSize (), p . getTotalElements (), p . getTotalPages (), p . isFirst (), p . isLast ()) ); return ResponseEntity . ok ( body ); }","title":"2) Wrap into DTO + meta (client-friendly)"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#3-add-pagination-headers-for-tablesinfinite-scroll-uis","text":"@GetMapping ( \"/contacts\" ) public ResponseEntity < List < ContactDto >> list ( Pageable pageable ) { Page < ContactDto > p = repo . findAll ( pageable ). map ( ContactDto :: from ); return ResponseEntity . ok () . header ( \"X-Total-Count\" , String . valueOf ( p . getTotalElements ())) . header ( \"X-Total-Pages\" , String . valueOf ( p . getTotalPages ())) . header ( \"X-Page\" , String . valueOf ( p . getNumber ())) . header ( \"X-Size\" , String . valueOf ( p . getSize ())) . body ( p . getContent ()); } Optional: RFC-5988 Link header for navigation: Link: </contacts?page=0&size=20>; rel=\"first\", </contacts?page=3&size=20>; rel=\"prev\", </contacts?page=5&size=20>; rel=\"next\", </contacts?page=12&size=20>; rel=\"last\"","title":"3) Add pagination headers (for tables/infinite scroll UIs)"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#sorting-safe-explicit","text":"Sort sort = Sort . by ( Sort . Order . desc ( \"createdAt\" ). ignoreCase (), // ignoreCase only applies to strings Sort . Order . asc ( \"lastName\" ) ); PageRequest pr = PageRequest . of ( page , size , sort ); Multiple sort params are supported out of the box: /contacts?sort=lastName,desc&sort=createdAt,asc","title":"Sorting: safe, explicit"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#validating-page-size","text":"page is zero-based . Clamp size to a sane range (e.g., 1..100) to avoid DOS-by-oversized pages. Consider a global clamp: @RestControllerAdvice class PagingAdvice { @InitBinder void clamp ( WebDataBinder binder ) { binder . registerCustomEditor ( Integer . class , \"size\" , new PropertyEditorSupport () { @Override public void setAsText ( String text ) { int v = Integer . parseInt ( text ); setValue ( Math . min ( Math . max ( v , 1 ), 100 )); } }); } }","title":"Validating page / size"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#mapping-entities-dtos-without-n1-drama","text":"Page < ContactDto > page = repo . findAll ( pr ). map ( ContactDto :: from ); List < ContactDto > items = page . getContent (); If DTO needs joined fields, prefer JPA projections or fetch joins in the repository to avoid lazy loading per row.","title":"Mapping Entities \u2192 DTOs (without N+1 drama)"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#slicet-for-infinite-scroll","text":"No COUNT(*) \u2192 faster on large datasets. Still has hasNext() . Slice < Contact > slice = repo . findAllByActiveTrue ( PageRequest . of ( page , size )); boolean more = slice . hasNext ();","title":"Slice&lt;T&gt; for infinite scroll"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#performance-notes-dont-learn-these-the-hard-way","text":"COUNT(*) can dominate. On huge tables, Page<T> can be expensive. If you don\u2019t need totals, switch to Slice<T> . Index your sort keys. Sorting on unindexed columns = slow. Deterministic sorting. Add a tiebreaker (e.g., createdAt desc, id desc ) for stable paging. Offset pagination drifts when rows are inserted/deleted between pages. For ultra-stable feeds, consider keyset (seek) pagination later.","title":"Performance notes (don\u2019t learn these the hard way)"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#error-handling-edge-cases","text":"Out-of-range page numbers still return content: [] with valid meta. That\u2019s fine. Do not return 204 for an empty page; clients expect paging metadata. Validate sort properties against a whitelist if you expose user-driven sorts.","title":"Error handling &amp; edge cases"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#tests-webmvc","text":"@WebMvcTest ( ContactResource . class ) class ContactResourcePagingTests { @Autowired MockMvc mvc ; @MockBean ContactRepository repo ; @Test void list_paginated_ok () throws Exception { PageRequest pr = PageRequest . of ( 0 , 2 , Sort . by ( \"id\" ). ascending ()); Page < Contact > page = new PageImpl <> ( List . of ( new Contact ( 1L , \"A\" ), new Contact ( 2L , \"B\" )), pr , 5 ); when ( repo . findAll ( any ( Pageable . class ))). thenReturn ( page ); mvc . perform ( get ( \"/contacts?page=0&size=2&sort=id,asc\" )) . andExpect ( status (). isOk ()) . andExpect ( jsonPath ( \"$.items.length()\" ). value ( 2 )) . andExpect ( jsonPath ( \"$.meta.totalElements\" ). value ( 5 )); } }","title":"Tests (WebMvc)"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#anti-patterns-to-avoid","text":"Building PageRequest from raw strings without clamping. Returning List<T> with separate \u201ccount\u201d endpoint \u2014 brittle and chatty. Accepting a comma-delimited sort string and manually parsing it when Pageable already handles multi-sort. Doing DTO mapping after the transaction closes if you rely on lazy associations.","title":"Anti-patterns to avoid"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#copy-paste-templates","text":"Simple endpoint with Pageable injection @GetMapping ( \"/contacts\" ) public Page < ContactDto > list ( @PageableDefault ( size = 20 , sort = \"id\" ) Pageable pageable ) { return repo . findAll ( pageable ). map ( ContactDto :: from ); } Explicit clamped params + DTO wrapper @GetMapping ( \"/contacts\" ) public ResponseEntity < PageResponse < ContactDto >> list ( @RequestParam ( defaultValue = \"0\" ) int page , @RequestParam ( defaultValue = \"20\" ) int size ) { page = Math . max ( 0 , page ); size = Math . min ( Math . max ( size , 1 ), 100 ); Page < ContactDto > p = repo . findAll ( PageRequest . of ( page , size , Sort . by ( \"id\" ). ascending ())) . map ( ContactDto :: from ); return ResponseEntity . ok ( new PageResponse <> ( p . getContent (), new PageMeta ( p . getNumber (), p . getSize (), p . getTotalElements (), p . getTotalPages (), p . isFirst (), p . isLast ()) )); }","title":"Copy-paste templates"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#when-to-graduate-beyond-paget","text":"Timelines / streams where order is append-only \u2192 keyset (seek) pagination . Very large datasets where global counts are expensive \u2192 Slice or approximate counts . API contracts that need stable cursors \u2192 cursor pagination .","title":"When to graduate beyond Page&lt;T&gt;"},{"location":"cheatsheets/languages/java/spring/classes/data/Pagination/#naming-recap","text":"Use: cheatsheets/frameworks/spring/data/pageable.md If you plan sections like slice.md , keyset-pagination.md , keep this file focused on offset paging; otherwise rename to pagination.md and add sections over time.","title":"Naming recap"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/","text":"\ud83d\udce6 HttpEntity<T> \u2014 Headers + Body, No Extras \u00b6 Essence: HttpEntity<T> is the minimal HTTP envelope : headers + body . No status, no method, no URI. It\u2019s the base building block used by RequestEntity (adds method+URI) and ResponseEntity (adds status). 1) Where it lives \u00b6 Package: org.springframework.http Role: Base class for HTTP message content (request or response) Used by: Spring MVC & WebFlux, RestTemplate , message converters import org.springframework.http.HttpEntity ; import org.springframework.http.HttpHeaders ; 2) Anatomy \u00b6 HttpEntity<T> \u251c\u2500 HttpHeaders headers \u2514\u2500 T body (nullable) Immutable once created. 3) Why/when to use it \u00b6 Situation Use HttpEntity<T> because\u2026 You only need to pass headers + body (no method/URI/status) It\u2019s the smallest correct abstraction You\u2019re inside a controller and want access to inbound headers + body Accept HttpEntity<T> as a parameter You\u2019re making a client call where some APIs accept HttpEntity Clean way to attach headers to a body If you need method+URI , use RequestEntity<T> . If you need status , use ResponseEntity<T> . 4) Create it \u00b6 var headers = new HttpHeaders (); headers . set ( \"X-Trace-Id\" , traceId ); headers . setContentType ( MediaType . APPLICATION_JSON ); HttpEntity < MyDto > entity = new HttpEntity <> ( payload , headers ); No builder; it\u2019s just a value object. 5) In controllers: read raw request \u00b6 @PostMapping ( \"/ingest\" ) public ResponseEntity < Void > ingest ( HttpEntity < String > request ) { HttpHeaders h = request . getHeaders (); String body = request . getBody (); // validate, log, route... return ResponseEntity . accepted (). build (); } Works in MVC and WebFlux controllers. 6) With RestTemplate \u00b6 RestTemplate rt = new RestTemplate (); // POST JSON with headers HttpHeaders h = new HttpHeaders (); h . setContentType ( MediaType . APPLICATION_JSON ); HttpEntity < UserCreate > req = new HttpEntity <> ( dto , h ); ResponseEntity < User > res = rt . postForEntity ( url , req , User . class ); For GET with headers but no body: HttpHeaders h = new HttpHeaders (); h . setAccept ( List . of ( MediaType . APPLICATION_JSON )); HttpEntity < Void > req = new HttpEntity <> ( h ); ResponseEntity < User > res = rt . exchange ( url , HttpMethod . GET , req , User . class ); 7) Generics: keep types honest \u00b6 HttpEntity < List < User >> entity = new HttpEntity <> ( users , headers ); // Body type drives message converter selection (JSON, XML, etc.) For responses with parameterized types, you still need ParameterizedTypeReference at the ResponseEntity side (client read path), not here. 8) Content negotiation & converters \u00b6 Spring picks a HttpMessageConverter based on: The body type T Content-Type (outbound) / Accept (inbound) HttpEntity just carries the data; converters do the serialization/deserialization. 9) Compared with siblings \u00b6 Type Direction Adds on top of HttpEntity Typical use HttpEntity<T> Request or Response \u2014 Minimal headers+body wrapper RequestEntity<T> Request method + URI Outbound requests, controller param with method/URI ResponseEntity<T> Response status Controller return value, client result 10) Common patterns \u00b6 Upload binary HttpHeaders h = new HttpHeaders (); h . setContentType ( MediaType . APPLICATION_OCTET_STREAM ); HttpEntity < byte []> req = new HttpEntity <> ( bytes , h ); rt . exchange ( url , HttpMethod . POST , req , Void . class ); Multipart (file + JSON) MultiValueMap < String , Object > parts = new LinkedMultiValueMap <> (); parts . add ( \"file\" , new ByteArrayResource ( bytes ){ @Override public String getFilename (){ return \"data.csv\" ; }}); parts . add ( \"meta\" , new HttpEntity <> ( Map . of ( \"source\" , \"import\" ), new HttpHeaders (){ { setContentType ( MediaType . APPLICATION_JSON ); } })); HttpHeaders h = new HttpHeaders (); h . setContentType ( MediaType . MULTIPART_FORM_DATA ); HttpEntity < MultiValueMap < String , Object >> req = new HttpEntity <> ( parts , h ); rt . postForEntity ( url , req , Void . class ); Conditional GET HttpHeaders h = new HttpHeaders (); h . setIfNoneMatch ( etag ); HttpEntity < Void > req = new HttpEntity <> ( h ); ResponseEntity < Resource > res = rt . exchange ( url , HttpMethod . GET , req , Resource . class ); // 304 if not modified 11) Pitfalls (don\u2019t do these) \u00b6 Mistake Why it bites Do instead Returning HttpEntity from a controller expecting status control You can\u2019t set status here Return ResponseEntity<T> Trying to set method/URI on HttpEntity It doesn\u2019t have them Use RequestEntity<T> Forgetting Content-Type on POST/PUT 415 Unsupported Media Type headers.setContentType(...) Mutating headers after sending Too late / ignored Build headers before creating/sending 12) Quick reference \u00b6 // Make one HttpEntity < T > e1 = new HttpEntity <> ( body ); HttpEntity < T > e2 = new HttpEntity <> ( body , headers ); HttpEntity < Void > e3 = new HttpEntity <> ( headers ); // Controller reads inbound ResponseEntity <?> handle ( HttpEntity < String > req ) { ... } // RestTemplate call with headers rt . exchange ( url , HttpMethod . GET , new HttpEntity <> ( headers ), Resp . class ); rt . postForEntity ( url , new HttpEntity <> ( dto , headers ), Resp . class ); 13) Mental model \u00b6 [HttpEntity<T>] headers + body \u2193 (used by converters) \u2193 wire format (JSON/XML/Binary) It\u2019s the plain envelope . Reach for RequestEntity when you need route/method; reach for ResponseEntity when you need status semantics. Keep your API surface honest and your HTTP concerns explicit.","title":"HttpEntity<T>"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#httpentityt-headers-body-no-extras","text":"Essence: HttpEntity<T> is the minimal HTTP envelope : headers + body . No status, no method, no URI. It\u2019s the base building block used by RequestEntity (adds method+URI) and ResponseEntity (adds status).","title":"\ud83d\udce6 HttpEntity&lt;T&gt; \u2014 Headers + Body, No Extras"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#1-where-it-lives","text":"Package: org.springframework.http Role: Base class for HTTP message content (request or response) Used by: Spring MVC & WebFlux, RestTemplate , message converters import org.springframework.http.HttpEntity ; import org.springframework.http.HttpHeaders ;","title":"1) Where it lives"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#2-anatomy","text":"HttpEntity<T> \u251c\u2500 HttpHeaders headers \u2514\u2500 T body (nullable) Immutable once created.","title":"2) Anatomy"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#3-whywhen-to-use-it","text":"Situation Use HttpEntity<T> because\u2026 You only need to pass headers + body (no method/URI/status) It\u2019s the smallest correct abstraction You\u2019re inside a controller and want access to inbound headers + body Accept HttpEntity<T> as a parameter You\u2019re making a client call where some APIs accept HttpEntity Clean way to attach headers to a body If you need method+URI , use RequestEntity<T> . If you need status , use ResponseEntity<T> .","title":"3) Why/when to use it"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#4-create-it","text":"var headers = new HttpHeaders (); headers . set ( \"X-Trace-Id\" , traceId ); headers . setContentType ( MediaType . APPLICATION_JSON ); HttpEntity < MyDto > entity = new HttpEntity <> ( payload , headers ); No builder; it\u2019s just a value object.","title":"4) Create it"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#5-in-controllers-read-raw-request","text":"@PostMapping ( \"/ingest\" ) public ResponseEntity < Void > ingest ( HttpEntity < String > request ) { HttpHeaders h = request . getHeaders (); String body = request . getBody (); // validate, log, route... return ResponseEntity . accepted (). build (); } Works in MVC and WebFlux controllers.","title":"5) In controllers: read raw request"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#6-with-resttemplate","text":"RestTemplate rt = new RestTemplate (); // POST JSON with headers HttpHeaders h = new HttpHeaders (); h . setContentType ( MediaType . APPLICATION_JSON ); HttpEntity < UserCreate > req = new HttpEntity <> ( dto , h ); ResponseEntity < User > res = rt . postForEntity ( url , req , User . class ); For GET with headers but no body: HttpHeaders h = new HttpHeaders (); h . setAccept ( List . of ( MediaType . APPLICATION_JSON )); HttpEntity < Void > req = new HttpEntity <> ( h ); ResponseEntity < User > res = rt . exchange ( url , HttpMethod . GET , req , User . class );","title":"6) With RestTemplate"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#7-generics-keep-types-honest","text":"HttpEntity < List < User >> entity = new HttpEntity <> ( users , headers ); // Body type drives message converter selection (JSON, XML, etc.) For responses with parameterized types, you still need ParameterizedTypeReference at the ResponseEntity side (client read path), not here.","title":"7) Generics: keep types honest"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#8-content-negotiation-converters","text":"Spring picks a HttpMessageConverter based on: The body type T Content-Type (outbound) / Accept (inbound) HttpEntity just carries the data; converters do the serialization/deserialization.","title":"8) Content negotiation &amp; converters"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#9-compared-with-siblings","text":"Type Direction Adds on top of HttpEntity Typical use HttpEntity<T> Request or Response \u2014 Minimal headers+body wrapper RequestEntity<T> Request method + URI Outbound requests, controller param with method/URI ResponseEntity<T> Response status Controller return value, client result","title":"9) Compared with siblings"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#10-common-patterns","text":"Upload binary HttpHeaders h = new HttpHeaders (); h . setContentType ( MediaType . APPLICATION_OCTET_STREAM ); HttpEntity < byte []> req = new HttpEntity <> ( bytes , h ); rt . exchange ( url , HttpMethod . POST , req , Void . class ); Multipart (file + JSON) MultiValueMap < String , Object > parts = new LinkedMultiValueMap <> (); parts . add ( \"file\" , new ByteArrayResource ( bytes ){ @Override public String getFilename (){ return \"data.csv\" ; }}); parts . add ( \"meta\" , new HttpEntity <> ( Map . of ( \"source\" , \"import\" ), new HttpHeaders (){ { setContentType ( MediaType . APPLICATION_JSON ); } })); HttpHeaders h = new HttpHeaders (); h . setContentType ( MediaType . MULTIPART_FORM_DATA ); HttpEntity < MultiValueMap < String , Object >> req = new HttpEntity <> ( parts , h ); rt . postForEntity ( url , req , Void . class ); Conditional GET HttpHeaders h = new HttpHeaders (); h . setIfNoneMatch ( etag ); HttpEntity < Void > req = new HttpEntity <> ( h ); ResponseEntity < Resource > res = rt . exchange ( url , HttpMethod . GET , req , Resource . class ); // 304 if not modified","title":"10) Common patterns"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#11-pitfalls-dont-do-these","text":"Mistake Why it bites Do instead Returning HttpEntity from a controller expecting status control You can\u2019t set status here Return ResponseEntity<T> Trying to set method/URI on HttpEntity It doesn\u2019t have them Use RequestEntity<T> Forgetting Content-Type on POST/PUT 415 Unsupported Media Type headers.setContentType(...) Mutating headers after sending Too late / ignored Build headers before creating/sending","title":"11) Pitfalls (don\u2019t do these)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#12-quick-reference","text":"// Make one HttpEntity < T > e1 = new HttpEntity <> ( body ); HttpEntity < T > e2 = new HttpEntity <> ( body , headers ); HttpEntity < Void > e3 = new HttpEntity <> ( headers ); // Controller reads inbound ResponseEntity <?> handle ( HttpEntity < String > req ) { ... } // RestTemplate call with headers rt . exchange ( url , HttpMethod . GET , new HttpEntity <> ( headers ), Resp . class ); rt . postForEntity ( url , new HttpEntity <> ( dto , headers ), Resp . class );","title":"12) Quick reference"},{"location":"cheatsheets/languages/java/spring/classes/web/http/HttpEntity/#13-mental-model","text":"[HttpEntity<T>] headers + body \u2193 (used by converters) \u2193 wire format (JSON/XML/Binary) It\u2019s the plain envelope . Reach for RequestEntity when you need route/method; reach for ResponseEntity when you need status semantics. Keep your API surface honest and your HTTP concerns explicit.","title":"13) Mental model"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/","text":"\ud83d\udcec RequestEntity<T> \u2014 Spring\u2019s HTTP Request Wrapper Cheatsheet \u00b6 Essence: RequestEntity<T> represents the entire HTTP request you\u2019re about to send or that your controller received: method + URI + headers + (optional) body T . Use it for precise, testable, framework-friendly HTTP calls and for accessing raw request metadata in controllers. 1) Where it lives \u00b6 Package: org.springframework.http Extends: HttpEntity<T> (adds method + URI) Used by: RestTemplate , WebClient adaptors , and as a controller parameter to read inbound requests. import org.springframework.http.RequestEntity ; 2) When to use it (and why) \u00b6 Situation Problem without it Why RequestEntity You need strict control over method/URI/headers/body Ad-hoc method params get messy Single immutable object with everything You want a clean contract for RestTemplate.exchange(...) Overloaded method zoo exchange(RequestEntity, Class) is explicit and testable Controller must read headers + body + method @RequestBody only gives body Accept RequestEntity<T> in method args You want conditional / cache / auth headers Easy to forget or misplace Chain them on the builder in one place 3) Anatomy \u00b6 RequestEntity<T> \u251c\u2500 HttpMethod method \u251c\u2500 URI url \u251c\u2500 HttpHeaders headers \u2514\u2500 T body (nullable) Immutable value object; thread-safe to share. 4) Building requests (fluent API) \u00b6 URI uri = URI . create ( \"https://api.example.com/users/42\" ); RequestEntity < Void > req = RequestEntity . get ( uri ) . accept ( MediaType . APPLICATION_JSON ) . header ( \"X-Trace-Id\" , traceId ) . build (); RequestEntity < UserCreateDto > post = RequestEntity . post ( URI . create ( \"https://api.example.com/users\" )) . contentType ( MediaType . APPLICATION_JSON ) . accept ( MediaType . APPLICATION_JSON ) . body ( payload ); Available builders: get , post , put , patch , delete , head , options , method(HttpMethod, URI) . 5) Sending with RestTemplate \u00b6 RestTemplate rt = new RestTemplate (); // No body RequestEntity < Void > getReq = RequestEntity . get ( URI . create ( url )) . accept ( MediaType . APPLICATION_JSON ). build (); ResponseEntity < User > getRes = rt . exchange ( getReq , User . class ); // With body RequestEntity < UserCreateDto > postReq = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . APPLICATION_JSON ) . body ( dto ); ResponseEntity < User > postRes = rt . exchange ( postReq , User . class ); Generics: For collections/maps, use ParameterizedTypeReference : RequestEntity < Void > req = RequestEntity . get ( URI . create ( url )). build (); ResponseEntity < List < User >> res = rt . exchange ( req , new ParameterizedTypeReference <> () {}); List < User > users = res . getBody (); 6) Using it in controllers (read raw request) \u00b6 @PostMapping ( \"/ingest\" ) public ResponseEntity < Void > ingest ( RequestEntity < String > request ) { HttpMethod method = request . getMethod (); URI uri = request . getUrl (); HttpHeaders headers = request . getHeaders (); String body = request . getBody (); // ... validate, route, log return ResponseEntity . accepted (). build (); } Works for MVC and WebFlux controller methods. 7) Common header patterns \u00b6 RequestEntity < Void > cond = RequestEntity . get ( URI . create ( url )) . header ( HttpHeaders . IF_NONE_MATCH , etag ) . header ( HttpHeaders . IF_MODIFIED_SINCE , httpDate ) . build (); RequestEntity < Resource > upload = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . MULTIPART_FORM_DATA ) . body ( new ByteArrayResource ( bytes )); Tip: for auth, prefer an interceptor, but you can inline: RequestEntity < Void > authed = RequestEntity . get ( URI . create ( url )) . header ( HttpHeaders . AUTHORIZATION , \"Bearer \" + token ) . build (); 8) Query params & path variables (compose the URI) \u00b6 URI uri = UriComponentsBuilder . fromHttpUrl ( \"https://api.example.com/search\" ) . queryParam ( \"q\" , \"spring+http\" ) . queryParam ( \"limit\" , 20 ) . build ( true ) // keep encoded . toUri (); RequestEntity < Void > req = RequestEntity . get ( uri ). build (); 9) Binary & streaming bodies \u00b6 RequestEntity < ByteArrayResource > bin = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . APPLICATION_OCTET_STREAM ) . body ( new ByteArrayResource ( bytes )); RequestEntity < InputStreamResource > stream = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . APPLICATION_OCTET_STREAM ) . body ( new InputStreamResource ( inputStream )); 10) Multipart forms (file + JSON) \u00b6 MultiValueMap < String , Object > parts = new LinkedMultiValueMap <> (); parts . add ( \"file\" , new ByteArrayResource ( bytes ){ @Override public String getFilename (){ return \"data.csv\" ; }}); parts . add ( \"meta\" , new HttpEntity <> ( Map . of ( \"source\" , \"import\" ), new HttpHeaders (){{ setContentType ( MediaType . APPLICATION_JSON ); }})); RequestEntity < MultiValueMap < String , Object >> req = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . MULTIPART_FORM_DATA ) . body ( parts ); 11) Conditional requests & caching \u00b6 RequestEntity < Void > req = RequestEntity . get ( URI . create ( url )) . ifNoneMatch ( etag ) // shortcut for If-None-Match . build (); If the resource hasn\u2019t changed, expect 304 Not Modified . 12) Comparison with siblings \u00b6 Type Direction Includes Typical use HttpEntity<T> Request or Response headers + body Simplest wrapper RequestEntity<T> Request method + URI + headers + body Outbound calls, controller input ResponseEntity<T> Response status + headers + body Controller output, client result 13) Testing with MockRestServiceServer (client-side) \u00b6 MockRestServiceServer server = MockRestServiceServer . bindTo ( rt ). build (); server . expect ( requestTo ( \"https://api.example.com/users/42\" )) . andExpect ( method ( HttpMethod . GET )) . andExpect ( header ( \"X-Trace-Id\" , traceId )) . andRespond ( withSuccess ( \"\"\"{\" id \":42}\"\"\" , MediaType . APPLICATION_JSON )); ResponseEntity < User > res = rt . exchange ( RequestEntity . get ( URI . create ( \"https://api.example.com/users/42\" )) . header ( \"X-Trace-Id\" , traceId ) . build (), User . class ); 14) Pitfalls (and fixes) \u00b6 Mistake Symptom Fix Building RequestEntity but calling the wrong RestTemplate method Headers/method ignored Use exchange(RequestEntity, Class) or exchange(RequestEntity, ParameterizedTypeReference) Forgetting contentType on POST/PUT 415 Unsupported Media Type Set .contentType(MediaType.APPLICATION_JSON) (or correct type) Manually concatenating query params Encoding bugs Use UriComponentsBuilder Leaking auth tokens in logs Security risk Mask/redact headers in logging interceptors Using RequestEntity with WebClient as-is Awkward API Prefer WebClient\u2019s fluent style; convert pieces if needed 15) Quick reference \u00b6 // GET no body RequestEntity < Void > r1 = RequestEntity . get ( URI . create ( u )) . accept ( MediaType . APPLICATION_JSON ). build (); // POST JSON body RequestEntity < MyDto > r2 = RequestEntity . post ( URI . create ( u )) . contentType ( MediaType . APPLICATION_JSON ). body ( dto ); // Custom method + headers RequestEntity < Void > r3 = RequestEntity . method ( HttpMethod . HEAD , URI . create ( u )) . header ( \"X-Foo\" , \"bar\" ). build (); // Controller: read inbound request ResponseEntity < Void > handle ( RequestEntity < String > req ) { ... } 16) Mental model \u00b6 [RequestEntity<T>] \u2192 one immutable package of: method + URI + headers + body \u2193 RestTemplate.exchange(...) \u2193 [ResponseEntity<R>] Design once, test easily, send consistently. This keeps HTTP concerns explicit and localized\u2014cleaner than a dozen ad-hoc parameters sprinkled through your code.","title":"RequestEntity<T>"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#requestentityt-springs-http-request-wrapper-cheatsheet","text":"Essence: RequestEntity<T> represents the entire HTTP request you\u2019re about to send or that your controller received: method + URI + headers + (optional) body T . Use it for precise, testable, framework-friendly HTTP calls and for accessing raw request metadata in controllers.","title":"\ud83d\udcec RequestEntity&lt;T&gt; \u2014 Spring\u2019s HTTP Request Wrapper Cheatsheet"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#1-where-it-lives","text":"Package: org.springframework.http Extends: HttpEntity<T> (adds method + URI) Used by: RestTemplate , WebClient adaptors , and as a controller parameter to read inbound requests. import org.springframework.http.RequestEntity ;","title":"1) Where it lives"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#2-when-to-use-it-and-why","text":"Situation Problem without it Why RequestEntity You need strict control over method/URI/headers/body Ad-hoc method params get messy Single immutable object with everything You want a clean contract for RestTemplate.exchange(...) Overloaded method zoo exchange(RequestEntity, Class) is explicit and testable Controller must read headers + body + method @RequestBody only gives body Accept RequestEntity<T> in method args You want conditional / cache / auth headers Easy to forget or misplace Chain them on the builder in one place","title":"2) When to use it (and why)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#3-anatomy","text":"RequestEntity<T> \u251c\u2500 HttpMethod method \u251c\u2500 URI url \u251c\u2500 HttpHeaders headers \u2514\u2500 T body (nullable) Immutable value object; thread-safe to share.","title":"3) Anatomy"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#4-building-requests-fluent-api","text":"URI uri = URI . create ( \"https://api.example.com/users/42\" ); RequestEntity < Void > req = RequestEntity . get ( uri ) . accept ( MediaType . APPLICATION_JSON ) . header ( \"X-Trace-Id\" , traceId ) . build (); RequestEntity < UserCreateDto > post = RequestEntity . post ( URI . create ( \"https://api.example.com/users\" )) . contentType ( MediaType . APPLICATION_JSON ) . accept ( MediaType . APPLICATION_JSON ) . body ( payload ); Available builders: get , post , put , patch , delete , head , options , method(HttpMethod, URI) .","title":"4) Building requests (fluent API)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#5-sending-with-resttemplate","text":"RestTemplate rt = new RestTemplate (); // No body RequestEntity < Void > getReq = RequestEntity . get ( URI . create ( url )) . accept ( MediaType . APPLICATION_JSON ). build (); ResponseEntity < User > getRes = rt . exchange ( getReq , User . class ); // With body RequestEntity < UserCreateDto > postReq = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . APPLICATION_JSON ) . body ( dto ); ResponseEntity < User > postRes = rt . exchange ( postReq , User . class ); Generics: For collections/maps, use ParameterizedTypeReference : RequestEntity < Void > req = RequestEntity . get ( URI . create ( url )). build (); ResponseEntity < List < User >> res = rt . exchange ( req , new ParameterizedTypeReference <> () {}); List < User > users = res . getBody ();","title":"5) Sending with RestTemplate"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#6-using-it-in-controllers-read-raw-request","text":"@PostMapping ( \"/ingest\" ) public ResponseEntity < Void > ingest ( RequestEntity < String > request ) { HttpMethod method = request . getMethod (); URI uri = request . getUrl (); HttpHeaders headers = request . getHeaders (); String body = request . getBody (); // ... validate, route, log return ResponseEntity . accepted (). build (); } Works for MVC and WebFlux controller methods.","title":"6) Using it in controllers (read raw request)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#7-common-header-patterns","text":"RequestEntity < Void > cond = RequestEntity . get ( URI . create ( url )) . header ( HttpHeaders . IF_NONE_MATCH , etag ) . header ( HttpHeaders . IF_MODIFIED_SINCE , httpDate ) . build (); RequestEntity < Resource > upload = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . MULTIPART_FORM_DATA ) . body ( new ByteArrayResource ( bytes )); Tip: for auth, prefer an interceptor, but you can inline: RequestEntity < Void > authed = RequestEntity . get ( URI . create ( url )) . header ( HttpHeaders . AUTHORIZATION , \"Bearer \" + token ) . build ();","title":"7) Common header patterns"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#8-query-params-path-variables-compose-the-uri","text":"URI uri = UriComponentsBuilder . fromHttpUrl ( \"https://api.example.com/search\" ) . queryParam ( \"q\" , \"spring+http\" ) . queryParam ( \"limit\" , 20 ) . build ( true ) // keep encoded . toUri (); RequestEntity < Void > req = RequestEntity . get ( uri ). build ();","title":"8) Query params &amp; path variables (compose the URI)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#9-binary-streaming-bodies","text":"RequestEntity < ByteArrayResource > bin = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . APPLICATION_OCTET_STREAM ) . body ( new ByteArrayResource ( bytes )); RequestEntity < InputStreamResource > stream = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . APPLICATION_OCTET_STREAM ) . body ( new InputStreamResource ( inputStream ));","title":"9) Binary &amp; streaming bodies"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#10-multipart-forms-file-json","text":"MultiValueMap < String , Object > parts = new LinkedMultiValueMap <> (); parts . add ( \"file\" , new ByteArrayResource ( bytes ){ @Override public String getFilename (){ return \"data.csv\" ; }}); parts . add ( \"meta\" , new HttpEntity <> ( Map . of ( \"source\" , \"import\" ), new HttpHeaders (){{ setContentType ( MediaType . APPLICATION_JSON ); }})); RequestEntity < MultiValueMap < String , Object >> req = RequestEntity . post ( URI . create ( url )) . contentType ( MediaType . MULTIPART_FORM_DATA ) . body ( parts );","title":"10) Multipart forms (file + JSON)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#11-conditional-requests-caching","text":"RequestEntity < Void > req = RequestEntity . get ( URI . create ( url )) . ifNoneMatch ( etag ) // shortcut for If-None-Match . build (); If the resource hasn\u2019t changed, expect 304 Not Modified .","title":"11) Conditional requests &amp; caching"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#12-comparison-with-siblings","text":"Type Direction Includes Typical use HttpEntity<T> Request or Response headers + body Simplest wrapper RequestEntity<T> Request method + URI + headers + body Outbound calls, controller input ResponseEntity<T> Response status + headers + body Controller output, client result","title":"12) Comparison with siblings"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#13-testing-with-mockrestserviceserver-client-side","text":"MockRestServiceServer server = MockRestServiceServer . bindTo ( rt ). build (); server . expect ( requestTo ( \"https://api.example.com/users/42\" )) . andExpect ( method ( HttpMethod . GET )) . andExpect ( header ( \"X-Trace-Id\" , traceId )) . andRespond ( withSuccess ( \"\"\"{\" id \":42}\"\"\" , MediaType . APPLICATION_JSON )); ResponseEntity < User > res = rt . exchange ( RequestEntity . get ( URI . create ( \"https://api.example.com/users/42\" )) . header ( \"X-Trace-Id\" , traceId ) . build (), User . class );","title":"13) Testing with MockRestServiceServer (client-side)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#14-pitfalls-and-fixes","text":"Mistake Symptom Fix Building RequestEntity but calling the wrong RestTemplate method Headers/method ignored Use exchange(RequestEntity, Class) or exchange(RequestEntity, ParameterizedTypeReference) Forgetting contentType on POST/PUT 415 Unsupported Media Type Set .contentType(MediaType.APPLICATION_JSON) (or correct type) Manually concatenating query params Encoding bugs Use UriComponentsBuilder Leaking auth tokens in logs Security risk Mask/redact headers in logging interceptors Using RequestEntity with WebClient as-is Awkward API Prefer WebClient\u2019s fluent style; convert pieces if needed","title":"14) Pitfalls (and fixes)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#15-quick-reference","text":"// GET no body RequestEntity < Void > r1 = RequestEntity . get ( URI . create ( u )) . accept ( MediaType . APPLICATION_JSON ). build (); // POST JSON body RequestEntity < MyDto > r2 = RequestEntity . post ( URI . create ( u )) . contentType ( MediaType . APPLICATION_JSON ). body ( dto ); // Custom method + headers RequestEntity < Void > r3 = RequestEntity . method ( HttpMethod . HEAD , URI . create ( u )) . header ( \"X-Foo\" , \"bar\" ). build (); // Controller: read inbound request ResponseEntity < Void > handle ( RequestEntity < String > req ) { ... }","title":"15) Quick reference"},{"location":"cheatsheets/languages/java/spring/classes/web/http/RequestEntity/#16-mental-model","text":"[RequestEntity<T>] \u2192 one immutable package of: method + URI + headers + body \u2193 RestTemplate.exchange(...) \u2193 [ResponseEntity<R>] Design once, test easily, send consistently. This keeps HTTP concerns explicit and localized\u2014cleaner than a dozen ad-hoc parameters sprinkled through your code.","title":"16) Mental model"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/","text":"\ud83c\udf10 ResponseEntity<T> \u2014 Spring\u2019s HTTP Response Wrapper Cheatsheet \u00b6 Essence: ResponseEntity represents the entire HTTP response : \u2192 status code + headers + body (T) It\u2019s a generic container returned by controller methods to give precise control over what the client receives. 1. Where It Lives \u00b6 Package: org.springframework.http Implements: HttpEntity<T> (adds HTTP status on top) Used in: Spring MVC and Spring WebFlux import org.springframework.http.ResponseEntity ; 2. Why Use It \u00b6 Use case Alternative Problem Solution with ResponseEntity You need to set custom status return object directly Always returns 200 OK ResponseEntity.status(201) You need to send headers @ResponseBody Can\u2019t customize headers .header(\"X-Custom\", \"value\") You need conditional responses void or object No fine-grained control .notFound() , .noContent() You want to return generic DTO or error JSON ResponseBody Limited flexibility ResponseEntity<?> handles both 3. Basic Forms \u00b6 @GetMapping ( \"/user/{id}\" ) public ResponseEntity < User > getUser ( @PathVariable Long id ) { Optional < User > user = repo . findById ( id ); return user . map ( ResponseEntity :: ok ) . orElseGet (() -> ResponseEntity . notFound (). build ()); } Equivalent results: Return type Effect User \u2192 200 OK (body = User, default headers) ResponseEntity<User> \u2192 200, 404, 204, etc. (custom) 4. Factory Methods (Static Builders) \u00b6 Method HTTP Status Example ok(T body) 200 OK ResponseEntity.ok(user) ok() 200 OK, no body ResponseEntity.ok().build() created(URI location) 201 Created ResponseEntity.created(uri).build() accepted() 202 Accepted ResponseEntity.accepted().build() noContent() 204 No Content ResponseEntity.noContent().build() badRequest() 400 Bad Request ResponseEntity.badRequest().body(error) status(HttpStatus) custom ResponseEntity.status(HttpStatus.FORBIDDEN).build() notFound() 404 Not Found ResponseEntity.notFound().build() 5. Builder Pattern API \u00b6 return ResponseEntity . status ( HttpStatus . CREATED ) . header ( \"Location\" , \"/api/user/42\" ) . contentType ( MediaType . APPLICATION_JSON ) . body ( savedUser ); Chaining allows combining headers , content type , and body in one statement. Immutable \u2014 each call produces a new instance. 6. Anatomy of a ResponseEntity \u00b6 ResponseEntity<T> \u251c\u2500 HttpStatus status \u251c\u2500 HttpHeaders headers \u2514\u2500 T body It\u2019s a simple value object \u2014 no side effects or thread context. 7. Examples by Common Scenarios \u00b6 \u2705 Success (200) \u00b6 return ResponseEntity . ok ( user ); \u2795 Created (201) \u00b6 URI location = URI . create ( \"/api/users/\" + user . getId ()); return ResponseEntity . created ( location ). body ( user ); \ud83d\udeab No Content (204) \u00b6 return ResponseEntity . noContent (). build (); \u26a0\ufe0f Bad Request (400) \u00b6 return ResponseEntity . badRequest () . body ( Map . of ( \"error\" , \"Invalid input\" )); \ud83d\udd10 Forbidden (403) \u00b6 return ResponseEntity . status ( HttpStatus . FORBIDDEN ) . build (); \u274c Not Found (404) \u00b6 return ResponseEntity . notFound (). build (); \u2699\ufe0f Custom Headers \u00b6 return ResponseEntity . ok () . header ( \"X-App-Version\" , \"1.0\" ) . body ( data ); 8. Relationship with HttpEntity and RequestEntity \u00b6 Type Represents Direction Includes HttpEntity<T> Only headers + body both request/response \u2705 headers, \u2705 body RequestEntity<T> HTTP request metadata request + method + URI ResponseEntity<T> Full HTTP response response + status code All three share the same base idea: wrap HTTP metadata with body generically. 9. Working with ResponseEntity<Void> \u00b6 Use Void when you want no body : return ResponseEntity . noContent (). build (); // same as ResponseEntity<Void> 10. Headers in Depth \u00b6 Headers are stored in an immutable HttpHeaders map. return ResponseEntity . ok () . headers ( h -> { h . setCacheControl ( \"no-cache\" ); h . add ( \"X-Trace-Id\" , traceId ); }) . body ( data ); Or build manually: HttpHeaders headers = new HttpHeaders (); headers . set ( \"X-Rate-Limit\" , \"100\" ); return new ResponseEntity <> ( data , headers , HttpStatus . OK ); 11. Error Handling \u00b6 Spring automatically serializes the body of a ResponseEntity \u2014 even for errors: return ResponseEntity . status ( HttpStatus . BAD_REQUEST ) . body ( Map . of ( \"error\" , \"Invalid data\" )); Use consistent DTOs: record ApiError ( String message , Instant timestamp ) {} return ResponseEntity . status ( 404 ) . body ( new ApiError ( \"User not found\" , Instant . now ())); 12. Content Negotiation \u00b6 Spring respects the Accept header automatically: ResponseEntity.ok().body(user) \u2192 returns JSON or XML depending on the Accept type. contentType(MediaType.APPLICATION_JSON) overrides it explicitly. 13. Using in Reactive Stack (WebFlux) \u00b6 Same class, different behavior \u2014 it\u2019s non-blocking : @GetMapping ( \"/reactive\" ) public Mono < ResponseEntity < User >> reactive () { return userService . findAsync () . map ( ResponseEntity :: ok ) . defaultIfEmpty ( ResponseEntity . notFound (). build ()); } The ResponseEntity is wrapped in a Mono , not returned directly. 14. Integration with Exception Handling \u00b6 When thrown from controllers, custom exceptions can produce ResponseEntity responses via: @ControllerAdvice public class ApiExceptionHandler { @ExceptionHandler ( UserNotFoundException . class ) public ResponseEntity < ApiError > handleUserNotFound ( UserNotFoundException ex ) { return ResponseEntity . status ( HttpStatus . NOT_FOUND ) . body ( new ApiError ( ex . getMessage (), Instant . now ())); } } 15. Testing with MockMvc \u00b6 mockMvc . perform ( get ( \"/user/42\" )) . andExpect ( status (). isOk ()) . andExpect ( jsonPath ( \"$.id\" ). value ( 42 )); Or unit test directly: ResponseEntity < User > res = controller . getUser ( 42L ); assertEquals ( HttpStatus . OK , res . getStatusCode ()); assertNotNull ( res . getBody ()); 16. Generics Power \u00b6 ResponseEntity < List < User >> resp = ResponseEntity . ok ( users ); List < User > body = resp . getBody (); Spring handles serialization for the list automatically. 17. Typical Usage Pattern \u00b6 @GetMapping ( \"/api/items\" ) public ResponseEntity < List < Item >> getAll () { List < Item > items = service . findAll (); if ( items . isEmpty ()) return ResponseEntity . noContent (). build (); return ResponseEntity . ok ( items ); } Concise, readable, fully controlled. 18. Immutable Design \u00b6 Once built, a ResponseEntity can\u2019t be modified. Each chained method produces a new instance . This makes it thread-safe and predictable inside Spring\u2019s dispatching. 19. Common Pitfalls \u00b6 Mistake Problem Fix Returning null instead of ResponseEntity 500 Internal Server Error Use .noContent() or .notFound() Forgetting .build() after header/status chain Compilation error Always end chain with .build() or .body() Using wrong generic (e.g. ResponseEntity<Object> ) Type confusion, serialization warnings Use concrete type or <?> Adding headers after .build() Immutable \u2014 no effect Add before .build() Mixing reactive and MVC types Mono<ResponseEntity> vs ResponseEntity Match controller type (WebFlux vs MVC) 20. Quick Reference Summary \u00b6 Action Code OK (200) ResponseEntity.ok(body) Created (201) ResponseEntity.created(uri).body(body) Accepted (202) ResponseEntity.accepted().build() No Content (204) ResponseEntity.noContent().build() Bad Request (400) ResponseEntity.badRequest().body(error) Unauthorized (401) ResponseEntity.status(HttpStatus.UNAUTHORIZED).build() Forbidden (403) ResponseEntity.status(HttpStatus.FORBIDDEN).build() Not Found (404) ResponseEntity.notFound().build() Custom Status ResponseEntity.status(HttpStatus.I_AM_A_TEAPOT) Add Header .header(\"X-Foo\", \"bar\") Set Content Type .contentType(MediaType.APPLICATION_JSON) 21. Mind Model Summary \u00b6 Controller method \u2193 returns ResponseEntity<T> \u2193 [Status] \u2192 HttpStatus [Headers] \u2192 HttpHeaders [Body] \u2192 T (auto-serialized) Spring converts it into a real HTTP response at the framework boundary. 22. Conceptual Links \u00b6 Related Concept Role HttpEntity<T> Base class without status RequestEntity<T> HTTP request counterpart HttpStatus Enum for standard codes HttpHeaders Collection of header values @ResponseBody Annotation for direct serialization ResponseBodyAdvice Interceptor for modifying responses globally 23. Real-World Pattern \u00b6 Spring REST APIs often structure controller responses as: return ResponseEntity . status ( HttpStatus . CREATED ) . body ( Map . of ( \"id\" , savedId , \"timestamp\" , Instant . now ())); Framework glue (e.g. @RestController ) serializes it to JSON \u2192 sets status/headers \u2192 writes to network. 24. Bonus \u2014 Declarative vs Imperative Style \u00b6 Declarative: @GetMapping ( \"/user/{id}\" ) @ResponseStatus ( HttpStatus . CREATED ) public User createUser (...) { ... } Imperative (using ResponseEntity): @GetMapping ( \"/user/{id}\" ) public ResponseEntity < User > createUser (...) { return ResponseEntity . status ( HttpStatus . CREATED ). body ( user ); } Declarative is simpler. Imperative ( ResponseEntity ) gives precision and dynamic control. 25. Final Mind Model \u00b6 @ResponseBody return value \u2500\u2500\u25ba HttpMessageConverter \u2502 \u25bc ResponseEntity<T> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 status: HttpStatus \u2502 \u2502 headers: HttpHeaders\u2502 \u2502 body: T \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25bc Serialized \u2192 HTTP ResponseEntity is the universal adapter between Java objects and raw HTTP semantics \u2014 the final step in the Spring request pipeline.","title":"ResponseEntity<T>"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#responseentityt-springs-http-response-wrapper-cheatsheet","text":"Essence: ResponseEntity represents the entire HTTP response : \u2192 status code + headers + body (T) It\u2019s a generic container returned by controller methods to give precise control over what the client receives.","title":"\ud83c\udf10 ResponseEntity&lt;T&gt; \u2014 Spring\u2019s HTTP Response Wrapper Cheatsheet"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#1-where-it-lives","text":"Package: org.springframework.http Implements: HttpEntity<T> (adds HTTP status on top) Used in: Spring MVC and Spring WebFlux import org.springframework.http.ResponseEntity ;","title":"1. Where It Lives"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#2-why-use-it","text":"Use case Alternative Problem Solution with ResponseEntity You need to set custom status return object directly Always returns 200 OK ResponseEntity.status(201) You need to send headers @ResponseBody Can\u2019t customize headers .header(\"X-Custom\", \"value\") You need conditional responses void or object No fine-grained control .notFound() , .noContent() You want to return generic DTO or error JSON ResponseBody Limited flexibility ResponseEntity<?> handles both","title":"2. Why Use It"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#3-basic-forms","text":"@GetMapping ( \"/user/{id}\" ) public ResponseEntity < User > getUser ( @PathVariable Long id ) { Optional < User > user = repo . findById ( id ); return user . map ( ResponseEntity :: ok ) . orElseGet (() -> ResponseEntity . notFound (). build ()); } Equivalent results: Return type Effect User \u2192 200 OK (body = User, default headers) ResponseEntity<User> \u2192 200, 404, 204, etc. (custom)","title":"3. Basic Forms"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#4-factory-methods-static-builders","text":"Method HTTP Status Example ok(T body) 200 OK ResponseEntity.ok(user) ok() 200 OK, no body ResponseEntity.ok().build() created(URI location) 201 Created ResponseEntity.created(uri).build() accepted() 202 Accepted ResponseEntity.accepted().build() noContent() 204 No Content ResponseEntity.noContent().build() badRequest() 400 Bad Request ResponseEntity.badRequest().body(error) status(HttpStatus) custom ResponseEntity.status(HttpStatus.FORBIDDEN).build() notFound() 404 Not Found ResponseEntity.notFound().build()","title":"4. Factory Methods (Static Builders)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#5-builder-pattern-api","text":"return ResponseEntity . status ( HttpStatus . CREATED ) . header ( \"Location\" , \"/api/user/42\" ) . contentType ( MediaType . APPLICATION_JSON ) . body ( savedUser ); Chaining allows combining headers , content type , and body in one statement. Immutable \u2014 each call produces a new instance.","title":"5. Builder Pattern API"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#6-anatomy-of-a-responseentity","text":"ResponseEntity<T> \u251c\u2500 HttpStatus status \u251c\u2500 HttpHeaders headers \u2514\u2500 T body It\u2019s a simple value object \u2014 no side effects or thread context.","title":"6. Anatomy of a ResponseEntity"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#7-examples-by-common-scenarios","text":"","title":"7. Examples by Common Scenarios"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#success-200","text":"return ResponseEntity . ok ( user );","title":"\u2705 Success (200)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#created-201","text":"URI location = URI . create ( \"/api/users/\" + user . getId ()); return ResponseEntity . created ( location ). body ( user );","title":"\u2795 Created (201)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#no-content-204","text":"return ResponseEntity . noContent (). build ();","title":"\ud83d\udeab No Content (204)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#bad-request-400","text":"return ResponseEntity . badRequest () . body ( Map . of ( \"error\" , \"Invalid input\" ));","title":"\u26a0\ufe0f Bad Request (400)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#forbidden-403","text":"return ResponseEntity . status ( HttpStatus . FORBIDDEN ) . build ();","title":"\ud83d\udd10 Forbidden (403)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#not-found-404","text":"return ResponseEntity . notFound (). build ();","title":"\u274c Not Found (404)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#custom-headers","text":"return ResponseEntity . ok () . header ( \"X-App-Version\" , \"1.0\" ) . body ( data );","title":"\u2699\ufe0f Custom Headers"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#8-relationship-with-httpentity-and-requestentity","text":"Type Represents Direction Includes HttpEntity<T> Only headers + body both request/response \u2705 headers, \u2705 body RequestEntity<T> HTTP request metadata request + method + URI ResponseEntity<T> Full HTTP response response + status code All three share the same base idea: wrap HTTP metadata with body generically.","title":"8. Relationship with HttpEntity and RequestEntity"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#9-working-with-responseentityvoid","text":"Use Void when you want no body : return ResponseEntity . noContent (). build (); // same as ResponseEntity<Void>","title":"9. Working with ResponseEntity&lt;Void&gt;"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#10-headers-in-depth","text":"Headers are stored in an immutable HttpHeaders map. return ResponseEntity . ok () . headers ( h -> { h . setCacheControl ( \"no-cache\" ); h . add ( \"X-Trace-Id\" , traceId ); }) . body ( data ); Or build manually: HttpHeaders headers = new HttpHeaders (); headers . set ( \"X-Rate-Limit\" , \"100\" ); return new ResponseEntity <> ( data , headers , HttpStatus . OK );","title":"10. Headers in Depth"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#11-error-handling","text":"Spring automatically serializes the body of a ResponseEntity \u2014 even for errors: return ResponseEntity . status ( HttpStatus . BAD_REQUEST ) . body ( Map . of ( \"error\" , \"Invalid data\" )); Use consistent DTOs: record ApiError ( String message , Instant timestamp ) {} return ResponseEntity . status ( 404 ) . body ( new ApiError ( \"User not found\" , Instant . now ()));","title":"11. Error Handling"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#12-content-negotiation","text":"Spring respects the Accept header automatically: ResponseEntity.ok().body(user) \u2192 returns JSON or XML depending on the Accept type. contentType(MediaType.APPLICATION_JSON) overrides it explicitly.","title":"12. Content Negotiation"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#13-using-in-reactive-stack-webflux","text":"Same class, different behavior \u2014 it\u2019s non-blocking : @GetMapping ( \"/reactive\" ) public Mono < ResponseEntity < User >> reactive () { return userService . findAsync () . map ( ResponseEntity :: ok ) . defaultIfEmpty ( ResponseEntity . notFound (). build ()); } The ResponseEntity is wrapped in a Mono , not returned directly.","title":"13. Using in Reactive Stack (WebFlux)"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#14-integration-with-exception-handling","text":"When thrown from controllers, custom exceptions can produce ResponseEntity responses via: @ControllerAdvice public class ApiExceptionHandler { @ExceptionHandler ( UserNotFoundException . class ) public ResponseEntity < ApiError > handleUserNotFound ( UserNotFoundException ex ) { return ResponseEntity . status ( HttpStatus . NOT_FOUND ) . body ( new ApiError ( ex . getMessage (), Instant . now ())); } }","title":"14. Integration with Exception Handling"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#15-testing-with-mockmvc","text":"mockMvc . perform ( get ( \"/user/42\" )) . andExpect ( status (). isOk ()) . andExpect ( jsonPath ( \"$.id\" ). value ( 42 )); Or unit test directly: ResponseEntity < User > res = controller . getUser ( 42L ); assertEquals ( HttpStatus . OK , res . getStatusCode ()); assertNotNull ( res . getBody ());","title":"15. Testing with MockMvc"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#16-generics-power","text":"ResponseEntity < List < User >> resp = ResponseEntity . ok ( users ); List < User > body = resp . getBody (); Spring handles serialization for the list automatically.","title":"16. Generics Power"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#17-typical-usage-pattern","text":"@GetMapping ( \"/api/items\" ) public ResponseEntity < List < Item >> getAll () { List < Item > items = service . findAll (); if ( items . isEmpty ()) return ResponseEntity . noContent (). build (); return ResponseEntity . ok ( items ); } Concise, readable, fully controlled.","title":"17. Typical Usage Pattern"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#18-immutable-design","text":"Once built, a ResponseEntity can\u2019t be modified. Each chained method produces a new instance . This makes it thread-safe and predictable inside Spring\u2019s dispatching.","title":"18. Immutable Design"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#19-common-pitfalls","text":"Mistake Problem Fix Returning null instead of ResponseEntity 500 Internal Server Error Use .noContent() or .notFound() Forgetting .build() after header/status chain Compilation error Always end chain with .build() or .body() Using wrong generic (e.g. ResponseEntity<Object> ) Type confusion, serialization warnings Use concrete type or <?> Adding headers after .build() Immutable \u2014 no effect Add before .build() Mixing reactive and MVC types Mono<ResponseEntity> vs ResponseEntity Match controller type (WebFlux vs MVC)","title":"19. Common Pitfalls"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#20-quick-reference-summary","text":"Action Code OK (200) ResponseEntity.ok(body) Created (201) ResponseEntity.created(uri).body(body) Accepted (202) ResponseEntity.accepted().build() No Content (204) ResponseEntity.noContent().build() Bad Request (400) ResponseEntity.badRequest().body(error) Unauthorized (401) ResponseEntity.status(HttpStatus.UNAUTHORIZED).build() Forbidden (403) ResponseEntity.status(HttpStatus.FORBIDDEN).build() Not Found (404) ResponseEntity.notFound().build() Custom Status ResponseEntity.status(HttpStatus.I_AM_A_TEAPOT) Add Header .header(\"X-Foo\", \"bar\") Set Content Type .contentType(MediaType.APPLICATION_JSON)","title":"20. Quick Reference Summary"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#21-mind-model-summary","text":"Controller method \u2193 returns ResponseEntity<T> \u2193 [Status] \u2192 HttpStatus [Headers] \u2192 HttpHeaders [Body] \u2192 T (auto-serialized) Spring converts it into a real HTTP response at the framework boundary.","title":"21. Mind Model Summary"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#22-conceptual-links","text":"Related Concept Role HttpEntity<T> Base class without status RequestEntity<T> HTTP request counterpart HttpStatus Enum for standard codes HttpHeaders Collection of header values @ResponseBody Annotation for direct serialization ResponseBodyAdvice Interceptor for modifying responses globally","title":"22. Conceptual Links"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#23-real-world-pattern","text":"Spring REST APIs often structure controller responses as: return ResponseEntity . status ( HttpStatus . CREATED ) . body ( Map . of ( \"id\" , savedId , \"timestamp\" , Instant . now ())); Framework glue (e.g. @RestController ) serializes it to JSON \u2192 sets status/headers \u2192 writes to network.","title":"23. Real-World Pattern"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#24-bonus-declarative-vs-imperative-style","text":"Declarative: @GetMapping ( \"/user/{id}\" ) @ResponseStatus ( HttpStatus . CREATED ) public User createUser (...) { ... } Imperative (using ResponseEntity): @GetMapping ( \"/user/{id}\" ) public ResponseEntity < User > createUser (...) { return ResponseEntity . status ( HttpStatus . CREATED ). body ( user ); } Declarative is simpler. Imperative ( ResponseEntity ) gives precision and dynamic control.","title":"24. Bonus \u2014 Declarative vs Imperative Style"},{"location":"cheatsheets/languages/java/spring/classes/web/http/ResponseEntity/#25-final-mind-model","text":"@ResponseBody return value \u2500\u2500\u25ba HttpMessageConverter \u2502 \u25bc ResponseEntity<T> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 status: HttpStatus \u2502 \u2502 headers: HttpHeaders\u2502 \u2502 body: T \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25bc Serialized \u2192 HTTP ResponseEntity is the universal adapter between Java objects and raw HTTP semantics \u2014 the final step in the Spring request pipeline.","title":"25. Final Mind Model"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/","text":"\ud83e\udde9 Java & Spring Web MVC \u2014 ServletUriComponentsBuilder Cheatsheet \u00b6 Unified quick reference: from basic Java concepts of URI building to Spring\u2019s ServletUriComponentsBuilder and related utilities for safe, framework-integrated URL construction. What it is (and why it\u2019s useful) \u00b6 ServletUriComponentsBuilder (Spring MVC) builds absolute URLs from the current HTTP request (scheme, host, port, context path). It saves you from manual string concatenation, handles encoding, and stays correct across environments (localhost, production, reverse proxies). It is essentially a servlet-aware extension of UriComponentsBuilder , aware of your running request and servlet context. Quick glossary \u00b6 Context path \u2013 Base path your app is mounted at (e.g., /myapp ). Request URI \u2013 Path of the current request (e.g., /api/users/42 ). Builder \u2013 Fluent object you add parts to (path, query, fragment) to produce a URL. UriComponents \u2013 Immutable representation of a URI (scheme/host/port/path/query). Forwarded headers \u2013 Proxy headers ( X-Forwarded-* ) telling the app the external URL. Encode \u2013 Percent-encode unsafe characters (once\u2014and only once). Core package & location \u00b6 Class: org.springframework.web.servlet.support.ServletUriComponentsBuilder Module: spring-webmvc Also see: org.springframework.web.util.UriComponentsBuilder Typical use: building the Location header (201 Created) \u00b6 @PostMapping ( \"/contacts\" ) public ResponseEntity < ContactDto > create ( @RequestBody CreateContact cmd ) { Contact saved = service . create ( cmd ); URI location = ServletUriComponentsBuilder . fromCurrentRequest () // e.g., http://localhost:8080/contacts . path ( \"/{id}\" ) // \u2192 http://.../contacts/{id} . buildAndExpand ( saved . getId ()) . toUri (); // encodes safely return ResponseEntity . created ( location ). body ( ContactDto . from ( saved )); } This produces a fully qualified URI , correctly encoded and respecting forwarded headers when configured. Common factory methods \u00b6 Factory method Base When to use fromCurrentRequest() Full current request URI (with query) For related links within the same endpoint fromCurrentRequestUri() Current URI, but without query params When adding new query params fromCurrentContextPath() Context root only ( scheme://host:port/context ) For top-level links like /health or /login fromRequest(request) Explicit HttpServletRequest When the request object is available UriComponentsBuilder.fromPath(\"/path\") No servlet dependency For tests or offline link building Examples \u2014 creating URLs \u00b6 From current request or context \u00b6 String a = ServletUriComponentsBuilder . fromCurrentContextPath () // https://example.com/myapp . path ( \"/files/123.png\" ) . toUriString (); String b = ServletUriComponentsBuilder . fromCurrentRequestUri () // https://example.com/myapp/api/users/42 . replacePath ( \"/health\" ) // path becomes /health . replaceQuery ( null ) // drop query . toUriString (); Output: https://example.com/myapp/files/123.png https://example.com/myapp/health From explicit HttpServletRequest \u00b6 String url = ServletUriComponentsBuilder . fromRequest ( request ) . replacePath ( \"/docs\" ) . replaceQuery ( \"v=1\" ) . toUriString (); // \u2192 https://example.com/myapp/docs?v=1 Building relative or templated URIs \u00b6 String url = ServletUriComponentsBuilder . fromCurrentContextPath () . path ( \"/api\" ) . pathSegment ( \"users\" , \"{id}\" ) // safe segment joining + encoding . queryParam ( \"verbose\" , \"{v}\" ) // adds ?verbose=1 . buildAndExpand ( 42 , 1 ) // expand placeholders . toUriString (); // \u2192 https://example.com/myapp/api/users/42?verbose=1 Advanced transformations \u00b6 String url = ServletUriComponentsBuilder . fromCurrentRequestUri () . replacePath ( \"/search\" ) . replaceQueryParam ( \"q\" , \"caf\u00e9\" ) // encoded to caf%C3%A9 . fragment ( \"top\" ) . toUriString (); Output: https://example.com/myapp/search?q=caf%C3%A9#top Reading URI components \u00b6 var comps = ServletUriComponentsBuilder . fromCurrentRequestUri () . build (); System . out . println ( comps . getScheme ()); // https System . out . println ( comps . getHost ()); // example.com System . out . println ( comps . getPort ()); // -1 (default) System . out . println ( comps . getPath ()); // /myapp/api/users/42 System . out . println ( comps . getQuery ()); // active=true Adding or replacing query parameters \u00b6 URI uri = ServletUriComponentsBuilder . fromCurrentRequestUri () . queryParam ( \"page\" , 2 ) . queryParam ( \"size\" , 20 ) . queryParam ( \"sort\" , \"name,asc\" ) . build () . toUri (); Output conversions \u00b6 UriComponents comps = ServletUriComponentsBuilder . fromCurrentRequestUri (). build (); URI uri = comps . toUri (); // java.net.URI String asString = comps . toUriString (); // String Practical utilities \u00b6 Pagination links (RFC\u20115988 style): UriComponentsBuilder base = ServletUriComponentsBuilder . fromCurrentRequestUri (); String first = base . replaceQueryParam ( \"page\" , 0 ). toUriString (); String next = base . replaceQueryParam ( \"page\" , page + 1 ). toUriString (); String prev = base . replaceQueryParam ( \"page\" , Math . max ( page - 1 , 0 )). toUriString (); return ResponseEntity . ok () . header ( \"Link\" , \"<\" + first + \">; rel=\\\"first\\\", \" + \"<\" + next + \">; rel=\\\"next\\\", \" + \"<\" + prev + \">; rel=\\\"prev\\\"\" ) . body ( body ); Self link assembler: public static URI selfForId ( Object id ) { return ServletUriComponentsBuilder . fromCurrentRequestUri () . path ( \"/{id}\" ) . buildAndExpand ( id ) . toUri (); } Encoding behavior \u00b6 Path and query parts are encoded automatically . Never manually URLEncoder.encode before passing. URI.create() does not encode and will throw for illegal chars. Always rely on pathSegment() or buildAndExpand() . Proxy / deployment awareness \u00b6 Behind reverse proxies (e.g. Nginx, Traefik): Enable forwarded header support: @Bean ForwardedHeaderFilter forwardedHeaderFilter () { return new ForwardedHeaderFilter (); } Or in application.properties : server.forward-headers-strategy = framework Otherwise, you\u2019ll see internal addresses like http://localhost:8080 in generated links. Gotchas & anti-patterns \u00b6 Placeholders aren\u2019t magic: must call buildAndExpand(...) . Double slashes: avoid path(\"/a/\").path(\"/b\") \u2014 use pathSegment() . Off-request usage: fromCurrent*() requires a servlet request context. Null query values: queryParam(\"x\", (Object)null) produces ?x ; use replaceQueryParam() to remove. Double encoding: don\u2019t call .encode() twice. Mini reference table \u00b6 Method What it does Example fromCurrentContextPath() Base = scheme + host + port + context https://ex.com/app fromCurrentRequestUri() Full current URI https://ex.com/app/api/u/42 path(\"/x\") Append raw path /app/x pathSegment(\"a\", \"b\") Append encoded segments /a%20b queryParam(\"k\", v) Add query param ?k=1 replacePath(\"/p\") Replace path /p replaceQueryParam(\"k\", v) Replace param ?k=9 fragment(\"top\") Add fragment #top buildAndExpand(...) Expand templates /u/42 toUri() \u2192 java.net.URI toUriString() \u2192 String End-to-end example \u00b6 // Incoming: https://api.example.com/myapp/api/users/42?active=true String profile = ServletUriComponentsBuilder . fromCurrentContextPath () . path ( \"/profiles/{id}\" ) . buildAndExpand ( 42 ) . toUriString (); String avatar = ServletUriComponentsBuilder . fromCurrentContextPath () . path ( \"/files/avatars/{id}.png\" ) . buildAndExpand ( 42 ) . toUriString (); String search = ServletUriComponentsBuilder . fromCurrentRequestUri () . replacePath ( \"/search\" ) . replaceQueryParam ( \"q\" , \"caf\u00e9\" ) . replaceQueryParam ( \"page\" , 2 ) . toUriString (); System . out . println ( profile ); System . out . println ( avatar ); System . out . println ( search ); Output: https://api.example.com/myapp/profiles/42 https://api.example.com/myapp/files/avatars/42.png https://api.example.com/myapp/search?q=caf%C3%A9&page=2 Bottom line summary \u00b6 Use fromCurrentContextPath() to build top-level or absolute URLs. Use fromCurrentRequestUri() to tweak the current endpoint into a related one. Prefer pathSegment() over manual slashes. Enable ForwardedHeaderFilter for proxy correctness. Outside servlet context \u2192 use UriComponentsBuilder .","title":"ServletUriComponentsBuilder"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#java-spring-web-mvc-servleturicomponentsbuilder-cheatsheet","text":"Unified quick reference: from basic Java concepts of URI building to Spring\u2019s ServletUriComponentsBuilder and related utilities for safe, framework-integrated URL construction.","title":"\ud83e\udde9 Java &amp; Spring Web MVC \u2014 ServletUriComponentsBuilder Cheatsheet"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#what-it-is-and-why-its-useful","text":"ServletUriComponentsBuilder (Spring MVC) builds absolute URLs from the current HTTP request (scheme, host, port, context path). It saves you from manual string concatenation, handles encoding, and stays correct across environments (localhost, production, reverse proxies). It is essentially a servlet-aware extension of UriComponentsBuilder , aware of your running request and servlet context.","title":"What it is (and why it\u2019s useful)"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#quick-glossary","text":"Context path \u2013 Base path your app is mounted at (e.g., /myapp ). Request URI \u2013 Path of the current request (e.g., /api/users/42 ). Builder \u2013 Fluent object you add parts to (path, query, fragment) to produce a URL. UriComponents \u2013 Immutable representation of a URI (scheme/host/port/path/query). Forwarded headers \u2013 Proxy headers ( X-Forwarded-* ) telling the app the external URL. Encode \u2013 Percent-encode unsafe characters (once\u2014and only once).","title":"Quick glossary"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#core-package-location","text":"Class: org.springframework.web.servlet.support.ServletUriComponentsBuilder Module: spring-webmvc Also see: org.springframework.web.util.UriComponentsBuilder","title":"Core package &amp; location"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#typical-use-building-the-location-header-201-created","text":"@PostMapping ( \"/contacts\" ) public ResponseEntity < ContactDto > create ( @RequestBody CreateContact cmd ) { Contact saved = service . create ( cmd ); URI location = ServletUriComponentsBuilder . fromCurrentRequest () // e.g., http://localhost:8080/contacts . path ( \"/{id}\" ) // \u2192 http://.../contacts/{id} . buildAndExpand ( saved . getId ()) . toUri (); // encodes safely return ResponseEntity . created ( location ). body ( ContactDto . from ( saved )); } This produces a fully qualified URI , correctly encoded and respecting forwarded headers when configured.","title":"Typical use: building the Location header (201 Created)"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#common-factory-methods","text":"Factory method Base When to use fromCurrentRequest() Full current request URI (with query) For related links within the same endpoint fromCurrentRequestUri() Current URI, but without query params When adding new query params fromCurrentContextPath() Context root only ( scheme://host:port/context ) For top-level links like /health or /login fromRequest(request) Explicit HttpServletRequest When the request object is available UriComponentsBuilder.fromPath(\"/path\") No servlet dependency For tests or offline link building","title":"Common factory methods"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#examples-creating-urls","text":"","title":"Examples \u2014 creating URLs"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#from-current-request-or-context","text":"String a = ServletUriComponentsBuilder . fromCurrentContextPath () // https://example.com/myapp . path ( \"/files/123.png\" ) . toUriString (); String b = ServletUriComponentsBuilder . fromCurrentRequestUri () // https://example.com/myapp/api/users/42 . replacePath ( \"/health\" ) // path becomes /health . replaceQuery ( null ) // drop query . toUriString (); Output: https://example.com/myapp/files/123.png https://example.com/myapp/health","title":"From current request or context"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#from-explicit-httpservletrequest","text":"String url = ServletUriComponentsBuilder . fromRequest ( request ) . replacePath ( \"/docs\" ) . replaceQuery ( \"v=1\" ) . toUriString (); // \u2192 https://example.com/myapp/docs?v=1","title":"From explicit HttpServletRequest"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#building-relative-or-templated-uris","text":"String url = ServletUriComponentsBuilder . fromCurrentContextPath () . path ( \"/api\" ) . pathSegment ( \"users\" , \"{id}\" ) // safe segment joining + encoding . queryParam ( \"verbose\" , \"{v}\" ) // adds ?verbose=1 . buildAndExpand ( 42 , 1 ) // expand placeholders . toUriString (); // \u2192 https://example.com/myapp/api/users/42?verbose=1","title":"Building relative or templated URIs"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#advanced-transformations","text":"String url = ServletUriComponentsBuilder . fromCurrentRequestUri () . replacePath ( \"/search\" ) . replaceQueryParam ( \"q\" , \"caf\u00e9\" ) // encoded to caf%C3%A9 . fragment ( \"top\" ) . toUriString (); Output: https://example.com/myapp/search?q=caf%C3%A9#top","title":"Advanced transformations"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#reading-uri-components","text":"var comps = ServletUriComponentsBuilder . fromCurrentRequestUri () . build (); System . out . println ( comps . getScheme ()); // https System . out . println ( comps . getHost ()); // example.com System . out . println ( comps . getPort ()); // -1 (default) System . out . println ( comps . getPath ()); // /myapp/api/users/42 System . out . println ( comps . getQuery ()); // active=true","title":"Reading URI components"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#adding-or-replacing-query-parameters","text":"URI uri = ServletUriComponentsBuilder . fromCurrentRequestUri () . queryParam ( \"page\" , 2 ) . queryParam ( \"size\" , 20 ) . queryParam ( \"sort\" , \"name,asc\" ) . build () . toUri ();","title":"Adding or replacing query parameters"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#output-conversions","text":"UriComponents comps = ServletUriComponentsBuilder . fromCurrentRequestUri (). build (); URI uri = comps . toUri (); // java.net.URI String asString = comps . toUriString (); // String","title":"Output conversions"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#practical-utilities","text":"Pagination links (RFC\u20115988 style): UriComponentsBuilder base = ServletUriComponentsBuilder . fromCurrentRequestUri (); String first = base . replaceQueryParam ( \"page\" , 0 ). toUriString (); String next = base . replaceQueryParam ( \"page\" , page + 1 ). toUriString (); String prev = base . replaceQueryParam ( \"page\" , Math . max ( page - 1 , 0 )). toUriString (); return ResponseEntity . ok () . header ( \"Link\" , \"<\" + first + \">; rel=\\\"first\\\", \" + \"<\" + next + \">; rel=\\\"next\\\", \" + \"<\" + prev + \">; rel=\\\"prev\\\"\" ) . body ( body ); Self link assembler: public static URI selfForId ( Object id ) { return ServletUriComponentsBuilder . fromCurrentRequestUri () . path ( \"/{id}\" ) . buildAndExpand ( id ) . toUri (); }","title":"Practical utilities"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#encoding-behavior","text":"Path and query parts are encoded automatically . Never manually URLEncoder.encode before passing. URI.create() does not encode and will throw for illegal chars. Always rely on pathSegment() or buildAndExpand() .","title":"Encoding behavior"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#proxy-deployment-awareness","text":"Behind reverse proxies (e.g. Nginx, Traefik): Enable forwarded header support: @Bean ForwardedHeaderFilter forwardedHeaderFilter () { return new ForwardedHeaderFilter (); } Or in application.properties : server.forward-headers-strategy = framework Otherwise, you\u2019ll see internal addresses like http://localhost:8080 in generated links.","title":"Proxy / deployment awareness"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#gotchas-anti-patterns","text":"Placeholders aren\u2019t magic: must call buildAndExpand(...) . Double slashes: avoid path(\"/a/\").path(\"/b\") \u2014 use pathSegment() . Off-request usage: fromCurrent*() requires a servlet request context. Null query values: queryParam(\"x\", (Object)null) produces ?x ; use replaceQueryParam() to remove. Double encoding: don\u2019t call .encode() twice.","title":"Gotchas &amp; anti-patterns"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#mini-reference-table","text":"Method What it does Example fromCurrentContextPath() Base = scheme + host + port + context https://ex.com/app fromCurrentRequestUri() Full current URI https://ex.com/app/api/u/42 path(\"/x\") Append raw path /app/x pathSegment(\"a\", \"b\") Append encoded segments /a%20b queryParam(\"k\", v) Add query param ?k=1 replacePath(\"/p\") Replace path /p replaceQueryParam(\"k\", v) Replace param ?k=9 fragment(\"top\") Add fragment #top buildAndExpand(...) Expand templates /u/42 toUri() \u2192 java.net.URI toUriString() \u2192 String","title":"Mini reference table"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#end-to-end-example","text":"// Incoming: https://api.example.com/myapp/api/users/42?active=true String profile = ServletUriComponentsBuilder . fromCurrentContextPath () . path ( \"/profiles/{id}\" ) . buildAndExpand ( 42 ) . toUriString (); String avatar = ServletUriComponentsBuilder . fromCurrentContextPath () . path ( \"/files/avatars/{id}.png\" ) . buildAndExpand ( 42 ) . toUriString (); String search = ServletUriComponentsBuilder . fromCurrentRequestUri () . replacePath ( \"/search\" ) . replaceQueryParam ( \"q\" , \"caf\u00e9\" ) . replaceQueryParam ( \"page\" , 2 ) . toUriString (); System . out . println ( profile ); System . out . println ( avatar ); System . out . println ( search ); Output: https://api.example.com/myapp/profiles/42 https://api.example.com/myapp/files/avatars/42.png https://api.example.com/myapp/search?q=caf%C3%A9&page=2","title":"End-to-end example"},{"location":"cheatsheets/languages/java/spring/classes/web/uri/ServletUriComponentsBuilder/#bottom-line-summary","text":"Use fromCurrentContextPath() to build top-level or absolute URLs. Use fromCurrentRequestUri() to tweak the current endpoint into a related one. Prefer pathSegment() over manual slashes. Enable ForwardedHeaderFilter for proxy correctness. Outside servlet context \u2192 use UriComponentsBuilder .","title":"Bottom line summary"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/","text":"\u2699\ufe0f Spring Core Quick-Starter \u2014 All-in-One Cheatsheet \u00b6 Essence: Everything that powers Spring \u2014 from reflection and beans to IoC, lifecycle, AOP, and events \u2014 condensed for daily reference. Think of it as your cockpit dashboard: every switch labeled, no theory required. \ud83c\udf31 1. Reflection \u2014 How Spring Sees Your Code \u00b6 Core Idea \u00b6 Spring uses Java reflection to discover, instantiate, and wire classes at runtime. Java Basics \u00b6 Class <?> c = PaymentService . class ; Object o = c . getDeclaredConstructor (). newInstance (); Field f = c . getDeclaredField ( \"audit\" ); f . setAccessible ( true ); f . set ( o , new AuditService ()); In Spring \u00b6 Operation Reflection Use Classpath scanning Class.forName() Bean creation Constructor.newInstance() Field injection Field.set() Lifecycle methods Method.invoke() Key Annotation \u00b6 @Autowired \u2014 tells Spring to inject a dependency automatically. \ud83e\udde9 2. Bean Anatomy \u2014 What Spring Manages \u00b6 Definition \u00b6 A bean is any Java object managed by Spring \u2014 created, wired, and destroyed inside the ApplicationContext. Lifecycle Overview \u00b6 instantiate \u2192 inject \u2192 initialize \u2192 active \u2192 destroy Lifecycle Hooks \u00b6 Stage Hook Description Initialization @PostConstruct Runs after dependencies injected Initialization afterPropertiesSet() From InitializingBean Destruction @PreDestroy Runs before context shutdown Destruction destroy() From DisposableBean Core Annotations \u00b6 Annotation Role @Component Marks a Spring bean @Service Specialized component for service layer @Repository DAO-level component, exception translation @Configuration Source of @Bean definitions @Bean Defines method-produced beans \ud83e\udde0 3. Dependency Injection \u2014 How Beans Connect \u00b6 Injection Styles \u00b6 Type Example Notes Constructor public Service(Repo repo) Preferred \u2014 immutable Setter @Autowired setRepo(Repo r) Optional or late binding Field @Autowired private Repo repo; Simple, less testable Qualifiers \u00b6 Annotation Purpose @Qualifier(\"beanName\") Choose specific bean @Primary Default bean for a type @Profile(\"dev\") Load only for active profile Optional/Lazy \u00b6 @Autowired ( required = false ) @Lazy private ExpensiveService heavy ; Spring injects a proxy, creates bean only when used. \ud83e\uddec 4. IoC Container \u2014 Who Controls the Show \u00b6 Philosophy \u00b6 Inversion of Control (IoC) means the framework controls object creation, not you. Core Interfaces \u00b6 Interface Purpose BeanFactory Minimal container for DI ApplicationContext Full-featured container with events, i18n, resources Common Context Classes \u00b6 Class Usage AnnotationConfigApplicationContext Plain Java config ClassPathXmlApplicationContext Legacy XML config SpringApplication Boot entry point Useful Methods \u00b6 ctx . getBean ( MyService . class ); ctx . containsBean ( \"auditService\" ); ctx . getEnvironment (). getActiveProfiles (); ctx . close (); BeanDefinition Metadata \u00b6 Property Meaning beanClass Actual Class<?> scope singleton / prototype / request initMethod Name of init method destroyMethod Cleanup method \ud83e\udded 5. Application Context Lifecycle \u2014 From Start to Stop \u00b6 Spring Boot run() \u2193 create ApplicationContext \u2193 scan classpath \u2193 register BeanDefinitions \u2193 instantiate + inject \u2193 post-process + initialize \u2193 publish ContextRefreshedEvent \u2193 ready to serve \u2193 (ContextClosedEvent \u2192 destroy hooks) Key Events \u00b6 Event When Triggered ContextRefreshedEvent All beans initialized ContextStartedEvent Context started (rarely used) ContextClosedEvent Context shutting down ContextStoppedEvent Graceful stop ApplicationReadyEvent Boot app fully started \u2699\ufe0f 6. AOP \u2014 How Spring Adds Behavior Dynamically \u00b6 Core Idea \u00b6 Aspect-Oriented Programming (AOP) lets Spring weave extra behavior (transactions, caching, logging) around method calls. Key Components \u00b6 Term Meaning Aspect Class containing crosscutting logic Advice Code to run before/after methods Pointcut Rule for selecting target methods Proxy Wrapper intercepting method calls Common Annotations \u00b6 Annotation Role @Aspect Declares an aspect class @Before(\"execution(...)\") Run before method @After(\"execution(...)\") Run after method @Around(\"execution(...)\") Wrap method (full control) @AfterReturning / @AfterThrowing Handle success/error Proxy Types \u00b6 Type Mechanism Applies To JDK Dynamic Proxy java.lang.reflect.Proxy Interfaces CGLIB Proxy Bytecode subclass Concrete classes Built-in Use Cases \u00b6 Feature Annotation Behavior Transactions @Transactional Begin/commit/rollback Async @Async Run in background thread Caching @Cacheable Store return values Security @PreAuthorize Access control checks \ud83d\udce1 7. Events \u2014 How Spring Talks Internally \u00b6 Publish & Listen \u00b6 @Component public class AppReadyListener implements ApplicationListener < ApplicationReadyEvent > { public void onApplicationEvent ( ApplicationReadyEvent e ) { System . out . println ( \"App started!\" ); } } Or annotation-style: @EventListener public void handle ( ContextClosedEvent e ) { System . out . println ( \"Context closed.\" ); } Custom Events \u00b6 class OrderCreatedEvent extends ApplicationEvent { ... } ctx . publishEvent ( new OrderCreatedEvent ( this )); \ud83e\udde9 8. Common Gotchas \u00b6 Problem Cause Fix NoSuchBeanDefinitionException Missing or mismatched type Add @Component or correct @Qualifier BeanCurrentlyInCreationException Circular constructor injection Break cycle with setter injection @PostConstruct not called Method not public void / wrong signature Fix method definition AOP not triggered Self-invocation inside same class Move call to another bean \ud83d\udd0d 9. Useful Debugging Tricks \u00b6 List all beans: Arrays . stream ( ctx . getBeanDefinitionNames ()). forEach ( System . out :: println ); Trace events: @Component public class EventsTracer implements ApplicationListener < ApplicationEvent > { public void onApplicationEvent ( ApplicationEvent e ) { System . out . println ( \"Event \u2192 \" + e . getClass (). getSimpleName ()); } } Inspect proxy target: AopUtils . getTargetClass ( bean ); \ud83e\uddec 10. Hierarchy Map \u00b6 [Reflection Layer] \u251c\u2500 Reflection API \u2514\u2500 @Autowired injection \u2193 [Beans Layer] \u251c\u2500 Bean annotations & lifecycle \u2514\u2500 BeanDefinition metadata \u2193 [Container Layer] \u251c\u2500 Dependency injection & ApplicationContext \u2514\u2500 BeanFactory, IoC flow \u2193 [AOP Layer] \u251c\u2500 Aspects & proxies \u2193 [Events Layer] \u2514\u2500 Application events & listeners \ud83e\ude9e Core Takeaway \u00b6 Spring turns static Java code into a living ecosystem. Reflection lets it see your classes, IoC lets it control their creation, AOP lets it enrich their behavior, and the event system lets it coordinate the whole show. \ud83d\udd17 Related \u00b6 Conceptual Overview: concepts/frameworks/spring/core/quick-start.md Blueprint: meta/blueprint.md Next: explore beans/bean-lifecycle.md and container/applicationcontext.md for deeper operational detail.","title":"Spring Core Quick-Starter"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#spring-core-quick-starter-all-in-one-cheatsheet","text":"Essence: Everything that powers Spring \u2014 from reflection and beans to IoC, lifecycle, AOP, and events \u2014 condensed for daily reference. Think of it as your cockpit dashboard: every switch labeled, no theory required.","title":"\u2699\ufe0f Spring Core Quick-Starter \u2014 All-in-One Cheatsheet"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#1-reflection-how-spring-sees-your-code","text":"","title":"\ud83c\udf31 1. Reflection \u2014 How Spring Sees Your Code"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#core-idea","text":"Spring uses Java reflection to discover, instantiate, and wire classes at runtime.","title":"Core Idea"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#java-basics","text":"Class <?> c = PaymentService . class ; Object o = c . getDeclaredConstructor (). newInstance (); Field f = c . getDeclaredField ( \"audit\" ); f . setAccessible ( true ); f . set ( o , new AuditService ());","title":"Java Basics"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#in-spring","text":"Operation Reflection Use Classpath scanning Class.forName() Bean creation Constructor.newInstance() Field injection Field.set() Lifecycle methods Method.invoke()","title":"In Spring"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#key-annotation","text":"@Autowired \u2014 tells Spring to inject a dependency automatically.","title":"Key Annotation"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#2-bean-anatomy-what-spring-manages","text":"","title":"\ud83e\udde9 2. Bean Anatomy \u2014 What Spring Manages"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#definition","text":"A bean is any Java object managed by Spring \u2014 created, wired, and destroyed inside the ApplicationContext.","title":"Definition"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#lifecycle-overview","text":"instantiate \u2192 inject \u2192 initialize \u2192 active \u2192 destroy","title":"Lifecycle Overview"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#lifecycle-hooks","text":"Stage Hook Description Initialization @PostConstruct Runs after dependencies injected Initialization afterPropertiesSet() From InitializingBean Destruction @PreDestroy Runs before context shutdown Destruction destroy() From DisposableBean","title":"Lifecycle Hooks"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#core-annotations","text":"Annotation Role @Component Marks a Spring bean @Service Specialized component for service layer @Repository DAO-level component, exception translation @Configuration Source of @Bean definitions @Bean Defines method-produced beans","title":"Core Annotations"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#3-dependency-injection-how-beans-connect","text":"","title":"\ud83e\udde0 3. Dependency Injection \u2014 How Beans Connect"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#injection-styles","text":"Type Example Notes Constructor public Service(Repo repo) Preferred \u2014 immutable Setter @Autowired setRepo(Repo r) Optional or late binding Field @Autowired private Repo repo; Simple, less testable","title":"Injection Styles"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#qualifiers","text":"Annotation Purpose @Qualifier(\"beanName\") Choose specific bean @Primary Default bean for a type @Profile(\"dev\") Load only for active profile","title":"Qualifiers"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#optionallazy","text":"@Autowired ( required = false ) @Lazy private ExpensiveService heavy ; Spring injects a proxy, creates bean only when used.","title":"Optional/Lazy"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#4-ioc-container-who-controls-the-show","text":"","title":"\ud83e\uddec 4. IoC Container \u2014 Who Controls the Show"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#philosophy","text":"Inversion of Control (IoC) means the framework controls object creation, not you.","title":"Philosophy"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#core-interfaces","text":"Interface Purpose BeanFactory Minimal container for DI ApplicationContext Full-featured container with events, i18n, resources","title":"Core Interfaces"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#common-context-classes","text":"Class Usage AnnotationConfigApplicationContext Plain Java config ClassPathXmlApplicationContext Legacy XML config SpringApplication Boot entry point","title":"Common Context Classes"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#useful-methods","text":"ctx . getBean ( MyService . class ); ctx . containsBean ( \"auditService\" ); ctx . getEnvironment (). getActiveProfiles (); ctx . close ();","title":"Useful Methods"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#beandefinition-metadata","text":"Property Meaning beanClass Actual Class<?> scope singleton / prototype / request initMethod Name of init method destroyMethod Cleanup method","title":"BeanDefinition Metadata"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#5-application-context-lifecycle-from-start-to-stop","text":"Spring Boot run() \u2193 create ApplicationContext \u2193 scan classpath \u2193 register BeanDefinitions \u2193 instantiate + inject \u2193 post-process + initialize \u2193 publish ContextRefreshedEvent \u2193 ready to serve \u2193 (ContextClosedEvent \u2192 destroy hooks)","title":"\ud83e\udded 5. Application Context Lifecycle \u2014 From Start to Stop"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#key-events","text":"Event When Triggered ContextRefreshedEvent All beans initialized ContextStartedEvent Context started (rarely used) ContextClosedEvent Context shutting down ContextStoppedEvent Graceful stop ApplicationReadyEvent Boot app fully started","title":"Key Events"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#6-aop-how-spring-adds-behavior-dynamically","text":"","title":"\u2699\ufe0f 6. AOP \u2014 How Spring Adds Behavior Dynamically"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#core-idea_1","text":"Aspect-Oriented Programming (AOP) lets Spring weave extra behavior (transactions, caching, logging) around method calls.","title":"Core Idea"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#key-components","text":"Term Meaning Aspect Class containing crosscutting logic Advice Code to run before/after methods Pointcut Rule for selecting target methods Proxy Wrapper intercepting method calls","title":"Key Components"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#common-annotations","text":"Annotation Role @Aspect Declares an aspect class @Before(\"execution(...)\") Run before method @After(\"execution(...)\") Run after method @Around(\"execution(...)\") Wrap method (full control) @AfterReturning / @AfterThrowing Handle success/error","title":"Common Annotations"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#proxy-types","text":"Type Mechanism Applies To JDK Dynamic Proxy java.lang.reflect.Proxy Interfaces CGLIB Proxy Bytecode subclass Concrete classes","title":"Proxy Types"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#built-in-use-cases","text":"Feature Annotation Behavior Transactions @Transactional Begin/commit/rollback Async @Async Run in background thread Caching @Cacheable Store return values Security @PreAuthorize Access control checks","title":"Built-in Use Cases"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#7-events-how-spring-talks-internally","text":"","title":"\ud83d\udce1 7. Events \u2014 How Spring Talks Internally"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#publish-listen","text":"@Component public class AppReadyListener implements ApplicationListener < ApplicationReadyEvent > { public void onApplicationEvent ( ApplicationReadyEvent e ) { System . out . println ( \"App started!\" ); } } Or annotation-style: @EventListener public void handle ( ContextClosedEvent e ) { System . out . println ( \"Context closed.\" ); }","title":"Publish &amp; Listen"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#custom-events","text":"class OrderCreatedEvent extends ApplicationEvent { ... } ctx . publishEvent ( new OrderCreatedEvent ( this ));","title":"Custom Events"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#8-common-gotchas","text":"Problem Cause Fix NoSuchBeanDefinitionException Missing or mismatched type Add @Component or correct @Qualifier BeanCurrentlyInCreationException Circular constructor injection Break cycle with setter injection @PostConstruct not called Method not public void / wrong signature Fix method definition AOP not triggered Self-invocation inside same class Move call to another bean","title":"\ud83e\udde9 8. Common Gotchas"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#9-useful-debugging-tricks","text":"List all beans: Arrays . stream ( ctx . getBeanDefinitionNames ()). forEach ( System . out :: println ); Trace events: @Component public class EventsTracer implements ApplicationListener < ApplicationEvent > { public void onApplicationEvent ( ApplicationEvent e ) { System . out . println ( \"Event \u2192 \" + e . getClass (). getSimpleName ()); } } Inspect proxy target: AopUtils . getTargetClass ( bean );","title":"\ud83d\udd0d 9. Useful Debugging Tricks"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#10-hierarchy-map","text":"[Reflection Layer] \u251c\u2500 Reflection API \u2514\u2500 @Autowired injection \u2193 [Beans Layer] \u251c\u2500 Bean annotations & lifecycle \u2514\u2500 BeanDefinition metadata \u2193 [Container Layer] \u251c\u2500 Dependency injection & ApplicationContext \u2514\u2500 BeanFactory, IoC flow \u2193 [AOP Layer] \u251c\u2500 Aspects & proxies \u2193 [Events Layer] \u2514\u2500 Application events & listeners","title":"\ud83e\uddec 10. Hierarchy Map"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#core-takeaway","text":"Spring turns static Java code into a living ecosystem. Reflection lets it see your classes, IoC lets it control their creation, AOP lets it enrich their behavior, and the event system lets it coordinate the whole show.","title":"\ud83e\ude9e Core Takeaway"},{"location":"cheatsheets/languages/java/spring/core/05-quickstarter/#related","text":"Conceptual Overview: concepts/frameworks/spring/core/quick-start.md Blueprint: meta/blueprint.md Next: explore beans/bean-lifecycle.md and container/applicationcontext.md for deeper operational detail.","title":"\ud83d\udd17 Related"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/","text":"\ud83c\udf31 Spring Core Layers \u2014 From Reflection to Runtime Intelligence \u00b6 Essence: Spring\u2019s heart is its Core Framework , a layered architecture that turns static Java classes into a living, self-managing system. Each layer adds new powers: perception \u2192 life \u2192 coordination \u2192 adaptation \u2192 communication. \ud83e\udde9 1. The Five Core Layers \u00b6 [1] Reflection Layer \u2192 how Spring sees and wires your classes [2] Beans Layer \u2192 how Spring gives those classes life [3] Container Layer \u2192 how Spring coordinates and manages them [4] AOP Layer \u2192 how Spring intercepts and enhances behavior [5] Events Layer \u2192 how Spring communicates and reacts to change Each layer builds on the one before it \u2014 forming an upward chain from raw Java mechanics to dynamic runtime orchestration . \ud83e\ude9e 2. Layer 1 \u2014 Reflection Layer \u00b6 Goal: Teach Spring how to see your code. Spring begins at the lowest level of Java introspection: the Reflection API . It loads your classes, inspects annotations, creates instances, and injects dependencies. Core Mechanisms Description Class<?> Java\u2019s runtime type representation Reflection API Read annotations, fields, constructors, methods @Autowired Dependency injection using reflection ClassLoader Loads .class files into Metaspace Mental model: Reflection is the microscope \u2014 Spring examines your code, understands it, and prepares to animate it. \u2192 See: reflection-layer.md \ud83c\udf3f 3. Layer 2 \u2014 Beans Layer \u00b6 Goal: Give your classes life . Spring transforms static class definitions into managed, stateful objects called Beans . Each bean is born from a BeanDefinition , which describes its type, scope, dependencies, and lifecycle methods. Core Concepts Description @Component , @Service , @Repository Mark beans for auto-detection @Bean Define explicit beans in config @PostConstruct , @PreDestroy Lifecycle callbacks BeanDefinition Metadata blueprint for each bean Scopes Singleton, prototype, request, etc. Mental model: Beans are the organs \u2014 alive within the Spring organism, created, wired, and disposed of predictably. \u2192 See: beans-layer.md \u2699\ufe0f 4. Layer 3 \u2014 Container Layer \u00b6 Goal: Coordinate and manage all living beans. At this stage, Spring evolves from a builder into a container \u2014 a runtime environment that performs Inversion of Control (IoC) and Dependency Injection (DI) . Core Components Role BeanFactory The raw IoC engine that instantiates and wires beans ApplicationContext The enhanced container: adds lifecycle events, resource loading, profiles Dependency Injection Automatic connection of beans by type/name Profiles & Environment Context configuration and selection Lifecycle Events Signals like ContextRefreshedEvent and ContextClosedEvent Mental model: The Container is the brain \u2014 it knows every bean, how they depend on each other, and when to awaken or retire them. \u2192 See: container-layer.md \ud83e\udde0 5. Layer 4 \u2014 AOP Layer \u00b6 Goal: Add intelligence \u2014 the ability to intercept and extend behavior. AOP (Aspect-Oriented Programming) lets Spring weave extra logic into existing methods without modifying code. It creates proxies that wrap your beans and inject crosscutting concerns like transactions, caching, and logging. Core Elements Description @Aspect Marks a class containing crosscutting logic @Before , @After , @Around Advice that runs around methods execution(...) Pointcut expressions targeting specific methods Proxies JDK or CGLIB-based runtime wrappers Built-in Aspects @Transactional , @Async , @Cacheable , @PreAuthorize Mental model: AOP is the nervous system \u2014 it controls reflexes, adds patterns of behavior, and keeps your core logic pure. \u2192 See: aop-layer.md \ud83d\udce1 6. Layer 5 \u2014 Events Layer \u00b6 Goal: Enable communication \u2014 make Spring aware of its own changes. Spring\u2019s event system allows components to broadcast and listen for signals. It uses the Observer pattern to loosely couple actions across the app. Core Concepts Description ApplicationEvent Base event class @EventListener Declarative event listener ApplicationEventPublisher Publishes events to the container Built-in Events ContextRefreshedEvent , ApplicationReadyEvent , etc. Async Events @Async + @EnableAsync for background handling Mental model: Events are the heartbeat \u2014 they keep the container alive, synchronized, and reactive to its own lifecycle. \u2192 See: events-layer.md \ud83e\uddec 7. Full System Flow \u2014 From Class to Context \u00b6 1. JVM loads classes into Metaspace. 2. Reflection scans annotations and builds BeanDefinitions. 3. IoC container creates beans and injects dependencies. 4. Post-processors modify or proxy beans (AOP). 5. Context publishes lifecycle events. 6. Beans operate in a managed runtime ecosystem. 7. On shutdown \u2192 destroy methods + ContextClosedEvent. \ud83e\uddf1 8. Spring Core Layer Map (Visual) \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [5] Events Layer \u2502 \u2502 Communicates lifecycle & app events \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [4] AOP Layer \u2502 \u2502 Adds crosscutting logic via proxies \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [3] Container Layer \u2502 \u2502 IoC engine managing all beans \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [2] Beans Layer \u2502 \u2502 Defines bean metadata & lifecycle \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [1] Reflection Layer \u2502 \u2502 Reflection + @Autowired wiring \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \ud83e\ude9e 9. Core Takeaway \u00b6 Spring Core isn\u2019t just a framework \u2014 it\u2019s a living architecture. Each layer adds a new dimension of intelligence: Reflection lets Spring see . Beans let it live . Container lets it think . AOP lets it act and adapt . Events let it communicate . Together, they transform ordinary Java code into a self-managing runtime organism \u2014 the foundation of the modern Spring ecosystem.","title":"Core Layers"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#spring-core-layers-from-reflection-to-runtime-intelligence","text":"Essence: Spring\u2019s heart is its Core Framework , a layered architecture that turns static Java classes into a living, self-managing system. Each layer adds new powers: perception \u2192 life \u2192 coordination \u2192 adaptation \u2192 communication.","title":"\ud83c\udf31 Spring Core Layers \u2014 From Reflection to Runtime Intelligence"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#1-the-five-core-layers","text":"[1] Reflection Layer \u2192 how Spring sees and wires your classes [2] Beans Layer \u2192 how Spring gives those classes life [3] Container Layer \u2192 how Spring coordinates and manages them [4] AOP Layer \u2192 how Spring intercepts and enhances behavior [5] Events Layer \u2192 how Spring communicates and reacts to change Each layer builds on the one before it \u2014 forming an upward chain from raw Java mechanics to dynamic runtime orchestration .","title":"\ud83e\udde9 1. The Five Core Layers"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#2-layer-1-reflection-layer","text":"Goal: Teach Spring how to see your code. Spring begins at the lowest level of Java introspection: the Reflection API . It loads your classes, inspects annotations, creates instances, and injects dependencies. Core Mechanisms Description Class<?> Java\u2019s runtime type representation Reflection API Read annotations, fields, constructors, methods @Autowired Dependency injection using reflection ClassLoader Loads .class files into Metaspace Mental model: Reflection is the microscope \u2014 Spring examines your code, understands it, and prepares to animate it. \u2192 See: reflection-layer.md","title":"\ud83e\ude9e 2. Layer 1 \u2014 Reflection Layer"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#3-layer-2-beans-layer","text":"Goal: Give your classes life . Spring transforms static class definitions into managed, stateful objects called Beans . Each bean is born from a BeanDefinition , which describes its type, scope, dependencies, and lifecycle methods. Core Concepts Description @Component , @Service , @Repository Mark beans for auto-detection @Bean Define explicit beans in config @PostConstruct , @PreDestroy Lifecycle callbacks BeanDefinition Metadata blueprint for each bean Scopes Singleton, prototype, request, etc. Mental model: Beans are the organs \u2014 alive within the Spring organism, created, wired, and disposed of predictably. \u2192 See: beans-layer.md","title":"\ud83c\udf3f 3. Layer 2 \u2014 Beans Layer"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#4-layer-3-container-layer","text":"Goal: Coordinate and manage all living beans. At this stage, Spring evolves from a builder into a container \u2014 a runtime environment that performs Inversion of Control (IoC) and Dependency Injection (DI) . Core Components Role BeanFactory The raw IoC engine that instantiates and wires beans ApplicationContext The enhanced container: adds lifecycle events, resource loading, profiles Dependency Injection Automatic connection of beans by type/name Profiles & Environment Context configuration and selection Lifecycle Events Signals like ContextRefreshedEvent and ContextClosedEvent Mental model: The Container is the brain \u2014 it knows every bean, how they depend on each other, and when to awaken or retire them. \u2192 See: container-layer.md","title":"\u2699\ufe0f 4. Layer 3 \u2014 Container Layer"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#5-layer-4-aop-layer","text":"Goal: Add intelligence \u2014 the ability to intercept and extend behavior. AOP (Aspect-Oriented Programming) lets Spring weave extra logic into existing methods without modifying code. It creates proxies that wrap your beans and inject crosscutting concerns like transactions, caching, and logging. Core Elements Description @Aspect Marks a class containing crosscutting logic @Before , @After , @Around Advice that runs around methods execution(...) Pointcut expressions targeting specific methods Proxies JDK or CGLIB-based runtime wrappers Built-in Aspects @Transactional , @Async , @Cacheable , @PreAuthorize Mental model: AOP is the nervous system \u2014 it controls reflexes, adds patterns of behavior, and keeps your core logic pure. \u2192 See: aop-layer.md","title":"\ud83e\udde0 5. Layer 4 \u2014 AOP Layer"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#6-layer-5-events-layer","text":"Goal: Enable communication \u2014 make Spring aware of its own changes. Spring\u2019s event system allows components to broadcast and listen for signals. It uses the Observer pattern to loosely couple actions across the app. Core Concepts Description ApplicationEvent Base event class @EventListener Declarative event listener ApplicationEventPublisher Publishes events to the container Built-in Events ContextRefreshedEvent , ApplicationReadyEvent , etc. Async Events @Async + @EnableAsync for background handling Mental model: Events are the heartbeat \u2014 they keep the container alive, synchronized, and reactive to its own lifecycle. \u2192 See: events-layer.md","title":"\ud83d\udce1 6. Layer 5 \u2014 Events Layer"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#7-full-system-flow-from-class-to-context","text":"1. JVM loads classes into Metaspace. 2. Reflection scans annotations and builds BeanDefinitions. 3. IoC container creates beans and injects dependencies. 4. Post-processors modify or proxy beans (AOP). 5. Context publishes lifecycle events. 6. Beans operate in a managed runtime ecosystem. 7. On shutdown \u2192 destroy methods + ContextClosedEvent.","title":"\ud83e\uddec 7. Full System Flow \u2014 From Class to Context"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#8-spring-core-layer-map-visual","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [5] Events Layer \u2502 \u2502 Communicates lifecycle & app events \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [4] AOP Layer \u2502 \u2502 Adds crosscutting logic via proxies \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [3] Container Layer \u2502 \u2502 IoC engine managing all beans \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [2] Beans Layer \u2502 \u2502 Defines bean metadata & lifecycle \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [1] Reflection Layer \u2502 \u2502 Reflection + @Autowired wiring \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"\ud83e\uddf1 8. Spring Core Layer Map (Visual)"},{"location":"cheatsheets/languages/java/spring/core/07-core-layers/#9-core-takeaway","text":"Spring Core isn\u2019t just a framework \u2014 it\u2019s a living architecture. Each layer adds a new dimension of intelligence: Reflection lets Spring see . Beans let it live . Container lets it think . AOP lets it act and adapt . Events let it communicate . Together, they transform ordinary Java code into a self-managing runtime organism \u2014 the foundation of the modern Spring ecosystem.","title":"\ud83e\ude9e 9. Core Takeaway"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/","text":"\ud83e\ude9e Reflection Layer \u2014 How Spring Sees and Wires Your Code \u00b6 Essence: The Reflection Layer is the foundation of Spring. It\u2019s how Spring discovers , creates , and connects your classes at runtime \u2014 turning plain Java code into a self-managing system. \ud83c\udf31 1. Concept Overview \u00b6 Java\u2019s Reflection API lets code inspect and manipulate itself at runtime. Spring builds on that to power @ComponentScan , @Autowired , @Bean , and most of its container magic. source (.java) \u2193 compiler bytecode (.class) \u2193 ClassLoader Class<?> object in Metaspace \u2193 Reflection Spring inspects, instantiates, and injects beans \ud83e\udde9 2. Core Reflection API \u2014 Java\u2019s Runtime Mirror \u00b6 Everything starts with the Class<?> object. Class <?> clazz = PaymentService . class ; Class <?> clazz2 = Class . forName ( \"com.app.PaymentService\" ); \ud83d\udd0d Inspecting a Class \u00b6 clazz . getName (); // \"com.app.PaymentService\" clazz . getDeclaredFields (); // all fields clazz . getDeclaredMethods (); clazz . getSuperclass (); clazz . getAnnotations (); Spring uses this to find annotations like @Component , @Service , or @Bean . \ud83e\udde0 3. Creating Objects Reflectively \u00b6 Constructor <?> ctor = clazz . getDeclaredConstructor (); Object instance = ctor . newInstance (); With parameters: Constructor <?> ctor = clazz . getDeclaredConstructor ( AuditService . class ); Object obj = ctor . newInstance ( new AuditService ()); That\u2019s what Spring does when it creates beans from your classes \u2014 it calls constructors reflectively based on metadata from scanning. \u2699\ufe0f 4. Accessing Private Members \u00b6 Reflection can bypass visibility restrictions. Field f = clazz . getDeclaredField ( \"audit\" ); f . setAccessible ( true ); f . set ( instance , new AuditService ()); This is the essence of dependency injection \u2014 Spring sets fields without needing public setters. \ud83e\uddec 5. Invoking Methods \u00b6 Method m = clazz . getDeclaredMethod ( \"process\" , String . class ); m . setAccessible ( true ); m . invoke ( instance , \"Alice\" ); Used internally for: Lifecycle hooks ( @PostConstruct , @PreDestroy ) Configuration methods ( @Bean ) Event listeners ( @EventListener ) \u26a1 6. Annotations in Reflection \u00b6 if ( clazz . isAnnotationPresent ( Service . class )) { Annotation a = clazz . getAnnotation ( Service . class ); } Field or method level: Field f = clazz . getDeclaredField ( \"repo\" ); if ( f . isAnnotationPresent ( Autowired . class )) { // inject dependency reflectively } Reflection lets Spring read annotation metadata and decide what to do with it. \ud83e\udd1d 7. @Autowired \u2014 Reflection Meets IoC \u00b6 @Autowired is the declarative interface to reflection. It tells Spring: \u201cFind me something of this type and assign it here.\u201d Field Injection \u00b6 @Autowired private AuditService audit ; Spring finds a matching bean and executes: Field f = PaymentService . class . getDeclaredField ( \"audit\" ); f . setAccessible ( true ); f . set ( paymentServiceInstance , auditInstance ); Constructor Injection \u00b6 @Autowired public PaymentService ( AuditService audit ) { this . audit = audit ; } If there\u2019s only one constructor, @Autowired is optional \u2014 Spring assumes it. Under the hood: Constructor <?> ctor = clazz . getDeclaredConstructor ( AuditService . class ); Object bean = ctor . newInstance ( auditBean ); Setter Injection \u00b6 @Autowired public void setAuditService ( AuditService audit ) { this . audit = audit ; } Spring reflectively calls: Method m = clazz . getDeclaredMethod ( \"setAuditService\" , AuditService . class ); m . invoke ( instance , auditBean ); \ud83e\uddee 8. Dependency Resolution Rules \u00b6 When resolving an @Autowired dependency: By Type \u2014 find one matching bean in the ApplicationContext. If multiple found: Prefer @Primary Or match name with field/parameter Or use @Qualifier(\"beanName\") If none found: Throw NoSuchBeanDefinitionException Unless @Autowired(required = false) is used Qualifiers and Primary \u00b6 @Primary @Service public class EmailNotifier implements Notifier {} @Service ( \"smsNotifier\" ) public class SmsNotifier implements Notifier {} @Service public class PaymentService { @Autowired @Qualifier ( \"smsNotifier\" ) private Notifier notifier ; } Optional & Lazy Variants \u00b6 @Autowired ( required = false ) private Optional < AuditService > audit ; @Autowired @Lazy private HeavyService heavy ; // proxy until first call \ud83e\udded 9. Internal Flow (Simplified Pseudocode) \u00b6 for ( Field field : clazz . getDeclaredFields ()) { if ( field . isAnnotationPresent ( Autowired . class )) { Object dependency = context . getBean ( field . getType ()); field . setAccessible ( true ); field . set ( beanInstance , dependency ); } } Spring does this reflection once during startup \u2014 then caches results for efficiency. \ud83e\uddf1 10. Reflection in Bean Lifecycle \u00b6 Scan classes \u2192 detect annotations \u2192 create Class<?> objects \u2192 register BeanDefinitions \u2192 construct beans via reflection \u2192 inject dependencies via reflection \u2192 invoke @PostConstruct \u2192 ready Reflection is used heavily during startup \u2014 once the context is ready, execution runs as normal Java code. \u2699\ufe0f 11. Dynamic Proxies (Advanced Reflection) \u00b6 Spring uses reflection again to generate proxies for beans with AOP features: MyService proxy = ( MyService ) Proxy . newProxyInstance ( clazz . getClassLoader (), new Class [] { MyService . class }, ( proxyObj , method , args ) -> { System . out . println ( \"Before call\" ); return method . invoke ( targetBean , args ); }); Used for: Transactions ( @Transactional ) Async execution ( @Async ) Caching ( @Cacheable ) Security ( @PreAuthorize ) \ud83e\udde9 12. Common Pitfalls \u00b6 Symptom Likely Cause Fix ClassNotFoundException Wrong class path Verify package name NoSuchFieldException Typo or renamed field Check reflection target NoUniqueBeanDefinitionException Multiple beans of same type Use @Qualifier or @Primary Field remains null Not in @ComponentScan path Fix scan base package @Autowired on static field Not supported Avoid static injection \ud83e\udded 13. Performance Considerations \u00b6 Reflection is slower than direct calls, but Spring caches all reflective lookups. The reflection cost happens only once \u2014 at startup. During runtime, calls go through direct references (or proxies). \ud83e\udde9 14. Quick Reference Summary \u00b6 Task API / Annotation Used In Spring For Discover class metadata Class<?> Component scanning Create instance Constructor.newInstance() Bean instantiation Inject dependency Field.set() / Method.invoke() @Autowired wiring Access annotations isAnnotationPresent() Detect Spring stereotypes Build proxies Proxy.newProxyInstance() AOP wrapping Resolve dependency @Qualifier , @Primary Ambiguity handling Delay creation @Lazy Lazy bean proxies \ud83d\udd17 Related \u00b6 Concept: Reflection & @Autowired Cheatsheet: bean-lifecycle.md Cheatsheet: aop-proxy-types.md \ud83e\ude9e Core Takeaway \u00b6 Reflection gives Spring its eyes; @Autowired gives it its hands. Together they let the framework see your classes, build your objects, and connect them into a living application \u2014 all before your code ever runs.","title":"Reflection Layer"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#reflection-layer-how-spring-sees-and-wires-your-code","text":"Essence: The Reflection Layer is the foundation of Spring. It\u2019s how Spring discovers , creates , and connects your classes at runtime \u2014 turning plain Java code into a self-managing system.","title":"\ud83e\ude9e Reflection Layer \u2014 How Spring Sees and Wires Your Code"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#1-concept-overview","text":"Java\u2019s Reflection API lets code inspect and manipulate itself at runtime. Spring builds on that to power @ComponentScan , @Autowired , @Bean , and most of its container magic. source (.java) \u2193 compiler bytecode (.class) \u2193 ClassLoader Class<?> object in Metaspace \u2193 Reflection Spring inspects, instantiates, and injects beans","title":"\ud83c\udf31 1. Concept Overview"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#2-core-reflection-api-javas-runtime-mirror","text":"Everything starts with the Class<?> object. Class <?> clazz = PaymentService . class ; Class <?> clazz2 = Class . forName ( \"com.app.PaymentService\" );","title":"\ud83e\udde9 2. Core Reflection API \u2014 Java\u2019s Runtime Mirror"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#inspecting-a-class","text":"clazz . getName (); // \"com.app.PaymentService\" clazz . getDeclaredFields (); // all fields clazz . getDeclaredMethods (); clazz . getSuperclass (); clazz . getAnnotations (); Spring uses this to find annotations like @Component , @Service , or @Bean .","title":"\ud83d\udd0d Inspecting a Class"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#3-creating-objects-reflectively","text":"Constructor <?> ctor = clazz . getDeclaredConstructor (); Object instance = ctor . newInstance (); With parameters: Constructor <?> ctor = clazz . getDeclaredConstructor ( AuditService . class ); Object obj = ctor . newInstance ( new AuditService ()); That\u2019s what Spring does when it creates beans from your classes \u2014 it calls constructors reflectively based on metadata from scanning.","title":"\ud83e\udde0 3. Creating Objects Reflectively"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#4-accessing-private-members","text":"Reflection can bypass visibility restrictions. Field f = clazz . getDeclaredField ( \"audit\" ); f . setAccessible ( true ); f . set ( instance , new AuditService ()); This is the essence of dependency injection \u2014 Spring sets fields without needing public setters.","title":"\u2699\ufe0f 4. Accessing Private Members"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#5-invoking-methods","text":"Method m = clazz . getDeclaredMethod ( \"process\" , String . class ); m . setAccessible ( true ); m . invoke ( instance , \"Alice\" ); Used internally for: Lifecycle hooks ( @PostConstruct , @PreDestroy ) Configuration methods ( @Bean ) Event listeners ( @EventListener )","title":"\ud83e\uddec 5. Invoking Methods"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#6-annotations-in-reflection","text":"if ( clazz . isAnnotationPresent ( Service . class )) { Annotation a = clazz . getAnnotation ( Service . class ); } Field or method level: Field f = clazz . getDeclaredField ( \"repo\" ); if ( f . isAnnotationPresent ( Autowired . class )) { // inject dependency reflectively } Reflection lets Spring read annotation metadata and decide what to do with it.","title":"\u26a1 6. Annotations in Reflection"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#7-autowired-reflection-meets-ioc","text":"@Autowired is the declarative interface to reflection. It tells Spring: \u201cFind me something of this type and assign it here.\u201d","title":"\ud83e\udd1d 7. @Autowired \u2014 Reflection Meets IoC"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#field-injection","text":"@Autowired private AuditService audit ; Spring finds a matching bean and executes: Field f = PaymentService . class . getDeclaredField ( \"audit\" ); f . setAccessible ( true ); f . set ( paymentServiceInstance , auditInstance );","title":"Field Injection"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#constructor-injection","text":"@Autowired public PaymentService ( AuditService audit ) { this . audit = audit ; } If there\u2019s only one constructor, @Autowired is optional \u2014 Spring assumes it. Under the hood: Constructor <?> ctor = clazz . getDeclaredConstructor ( AuditService . class ); Object bean = ctor . newInstance ( auditBean );","title":"Constructor Injection"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#setter-injection","text":"@Autowired public void setAuditService ( AuditService audit ) { this . audit = audit ; } Spring reflectively calls: Method m = clazz . getDeclaredMethod ( \"setAuditService\" , AuditService . class ); m . invoke ( instance , auditBean );","title":"Setter Injection"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#8-dependency-resolution-rules","text":"When resolving an @Autowired dependency: By Type \u2014 find one matching bean in the ApplicationContext. If multiple found: Prefer @Primary Or match name with field/parameter Or use @Qualifier(\"beanName\") If none found: Throw NoSuchBeanDefinitionException Unless @Autowired(required = false) is used","title":"\ud83e\uddee 8. Dependency Resolution Rules"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#qualifiers-and-primary","text":"@Primary @Service public class EmailNotifier implements Notifier {} @Service ( \"smsNotifier\" ) public class SmsNotifier implements Notifier {} @Service public class PaymentService { @Autowired @Qualifier ( \"smsNotifier\" ) private Notifier notifier ; }","title":"Qualifiers and Primary"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#optional-lazy-variants","text":"@Autowired ( required = false ) private Optional < AuditService > audit ; @Autowired @Lazy private HeavyService heavy ; // proxy until first call","title":"Optional &amp; Lazy Variants"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#9-internal-flow-simplified-pseudocode","text":"for ( Field field : clazz . getDeclaredFields ()) { if ( field . isAnnotationPresent ( Autowired . class )) { Object dependency = context . getBean ( field . getType ()); field . setAccessible ( true ); field . set ( beanInstance , dependency ); } } Spring does this reflection once during startup \u2014 then caches results for efficiency.","title":"\ud83e\udded 9. Internal Flow (Simplified Pseudocode)"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#10-reflection-in-bean-lifecycle","text":"Scan classes \u2192 detect annotations \u2192 create Class<?> objects \u2192 register BeanDefinitions \u2192 construct beans via reflection \u2192 inject dependencies via reflection \u2192 invoke @PostConstruct \u2192 ready Reflection is used heavily during startup \u2014 once the context is ready, execution runs as normal Java code.","title":"\ud83e\uddf1 10. Reflection in Bean Lifecycle"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#11-dynamic-proxies-advanced-reflection","text":"Spring uses reflection again to generate proxies for beans with AOP features: MyService proxy = ( MyService ) Proxy . newProxyInstance ( clazz . getClassLoader (), new Class [] { MyService . class }, ( proxyObj , method , args ) -> { System . out . println ( \"Before call\" ); return method . invoke ( targetBean , args ); }); Used for: Transactions ( @Transactional ) Async execution ( @Async ) Caching ( @Cacheable ) Security ( @PreAuthorize )","title":"\u2699\ufe0f 11. Dynamic Proxies (Advanced Reflection)"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#12-common-pitfalls","text":"Symptom Likely Cause Fix ClassNotFoundException Wrong class path Verify package name NoSuchFieldException Typo or renamed field Check reflection target NoUniqueBeanDefinitionException Multiple beans of same type Use @Qualifier or @Primary Field remains null Not in @ComponentScan path Fix scan base package @Autowired on static field Not supported Avoid static injection","title":"\ud83e\udde9 12. Common Pitfalls"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#13-performance-considerations","text":"Reflection is slower than direct calls, but Spring caches all reflective lookups. The reflection cost happens only once \u2014 at startup. During runtime, calls go through direct references (or proxies).","title":"\ud83e\udded 13. Performance Considerations"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#14-quick-reference-summary","text":"Task API / Annotation Used In Spring For Discover class metadata Class<?> Component scanning Create instance Constructor.newInstance() Bean instantiation Inject dependency Field.set() / Method.invoke() @Autowired wiring Access annotations isAnnotationPresent() Detect Spring stereotypes Build proxies Proxy.newProxyInstance() AOP wrapping Resolve dependency @Qualifier , @Primary Ambiguity handling Delay creation @Lazy Lazy bean proxies","title":"\ud83e\udde9 14. Quick Reference Summary"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#related","text":"Concept: Reflection & @Autowired Cheatsheet: bean-lifecycle.md Cheatsheet: aop-proxy-types.md","title":"\ud83d\udd17 Related"},{"location":"cheatsheets/languages/java/spring/core/10-reflection-layer/#core-takeaway","text":"Reflection gives Spring its eyes; @Autowired gives it its hands. Together they let the framework see your classes, build your objects, and connect them into a living application \u2014 all before your code ever runs.","title":"\ud83e\ude9e Core Takeaway"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/","text":"\ud83c\udf3f Beans Layer \u2014 Anatomy, Annotations & Lifecycle Cheatsheet \u00b6 Essence: Beans are the living objects Spring creates, wires, and manages inside the ApplicationContext. The Beans Layer covers what they are, how they live and die, and how their metadata is described through BeanDefinitions. \ud83e\udded 1. Concept Overview \u00b6 A Spring bean is a normal Java object, but: Its lifecycle is controlled by the Spring container , not you. It\u2019s created via reflection, wired via dependency injection, and destroyed gracefully. Everything about it \u2014 class, scope, dependencies, and init/destroy callbacks \u2014 is stored in a BeanDefinition . Think of each bean as a citizen of Spring\u2019s managed world \u2014 born, connected, and retired by the container. \ud83e\udde9 2. Declaring Beans \u00b6 You can register beans in three main ways: \ud83e\uddf1 Component Scanning (Annotation-based) \u00b6 @Component public class PaymentService {} Spring scans packages for these stereotypes: Annotation Role @Component Generic Spring-managed bean @Service Service-layer bean (semantic marker) @Repository Persistence-layer bean (adds exception translation) @Controller Web MVC component @Configuration Source of explicit bean definitions \u2699\ufe0f Explicit Bean Registration (Configuration Class) \u00b6 @Configuration public class AppConfig { @Bean public AuditService auditService () { return new AuditService (); } } Each @Bean method returns an object that Spring registers as a managed bean. \ud83e\uddee XML Configuration (Legacy) \u00b6 <bean id= \"paymentService\" class= \"com.app.PaymentService\" /> Old style, still supported but rarely used in modern applications. \ud83e\uddec 3. BeanDefinition \u2014 The Blueprint Metadata \u00b6 When Spring detects a bean, it doesn\u2019t create it immediately. It first builds a BeanDefinition \u2014 a metadata record describing: Property Meaning beanClass Actual Class<?> scope singleton , prototype , etc. autowireMode How dependencies are injected initMethodName Custom initialization method destroyMethodName Cleanup method lazyInit Whether bean is created on demand dependsOn Other beans that must be created first Example (simplified pseudocode): BeanDefinition bd = new BeanDefinition (); bd . setBeanClass ( PaymentService . class ); bd . setScope ( \"singleton\" ); bd . setInitMethodName ( \"init\" ); bd . setDestroyMethodName ( \"cleanup\" ); This blueprint is what the BeanFactory later uses to actually create the instance. \u2699\ufe0f 4. Bean Scopes \u2014 Controlling Lifespan \u00b6 Scope Meaning Created Destroyed singleton One instance per container On context start On context close prototype New instance per request On demand Not tracked request One per HTTP request On web request start On web request end session One per HTTP session On session start On session end application One per ServletContext On context init On shutdown @Component @Scope ( \"prototype\" ) public class Task {} \ud83e\udde0 5. Bean Lifecycle Stages \u00b6 1. Definition created (BeanDefinition) 2. Instance constructed (reflection) 3. Dependencies injected (@Autowired, @Value) 4. Lifecycle callbacks triggered (@PostConstruct, init-method) 5. Bean enters ready state 6. On context shutdown \u2192 @PreDestroy or destroy-method called Lifecycle Annotations and Interfaces \u00b6 Type Example Purpose Annotation @PostConstruct After injection Annotation @PreDestroy Before destruction Interface InitializingBean.afterPropertiesSet() Post-injection initialization Interface DisposableBean.destroy() Cleanup XML Attr init-method / destroy-method Legacy equivalent Example \u00b6 @Component public class ConnectionPool { @PostConstruct public void init () { System . out . println ( \"Pool ready\" ); } @PreDestroy public void shutdown () { System . out . println ( \"Pool closed\" ); } } Output: Pool ready ... Pool closed \ud83e\udde9 6. Dependency Injection Timing \u00b6 Spring always injects dependencies before calling any init methods. That\u2019s why you can safely rely on @Autowired fields or constructor-injected dependencies inside your @PostConstruct . instantiate \u2192 inject \u2192 initialize \u2192 active \u2192 destroy \ud83e\uddee 7. Lazy and Conditional Beans \u00b6 Lazy \u00b6 @Component @Lazy public class ExpensiveBean {} Created only when first requested. Conditional \u00b6 @Bean @ConditionalOnProperty ( \"feature.x.enabled\" ) public FeatureX feature () { return new FeatureX (); } Used heavily in Spring Boot auto-configuration. \ud83e\udded 8. Common Pitfalls \u00b6 Symptom Cause Fix BeanCurrentlyInCreationException Circular dependency Break cycle or use @Lazy NullPointerException on injected field Bean not scanned Fix @ComponentScan path NoSuchBeanDefinitionException No bean found Annotate or register bean Init/destroy not called Wrong signature Must be public void no-arg method Prototype beans not destroyed Expected behavior Manage manually if needed \u2699\ufe0f 9. Inspecting Beans at Runtime \u00b6 @Autowired ApplicationContext ctx ; public void debugBeans () { for ( String name : ctx . getBeanDefinitionNames ()) { System . out . println ( name + \" \u2192 \" + ctx . getType ( name )); } } \ud83e\udde9 10. Custom BeanPostProcessor \u00b6 Advanced hook that modifies beans before/after initialization. @Component public class LoggerInjector implements BeanPostProcessor { public Object postProcessBeforeInitialization ( Object bean , String name ) { // before @PostConstruct return bean ; } public Object postProcessAfterInitialization ( Object bean , String name ) { // after @PostConstruct return bean ; } } Used internally for: Autowiring processor AOP proxy creation Validation, caching, and more \ud83e\udded 11. Quick Reference Summary \u00b6 Concept API / Annotation Purpose Declare bean @Component , @Service , @Bean Register with container Describe bean BeanDefinition Internal metadata Define scope @Scope(\"...\") Control lifespan Init phase @PostConstruct / afterPropertiesSet() Setup Destroy phase @PreDestroy / destroy() Cleanup Post-processing BeanPostProcessor Modify beans Lazy loading @Lazy Create on demand Conditional creation @Conditional... Context-based activation \ud83e\udde9 12. How BeanDefinition Links to Lifecycle \u00b6 @Component \u2192 Scanned by Reflection \u2193 BeanDefinition \u2192 Metadata stored \u2193 BeanFactory \u2192 Instantiates using reflection \u2193 @Autowire / @Value \u2192 Dependencies injected \u2193 @PostConstruct \u2192 Init logic \u2193 Context Active \u2193 @PreDestroy \u2192 Cleanup BeanDefinition is the blueprint ; the Bean instance is the living object built from it. \ud83d\udd17 Related \u00b6 Concept: Bean Anatomy Concept: Context Lifecycle Cheatsheet: reflection-layer.md Cheatsheet: applicationcontext.md \ud83e\ude9e Core Takeaway \u00b6 Reflection lets Spring build objects. The Beans Layer teaches them how to live. Every bean in the container is born from a BeanDefinition, configured through annotations, and guided through a full lifecycle \u2014 from reflective creation to graceful destruction.","title":"Beans Layer"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#beans-layer-anatomy-annotations-lifecycle-cheatsheet","text":"Essence: Beans are the living objects Spring creates, wires, and manages inside the ApplicationContext. The Beans Layer covers what they are, how they live and die, and how their metadata is described through BeanDefinitions.","title":"\ud83c\udf3f Beans Layer \u2014 Anatomy, Annotations &amp; Lifecycle Cheatsheet"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#1-concept-overview","text":"A Spring bean is a normal Java object, but: Its lifecycle is controlled by the Spring container , not you. It\u2019s created via reflection, wired via dependency injection, and destroyed gracefully. Everything about it \u2014 class, scope, dependencies, and init/destroy callbacks \u2014 is stored in a BeanDefinition . Think of each bean as a citizen of Spring\u2019s managed world \u2014 born, connected, and retired by the container.","title":"\ud83e\udded 1. Concept Overview"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#2-declaring-beans","text":"You can register beans in three main ways:","title":"\ud83e\udde9 2. Declaring Beans"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#component-scanning-annotation-based","text":"@Component public class PaymentService {} Spring scans packages for these stereotypes: Annotation Role @Component Generic Spring-managed bean @Service Service-layer bean (semantic marker) @Repository Persistence-layer bean (adds exception translation) @Controller Web MVC component @Configuration Source of explicit bean definitions","title":"\ud83e\uddf1 Component Scanning (Annotation-based)"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#explicit-bean-registration-configuration-class","text":"@Configuration public class AppConfig { @Bean public AuditService auditService () { return new AuditService (); } } Each @Bean method returns an object that Spring registers as a managed bean.","title":"\u2699\ufe0f Explicit Bean Registration (Configuration Class)"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#xml-configuration-legacy","text":"<bean id= \"paymentService\" class= \"com.app.PaymentService\" /> Old style, still supported but rarely used in modern applications.","title":"\ud83e\uddee XML Configuration (Legacy)"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#3-beandefinition-the-blueprint-metadata","text":"When Spring detects a bean, it doesn\u2019t create it immediately. It first builds a BeanDefinition \u2014 a metadata record describing: Property Meaning beanClass Actual Class<?> scope singleton , prototype , etc. autowireMode How dependencies are injected initMethodName Custom initialization method destroyMethodName Cleanup method lazyInit Whether bean is created on demand dependsOn Other beans that must be created first Example (simplified pseudocode): BeanDefinition bd = new BeanDefinition (); bd . setBeanClass ( PaymentService . class ); bd . setScope ( \"singleton\" ); bd . setInitMethodName ( \"init\" ); bd . setDestroyMethodName ( \"cleanup\" ); This blueprint is what the BeanFactory later uses to actually create the instance.","title":"\ud83e\uddec 3. BeanDefinition \u2014 The Blueprint Metadata"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#4-bean-scopes-controlling-lifespan","text":"Scope Meaning Created Destroyed singleton One instance per container On context start On context close prototype New instance per request On demand Not tracked request One per HTTP request On web request start On web request end session One per HTTP session On session start On session end application One per ServletContext On context init On shutdown @Component @Scope ( \"prototype\" ) public class Task {}","title":"\u2699\ufe0f 4. Bean Scopes \u2014 Controlling Lifespan"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#5-bean-lifecycle-stages","text":"1. Definition created (BeanDefinition) 2. Instance constructed (reflection) 3. Dependencies injected (@Autowired, @Value) 4. Lifecycle callbacks triggered (@PostConstruct, init-method) 5. Bean enters ready state 6. On context shutdown \u2192 @PreDestroy or destroy-method called","title":"\ud83e\udde0 5. Bean Lifecycle Stages"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#lifecycle-annotations-and-interfaces","text":"Type Example Purpose Annotation @PostConstruct After injection Annotation @PreDestroy Before destruction Interface InitializingBean.afterPropertiesSet() Post-injection initialization Interface DisposableBean.destroy() Cleanup XML Attr init-method / destroy-method Legacy equivalent","title":"Lifecycle Annotations and Interfaces"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#example","text":"@Component public class ConnectionPool { @PostConstruct public void init () { System . out . println ( \"Pool ready\" ); } @PreDestroy public void shutdown () { System . out . println ( \"Pool closed\" ); } } Output: Pool ready ... Pool closed","title":"Example"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#6-dependency-injection-timing","text":"Spring always injects dependencies before calling any init methods. That\u2019s why you can safely rely on @Autowired fields or constructor-injected dependencies inside your @PostConstruct . instantiate \u2192 inject \u2192 initialize \u2192 active \u2192 destroy","title":"\ud83e\udde9 6. Dependency Injection Timing"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#7-lazy-and-conditional-beans","text":"","title":"\ud83e\uddee 7. Lazy and Conditional Beans"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#lazy","text":"@Component @Lazy public class ExpensiveBean {} Created only when first requested.","title":"Lazy"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#conditional","text":"@Bean @ConditionalOnProperty ( \"feature.x.enabled\" ) public FeatureX feature () { return new FeatureX (); } Used heavily in Spring Boot auto-configuration.","title":"Conditional"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#8-common-pitfalls","text":"Symptom Cause Fix BeanCurrentlyInCreationException Circular dependency Break cycle or use @Lazy NullPointerException on injected field Bean not scanned Fix @ComponentScan path NoSuchBeanDefinitionException No bean found Annotate or register bean Init/destroy not called Wrong signature Must be public void no-arg method Prototype beans not destroyed Expected behavior Manage manually if needed","title":"\ud83e\udded 8. Common Pitfalls"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#9-inspecting-beans-at-runtime","text":"@Autowired ApplicationContext ctx ; public void debugBeans () { for ( String name : ctx . getBeanDefinitionNames ()) { System . out . println ( name + \" \u2192 \" + ctx . getType ( name )); } }","title":"\u2699\ufe0f 9. Inspecting Beans at Runtime"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#10-custom-beanpostprocessor","text":"Advanced hook that modifies beans before/after initialization. @Component public class LoggerInjector implements BeanPostProcessor { public Object postProcessBeforeInitialization ( Object bean , String name ) { // before @PostConstruct return bean ; } public Object postProcessAfterInitialization ( Object bean , String name ) { // after @PostConstruct return bean ; } } Used internally for: Autowiring processor AOP proxy creation Validation, caching, and more","title":"\ud83e\udde9 10. Custom BeanPostProcessor"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#11-quick-reference-summary","text":"Concept API / Annotation Purpose Declare bean @Component , @Service , @Bean Register with container Describe bean BeanDefinition Internal metadata Define scope @Scope(\"...\") Control lifespan Init phase @PostConstruct / afterPropertiesSet() Setup Destroy phase @PreDestroy / destroy() Cleanup Post-processing BeanPostProcessor Modify beans Lazy loading @Lazy Create on demand Conditional creation @Conditional... Context-based activation","title":"\ud83e\udded 11. Quick Reference Summary"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#12-how-beandefinition-links-to-lifecycle","text":"@Component \u2192 Scanned by Reflection \u2193 BeanDefinition \u2192 Metadata stored \u2193 BeanFactory \u2192 Instantiates using reflection \u2193 @Autowire / @Value \u2192 Dependencies injected \u2193 @PostConstruct \u2192 Init logic \u2193 Context Active \u2193 @PreDestroy \u2192 Cleanup BeanDefinition is the blueprint ; the Bean instance is the living object built from it.","title":"\ud83e\udde9 12. How BeanDefinition Links to Lifecycle"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#related","text":"Concept: Bean Anatomy Concept: Context Lifecycle Cheatsheet: reflection-layer.md Cheatsheet: applicationcontext.md","title":"\ud83d\udd17 Related"},{"location":"cheatsheets/languages/java/spring/core/15-beans-layer/#core-takeaway","text":"Reflection lets Spring build objects. The Beans Layer teaches them how to live. Every bean in the container is born from a BeanDefinition, configured through annotations, and guided through a full lifecycle \u2014 from reflective creation to graceful destruction.","title":"\ud83e\ude9e Core Takeaway"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/","text":"\u2699\ufe0f Container Layer \u2014 IoC, Dependency Injection & Context Cheatsheet \u00b6 Essence: The Container Layer is the heart of Spring \u2014 the Inversion of Control (IoC) engine that creates , wires , manages , and coordinates all beans. It gives your application memory, order, and lifecycle. \ud83e\udded 1. The Big Idea: Inversion of Control (IoC) \u00b6 Traditional Java: PaymentService service = new PaymentService ( new AuditService ()); Spring style: @Autowired PaymentService service ; The control has been inverted \u2014 Spring now decides when and how to create your objects. \ud83d\udd0d What IoC Means \u00b6 You declare what classes exist and how they relate. The container builds and connects them at runtime. Your code depends on abstractions , not construction logic. IoC is the philosophy; Dependency Injection (DI) is the mechanism that makes it happen. \ud83e\udd1d 2. Dependency Injection \u2014 The Wiring Mechanism \u00b6 Types of Injection \u00b6 Style Example When to Use Constructor public Service(Repo r) Preferred \u2014 immutable, required deps Setter @Autowired setRepo(Repo r) Optional dependencies Field @Autowired Repo repo; Simple, less testable Injection Flow \u00b6 1. Container identifies required dependencies. 2. Finds matching beans by type. 3. Injects via reflection (constructor, field, or setter). 4. Calls @PostConstruct or init methods. \ud83e\udde9 Qualifiers and Primary \u00b6 When multiple beans match a type: @Service ( \"emailNotifier\" ) public class EmailNotifier implements Notifier {} @Primary @Service public class SmsNotifier implements Notifier {} @Autowired @Qualifier ( \"emailNotifier\" ) private Notifier notifier ; Spring rules: Match by type. If multiple found \u2192 use @Primary . If qualified \u2192 use that exact name. If none \u2192 throw NoSuchBeanDefinitionException . \u2699\ufe0f Optional and Lazy Dependencies \u00b6 @Autowired ( required = false ) private Optional < AuditService > audit ; @Autowired @Lazy private HeavyService heavy ; // created on first use \ud83e\uddf1 Collection Injection \u00b6 Spring can inject multiple beans of the same type as a list or map: @Autowired private List < PaymentProcessor > processors ; @Autowired private Map < String , PaymentProcessor > processorMap ; \ud83e\udde9 3. BeanFactory \u2014 The Core Container \u00b6 BeanFactory is the lowest-level IoC interface \u2014 minimal and efficient. Core Responsibilities \u00b6 Hold BeanDefinitions (metadata) Instantiate beans via reflection Perform dependency injection Handle scopes (singleton, prototype, etc.) BeanFactory factory = new XmlBeanFactory ( new ClassPathResource ( \"app.xml\" )); MyService s = factory . getBean ( MyService . class ); Key Methods \u00b6 Method Purpose getBean(String name) Retrieve bean by name getBean(Class<T> type) Retrieve by type containsBean(String name) Check existence isSingleton(String name) Check scope getType(String name) Get class type Note: You rarely use BeanFactory directly \u2014 it\u2019s the internal engine behind ApplicationContext . \ud83e\udded 4. ApplicationContext \u2014 The Intelligent Container \u00b6 ApplicationContext extends BeanFactory and adds: Lifecycle events Resource loading Environment & profiles Internationalization AOP integration Startup hooks (CommandLineRunner, ApplicationRunner) Typical Usage \u00b6 ApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); MyService s = ctx . getBean ( MyService . class ); ctx . getBean ( \"auditService\" , AuditService . class ); Context Implementations \u00b6 Implementation Purpose AnnotationConfigApplicationContext Java-based config ClassPathXmlApplicationContext XML config FileSystemXmlApplicationContext From filesystem path WebApplicationContext Web-aware context (Spring MVC) Lifecycle Sequence \u00b6 create context \u2193 load BeanDefinitions \u2193 instantiate beans \u2193 inject dependencies \u2193 call lifecycle methods \u2193 publish ContextRefreshedEvent \u2193 app ready \u2193 on shutdown \u2192 ContextClosedEvent \u2192 destroy beans Event Publishing \u00b6 @Component public class StartupListener implements ApplicationListener < ContextRefreshedEvent > { public void onApplicationEvent ( ContextRefreshedEvent e ) { System . out . println ( \"Context ready!\" ); } } or @EventListener public void handleShutdown ( ContextClosedEvent e ) { System . out . println ( \"Context closing...\" ); } Environment & Profiles \u00b6 @Profile ( \"dev\" ) @Bean public DataSource devDataSource () { ... } @Profile ( \"prod\" ) @Bean public DataSource prodDataSource () { ... } Active profile: --spring.profiles.active = dev \u2699\ufe0f 5. Bean Post-Processing \u00b6 Post-processors modify beans before and after initialization. @Component public class MetricsInjector implements BeanPostProcessor { public Object postProcessBeforeInitialization ( Object bean , String name ) { // before @PostConstruct return bean ; } public Object postProcessAfterInitialization ( Object bean , String name ) { // after initialization return bean ; } } Used for: Autowiring processing @Transactional proxies Caching Validation \ud83e\uddee 6. Context Hierarchies \u00b6 Large applications may use multiple contexts: Parent Context (shared configs) \u2193 Child Context (web layer, modules) A child context can access parent beans but not vice versa. Used in modular systems or Spring MVC applications. \ud83e\udde0 7. Common Patterns \u00b6 Access the Context \u00b6 @Component public class ContextAwareBean implements ApplicationContextAware { private ApplicationContext ctx ; public void setApplicationContext ( ApplicationContext c ) { this . ctx = c ; } } Programmatic Bean Access \u00b6 @Autowired ApplicationContext ctx ; MyService s = ctx . getBean ( MyService . class ); Manual Refresh \u00b6 AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext (); ctx . register ( AppConfig . class ); ctx . refresh (); \ud83e\udde9 8. Typical Bean Lifecycle (Container Perspective) \u00b6 register BeanDefinition \u2193 BeanFactory creates instance \u2193 Autowired dependencies injected \u2193 BeanPostProcessors run \u2193 @PostConstruct / afterPropertiesSet() \u2193 Context publishes events \u2193 Bean used during runtime \u2193 @PreDestroy / destroy() \u2699\ufe0f 9. Common Pitfalls \u00b6 Symptom Cause Fix BeanCurrentlyInCreationException Circular dependencies Use setter or lazy injection NoSuchBeanDefinitionException Missing bean Check component scan IllegalStateException: context closed Using context after shutdown Manage lifecycle properly @Autowired not working Class not scanned Adjust @ComponentScan Multiple beans found Ambiguous type Use @Qualifier or @Primary \ud83e\udded 10. Container Class Hierarchy Summary \u00b6 BeanFactory \u2191 ListableBeanFactory \u2191 HierarchicalBeanFactory \u2191 ApplicationContext \u251c\u2500 AnnotationConfigApplicationContext \u251c\u2500 ClassPathXmlApplicationContext \u2514\u2500 WebApplicationContext \ud83e\uddf1 11. Quick Reference Summary \u00b6 Concept API / Annotation Description Inversion of Control \u2014 Framework controls object creation Dependency Injection @Autowired , @Qualifier Auto-wiring of beans Core container BeanFactory Low-level bean management Full container ApplicationContext IoC + events + resources Bean lookup getBean(Class<T>) Retrieve from context Lifecycle @PostConstruct , @PreDestroy Init/destroy hooks Events ApplicationEvent , @EventListener Pub/sub system Profiles @Profile Conditional bean loading \ud83d\udd17 Related \u00b6 Concept: IoC Container Concept: Context Lifecycle Cheatsheet: beans-layer.md Cheatsheet: aop-layer.md \ud83e\ude9e Core Takeaway \u00b6 The Container Layer is Spring\u2019s mind. It knows what beans exist, how they depend on each other, and when they should live or die. Reflection builds them, the Container awakens them \u2014 making IoC the intelligence that turns plain code into a coordinated ecosystem.","title":"Container Layer"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#container-layer-ioc-dependency-injection-context-cheatsheet","text":"Essence: The Container Layer is the heart of Spring \u2014 the Inversion of Control (IoC) engine that creates , wires , manages , and coordinates all beans. It gives your application memory, order, and lifecycle.","title":"\u2699\ufe0f Container Layer \u2014 IoC, Dependency Injection &amp; Context Cheatsheet"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#1-the-big-idea-inversion-of-control-ioc","text":"Traditional Java: PaymentService service = new PaymentService ( new AuditService ()); Spring style: @Autowired PaymentService service ; The control has been inverted \u2014 Spring now decides when and how to create your objects.","title":"\ud83e\udded 1. The Big Idea: Inversion of Control (IoC)"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#what-ioc-means","text":"You declare what classes exist and how they relate. The container builds and connects them at runtime. Your code depends on abstractions , not construction logic. IoC is the philosophy; Dependency Injection (DI) is the mechanism that makes it happen.","title":"\ud83d\udd0d What IoC Means"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#2-dependency-injection-the-wiring-mechanism","text":"","title":"\ud83e\udd1d 2. Dependency Injection \u2014 The Wiring Mechanism"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#types-of-injection","text":"Style Example When to Use Constructor public Service(Repo r) Preferred \u2014 immutable, required deps Setter @Autowired setRepo(Repo r) Optional dependencies Field @Autowired Repo repo; Simple, less testable","title":"Types of Injection"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#injection-flow","text":"1. Container identifies required dependencies. 2. Finds matching beans by type. 3. Injects via reflection (constructor, field, or setter). 4. Calls @PostConstruct or init methods.","title":"Injection Flow"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#qualifiers-and-primary","text":"When multiple beans match a type: @Service ( \"emailNotifier\" ) public class EmailNotifier implements Notifier {} @Primary @Service public class SmsNotifier implements Notifier {} @Autowired @Qualifier ( \"emailNotifier\" ) private Notifier notifier ; Spring rules: Match by type. If multiple found \u2192 use @Primary . If qualified \u2192 use that exact name. If none \u2192 throw NoSuchBeanDefinitionException .","title":"\ud83e\udde9 Qualifiers and Primary"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#optional-and-lazy-dependencies","text":"@Autowired ( required = false ) private Optional < AuditService > audit ; @Autowired @Lazy private HeavyService heavy ; // created on first use","title":"\u2699\ufe0f Optional and Lazy Dependencies"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#collection-injection","text":"Spring can inject multiple beans of the same type as a list or map: @Autowired private List < PaymentProcessor > processors ; @Autowired private Map < String , PaymentProcessor > processorMap ;","title":"\ud83e\uddf1 Collection Injection"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#3-beanfactory-the-core-container","text":"BeanFactory is the lowest-level IoC interface \u2014 minimal and efficient.","title":"\ud83e\udde9 3. BeanFactory \u2014 The Core Container"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#core-responsibilities","text":"Hold BeanDefinitions (metadata) Instantiate beans via reflection Perform dependency injection Handle scopes (singleton, prototype, etc.) BeanFactory factory = new XmlBeanFactory ( new ClassPathResource ( \"app.xml\" )); MyService s = factory . getBean ( MyService . class );","title":"Core Responsibilities"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#key-methods","text":"Method Purpose getBean(String name) Retrieve bean by name getBean(Class<T> type) Retrieve by type containsBean(String name) Check existence isSingleton(String name) Check scope getType(String name) Get class type Note: You rarely use BeanFactory directly \u2014 it\u2019s the internal engine behind ApplicationContext .","title":"Key Methods"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#4-applicationcontext-the-intelligent-container","text":"ApplicationContext extends BeanFactory and adds: Lifecycle events Resource loading Environment & profiles Internationalization AOP integration Startup hooks (CommandLineRunner, ApplicationRunner)","title":"\ud83e\udded 4. ApplicationContext \u2014 The Intelligent Container"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#typical-usage","text":"ApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); MyService s = ctx . getBean ( MyService . class ); ctx . getBean ( \"auditService\" , AuditService . class );","title":"Typical Usage"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#context-implementations","text":"Implementation Purpose AnnotationConfigApplicationContext Java-based config ClassPathXmlApplicationContext XML config FileSystemXmlApplicationContext From filesystem path WebApplicationContext Web-aware context (Spring MVC)","title":"Context Implementations"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#lifecycle-sequence","text":"create context \u2193 load BeanDefinitions \u2193 instantiate beans \u2193 inject dependencies \u2193 call lifecycle methods \u2193 publish ContextRefreshedEvent \u2193 app ready \u2193 on shutdown \u2192 ContextClosedEvent \u2192 destroy beans","title":"Lifecycle Sequence"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#event-publishing","text":"@Component public class StartupListener implements ApplicationListener < ContextRefreshedEvent > { public void onApplicationEvent ( ContextRefreshedEvent e ) { System . out . println ( \"Context ready!\" ); } } or @EventListener public void handleShutdown ( ContextClosedEvent e ) { System . out . println ( \"Context closing...\" ); }","title":"Event Publishing"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#environment-profiles","text":"@Profile ( \"dev\" ) @Bean public DataSource devDataSource () { ... } @Profile ( \"prod\" ) @Bean public DataSource prodDataSource () { ... } Active profile: --spring.profiles.active = dev","title":"Environment &amp; Profiles"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#5-bean-post-processing","text":"Post-processors modify beans before and after initialization. @Component public class MetricsInjector implements BeanPostProcessor { public Object postProcessBeforeInitialization ( Object bean , String name ) { // before @PostConstruct return bean ; } public Object postProcessAfterInitialization ( Object bean , String name ) { // after initialization return bean ; } } Used for: Autowiring processing @Transactional proxies Caching Validation","title":"\u2699\ufe0f 5. Bean Post-Processing"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#6-context-hierarchies","text":"Large applications may use multiple contexts: Parent Context (shared configs) \u2193 Child Context (web layer, modules) A child context can access parent beans but not vice versa. Used in modular systems or Spring MVC applications.","title":"\ud83e\uddee 6. Context Hierarchies"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#7-common-patterns","text":"","title":"\ud83e\udde0 7. Common Patterns"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#access-the-context","text":"@Component public class ContextAwareBean implements ApplicationContextAware { private ApplicationContext ctx ; public void setApplicationContext ( ApplicationContext c ) { this . ctx = c ; } }","title":"Access the Context"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#programmatic-bean-access","text":"@Autowired ApplicationContext ctx ; MyService s = ctx . getBean ( MyService . class );","title":"Programmatic Bean Access"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#manual-refresh","text":"AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext (); ctx . register ( AppConfig . class ); ctx . refresh ();","title":"Manual Refresh"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#8-typical-bean-lifecycle-container-perspective","text":"register BeanDefinition \u2193 BeanFactory creates instance \u2193 Autowired dependencies injected \u2193 BeanPostProcessors run \u2193 @PostConstruct / afterPropertiesSet() \u2193 Context publishes events \u2193 Bean used during runtime \u2193 @PreDestroy / destroy()","title":"\ud83e\udde9 8. Typical Bean Lifecycle (Container Perspective)"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#9-common-pitfalls","text":"Symptom Cause Fix BeanCurrentlyInCreationException Circular dependencies Use setter or lazy injection NoSuchBeanDefinitionException Missing bean Check component scan IllegalStateException: context closed Using context after shutdown Manage lifecycle properly @Autowired not working Class not scanned Adjust @ComponentScan Multiple beans found Ambiguous type Use @Qualifier or @Primary","title":"\u2699\ufe0f 9. Common Pitfalls"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#10-container-class-hierarchy-summary","text":"BeanFactory \u2191 ListableBeanFactory \u2191 HierarchicalBeanFactory \u2191 ApplicationContext \u251c\u2500 AnnotationConfigApplicationContext \u251c\u2500 ClassPathXmlApplicationContext \u2514\u2500 WebApplicationContext","title":"\ud83e\udded 10. Container Class Hierarchy Summary"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#11-quick-reference-summary","text":"Concept API / Annotation Description Inversion of Control \u2014 Framework controls object creation Dependency Injection @Autowired , @Qualifier Auto-wiring of beans Core container BeanFactory Low-level bean management Full container ApplicationContext IoC + events + resources Bean lookup getBean(Class<T>) Retrieve from context Lifecycle @PostConstruct , @PreDestroy Init/destroy hooks Events ApplicationEvent , @EventListener Pub/sub system Profiles @Profile Conditional bean loading","title":"\ud83e\uddf1 11. Quick Reference Summary"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#related","text":"Concept: IoC Container Concept: Context Lifecycle Cheatsheet: beans-layer.md Cheatsheet: aop-layer.md","title":"\ud83d\udd17 Related"},{"location":"cheatsheets/languages/java/spring/core/20-container-layer/#core-takeaway","text":"The Container Layer is Spring\u2019s mind. It knows what beans exist, how they depend on each other, and when they should live or die. Reflection builds them, the Container awakens them \u2014 making IoC the intelligence that turns plain code into a coordinated ecosystem.","title":"\ud83e\ude9e Core Takeaway"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/","text":"\ud83e\udde9 AOP Layer \u2014 Aspects, Proxies & Crosscutting Logic Cheatsheet \u00b6 Essence: The AOP Layer (Aspect-Oriented Programming) gives Spring its superpowers : it can intercept , extend , and wrap method calls at runtime \u2014 adding behavior like transactions, security, caching, or logging transparently. \ud83e\udded 1. Concept Overview \u00b6 Object-Oriented Programming (OOP) organizes what things are. Aspect-Oriented Programming (AOP) organizes what they do repeatedly across many places. Without AOP: public void transfer () { startTransaction (); try { doTransfer (); commit (); } catch ( Exception e ) { rollback (); } } With AOP: @Transactional public void transfer () { doTransfer (); } Spring inserts the transaction logic around your method automatically. \ud83e\ude9e 2. What Is an Aspect? \u00b6 An Aspect is a class that holds crosscutting logic \u2014 code that applies to multiple classes or methods. Core AOP Terms \u00b6 Term Meaning Example Aspect Class containing advice @Aspect class LoggingAspect { ... } Advice The actual code that runs before/after a method @Before , @After , @Around Pointcut Rule that selects which methods get intercepted execution(* com.app..*(..)) Join Point A specific point in method execution where advice can run Method call, exception Proxy Wrapper that intercepts and forwards method calls Generated by Spring \ud83e\udde0 3. How AOP Works in Spring \u00b6 Your Bean (target) \u2193 Spring detects AOP annotations \u2193 Creates Proxy Bean (wrapper) \u2193 Proxy intercepts method call \u2193 Applies advice (before/after/around) \u2193 Calls target method Spring uses reflection and dynamic proxies to wrap your bean at runtime \u2014 you never call the real object directly. \u2699\ufe0f 4. Declaring Aspects \u00b6 Enable AOP in a configuration class: @Configuration @EnableAspectJAutoProxy public class AppConfig {} Define an Aspect: @Aspect @Component public class LoggingAspect { @Before ( \"execution(* com.app.service.*.*(..))\" ) public void logBefore ( JoinPoint jp ) { System . out . println ( \"Method start: \" + jp . getSignature ()); } @After ( \"execution(* com.app.service.*.*(..))\" ) public void logAfter ( JoinPoint jp ) { System . out . println ( \"Method end: \" + jp . getSignature ()); } } \ud83e\udde9 5. Types of Advice \u00b6 Advice Type Annotation When It Runs Example Before @Before Before method call Logging, auth checks After @After After method (success or fail) Cleanup AfterReturning @AfterReturning Only after success Metrics, caching AfterThrowing @AfterThrowing On exception Error handling Around @Around Wraps the method call Transactions, timing Example \u2014 Around Advice \u00b6 @Aspect @Component public class TimingAspect { @Around ( \"execution(* com.app..*(..))\" ) public Object measure ( ProceedingJoinPoint jp ) throws Throwable { long start = System . nanoTime (); Object result = jp . proceed (); System . out . println ( jp . getSignature () + \" took \" + ( System . nanoTime () - start ) + \"ns\" ); return result ; } } \u2699\ufe0f 6. Pointcut Expressions \u00b6 The execution() designator defines where advice applies. execution ( modifiers - pattern ? return - type - pattern declaring - type - pattern ? method - name - pattern ( param - pattern ) throws - pattern ? ) Examples: execution ( * com . app . service . * . * (..)) // all methods in package execution ( public * * (..)) // all public methods execution ( * transfer (..)) // any method named transfer execution ( * com . app .. * ( String )) // any method with String arg Combine rules: @Before ( \"execution(* com.app.service.*.*(..)) && @annotation(Transactional)\" ) \ud83e\uddec 7. Proxy Types \u2014 How Spring Intercepts Calls \u00b6 Spring AOP uses runtime proxies , not compile-time weaving. Proxy Type Mechanism Applies To Library JDK Dynamic Proxy Implements interfaces Interface-based beans java.lang.reflect.Proxy CGLIB Proxy Subclasses the target class Concrete classes (no interfaces) Bytecode generation via CGLIB Spring decides automatically: If the bean implements an interface \u2192 JDK proxy Otherwise \u2192 CGLIB subclass \ud83d\udd0d JDK Proxy Example \u00b6 MyService proxy = ( MyService ) Proxy . newProxyInstance ( clazz . getClassLoader (), new Class [] { MyService . class }, ( p , method , args ) -> { System . out . println ( \"Before call\" ); return method . invoke ( target , args ); }); \ud83d\udd2c CGLIB Example \u00b6 Enhancer enhancer = new Enhancer (); enhancer . setSuperclass ( MyService . class ); enhancer . setCallback (( MethodInterceptor ) ( obj , method , args , proxy ) -> { System . out . println ( \"Before \" + method . getName ()); return proxy . invokeSuper ( obj , args ); }); MyService proxy = ( MyService ) enhancer . create (); \ud83e\uddf1 8. Built-In AOP Features in Spring \u00b6 Feature Annotation Underlying Mechanism Transactions @Transactional TransactionInterceptor via AOP Asynchronous execution @Async AsyncExecutionInterceptor Caching @Cacheable , @CachePut , @CacheEvict CacheInterceptor Security @PreAuthorize , @Secured MethodSecurityInterceptor Retries @Retryable RetryOperationsInterceptor All of these are implemented as aspects . \ud83e\udde9 9. AOP + IoC Integration Flow \u00b6 1. Context starts 2. Spring scans beans 3. Detects @Aspect classes 4. Builds proxies for target beans 5. Replaces original bean references with proxy 6. Proxies intercept method calls 7. Calls proceed() \u2192 executes target logic From that moment, every call goes through the proxy pipeline. \u26a1 10. Common Pitfalls \u00b6 Problem Cause Fix Advice not applied Self-invocation (method calls inside same class) Move method to another bean or use AspectJ compile-time weaving AOP disabled Missing @EnableAspectJAutoProxy Add in config No proxy created Final class/method Remove final or use interface @Transactional not working Calling private/self method Ensure proxy boundary Order issues Multiple aspects Use @Order annotation \ud83e\udde0 11. Debugging Proxies \u00b6 Check whether a bean is proxied: System . out . println ( AopUtils . isAopProxy ( bean )); // true/false System . out . println ( AopUtils . getTargetClass ( bean )); Print proxy class: System . out . println ( bean . getClass ()); // usually com.sun.proxy.$ProxyXX or CGLIB$$EnhancerBySpringCGLIB \ud83e\uddee 12. Custom Aspect Example \u2014 Audit Logging \u00b6 @Aspect @Component public class AuditAspect { @Around ( \"@annotation(Audit)\" ) public Object audit ( ProceedingJoinPoint jp ) throws Throwable { System . out . println ( \"AUDIT \u2192 \" + jp . getSignature ()); return jp . proceed (); } } And annotation: @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) public @interface Audit {} Now @Audit can be added to any method, and the aspect intercepts it. \ud83e\udde9 13. Performance Notes \u00b6 Proxy creation happens once at startup ; not during runtime. Method interception adds minimal overhead (microseconds). Avoid deep proxy chains (e.g., multiple AOP frameworks stacked). Avoid applying AOP to ultra-hot code paths (like millions of calls/sec). \ud83e\udded 14. Quick Reference Summary \u00b6 Concept Description Spring Mechanism Aspect Class holding crosscutting logic @Aspect Advice Code run before/after method @Before , @After , etc. Pointcut Expression selecting join points execution(...) Proxy Runtime wrapper intercepting calls JDK / CGLIB Join Point Intercepted method execution Method entry/exit ProceedingJoinPoint Around advice controller proceed() executes real method Aspect order Order of execution @Order(n) AOP enablement Activate AOP system @EnableAspectJAutoProxy \ud83e\uddec 15. Visual Summary \u00b6 @Target Bean \u2193 Detected by @Aspect processor \u2193 Proxy Bean Created \u2193 Method Call Intercepted \u2193 @Before / @Around / @After \u2193 Target Method Invoked \u2193 Return to Caller \ud83d\udd17 Related \u00b6 Concept: AOP Concepts Cheatsheet: container-layer.md Cheatsheet: reflection-layer.md \ud83e\ude9e Core Takeaway \u00b6 AOP turns Spring from a factory into an orchestra conductor. It doesn\u2019t just create your objects \u2014 it surrounds them with rhythm and timing. Through proxies, it can wrap logic around logic, making crosscutting behavior seamless and centralized. Reflection lets Spring see ; IoC lets it build ; AOP lets it intervene .","title":"AOP Layer"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#aop-layer-aspects-proxies-crosscutting-logic-cheatsheet","text":"Essence: The AOP Layer (Aspect-Oriented Programming) gives Spring its superpowers : it can intercept , extend , and wrap method calls at runtime \u2014 adding behavior like transactions, security, caching, or logging transparently.","title":"\ud83e\udde9 AOP Layer \u2014 Aspects, Proxies &amp; Crosscutting Logic Cheatsheet"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#1-concept-overview","text":"Object-Oriented Programming (OOP) organizes what things are. Aspect-Oriented Programming (AOP) organizes what they do repeatedly across many places. Without AOP: public void transfer () { startTransaction (); try { doTransfer (); commit (); } catch ( Exception e ) { rollback (); } } With AOP: @Transactional public void transfer () { doTransfer (); } Spring inserts the transaction logic around your method automatically.","title":"\ud83e\udded 1. Concept Overview"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#2-what-is-an-aspect","text":"An Aspect is a class that holds crosscutting logic \u2014 code that applies to multiple classes or methods.","title":"\ud83e\ude9e 2. What Is an Aspect?"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#core-aop-terms","text":"Term Meaning Example Aspect Class containing advice @Aspect class LoggingAspect { ... } Advice The actual code that runs before/after a method @Before , @After , @Around Pointcut Rule that selects which methods get intercepted execution(* com.app..*(..)) Join Point A specific point in method execution where advice can run Method call, exception Proxy Wrapper that intercepts and forwards method calls Generated by Spring","title":"Core AOP Terms"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#3-how-aop-works-in-spring","text":"Your Bean (target) \u2193 Spring detects AOP annotations \u2193 Creates Proxy Bean (wrapper) \u2193 Proxy intercepts method call \u2193 Applies advice (before/after/around) \u2193 Calls target method Spring uses reflection and dynamic proxies to wrap your bean at runtime \u2014 you never call the real object directly.","title":"\ud83e\udde0 3. How AOP Works in Spring"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#4-declaring-aspects","text":"Enable AOP in a configuration class: @Configuration @EnableAspectJAutoProxy public class AppConfig {} Define an Aspect: @Aspect @Component public class LoggingAspect { @Before ( \"execution(* com.app.service.*.*(..))\" ) public void logBefore ( JoinPoint jp ) { System . out . println ( \"Method start: \" + jp . getSignature ()); } @After ( \"execution(* com.app.service.*.*(..))\" ) public void logAfter ( JoinPoint jp ) { System . out . println ( \"Method end: \" + jp . getSignature ()); } }","title":"\u2699\ufe0f 4. Declaring Aspects"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#5-types-of-advice","text":"Advice Type Annotation When It Runs Example Before @Before Before method call Logging, auth checks After @After After method (success or fail) Cleanup AfterReturning @AfterReturning Only after success Metrics, caching AfterThrowing @AfterThrowing On exception Error handling Around @Around Wraps the method call Transactions, timing","title":"\ud83e\udde9 5. Types of Advice"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#example-around-advice","text":"@Aspect @Component public class TimingAspect { @Around ( \"execution(* com.app..*(..))\" ) public Object measure ( ProceedingJoinPoint jp ) throws Throwable { long start = System . nanoTime (); Object result = jp . proceed (); System . out . println ( jp . getSignature () + \" took \" + ( System . nanoTime () - start ) + \"ns\" ); return result ; } }","title":"Example \u2014 Around Advice"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#6-pointcut-expressions","text":"The execution() designator defines where advice applies. execution ( modifiers - pattern ? return - type - pattern declaring - type - pattern ? method - name - pattern ( param - pattern ) throws - pattern ? ) Examples: execution ( * com . app . service . * . * (..)) // all methods in package execution ( public * * (..)) // all public methods execution ( * transfer (..)) // any method named transfer execution ( * com . app .. * ( String )) // any method with String arg Combine rules: @Before ( \"execution(* com.app.service.*.*(..)) && @annotation(Transactional)\" )","title":"\u2699\ufe0f 6. Pointcut Expressions"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#7-proxy-types-how-spring-intercepts-calls","text":"Spring AOP uses runtime proxies , not compile-time weaving. Proxy Type Mechanism Applies To Library JDK Dynamic Proxy Implements interfaces Interface-based beans java.lang.reflect.Proxy CGLIB Proxy Subclasses the target class Concrete classes (no interfaces) Bytecode generation via CGLIB Spring decides automatically: If the bean implements an interface \u2192 JDK proxy Otherwise \u2192 CGLIB subclass","title":"\ud83e\uddec 7. Proxy Types \u2014 How Spring Intercepts Calls"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#jdk-proxy-example","text":"MyService proxy = ( MyService ) Proxy . newProxyInstance ( clazz . getClassLoader (), new Class [] { MyService . class }, ( p , method , args ) -> { System . out . println ( \"Before call\" ); return method . invoke ( target , args ); });","title":"\ud83d\udd0d JDK Proxy Example"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#cglib-example","text":"Enhancer enhancer = new Enhancer (); enhancer . setSuperclass ( MyService . class ); enhancer . setCallback (( MethodInterceptor ) ( obj , method , args , proxy ) -> { System . out . println ( \"Before \" + method . getName ()); return proxy . invokeSuper ( obj , args ); }); MyService proxy = ( MyService ) enhancer . create ();","title":"\ud83d\udd2c CGLIB Example"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#8-built-in-aop-features-in-spring","text":"Feature Annotation Underlying Mechanism Transactions @Transactional TransactionInterceptor via AOP Asynchronous execution @Async AsyncExecutionInterceptor Caching @Cacheable , @CachePut , @CacheEvict CacheInterceptor Security @PreAuthorize , @Secured MethodSecurityInterceptor Retries @Retryable RetryOperationsInterceptor All of these are implemented as aspects .","title":"\ud83e\uddf1 8. Built-In AOP Features in Spring"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#9-aop-ioc-integration-flow","text":"1. Context starts 2. Spring scans beans 3. Detects @Aspect classes 4. Builds proxies for target beans 5. Replaces original bean references with proxy 6. Proxies intercept method calls 7. Calls proceed() \u2192 executes target logic From that moment, every call goes through the proxy pipeline.","title":"\ud83e\udde9 9. AOP + IoC Integration Flow"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#10-common-pitfalls","text":"Problem Cause Fix Advice not applied Self-invocation (method calls inside same class) Move method to another bean or use AspectJ compile-time weaving AOP disabled Missing @EnableAspectJAutoProxy Add in config No proxy created Final class/method Remove final or use interface @Transactional not working Calling private/self method Ensure proxy boundary Order issues Multiple aspects Use @Order annotation","title":"\u26a1 10. Common Pitfalls"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#11-debugging-proxies","text":"Check whether a bean is proxied: System . out . println ( AopUtils . isAopProxy ( bean )); // true/false System . out . println ( AopUtils . getTargetClass ( bean )); Print proxy class: System . out . println ( bean . getClass ()); // usually com.sun.proxy.$ProxyXX or CGLIB$$EnhancerBySpringCGLIB","title":"\ud83e\udde0 11. Debugging Proxies"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#12-custom-aspect-example-audit-logging","text":"@Aspect @Component public class AuditAspect { @Around ( \"@annotation(Audit)\" ) public Object audit ( ProceedingJoinPoint jp ) throws Throwable { System . out . println ( \"AUDIT \u2192 \" + jp . getSignature ()); return jp . proceed (); } } And annotation: @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) public @interface Audit {} Now @Audit can be added to any method, and the aspect intercepts it.","title":"\ud83e\uddee 12. Custom Aspect Example \u2014 Audit Logging"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#13-performance-notes","text":"Proxy creation happens once at startup ; not during runtime. Method interception adds minimal overhead (microseconds). Avoid deep proxy chains (e.g., multiple AOP frameworks stacked). Avoid applying AOP to ultra-hot code paths (like millions of calls/sec).","title":"\ud83e\udde9 13. Performance Notes"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#14-quick-reference-summary","text":"Concept Description Spring Mechanism Aspect Class holding crosscutting logic @Aspect Advice Code run before/after method @Before , @After , etc. Pointcut Expression selecting join points execution(...) Proxy Runtime wrapper intercepting calls JDK / CGLIB Join Point Intercepted method execution Method entry/exit ProceedingJoinPoint Around advice controller proceed() executes real method Aspect order Order of execution @Order(n) AOP enablement Activate AOP system @EnableAspectJAutoProxy","title":"\ud83e\udded 14. Quick Reference Summary"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#15-visual-summary","text":"@Target Bean \u2193 Detected by @Aspect processor \u2193 Proxy Bean Created \u2193 Method Call Intercepted \u2193 @Before / @Around / @After \u2193 Target Method Invoked \u2193 Return to Caller","title":"\ud83e\uddec 15. Visual Summary"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#related","text":"Concept: AOP Concepts Cheatsheet: container-layer.md Cheatsheet: reflection-layer.md","title":"\ud83d\udd17 Related"},{"location":"cheatsheets/languages/java/spring/core/25-aop-layer/#core-takeaway","text":"AOP turns Spring from a factory into an orchestra conductor. It doesn\u2019t just create your objects \u2014 it surrounds them with rhythm and timing. Through proxies, it can wrap logic around logic, making crosscutting behavior seamless and centralized. Reflection lets Spring see ; IoC lets it build ; AOP lets it intervene .","title":"\ud83e\ude9e Core Takeaway"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/","text":"\ud83d\udce1 Events Layer \u2014 Spring\u2019s Internal Communication System Cheatsheet \u00b6 Essence: The Events Layer is how Spring broadcasts important moments in the container\u2019s life \u2014 from startup to shutdown \u2014 and how your application can listen and react to them. It turns Spring into an event-driven ecosystem rather than a silent dependency injector. \ud83e\udded 1. Concept Overview \u00b6 Spring\u2019s event system is built on the Observer Pattern : one part of the app publishes an event , and many others can listen to it asynchronously (or synchronously) \u2014 without knowing about each other. [Publisher] \u2192 [ApplicationEventMulticaster] \u2192 [Listeners] This enables loose coupling between parts of the application \u2014 components don\u2019t talk directly, they communicate through events. \u2699\ufe0f 2. The Core Interfaces \u00b6 Interface Role Typical Implementation ApplicationEvent Base type for events Custom or built-in ApplicationEventPublisher Used to publish events ApplicationContext implements it ApplicationListener<E> Interface for event listeners Your listener classes ApplicationEventMulticaster Internal dispatcher Sends events to listeners Typical Interaction \u00b6 @Component public class OrderPublisher { @Autowired ApplicationEventPublisher publisher ; public void createOrder ( Order order ) { // business logic ... publisher . publishEvent ( new OrderCreatedEvent ( this , order )); } } @Component public class OrderListener implements ApplicationListener < OrderCreatedEvent > { public void onApplicationEvent ( OrderCreatedEvent event ) { System . out . println ( \"Order received \u2192 \" + event . getOrder (). getId ()); } } \ud83e\udde9 3. Built-in Spring Events \u00b6 Spring emits many lifecycle events as the container starts and stops: Event When It\u2019s Published ContextRefreshedEvent After all beans are created & initialized ContextStartedEvent When context is explicitly started ContextStoppedEvent When context is stopped (not closed) ContextClosedEvent When context is shutting down ApplicationReadyEvent When Boot app is fully ready ApplicationFailedEvent On startup error WebServerInitializedEvent When embedded server starts (Spring Boot) Common Boot Example \u00b6 @Component public class StartupLogger { @EventListener ( ApplicationReadyEvent . class ) public void appReady () { System . out . println ( \"\u2705 Application is up and running!\" ); } } \ud83e\udde0 4. Writing Custom Events \u00b6 Create your own ApplicationEvent subclass: public class UserRegisteredEvent extends ApplicationEvent { private final User user ; public UserRegisteredEvent ( Object source , User user ) { super ( source ); this . user = user ; } public User getUser () { return user ; } } Publish it: publisher . publishEvent ( new UserRegisteredEvent ( this , newUser )); Listen for it: @Component public class WelcomeEmailListener { @EventListener public void onUserRegistered ( UserRegisteredEvent e ) { System . out . println ( \"Sending welcome email to \" + e . getUser (). getEmail ()); } } \u2699\ufe0f 5. Simplified Internal Flow \u00b6 Your code \u2192 publisher.publishEvent(event) \u2193 ApplicationEventMulticaster finds all listeners \u2193 Each listener receives onApplicationEvent(event) Spring Boot replaces the default multicaster with a SimpleApplicationEventMulticaster , which can run listeners asynchronously if configured. \ud83d\udd01 6. Asynchronous Event Handling \u00b6 You can make listeners run in background threads: @EnableAsync @Component public class AsyncListener { @Async @EventListener public void handleEvent ( UserRegisteredEvent e ) { System . out . println ( \"Handling event asynchronously for \" + e . getUser (). getEmail ()); } } You can also register a custom TaskExecutor for more control. \ud83e\udde9 7. Event Ordering and Filtering \u00b6 Listener Order \u00b6 @EventListener @Order ( 1 ) public void beforeEvent (...) { ... } @EventListener @Order ( 2 ) public void afterEvent (...) { ... } Conditional Listening \u00b6 @EventListener ( condition = \"#event.user.premium == true\" ) public void handlePremium ( UserRegisteredEvent event ) { System . out . println ( \"Premium user signup detected!\" ); } This uses Spring Expression Language (SpEL) to filter events. \ud83e\uddee 8. Programmatic Registration \u00b6 Sometimes listeners are registered manually, especially in frameworks. ctx . addApplicationListener (( ApplicationEvent event ) -> { if ( event instanceof ContextRefreshedEvent ) System . out . println ( \"Context refreshed!\" ); }); \ud83e\uddf1 9. Event Publishing in Boot Lifecycle \u00b6 Spring Boot itself uses the event system for application phases : ApplicationStartingEvent \u2193 ApplicationEnvironmentPreparedEvent \u2193 ApplicationPreparedEvent \u2193 ApplicationStartedEvent \u2193 ApplicationReadyEvent \u2193 ApplicationFailedEvent (if any errors) You can listen to these via ApplicationListener or @EventListener \u2014 useful for startup diagnostics or pre-initialization hooks. \ud83e\udde9 10. Advanced: Custom Multicaster \u00b6 You can override the multicaster bean to change event dispatching behavior. @Bean ( name = \"applicationEventMulticaster\" ) public ApplicationEventMulticaster asyncMulticaster () { SimpleApplicationEventMulticaster m = new SimpleApplicationEventMulticaster (); m . setTaskExecutor ( new SimpleAsyncTaskExecutor ()); return m ; } This makes all events asynchronous by default. \u26a1 11. Common Pitfalls \u00b6 Problem Cause Fix Listener not firing Bean not registered in context Annotate with @Component Event missed Published before listener initialized Use SmartApplicationListener or reorder Async listener not async Missing @EnableAsync Enable async in config Wrong event type Mismatched generic in ApplicationListener Match exact class or use wildcard Context events duplicated Multiple contexts in Boot Use ApplicationContextAware to filter \ud83e\udde9 12. Visual Summary \u00b6 +------------------------+ | ApplicationContext | | implements Publisher | +----------+-------------+ | publishEvent(event) \u2193 +--------------------------+ | ApplicationEventMulticaster | | - Finds all listeners | | - Calls them sequentially | +--------------------------+ \u2193 @EventListener / ApplicationListener \ud83e\udded 13. Quick Reference Summary \u00b6 Concept Role Example Event Object describing an occurrence UserRegisteredEvent Publisher Sends events ApplicationEventPublisher Listener Reacts to events @EventListener , ApplicationListener Multicaster Dispatches events to listeners SimpleApplicationEventMulticaster Built-in Events Context lifecycle ContextRefreshedEvent , ContextClosedEvent Async Support Parallel handling @Async , @EnableAsync Filtering Conditional execution SpEL in @EventListener Boot Phases Startup notifications ApplicationReadyEvent , etc. \ud83d\udd17 Related \u00b6 Concept: Context Lifecycle Cheatsheet: container-layer.md Cheatsheet: beans-layer.md \ud83e\ude9e Core Takeaway \u00b6 The Events Layer is the voice of the container. When the Spring world changes \u2014 beans created, contexts started, servers ready \u2014 it speaks through events. Your code can listen in, respond, and join the rhythm of the framework itself.","title":"Events Layer"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#events-layer-springs-internal-communication-system-cheatsheet","text":"Essence: The Events Layer is how Spring broadcasts important moments in the container\u2019s life \u2014 from startup to shutdown \u2014 and how your application can listen and react to them. It turns Spring into an event-driven ecosystem rather than a silent dependency injector.","title":"\ud83d\udce1 Events Layer \u2014 Spring\u2019s Internal Communication System Cheatsheet"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#1-concept-overview","text":"Spring\u2019s event system is built on the Observer Pattern : one part of the app publishes an event , and many others can listen to it asynchronously (or synchronously) \u2014 without knowing about each other. [Publisher] \u2192 [ApplicationEventMulticaster] \u2192 [Listeners] This enables loose coupling between parts of the application \u2014 components don\u2019t talk directly, they communicate through events.","title":"\ud83e\udded 1. Concept Overview"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#2-the-core-interfaces","text":"Interface Role Typical Implementation ApplicationEvent Base type for events Custom or built-in ApplicationEventPublisher Used to publish events ApplicationContext implements it ApplicationListener<E> Interface for event listeners Your listener classes ApplicationEventMulticaster Internal dispatcher Sends events to listeners","title":"\u2699\ufe0f 2. The Core Interfaces"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#typical-interaction","text":"@Component public class OrderPublisher { @Autowired ApplicationEventPublisher publisher ; public void createOrder ( Order order ) { // business logic ... publisher . publishEvent ( new OrderCreatedEvent ( this , order )); } } @Component public class OrderListener implements ApplicationListener < OrderCreatedEvent > { public void onApplicationEvent ( OrderCreatedEvent event ) { System . out . println ( \"Order received \u2192 \" + event . getOrder (). getId ()); } }","title":"Typical Interaction"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#3-built-in-spring-events","text":"Spring emits many lifecycle events as the container starts and stops: Event When It\u2019s Published ContextRefreshedEvent After all beans are created & initialized ContextStartedEvent When context is explicitly started ContextStoppedEvent When context is stopped (not closed) ContextClosedEvent When context is shutting down ApplicationReadyEvent When Boot app is fully ready ApplicationFailedEvent On startup error WebServerInitializedEvent When embedded server starts (Spring Boot)","title":"\ud83e\udde9 3. Built-in Spring Events"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#common-boot-example","text":"@Component public class StartupLogger { @EventListener ( ApplicationReadyEvent . class ) public void appReady () { System . out . println ( \"\u2705 Application is up and running!\" ); } }","title":"Common Boot Example"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#4-writing-custom-events","text":"Create your own ApplicationEvent subclass: public class UserRegisteredEvent extends ApplicationEvent { private final User user ; public UserRegisteredEvent ( Object source , User user ) { super ( source ); this . user = user ; } public User getUser () { return user ; } } Publish it: publisher . publishEvent ( new UserRegisteredEvent ( this , newUser )); Listen for it: @Component public class WelcomeEmailListener { @EventListener public void onUserRegistered ( UserRegisteredEvent e ) { System . out . println ( \"Sending welcome email to \" + e . getUser (). getEmail ()); } }","title":"\ud83e\udde0 4. Writing Custom Events"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#5-simplified-internal-flow","text":"Your code \u2192 publisher.publishEvent(event) \u2193 ApplicationEventMulticaster finds all listeners \u2193 Each listener receives onApplicationEvent(event) Spring Boot replaces the default multicaster with a SimpleApplicationEventMulticaster , which can run listeners asynchronously if configured.","title":"\u2699\ufe0f 5. Simplified Internal Flow"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#6-asynchronous-event-handling","text":"You can make listeners run in background threads: @EnableAsync @Component public class AsyncListener { @Async @EventListener public void handleEvent ( UserRegisteredEvent e ) { System . out . println ( \"Handling event asynchronously for \" + e . getUser (). getEmail ()); } } You can also register a custom TaskExecutor for more control.","title":"\ud83d\udd01 6. Asynchronous Event Handling"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#7-event-ordering-and-filtering","text":"","title":"\ud83e\udde9 7. Event Ordering and Filtering"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#listener-order","text":"@EventListener @Order ( 1 ) public void beforeEvent (...) { ... } @EventListener @Order ( 2 ) public void afterEvent (...) { ... }","title":"Listener Order"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#conditional-listening","text":"@EventListener ( condition = \"#event.user.premium == true\" ) public void handlePremium ( UserRegisteredEvent event ) { System . out . println ( \"Premium user signup detected!\" ); } This uses Spring Expression Language (SpEL) to filter events.","title":"Conditional Listening"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#8-programmatic-registration","text":"Sometimes listeners are registered manually, especially in frameworks. ctx . addApplicationListener (( ApplicationEvent event ) -> { if ( event instanceof ContextRefreshedEvent ) System . out . println ( \"Context refreshed!\" ); });","title":"\ud83e\uddee 8. Programmatic Registration"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#9-event-publishing-in-boot-lifecycle","text":"Spring Boot itself uses the event system for application phases : ApplicationStartingEvent \u2193 ApplicationEnvironmentPreparedEvent \u2193 ApplicationPreparedEvent \u2193 ApplicationStartedEvent \u2193 ApplicationReadyEvent \u2193 ApplicationFailedEvent (if any errors) You can listen to these via ApplicationListener or @EventListener \u2014 useful for startup diagnostics or pre-initialization hooks.","title":"\ud83e\uddf1 9. Event Publishing in Boot Lifecycle"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#10-advanced-custom-multicaster","text":"You can override the multicaster bean to change event dispatching behavior. @Bean ( name = \"applicationEventMulticaster\" ) public ApplicationEventMulticaster asyncMulticaster () { SimpleApplicationEventMulticaster m = new SimpleApplicationEventMulticaster (); m . setTaskExecutor ( new SimpleAsyncTaskExecutor ()); return m ; } This makes all events asynchronous by default.","title":"\ud83e\udde9 10. Advanced: Custom Multicaster"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#11-common-pitfalls","text":"Problem Cause Fix Listener not firing Bean not registered in context Annotate with @Component Event missed Published before listener initialized Use SmartApplicationListener or reorder Async listener not async Missing @EnableAsync Enable async in config Wrong event type Mismatched generic in ApplicationListener Match exact class or use wildcard Context events duplicated Multiple contexts in Boot Use ApplicationContextAware to filter","title":"\u26a1 11. Common Pitfalls"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#12-visual-summary","text":"+------------------------+ | ApplicationContext | | implements Publisher | +----------+-------------+ | publishEvent(event) \u2193 +--------------------------+ | ApplicationEventMulticaster | | - Finds all listeners | | - Calls them sequentially | +--------------------------+ \u2193 @EventListener / ApplicationListener","title":"\ud83e\udde9 12. Visual Summary"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#13-quick-reference-summary","text":"Concept Role Example Event Object describing an occurrence UserRegisteredEvent Publisher Sends events ApplicationEventPublisher Listener Reacts to events @EventListener , ApplicationListener Multicaster Dispatches events to listeners SimpleApplicationEventMulticaster Built-in Events Context lifecycle ContextRefreshedEvent , ContextClosedEvent Async Support Parallel handling @Async , @EnableAsync Filtering Conditional execution SpEL in @EventListener Boot Phases Startup notifications ApplicationReadyEvent , etc.","title":"\ud83e\udded 13. Quick Reference Summary"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#related","text":"Concept: Context Lifecycle Cheatsheet: container-layer.md Cheatsheet: beans-layer.md","title":"\ud83d\udd17 Related"},{"location":"cheatsheets/languages/java/spring/core/30-events-layer/#core-takeaway","text":"The Events Layer is the voice of the container. When the Spring world changes \u2014 beans created, contexts started, servers ready \u2014 it speaks through events. Your code can listen in, respond, and join the rhythm of the framework itself.","title":"\ud83e\ude9e Core Takeaway"},{"location":"cheatsheets/languages/java/spring/data/h2/","text":"\ud83d\ude80 H2 Database with DBeaver and Spring Boot \u2014 Full Setup Guide \u00b6 \ud83d\uddc4\ufe0f What is H2? \u00b6 H2 is a database engine written in Java. It is not part of Spring or DBeaver \u2014 it\u2019s its own project. It\u2019s lightweight, fast, embeddable , and can run: In-memory \u2192 everything stored in RAM, disappears when you stop your app. File-based \u2192 saves data in a .mv.db file on disk. TCP server \u2192 runs like a mini DB server that tools (like DBeaver) can connect to. Think of H2 as a mini MySQL/Postgres but simpler, great for learning, demos, or development. \ud83d\udda5\ufe0f What is DBeaver? \u00b6 DBeaver is a GUI tool \u2014 it is not a database itself. It lets you connect to databases (H2, MySQL, Postgres, SQLite, etc.), browse tables, run SQL, and manage data . DBeaver sometimes shows an \u201cexample DB\u201d \u2014 that\u2019s just a demo H2 database included so you can click around. \ud83d\udd27 How to use H2 + DBeaver (step by step) \u00b6 1. Install DBeaver \u00b6 On Fedora (or most Linux): flatpak install flathub io.dbeaver.DBeaverCommunity Run it: flatpak run io.dbeaver.DBeaverCommunity 2. Get H2 \u00b6 Download from: https://www.h2database.com \u2192 h2-*.jar . This JAR contains the database engine. Run H2 as a TCP server : java -cp h2*.jar org.h2.tools.Server -tcp -tcpAllowOthers -tcpPort 9092 -ifNotExists -tcp \u2192 start in server mode -tcpPort 9092 \u2192 listens on port 9092 -tcpAllowOthers \u2192 lets other apps (like DBeaver) connect -ifNotExists \u2192 creates DB if it doesn\u2019t exist This keeps H2 running like a small DB server on your machine. 3. Connect DBeaver to H2 \u00b6 Open DBeaver \u2192 New Connection \u2192 choose H2 . Select Server mode (since we started TCP). Fill in: Host: localhost Port: 9092 Database: ~/testdb (H2 will create testdb.mv.db in your home folder) User: sa Password: (leave empty unless you set one) Now you can open SQL editor in DBeaver and start working with H2. 4. Try some SQL \u00b6 In DBeaver SQL editor: -- Create a table CREATE TABLE users ( id INT PRIMARY KEY AUTO_INCREMENT , name VARCHAR ( 100 ) ); -- Insert rows INSERT INTO users ( name ) VALUES ( 'Alice' ), ( 'Bob' ); -- Query rows SELECT * FROM users ; You\u2019ll see the results in DBeaver\u2019s result grid. \ud83d\udd0d Important concepts \u00b6 H2 is the database engine (like a lightweight MySQL). DBeaver is just the UI client that connects to it. TCP server mode lets external apps (like DBeaver) connect. File DB \u2192 persists data in .mv.db file. In-memory DB \u2192 temporary, vanishes when stopped. \u2705 When to use \u00b6 Learning SQL without installing MySQL/Postgres. Quick development or testing. Exploring databases with a GUI (DBeaver). \u26a0\ufe0f Not recommended for production \u2014 for real apps use MySQL, Postgres, etc. \ud83c\udf31 What is Spring Boot? \u00b6 Spring Boot is a Java framework that makes it easy to build applications. It gives you: Auto-configuration (sensible defaults). Embedded servers (no need to deploy to Tomcat manually). Starters (dependencies for common features). For databases, it integrates smoothly with H2 . \ud83d\uddc4\ufe0f What is H2 in Spring Boot? \u00b6 H2 is just a database engine. Spring Boot can detect H2 on the classpath and automatically connect to it. You can run your app with: In-memory DB \u2192 fast, temporary. File DB \u2192 persists data to disk. TCP server \u2192 allows external tools like DBeaver to connect. \ud83d\udd27 How to set up \u00b6 1. Create Spring Boot project \u00b6 Use Spring Initializr or CLI: spring init --dependencies = web,data-jpa,h2 demo cd demo Dependencies: spring-boot-starter-web \u2192 REST API / web endpoints. spring-boot-starter-data-jpa \u2192 JPA/Hibernate for database. com.h2database:h2 \u2192 the H2 DB engine. 2. Add an Entity \u00b6 In src/main/java/.../User.java : import jakarta.persistence.* ; @Entity public class User { @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) private Long id ; private String name ; // getters & setters } This defines a table user with columns id and name . 3. Create a Repository \u00b6 In UserRepository.java : import org.springframework.data.jpa.repository.JpaRepository ; public interface UserRepository extends JpaRepository < User , Long > {} Spring Data JPA generates CRUD methods (save, findAll, delete, etc.) automatically. 4. Configure H2 \u00b6 In src/main/resources/application.properties : In-memory DB (disappears when app stops) \u00b6 spring.datasource.url = jdbc:h2:mem:testdb;MODE=MySQL spring.datasource.driver-class-name = org.h2.Driver spring.datasource.username = sa spring.datasource.password = spring.jpa.hibernate.ddl-auto = update spring.h2.console.enabled = true spring.h2.console.path = /h2-console Visit: http://localhost:8080/h2-console File DB (persists to disk, easier with DBeaver) \u00b6 spring.datasource.url = jdbc:h2:file:./data/devdb;MODE=MySQL;AUTO_SERVER=TRUE spring.datasource.driver-class-name = org.h2.Driver spring.datasource.username = sa spring.datasource.password = spring.jpa.hibernate.ddl-auto = update spring.h2.console.enabled = true 5. Create a REST Controller \u00b6 In UserController.java : import org.springframework.web.bind.annotation.* ; import java.util.List ; @RestController @RequestMapping ( \"/users\" ) public class UserController { private final UserRepository repo ; public UserController ( UserRepository repo ) { this . repo = repo ; } @GetMapping public List < User > getAll () { return repo . findAll (); } @PostMapping public User add ( @RequestBody User user ) { return repo . save ( user ); } } 6. Run the app \u00b6 ./mvnw spring-boot:run or ./gradlew bootRun Test it: curl -X POST http://localhost:8080/users -H \"Content-Type: application/json\" -d '{\"name\":\"Alice\"}' curl http://localhost:8080/users \ud83d\udda5\ufe0f Inspect in DBeaver \u00b6 If you used file mode with AUTO_SERVER=TRUE : Start your app (it creates ./data/devdb.mv.db ). In DBeaver \u2192 New Connection \u2192 H2 \u2192 Server mode. Host: localhost , Port: 9092 (if TCP server), or point to file ( ./data/devdb ). User: sa , Password: (blank) . You\u2019ll see the USER table and the rows created from your REST API calls. \u2705 Concepts Recap \u00b6 Entity = Java class \u2192 DB table. Repository = Interface \u2192 auto CRUD methods. Datasource URL = defines how Spring talks to DB (in-memory, file, or server). H2 Console = web UI at /h2-console for quick inspection. DBeaver = external UI if you want richer DB exploration. \u26a0\ufe0f For Production \u00b6 Replace H2 with real DB (MySQL/Postgres). Change dependency to the right JDBC driver. Change spring.datasource.url , username, password. Keep entity + repository code the same. \u2705 With this setup, you can build a Spring Boot app, test it against H2, and explore data with DBeaver \u2014 all without installing a heavy database server.","title":"H2 setup"},{"location":"cheatsheets/languages/java/spring/data/h2/#h2-database-with-dbeaver-and-spring-boot-full-setup-guide","text":"","title":"\ud83d\ude80 H2 Database with DBeaver and Spring Boot \u2014 Full Setup Guide"},{"location":"cheatsheets/languages/java/spring/data/h2/#what-is-h2","text":"H2 is a database engine written in Java. It is not part of Spring or DBeaver \u2014 it\u2019s its own project. It\u2019s lightweight, fast, embeddable , and can run: In-memory \u2192 everything stored in RAM, disappears when you stop your app. File-based \u2192 saves data in a .mv.db file on disk. TCP server \u2192 runs like a mini DB server that tools (like DBeaver) can connect to. Think of H2 as a mini MySQL/Postgres but simpler, great for learning, demos, or development.","title":"\ud83d\uddc4\ufe0f What is H2?"},{"location":"cheatsheets/languages/java/spring/data/h2/#what-is-dbeaver","text":"DBeaver is a GUI tool \u2014 it is not a database itself. It lets you connect to databases (H2, MySQL, Postgres, SQLite, etc.), browse tables, run SQL, and manage data . DBeaver sometimes shows an \u201cexample DB\u201d \u2014 that\u2019s just a demo H2 database included so you can click around.","title":"\ud83d\udda5\ufe0f What is DBeaver?"},{"location":"cheatsheets/languages/java/spring/data/h2/#how-to-use-h2-dbeaver-step-by-step","text":"","title":"\ud83d\udd27 How to use H2 + DBeaver (step by step)"},{"location":"cheatsheets/languages/java/spring/data/h2/#1-install-dbeaver","text":"On Fedora (or most Linux): flatpak install flathub io.dbeaver.DBeaverCommunity Run it: flatpak run io.dbeaver.DBeaverCommunity","title":"1. Install DBeaver"},{"location":"cheatsheets/languages/java/spring/data/h2/#2-get-h2","text":"Download from: https://www.h2database.com \u2192 h2-*.jar . This JAR contains the database engine. Run H2 as a TCP server : java -cp h2*.jar org.h2.tools.Server -tcp -tcpAllowOthers -tcpPort 9092 -ifNotExists -tcp \u2192 start in server mode -tcpPort 9092 \u2192 listens on port 9092 -tcpAllowOthers \u2192 lets other apps (like DBeaver) connect -ifNotExists \u2192 creates DB if it doesn\u2019t exist This keeps H2 running like a small DB server on your machine.","title":"2. Get H2"},{"location":"cheatsheets/languages/java/spring/data/h2/#3-connect-dbeaver-to-h2","text":"Open DBeaver \u2192 New Connection \u2192 choose H2 . Select Server mode (since we started TCP). Fill in: Host: localhost Port: 9092 Database: ~/testdb (H2 will create testdb.mv.db in your home folder) User: sa Password: (leave empty unless you set one) Now you can open SQL editor in DBeaver and start working with H2.","title":"3. Connect DBeaver to H2"},{"location":"cheatsheets/languages/java/spring/data/h2/#4-try-some-sql","text":"In DBeaver SQL editor: -- Create a table CREATE TABLE users ( id INT PRIMARY KEY AUTO_INCREMENT , name VARCHAR ( 100 ) ); -- Insert rows INSERT INTO users ( name ) VALUES ( 'Alice' ), ( 'Bob' ); -- Query rows SELECT * FROM users ; You\u2019ll see the results in DBeaver\u2019s result grid.","title":"4. Try some SQL"},{"location":"cheatsheets/languages/java/spring/data/h2/#important-concepts","text":"H2 is the database engine (like a lightweight MySQL). DBeaver is just the UI client that connects to it. TCP server mode lets external apps (like DBeaver) connect. File DB \u2192 persists data in .mv.db file. In-memory DB \u2192 temporary, vanishes when stopped.","title":"\ud83d\udd0d Important concepts"},{"location":"cheatsheets/languages/java/spring/data/h2/#when-to-use","text":"Learning SQL without installing MySQL/Postgres. Quick development or testing. Exploring databases with a GUI (DBeaver). \u26a0\ufe0f Not recommended for production \u2014 for real apps use MySQL, Postgres, etc.","title":"\u2705 When to use"},{"location":"cheatsheets/languages/java/spring/data/h2/#what-is-spring-boot","text":"Spring Boot is a Java framework that makes it easy to build applications. It gives you: Auto-configuration (sensible defaults). Embedded servers (no need to deploy to Tomcat manually). Starters (dependencies for common features). For databases, it integrates smoothly with H2 .","title":"\ud83c\udf31 What is Spring Boot?"},{"location":"cheatsheets/languages/java/spring/data/h2/#what-is-h2-in-spring-boot","text":"H2 is just a database engine. Spring Boot can detect H2 on the classpath and automatically connect to it. You can run your app with: In-memory DB \u2192 fast, temporary. File DB \u2192 persists data to disk. TCP server \u2192 allows external tools like DBeaver to connect.","title":"\ud83d\uddc4\ufe0f What is H2 in Spring Boot?"},{"location":"cheatsheets/languages/java/spring/data/h2/#how-to-set-up","text":"","title":"\ud83d\udd27 How to set up"},{"location":"cheatsheets/languages/java/spring/data/h2/#1-create-spring-boot-project","text":"Use Spring Initializr or CLI: spring init --dependencies = web,data-jpa,h2 demo cd demo Dependencies: spring-boot-starter-web \u2192 REST API / web endpoints. spring-boot-starter-data-jpa \u2192 JPA/Hibernate for database. com.h2database:h2 \u2192 the H2 DB engine.","title":"1. Create Spring Boot project"},{"location":"cheatsheets/languages/java/spring/data/h2/#2-add-an-entity","text":"In src/main/java/.../User.java : import jakarta.persistence.* ; @Entity public class User { @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) private Long id ; private String name ; // getters & setters } This defines a table user with columns id and name .","title":"2. Add an Entity"},{"location":"cheatsheets/languages/java/spring/data/h2/#3-create-a-repository","text":"In UserRepository.java : import org.springframework.data.jpa.repository.JpaRepository ; public interface UserRepository extends JpaRepository < User , Long > {} Spring Data JPA generates CRUD methods (save, findAll, delete, etc.) automatically.","title":"3. Create a Repository"},{"location":"cheatsheets/languages/java/spring/data/h2/#4-configure-h2","text":"In src/main/resources/application.properties :","title":"4. Configure H2"},{"location":"cheatsheets/languages/java/spring/data/h2/#in-memory-db-disappears-when-app-stops","text":"spring.datasource.url = jdbc:h2:mem:testdb;MODE=MySQL spring.datasource.driver-class-name = org.h2.Driver spring.datasource.username = sa spring.datasource.password = spring.jpa.hibernate.ddl-auto = update spring.h2.console.enabled = true spring.h2.console.path = /h2-console Visit: http://localhost:8080/h2-console","title":"In-memory DB (disappears when app stops)"},{"location":"cheatsheets/languages/java/spring/data/h2/#file-db-persists-to-disk-easier-with-dbeaver","text":"spring.datasource.url = jdbc:h2:file:./data/devdb;MODE=MySQL;AUTO_SERVER=TRUE spring.datasource.driver-class-name = org.h2.Driver spring.datasource.username = sa spring.datasource.password = spring.jpa.hibernate.ddl-auto = update spring.h2.console.enabled = true","title":"File DB (persists to disk, easier with DBeaver)"},{"location":"cheatsheets/languages/java/spring/data/h2/#5-create-a-rest-controller","text":"In UserController.java : import org.springframework.web.bind.annotation.* ; import java.util.List ; @RestController @RequestMapping ( \"/users\" ) public class UserController { private final UserRepository repo ; public UserController ( UserRepository repo ) { this . repo = repo ; } @GetMapping public List < User > getAll () { return repo . findAll (); } @PostMapping public User add ( @RequestBody User user ) { return repo . save ( user ); } }","title":"5. Create a REST Controller"},{"location":"cheatsheets/languages/java/spring/data/h2/#6-run-the-app","text":"./mvnw spring-boot:run or ./gradlew bootRun Test it: curl -X POST http://localhost:8080/users -H \"Content-Type: application/json\" -d '{\"name\":\"Alice\"}' curl http://localhost:8080/users","title":"6. Run the app"},{"location":"cheatsheets/languages/java/spring/data/h2/#inspect-in-dbeaver","text":"If you used file mode with AUTO_SERVER=TRUE : Start your app (it creates ./data/devdb.mv.db ). In DBeaver \u2192 New Connection \u2192 H2 \u2192 Server mode. Host: localhost , Port: 9092 (if TCP server), or point to file ( ./data/devdb ). User: sa , Password: (blank) . You\u2019ll see the USER table and the rows created from your REST API calls.","title":"\ud83d\udda5\ufe0f Inspect in DBeaver"},{"location":"cheatsheets/languages/java/spring/data/h2/#concepts-recap","text":"Entity = Java class \u2192 DB table. Repository = Interface \u2192 auto CRUD methods. Datasource URL = defines how Spring talks to DB (in-memory, file, or server). H2 Console = web UI at /h2-console for quick inspection. DBeaver = external UI if you want richer DB exploration.","title":"\u2705 Concepts Recap"},{"location":"cheatsheets/languages/java/spring/data/h2/#for-production","text":"Replace H2 with real DB (MySQL/Postgres). Change dependency to the right JDBC driver. Change spring.datasource.url , username, password. Keep entity + repository code the same. \u2705 With this setup, you can build a Spring Boot app, test it against H2, and explore data with DBeaver \u2014 all without installing a heavy database server.","title":"\u26a0\ufe0f For Production"},{"location":"cheatsheets/languages/java/spring/data/mysql/","text":"Spring Boot + MySQL (running in Docker) \u00b6 \ud83d\udc49 Prereq: MySQL container is up (see [Docker setup link]). 1. Add MySQL driver \u00b6 Maven (pom.xml): <dependency> <groupId> com.mysql </groupId> <artifactId> mysql-connector-j </artifactId> </dependency> Gradle (build.gradle): implementation 'com.mysql:mysql-connector-j' 2. Configure datasource \u00b6 src/main/resources/application.properties spring.datasource.url = jdbc:mysql://localhost:3306/appdb spring.datasource.username = appuser spring.datasource.password = apppass spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver # Choose ONE ddl-auto option (see below) spring.jpa.hibernate.ddl-auto = update # Tells Hibernate which SQL dialect to use so it can generate the correct SQL syntax # (MySQL 8 has features and keywords not in older versions, so use MySQL8Dialect). spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect spring.jpa.show-sql = true # optional, for debugging Alternative (YAML): spring : datasource : url : jdbc:mysql://localhost:3306/appdb username : appuser password : apppass driver-class-name : com.mysql.cj.jdbc.Driver jpa : hibernate : ddl-auto : update # or validate/create-drop show-sql : true properties : hibernate : dialect : org.hibernate.dialect.MySQL8Dialect 3. Schema management options \u00b6 Spring Boot can handle schema in several ways. Pick one strategy : A) JPA auto-DDL (fast dev) \u00b6 spring.jpa.hibernate.ddl-auto = update update \u2192 tries to evolve schema without dropping data (dev-friendly). create-drop \u2192 creates fresh schema on start, drops on shutdown (tests only). create \u2192 drop + create on each startup. validate \u2192 just checks schema matches entities; fails if not. B) SQL scripts (deterministic, app-driven) \u00b6 Put files in src/main/resources/ : schema.sql \u2192 runs first data.sql \u2192 runs after schema Example schema.sql : CREATE TABLE users ( id BIGINT PRIMARY KEY AUTO_INCREMENT , email VARCHAR ( 255 ) NOT NULL UNIQUE ); Example data.sql : INSERT INTO users ( email ) VALUES ( 'admin@example.com' ); Enable init: spring.jpa.hibernate.ddl-auto = none spring.sql.init.mode = always C) Database migrations (best for real projects) \u00b6 Use Flyway or Liquibase for versioned migrations. Flyway example (recommended): spring.jpa.hibernate.ddl-auto = none spring.flyway.enabled = true spring.flyway.locations = classpath:db/migration Place migrations in: src/main/resources/db/migration/V1__init.sql src/main/resources/db/migration/V2__add_orders.sql 4. Using DB users \u00b6 Use appuser/apppass (created by Docker setup) in application.properties . Don\u2019t use root for apps; keep root only for DB admin. If you add new users (e.g., reporter ), just switch the credentials. 5. Testing the connection \u00b6 Run docker compose ps \u2192 MySQL container must show as running. In Spring Boot logs you should see: HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect ... HikariPool-1 - Start completed. * Try a simple JPA repository or JDBC query to confirm. \u2705 With this config: Spring Boot talks to the MySQL container via localhost:3306 . You can decide whether JPA builds schema, you run SQL scripts, or Flyway manages migrations. Everything stays local, consistent, and reproducible. Spring Boot \u00d7 MySQL schema strategy cheatsheet \u00b6 TL;DR recommendation \u00b6 Dev (local): JPA update or Flyway Test (integration): create-drop (throwaway DB) or Flyway clean+migrate Prod: Flyway/Liquibase (versioned migrations). Avoid auto-DDL. Option A \u2014 JPA auto-DDL \u00b6 What: Hibernate creates/changes tables from your entities. Use when Fast local prototyping. Early-stage projects. Pros Zero SQL to write. Very quick iteration. Cons Not deterministic across environments. Risky in prod (unexpected alters/drops, subtle diffs). Key settings # application-dev.properties spring.jpa.hibernate.ddl-auto = update # dev-friendly spring.jpa.show-sql = true spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect # application-test.properties spring.jpa.hibernate.ddl-auto = create-drop # ephemeral DB for tests # application-prod.properties spring.jpa.hibernate.ddl-auto = validate # guardrails only Guardrails Never use create / create-drop in prod. Switch to validate before deploying. Option B \u2014 Spring SQL scripts ( schema.sql , data.sql ) \u00b6 What: Spring runs schema.sql then data.sql at startup. Use when You want deterministic startup without a migration tool. Simple apps or demos. Pros Clear order: schema \u2192 data. Easy to reason about. Cons No versioning/history out of the box. Harder to evolve schema over time. Key settings # disable Hibernate DDL; let SQL files run spring.jpa.hibernate.ddl-auto = none spring.sql.init.mode = always # or \"embedded\" (defaults for H2) spring.sql.init.encoding = UTF-8 File layout src/main/resources/schema.sql src/main/resources/data.sql Tip Make inserts idempotent when possible ( ON DUPLICATE KEY UPDATE ) so app restarts don\u2019t explode. Option C \u2014 Migrations (Flyway / Liquibase) \u2705 \u00b6 What: Versioned, incremental SQL (or YAML/XML) migrations, applied automatically. Use when Teamwork, CI/CD, multiple environments. Long-lived apps with auditable schema changes. Pros Deterministic & repeatable across envs. Easy rollback strategies (by version). Plays great with CI/CD. Cons Slightly more setup. Requires discipline (one migration per change). Flyway example spring.jpa.hibernate.ddl-auto = none spring.flyway.enabled = true spring.flyway.locations = classpath:db/migration # Optional but handy: # spring.flyway.clean-disabled=true # protect prod # spring.flyway.baseline-on-migrate=true # adopt existing DBs src/main/resources/db/migration/ \u251c\u2500 V1__init.sql \u251c\u2500 V2__add_orders.sql \u2514\u2500 V3__seed_lookup_data.sql Liquibase (alt) spring.jpa.hibernate.ddl-auto = none spring.liquibase.change-log = classpath:db/changelog/db.changelog-master.yaml Which to pick by environment \u00b6 Environment Recommended Why Dev (local) JPA update or Flyway Speed vs. discipline. Flyway mirrors prod behavior. Test (integration) create-drop or Flyway clean+migrate Fresh DB per run; predictable tests. Prod Flyway/Liquibase + ddl-auto=validate Versioned, controlled changes; fail fast on mismatches. Typical profile files (quick copy) \u00b6 application-dev.properties spring.datasource.url = jdbc:mysql://localhost:3306/appdb spring.datasource.username = appuser spring.datasource.password = apppass spring.jpa.hibernate.ddl-auto = update spring.jpa.show-sql = true spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect application-test.properties spring.datasource.url = jdbc:mysql://localhost:3306/appdb spring.datasource.username = appuser spring.datasource.password = apppass spring.jpa.hibernate.ddl-auto = create-drop spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect application-prod.properties spring.datasource.url = jdbc:mysql://localhost:3306/appdb spring.datasource.username = ${DB_USER} spring.datasource.password = ${DB_PASS} spring.jpa.hibernate.ddl-auto = validate spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect spring.flyway.enabled = true spring.flyway.locations = classpath:db/migration Common workflows \u00b6 Starting from scratch (solo dev) \u00b6 Begin with JPA update . When entities stabilize, generate SQL (from DB or JPA tools) and move to Flyway V1 . Set ddl-auto=validate , build new features with V2+, V3+ migrations. Team/CI from day 1 \u00b6 Start with Flyway . Every schema change = new Vx__description.sql . CI runs app \u2192 Flyway migrates \u2192 integration tests run. Troubleshooting tips \u00b6 Connection refused? Ensure Docker MySQL is up and mapped ( 3306:3306 ), and your URL matches the port. Timezone warnings? Add serverTimezone=UTC only if you use older drivers; with modern MySQL 8 + TZ set in the container, you typically don\u2019t need it. Access denied? Use app-level user (not root). Confirm grants and password. Migrations failing in prod? Enable baseline-on-migrate to adopt an existing DB; disable clean in prod. Quick decision helper \u00b6 Need speed today? \u2192 JPA update . Need consistency tomorrow? \u2192 Flyway/Liquibase. Need repeatable seeds for demos? \u2192 schema.sql + data.sql or Flyway with a V2__seed.sql .","title":"MySQL setup"},{"location":"cheatsheets/languages/java/spring/data/mysql/#spring-boot-mysql-running-in-docker","text":"\ud83d\udc49 Prereq: MySQL container is up (see [Docker setup link]).","title":"Spring Boot + MySQL (running in Docker)"},{"location":"cheatsheets/languages/java/spring/data/mysql/#1-add-mysql-driver","text":"Maven (pom.xml): <dependency> <groupId> com.mysql </groupId> <artifactId> mysql-connector-j </artifactId> </dependency> Gradle (build.gradle): implementation 'com.mysql:mysql-connector-j'","title":"1. Add MySQL driver"},{"location":"cheatsheets/languages/java/spring/data/mysql/#2-configure-datasource","text":"src/main/resources/application.properties spring.datasource.url = jdbc:mysql://localhost:3306/appdb spring.datasource.username = appuser spring.datasource.password = apppass spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver # Choose ONE ddl-auto option (see below) spring.jpa.hibernate.ddl-auto = update # Tells Hibernate which SQL dialect to use so it can generate the correct SQL syntax # (MySQL 8 has features and keywords not in older versions, so use MySQL8Dialect). spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect spring.jpa.show-sql = true # optional, for debugging Alternative (YAML): spring : datasource : url : jdbc:mysql://localhost:3306/appdb username : appuser password : apppass driver-class-name : com.mysql.cj.jdbc.Driver jpa : hibernate : ddl-auto : update # or validate/create-drop show-sql : true properties : hibernate : dialect : org.hibernate.dialect.MySQL8Dialect","title":"2. Configure datasource"},{"location":"cheatsheets/languages/java/spring/data/mysql/#3-schema-management-options","text":"Spring Boot can handle schema in several ways. Pick one strategy :","title":"3. Schema management options"},{"location":"cheatsheets/languages/java/spring/data/mysql/#a-jpa-auto-ddl-fast-dev","text":"spring.jpa.hibernate.ddl-auto = update update \u2192 tries to evolve schema without dropping data (dev-friendly). create-drop \u2192 creates fresh schema on start, drops on shutdown (tests only). create \u2192 drop + create on each startup. validate \u2192 just checks schema matches entities; fails if not.","title":"A) JPA auto-DDL (fast dev)"},{"location":"cheatsheets/languages/java/spring/data/mysql/#b-sql-scripts-deterministic-app-driven","text":"Put files in src/main/resources/ : schema.sql \u2192 runs first data.sql \u2192 runs after schema Example schema.sql : CREATE TABLE users ( id BIGINT PRIMARY KEY AUTO_INCREMENT , email VARCHAR ( 255 ) NOT NULL UNIQUE ); Example data.sql : INSERT INTO users ( email ) VALUES ( 'admin@example.com' ); Enable init: spring.jpa.hibernate.ddl-auto = none spring.sql.init.mode = always","title":"B) SQL scripts (deterministic, app-driven)"},{"location":"cheatsheets/languages/java/spring/data/mysql/#c-database-migrations-best-for-real-projects","text":"Use Flyway or Liquibase for versioned migrations. Flyway example (recommended): spring.jpa.hibernate.ddl-auto = none spring.flyway.enabled = true spring.flyway.locations = classpath:db/migration Place migrations in: src/main/resources/db/migration/V1__init.sql src/main/resources/db/migration/V2__add_orders.sql","title":"C) Database migrations (best for real projects)"},{"location":"cheatsheets/languages/java/spring/data/mysql/#4-using-db-users","text":"Use appuser/apppass (created by Docker setup) in application.properties . Don\u2019t use root for apps; keep root only for DB admin. If you add new users (e.g., reporter ), just switch the credentials.","title":"4. Using DB users"},{"location":"cheatsheets/languages/java/spring/data/mysql/#5-testing-the-connection","text":"Run docker compose ps \u2192 MySQL container must show as running. In Spring Boot logs you should see: HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect ... HikariPool-1 - Start completed. * Try a simple JPA repository or JDBC query to confirm. \u2705 With this config: Spring Boot talks to the MySQL container via localhost:3306 . You can decide whether JPA builds schema, you run SQL scripts, or Flyway manages migrations. Everything stays local, consistent, and reproducible.","title":"5. Testing the connection"},{"location":"cheatsheets/languages/java/spring/data/mysql/#spring-boot-mysql-schema-strategy-cheatsheet","text":"","title":"Spring Boot \u00d7 MySQL schema strategy cheatsheet"},{"location":"cheatsheets/languages/java/spring/data/mysql/#tldr-recommendation","text":"Dev (local): JPA update or Flyway Test (integration): create-drop (throwaway DB) or Flyway clean+migrate Prod: Flyway/Liquibase (versioned migrations). Avoid auto-DDL.","title":"TL;DR recommendation"},{"location":"cheatsheets/languages/java/spring/data/mysql/#option-a-jpa-auto-ddl","text":"What: Hibernate creates/changes tables from your entities. Use when Fast local prototyping. Early-stage projects. Pros Zero SQL to write. Very quick iteration. Cons Not deterministic across environments. Risky in prod (unexpected alters/drops, subtle diffs). Key settings # application-dev.properties spring.jpa.hibernate.ddl-auto = update # dev-friendly spring.jpa.show-sql = true spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect # application-test.properties spring.jpa.hibernate.ddl-auto = create-drop # ephemeral DB for tests # application-prod.properties spring.jpa.hibernate.ddl-auto = validate # guardrails only Guardrails Never use create / create-drop in prod. Switch to validate before deploying.","title":"Option A \u2014 JPA auto-DDL"},{"location":"cheatsheets/languages/java/spring/data/mysql/#option-b-spring-sql-scripts-schemasql-datasql","text":"What: Spring runs schema.sql then data.sql at startup. Use when You want deterministic startup without a migration tool. Simple apps or demos. Pros Clear order: schema \u2192 data. Easy to reason about. Cons No versioning/history out of the box. Harder to evolve schema over time. Key settings # disable Hibernate DDL; let SQL files run spring.jpa.hibernate.ddl-auto = none spring.sql.init.mode = always # or \"embedded\" (defaults for H2) spring.sql.init.encoding = UTF-8 File layout src/main/resources/schema.sql src/main/resources/data.sql Tip Make inserts idempotent when possible ( ON DUPLICATE KEY UPDATE ) so app restarts don\u2019t explode.","title":"Option B \u2014 Spring SQL scripts (schema.sql, data.sql)"},{"location":"cheatsheets/languages/java/spring/data/mysql/#option-c-migrations-flyway-liquibase","text":"What: Versioned, incremental SQL (or YAML/XML) migrations, applied automatically. Use when Teamwork, CI/CD, multiple environments. Long-lived apps with auditable schema changes. Pros Deterministic & repeatable across envs. Easy rollback strategies (by version). Plays great with CI/CD. Cons Slightly more setup. Requires discipline (one migration per change). Flyway example spring.jpa.hibernate.ddl-auto = none spring.flyway.enabled = true spring.flyway.locations = classpath:db/migration # Optional but handy: # spring.flyway.clean-disabled=true # protect prod # spring.flyway.baseline-on-migrate=true # adopt existing DBs src/main/resources/db/migration/ \u251c\u2500 V1__init.sql \u251c\u2500 V2__add_orders.sql \u2514\u2500 V3__seed_lookup_data.sql Liquibase (alt) spring.jpa.hibernate.ddl-auto = none spring.liquibase.change-log = classpath:db/changelog/db.changelog-master.yaml","title":"Option C \u2014 Migrations (Flyway / Liquibase) \u2705"},{"location":"cheatsheets/languages/java/spring/data/mysql/#which-to-pick-by-environment","text":"Environment Recommended Why Dev (local) JPA update or Flyway Speed vs. discipline. Flyway mirrors prod behavior. Test (integration) create-drop or Flyway clean+migrate Fresh DB per run; predictable tests. Prod Flyway/Liquibase + ddl-auto=validate Versioned, controlled changes; fail fast on mismatches.","title":"Which to pick by environment"},{"location":"cheatsheets/languages/java/spring/data/mysql/#typical-profile-files-quick-copy","text":"application-dev.properties spring.datasource.url = jdbc:mysql://localhost:3306/appdb spring.datasource.username = appuser spring.datasource.password = apppass spring.jpa.hibernate.ddl-auto = update spring.jpa.show-sql = true spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect application-test.properties spring.datasource.url = jdbc:mysql://localhost:3306/appdb spring.datasource.username = appuser spring.datasource.password = apppass spring.jpa.hibernate.ddl-auto = create-drop spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect application-prod.properties spring.datasource.url = jdbc:mysql://localhost:3306/appdb spring.datasource.username = ${DB_USER} spring.datasource.password = ${DB_PASS} spring.jpa.hibernate.ddl-auto = validate spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect spring.flyway.enabled = true spring.flyway.locations = classpath:db/migration","title":"Typical profile files (quick copy)"},{"location":"cheatsheets/languages/java/spring/data/mysql/#common-workflows","text":"","title":"Common workflows"},{"location":"cheatsheets/languages/java/spring/data/mysql/#starting-from-scratch-solo-dev","text":"Begin with JPA update . When entities stabilize, generate SQL (from DB or JPA tools) and move to Flyway V1 . Set ddl-auto=validate , build new features with V2+, V3+ migrations.","title":"Starting from scratch (solo dev)"},{"location":"cheatsheets/languages/java/spring/data/mysql/#teamci-from-day-1","text":"Start with Flyway . Every schema change = new Vx__description.sql . CI runs app \u2192 Flyway migrates \u2192 integration tests run.","title":"Team/CI from day 1"},{"location":"cheatsheets/languages/java/spring/data/mysql/#troubleshooting-tips","text":"Connection refused? Ensure Docker MySQL is up and mapped ( 3306:3306 ), and your URL matches the port. Timezone warnings? Add serverTimezone=UTC only if you use older drivers; with modern MySQL 8 + TZ set in the container, you typically don\u2019t need it. Access denied? Use app-level user (not root). Confirm grants and password. Migrations failing in prod? Enable baseline-on-migrate to adopt an existing DB; disable clean in prod.","title":"Troubleshooting tips"},{"location":"cheatsheets/languages/java/spring/data/mysql/#quick-decision-helper","text":"Need speed today? \u2192 JPA update . Need consistency tomorrow? \u2192 Flyway/Liquibase. Need repeatable seeds for demos? \u2192 schema.sql + data.sql or Flyway with a V2__seed.sql .","title":"Quick decision helper"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/","text":"\ud83d\udcdd Minimal Java/Spring Core Flow (with Examples) \u00b6 \u2705 REST basics \u00b6 @RestController @RequestMapping ( \"/api/hello\" ) public class HelloController { @GetMapping public String sayHello () { return \"Hello, World!\" ; } } \u2705 DTOs (use instead of Entities for I/O) \u00b6 // Input DTO with validation public record UserDto ( @NotBlank String name , @Email String email ) {} // In controller @PostMapping ( \"/users\" ) public UserDto createUser ( @Valid @RequestBody UserDto dto ) { return dto ; // later convert to Entity, save, return response DTO } \ud83d\udc49 Note: Use DTOs for input validation and API responses . Don\u2019t expose Entities directly \u2014 keep Entities for persistence logic only. \ud83d\udc49 Why DTOs instead of Entities for input/return? Entities = your database model (tables, persistence rules). DTOs (Data Transfer Objects) = what you expose to the outside world (API requests & responses). Why not use entities directly? \u00b6 Security \u2192 prevents exposing internal DB fields (e.g. passwords, IDs). Flexibility \u2192 API contract can evolve without breaking your DB schema. Validation \u2192 DTOs are designed for request/response shape, so they fit @Valid checks. Separation of concerns \u2192 Entities = persistence, DTOs = communication. Keeps your code cleaner. Typical pattern \u00b6 Incoming request : DTO with @Valid (only the fields you expect from client). Service layer : Map DTO \u2192 Entity, persist. Outgoing response : DTO again (so you don\u2019t return raw Entity). \u2705 Service + Dependency Injection \u00b6 @Service public class UserService { public String welcomeUser ( String name ) { return \"Welcome, \" + name ; } } @RestController @RequiredArgsConstructor @RequestMapping ( \"/api/users\" ) public class UserController { private final UserService userService ; @GetMapping ( \"/{name}\" ) public String welcome ( @PathVariable String name ) { return userService . welcomeUser ( name ); } } \u2705 Entity + Repository \u00b6 @Entity public class User { @Id @GeneratedValue private Long id ; @Column ( nullable = false ) private String name ; private String email ; } public interface UserRepository extends JpaRepository < User , Long > {} \u2705 application.yml \u00b6 spring : datasource : url : jdbc:h2:mem:testdb driver-class-name : org.h2.Driver username : sa password : jpa : hibernate : ddl-auto : update show-sql : true \u2705 JUnit Test \u00b6 @SpringBootTest class UserServiceTest { @Autowired private UserService service ; @Test void testWelcomeUser () { assertEquals ( \"Welcome, Alice\" , service . welcomeUser ( \"Alice\" )); } } \u2705 Running \u00b6 ./gradlew bootRun ./gradlew test \ud83d\udc49 Muscle-memory loop: Controller \u2192 DTO ( @Valid ) Service \u2192 business logic Entity + Repo \u2192 persistence Return response DTO Config in application.yml One test + run \ud83d\udce6 Product Inventory \u2013 Example (Java + Spring Boot) \u00b6 here\u2019s a broader, realistic example that shows: an Entity with more fields, DTOs for input/output with validation, a Service layer with business rules, a Repository and Controller , plus a tiny mapper . Domain: simple Product inventory. 1) Entity (persistence model) \u00b6 // src/main/java/com/example/product/Product.java package com.example.product ; import jakarta.persistence.* ; import java.time.Instant ; @Entity @Table ( name = \"products\" , indexes = { @Index ( name = \"idx_products_sku_unique\" , columnList = \"sku\" , unique = true ) }) public class Product { public enum Status { DRAFT , ACTIVE , DISCONTINUED } @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) private Long id ; @Column ( nullable = false , length = 64 , unique = true ) private String sku ; // business key, unique @Column ( nullable = false , length = 160 ) private String name ; @Column ( length = 2000 ) private String description ; @Column ( nullable = false ) private Long priceCents ; // store money as integer @Column ( nullable = false , length = 3 ) private String currency ; // \"EUR\", \"USD\" @Column ( nullable = false ) private Integer stock ; // >= 0 @Enumerated ( EnumType . STRING ) @Column ( nullable = false , length = 20 ) private Status status = Status . DRAFT ; @Column ( nullable = false , updatable = false ) private Instant createdAt ; @Column ( nullable = false ) private Instant updatedAt ; @PrePersist void prePersist () { var now = Instant . now (); createdAt = now ; updatedAt = now ; } @PreUpdate void preUpdate () { updatedAt = Instant . now (); } // getters/setters omitted for brevity // ... } Note: we keep entity constraints mostly DB-related (nullability, lengths, uniqueness). Validation annotations for requests live on DTOs . 2) DTOs (request/response) + validation \u00b6 // src/main/java/com/example/product/dto/ProductCreateDto.java package com.example.product.dto ; import jakarta.validation.constraints.* ; public record ProductCreateDto ( @NotBlank @Size ( max = 64 ) String sku , @NotBlank @Size ( max = 160 ) String name , @Size ( max = 2000 ) String description , @NotNull @Positive Long priceCents , @NotBlank @Pattern ( regexp = \"^[A-Z]{3}$\" , message = \"Use ISO currency like EUR/USD\" ) String currency , @NotNull @PositiveOrZero Integer stock ) {} // src/main/java/com/example/product/dto/ProductUpdateDto.java package com.example.product.dto ; import jakarta.validation.constraints.* ; import com.example.product.Product.Status ; public record ProductUpdateDto ( @Size ( max = 160 ) String name , @Size ( max = 2000 ) String description , @Positive Long priceCents , @Pattern ( regexp = \"^[A-Z]{3}$\" ) String currency , @PositiveOrZero Integer stock , Status status ) {} // src/main/java/com/example/product/dto/ProductResponseDto.java package com.example.product.dto ; import java.time.Instant ; import com.example.product.Product.Status ; public record ProductResponseDto ( Long id , String sku , String name , String description , Long priceCents , String currency , Integer stock , Status status , Instant createdAt , Instant updatedAt ) {} 3) Mapper (Entity \u2194 DTO) \u00b6 // src/main/java/com/example/product/ProductMapper.java package com.example.product ; import com.example.product.dto.* ; public class ProductMapper { public static Product toEntity ( ProductCreateDto dto ) { var p = new Product (); p . setSku ( dto . sku (). trim ()); p . setName ( dto . name (). trim ()); p . setDescription ( dto . description ()); p . setPriceCents ( dto . priceCents ()); p . setCurrency ( dto . currency ()); p . setStock ( dto . stock ()); p . setStatus ( Product . Status . DRAFT ); return p ; } public static void applyUpdate ( Product p , ProductUpdateDto dto ) { if ( dto . name () != null ) p . setName ( dto . name (). trim ()); if ( dto . description () != null ) p . setDescription ( dto . description ()); if ( dto . priceCents () != null ) p . setPriceCents ( dto . priceCents ()); if ( dto . currency () != null ) p . setCurrency ( dto . currency ()); if ( dto . stock () != null ) p . setStock ( dto . stock ()); if ( dto . status () != null ) p . setStatus ( dto . status ()); } public static ProductResponseDto toResponse ( Product p ) { return new ProductResponseDto ( p . getId (), p . getSku (), p . getName (), p . getDescription (), p . getPriceCents (), p . getCurrency (), p . getStock (), p . getStatus (), p . getCreatedAt (), p . getUpdatedAt () ); } } 4) Repository \u00b6 // src/main/java/com/example/product/ProductRepository.java package com.example.product ; import org.springframework.data.jpa.repository.JpaRepository ; import java.util.Optional ; public interface ProductRepository extends JpaRepository < Product , Long > { Optional < Product > findBySku ( String sku ); boolean existsBySku ( String sku ); } 5) Service (business rules) \u00b6 // src/main/java/com/example/product/ProductService.java package com.example.product ; import com.example.product.dto.* ; import jakarta.transaction.Transactional ; import lombok.RequiredArgsConstructor ; import org.springframework.stereotype.Service ; @Service @RequiredArgsConstructor public class ProductService { private final ProductRepository repo ; @Transactional public ProductResponseDto create ( ProductCreateDto dto ) { // business rule: SKU must be unique if ( repo . existsBySku ( dto . sku ())) { throw new IllegalArgumentException ( \"SKU already exists: \" + dto . sku ()); } // business rule: enforce EUR only (example) if ( ! \"EUR\" . equals ( dto . currency ())) { throw new IllegalArgumentException ( \"Only EUR supported for now.\" ); } var entity = ProductMapper . toEntity ( dto ); // business rule: newly created ACTIVE products must have stock > 0 // (we start as DRAFT; activate via update when ready) var saved = repo . save ( entity ); return ProductMapper . toResponse ( saved ); } @Transactional public ProductResponseDto update ( Long id , ProductUpdateDto dto ) { var product = repo . findById ( id ). orElseThrow (() -> new IllegalArgumentException ( \"Product not found\" )); // business rule: stock cannot be negative if ( dto . stock () != null && dto . stock () < 0 ) { throw new IllegalArgumentException ( \"Stock cannot be negative\" ); } // business rule: if switching to ACTIVE, ensure stock > 0 and has price if ( dto . status () == Product . Status . ACTIVE ) { var newStock = dto . stock () != null ? dto . stock () : product . getStock (); var newPrice = dto . priceCents () != null ? dto . priceCents () : product . getPriceCents (); if ( newStock == null || newStock <= 0 ) throw new IllegalArgumentException ( \"ACTIVE requires stock > 0\" ); if ( newPrice == null || newPrice <= 0 ) throw new IllegalArgumentException ( \"ACTIVE requires price > 0\" ); } ProductMapper . applyUpdate ( product , dto ); var saved = repo . save ( product ); return ProductMapper . toResponse ( saved ); } public ProductResponseDto getById ( Long id ) { return repo . findById ( id ) . map ( ProductMapper :: toResponse ) . orElseThrow (() -> new IllegalArgumentException ( \"Product not found\" )); } } 6) Controller \u00b6 // src/main/java/com/example/product/ProductController.java package com.example.product ; import com.example.product.dto.* ; import jakarta.validation.Valid ; import lombok.RequiredArgsConstructor ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.* ; @RestController @RequestMapping ( \"/api/products\" ) @RequiredArgsConstructor public class ProductController { private final ProductService service ; @PostMapping public ResponseEntity < ProductResponseDto > create ( @Valid @RequestBody ProductCreateDto dto ) { return ResponseEntity . ok ( service . create ( dto )); } @PatchMapping ( \"/{id}\" ) public ResponseEntity < ProductResponseDto > update ( @PathVariable Long id , @Valid @RequestBody ProductUpdateDto dto ) { return ResponseEntity . ok ( service . update ( id , dto )); } @GetMapping ( \"/{id}\" ) public ResponseEntity < ProductResponseDto > get ( @PathVariable Long id ) { return ResponseEntity . ok ( service . getById ( id )); } } 7) Basic config for quick runs \u00b6 # src/main/resources/application.yml spring : datasource : url : jdbc:h2:mem:demo;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH driver-class-name : org.h2.Driver username : sa password : jpa : hibernate : ddl-auto : update show-sql : true jackson : serialization : WRITE_DATES_AS_TIMESTAMPS : false 8) Minimal test (service) \u00b6 // src/test/java/com/example/product/ProductServiceTest.java package com.example.product ; import com.example.product.dto.ProductCreateDto ; import org.junit.jupiter.api.Test ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import static org.junit.jupiter.api.Assertions.* ; @SpringBootTest class ProductServiceTest { @Autowired ProductService service ; @Test void create_ok () { var dto = new ProductCreateDto ( \"SKU-123\" , \"Mouse\" , \"Ergonomic\" , 2999L , \"EUR\" , 10 ); var res = service . create ( dto ); assertNotNull ( res . id ()); assertEquals ( \"SKU-123\" , res . sku ()); assertEquals ( 10 , res . stock ()); } } \ud83d\udd11 Key takeaways (tie back to your note) \u00b6 Use DTOs for input ( @Valid ) and output; keep Entities internal to persistence. Service layer = place for business rules (unique SKU, currency support, state transitions). Entity holds DB-focused constraints; DTO holds request/response validation. If you can wire: Controller \u2192 DTO \u2192 Service \u2192 Repo/Entity \u2192 Response DTO , plus application.yml and one test , you\u2019ve hit the muscle-memory loop.","title":"Core Flow"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#minimal-javaspring-core-flow-with-examples","text":"","title":"\ud83d\udcdd Minimal Java/Spring Core Flow (with Examples)"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#rest-basics","text":"@RestController @RequestMapping ( \"/api/hello\" ) public class HelloController { @GetMapping public String sayHello () { return \"Hello, World!\" ; } }","title":"\u2705 REST basics"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#dtos-use-instead-of-entities-for-io","text":"// Input DTO with validation public record UserDto ( @NotBlank String name , @Email String email ) {} // In controller @PostMapping ( \"/users\" ) public UserDto createUser ( @Valid @RequestBody UserDto dto ) { return dto ; // later convert to Entity, save, return response DTO } \ud83d\udc49 Note: Use DTOs for input validation and API responses . Don\u2019t expose Entities directly \u2014 keep Entities for persistence logic only. \ud83d\udc49 Why DTOs instead of Entities for input/return? Entities = your database model (tables, persistence rules). DTOs (Data Transfer Objects) = what you expose to the outside world (API requests & responses).","title":"\u2705 DTOs (use instead of Entities for I/O)"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#why-not-use-entities-directly","text":"Security \u2192 prevents exposing internal DB fields (e.g. passwords, IDs). Flexibility \u2192 API contract can evolve without breaking your DB schema. Validation \u2192 DTOs are designed for request/response shape, so they fit @Valid checks. Separation of concerns \u2192 Entities = persistence, DTOs = communication. Keeps your code cleaner.","title":"Why not use entities directly?"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#typical-pattern","text":"Incoming request : DTO with @Valid (only the fields you expect from client). Service layer : Map DTO \u2192 Entity, persist. Outgoing response : DTO again (so you don\u2019t return raw Entity).","title":"Typical pattern"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#service-dependency-injection","text":"@Service public class UserService { public String welcomeUser ( String name ) { return \"Welcome, \" + name ; } } @RestController @RequiredArgsConstructor @RequestMapping ( \"/api/users\" ) public class UserController { private final UserService userService ; @GetMapping ( \"/{name}\" ) public String welcome ( @PathVariable String name ) { return userService . welcomeUser ( name ); } }","title":"\u2705 Service + Dependency Injection"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#entity-repository","text":"@Entity public class User { @Id @GeneratedValue private Long id ; @Column ( nullable = false ) private String name ; private String email ; } public interface UserRepository extends JpaRepository < User , Long > {}","title":"\u2705 Entity + Repository"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#applicationyml","text":"spring : datasource : url : jdbc:h2:mem:testdb driver-class-name : org.h2.Driver username : sa password : jpa : hibernate : ddl-auto : update show-sql : true","title":"\u2705 application.yml"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#junit-test","text":"@SpringBootTest class UserServiceTest { @Autowired private UserService service ; @Test void testWelcomeUser () { assertEquals ( \"Welcome, Alice\" , service . welcomeUser ( \"Alice\" )); } }","title":"\u2705 JUnit Test"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#running","text":"./gradlew bootRun ./gradlew test \ud83d\udc49 Muscle-memory loop: Controller \u2192 DTO ( @Valid ) Service \u2192 business logic Entity + Repo \u2192 persistence Return response DTO Config in application.yml One test + run","title":"\u2705 Running"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#product-inventory-example-java-spring-boot","text":"here\u2019s a broader, realistic example that shows: an Entity with more fields, DTOs for input/output with validation, a Service layer with business rules, a Repository and Controller , plus a tiny mapper . Domain: simple Product inventory.","title":"\ud83d\udce6 Product Inventory \u2013 Example (Java + Spring Boot)"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#1-entity-persistence-model","text":"// src/main/java/com/example/product/Product.java package com.example.product ; import jakarta.persistence.* ; import java.time.Instant ; @Entity @Table ( name = \"products\" , indexes = { @Index ( name = \"idx_products_sku_unique\" , columnList = \"sku\" , unique = true ) }) public class Product { public enum Status { DRAFT , ACTIVE , DISCONTINUED } @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) private Long id ; @Column ( nullable = false , length = 64 , unique = true ) private String sku ; // business key, unique @Column ( nullable = false , length = 160 ) private String name ; @Column ( length = 2000 ) private String description ; @Column ( nullable = false ) private Long priceCents ; // store money as integer @Column ( nullable = false , length = 3 ) private String currency ; // \"EUR\", \"USD\" @Column ( nullable = false ) private Integer stock ; // >= 0 @Enumerated ( EnumType . STRING ) @Column ( nullable = false , length = 20 ) private Status status = Status . DRAFT ; @Column ( nullable = false , updatable = false ) private Instant createdAt ; @Column ( nullable = false ) private Instant updatedAt ; @PrePersist void prePersist () { var now = Instant . now (); createdAt = now ; updatedAt = now ; } @PreUpdate void preUpdate () { updatedAt = Instant . now (); } // getters/setters omitted for brevity // ... } Note: we keep entity constraints mostly DB-related (nullability, lengths, uniqueness). Validation annotations for requests live on DTOs .","title":"1) Entity (persistence model)"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#2-dtos-requestresponse-validation","text":"// src/main/java/com/example/product/dto/ProductCreateDto.java package com.example.product.dto ; import jakarta.validation.constraints.* ; public record ProductCreateDto ( @NotBlank @Size ( max = 64 ) String sku , @NotBlank @Size ( max = 160 ) String name , @Size ( max = 2000 ) String description , @NotNull @Positive Long priceCents , @NotBlank @Pattern ( regexp = \"^[A-Z]{3}$\" , message = \"Use ISO currency like EUR/USD\" ) String currency , @NotNull @PositiveOrZero Integer stock ) {} // src/main/java/com/example/product/dto/ProductUpdateDto.java package com.example.product.dto ; import jakarta.validation.constraints.* ; import com.example.product.Product.Status ; public record ProductUpdateDto ( @Size ( max = 160 ) String name , @Size ( max = 2000 ) String description , @Positive Long priceCents , @Pattern ( regexp = \"^[A-Z]{3}$\" ) String currency , @PositiveOrZero Integer stock , Status status ) {} // src/main/java/com/example/product/dto/ProductResponseDto.java package com.example.product.dto ; import java.time.Instant ; import com.example.product.Product.Status ; public record ProductResponseDto ( Long id , String sku , String name , String description , Long priceCents , String currency , Integer stock , Status status , Instant createdAt , Instant updatedAt ) {}","title":"2) DTOs (request/response) + validation"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#3-mapper-entity-dto","text":"// src/main/java/com/example/product/ProductMapper.java package com.example.product ; import com.example.product.dto.* ; public class ProductMapper { public static Product toEntity ( ProductCreateDto dto ) { var p = new Product (); p . setSku ( dto . sku (). trim ()); p . setName ( dto . name (). trim ()); p . setDescription ( dto . description ()); p . setPriceCents ( dto . priceCents ()); p . setCurrency ( dto . currency ()); p . setStock ( dto . stock ()); p . setStatus ( Product . Status . DRAFT ); return p ; } public static void applyUpdate ( Product p , ProductUpdateDto dto ) { if ( dto . name () != null ) p . setName ( dto . name (). trim ()); if ( dto . description () != null ) p . setDescription ( dto . description ()); if ( dto . priceCents () != null ) p . setPriceCents ( dto . priceCents ()); if ( dto . currency () != null ) p . setCurrency ( dto . currency ()); if ( dto . stock () != null ) p . setStock ( dto . stock ()); if ( dto . status () != null ) p . setStatus ( dto . status ()); } public static ProductResponseDto toResponse ( Product p ) { return new ProductResponseDto ( p . getId (), p . getSku (), p . getName (), p . getDescription (), p . getPriceCents (), p . getCurrency (), p . getStock (), p . getStatus (), p . getCreatedAt (), p . getUpdatedAt () ); } }","title":"3) Mapper (Entity \u2194 DTO)"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#4-repository","text":"// src/main/java/com/example/product/ProductRepository.java package com.example.product ; import org.springframework.data.jpa.repository.JpaRepository ; import java.util.Optional ; public interface ProductRepository extends JpaRepository < Product , Long > { Optional < Product > findBySku ( String sku ); boolean existsBySku ( String sku ); }","title":"4) Repository"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#5-service-business-rules","text":"// src/main/java/com/example/product/ProductService.java package com.example.product ; import com.example.product.dto.* ; import jakarta.transaction.Transactional ; import lombok.RequiredArgsConstructor ; import org.springframework.stereotype.Service ; @Service @RequiredArgsConstructor public class ProductService { private final ProductRepository repo ; @Transactional public ProductResponseDto create ( ProductCreateDto dto ) { // business rule: SKU must be unique if ( repo . existsBySku ( dto . sku ())) { throw new IllegalArgumentException ( \"SKU already exists: \" + dto . sku ()); } // business rule: enforce EUR only (example) if ( ! \"EUR\" . equals ( dto . currency ())) { throw new IllegalArgumentException ( \"Only EUR supported for now.\" ); } var entity = ProductMapper . toEntity ( dto ); // business rule: newly created ACTIVE products must have stock > 0 // (we start as DRAFT; activate via update when ready) var saved = repo . save ( entity ); return ProductMapper . toResponse ( saved ); } @Transactional public ProductResponseDto update ( Long id , ProductUpdateDto dto ) { var product = repo . findById ( id ). orElseThrow (() -> new IllegalArgumentException ( \"Product not found\" )); // business rule: stock cannot be negative if ( dto . stock () != null && dto . stock () < 0 ) { throw new IllegalArgumentException ( \"Stock cannot be negative\" ); } // business rule: if switching to ACTIVE, ensure stock > 0 and has price if ( dto . status () == Product . Status . ACTIVE ) { var newStock = dto . stock () != null ? dto . stock () : product . getStock (); var newPrice = dto . priceCents () != null ? dto . priceCents () : product . getPriceCents (); if ( newStock == null || newStock <= 0 ) throw new IllegalArgumentException ( \"ACTIVE requires stock > 0\" ); if ( newPrice == null || newPrice <= 0 ) throw new IllegalArgumentException ( \"ACTIVE requires price > 0\" ); } ProductMapper . applyUpdate ( product , dto ); var saved = repo . save ( product ); return ProductMapper . toResponse ( saved ); } public ProductResponseDto getById ( Long id ) { return repo . findById ( id ) . map ( ProductMapper :: toResponse ) . orElseThrow (() -> new IllegalArgumentException ( \"Product not found\" )); } }","title":"5) Service (business rules)"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#6-controller","text":"// src/main/java/com/example/product/ProductController.java package com.example.product ; import com.example.product.dto.* ; import jakarta.validation.Valid ; import lombok.RequiredArgsConstructor ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.* ; @RestController @RequestMapping ( \"/api/products\" ) @RequiredArgsConstructor public class ProductController { private final ProductService service ; @PostMapping public ResponseEntity < ProductResponseDto > create ( @Valid @RequestBody ProductCreateDto dto ) { return ResponseEntity . ok ( service . create ( dto )); } @PatchMapping ( \"/{id}\" ) public ResponseEntity < ProductResponseDto > update ( @PathVariable Long id , @Valid @RequestBody ProductUpdateDto dto ) { return ResponseEntity . ok ( service . update ( id , dto )); } @GetMapping ( \"/{id}\" ) public ResponseEntity < ProductResponseDto > get ( @PathVariable Long id ) { return ResponseEntity . ok ( service . getById ( id )); } }","title":"6) Controller"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#7-basic-config-for-quick-runs","text":"# src/main/resources/application.yml spring : datasource : url : jdbc:h2:mem:demo;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH driver-class-name : org.h2.Driver username : sa password : jpa : hibernate : ddl-auto : update show-sql : true jackson : serialization : WRITE_DATES_AS_TIMESTAMPS : false","title":"7) Basic config for quick runs"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#8-minimal-test-service","text":"// src/test/java/com/example/product/ProductServiceTest.java package com.example.product ; import com.example.product.dto.ProductCreateDto ; import org.junit.jupiter.api.Test ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.test.context.SpringBootTest ; import static org.junit.jupiter.api.Assertions.* ; @SpringBootTest class ProductServiceTest { @Autowired ProductService service ; @Test void create_ok () { var dto = new ProductCreateDto ( \"SKU-123\" , \"Mouse\" , \"Ergonomic\" , 2999L , \"EUR\" , 10 ); var res = service . create ( dto ); assertNotNull ( res . id ()); assertEquals ( \"SKU-123\" , res . sku ()); assertEquals ( 10 , res . stock ()); } }","title":"8) Minimal test (service)"},{"location":"cheatsheets/languages/java/spring/layers/core-flow/#key-takeaways-tie-back-to-your-note","text":"Use DTOs for input ( @Valid ) and output; keep Entities internal to persistence. Service layer = place for business rules (unique SKU, currency support, state transitions). Entity holds DB-focused constraints; DTO holds request/response validation. If you can wire: Controller \u2192 DTO \u2192 Service \u2192 Repo/Entity \u2192 Response DTO , plus application.yml and one test , you\u2019ve hit the muscle-memory loop.","title":"\ud83d\udd11 Key takeaways (tie back to your note)"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/","text":"\ud83e\udde9 Spring Boot \u2014 DTOs vs Entities Cheatsheet \u00b6 Essence: Entities are your persistence model (database schema). DTOs (Data Transfer Objects) are your API model (request/response contracts). Mixing them leads to fragile APIs, security leaks, and serialization pain. \ud83d\udd11 Core Distinction \u00b6 Aspect Entity DTO Purpose Persistence (DB schema) API request/response Managed by JPA/Hibernate Jackson / Validation Contains IDs, relationships, DB constraints only fields relevant to API Annotations @Entity , @Table , @Column @NotBlank , @Email , etc. Visibility Internal Public Evolution DB-driven Client-driven Remember: Jackson annotations \u2260 DTOs. They\u2019re formatting tools, not boundary definitions. \ud83d\udeab When You Can Skip DTOs \u00b6 You can temporarily skip DTOs if: - The app is small and internal. - Entities are flat (no relations, no sensitive fields). - You accept API/DB coupling risk. But even then: - Use @JsonIgnore for sensitive data. - Handle cycles ( @JsonManagedReference / @JsonBackReference ). - Expect refactoring later when complexity grows. \u2705 Why You Should Use DTOs \u00b6 Security: Prevent leaking internal fields (e.g., password , isAdmin , audit data). Stability: Entities evolve freely while DTOs keep a stable public API. Validation: Add @NotBlank , @Email , etc. for request validation. Flexibility: Tailor different DTOs per endpoint (don\u2019t reuse everything). Performance: Avoid lazy-loading cycles or massive entity graphs. Versioning: Create v2 DTOs without breaking clients. \ud83e\uddf1 Example: Contact Entity + DTOs \u00b6 @Entity @Table ( name = \"contacts\" ) public class Contact { @Id @GeneratedValue ( strategy = GenerationType . UUID ) private String id ; private String name ; private String email ; private String photoUrl ; // Never expose this! private String password ; } Request DTOs \u00b6 public record CreateContactRequest ( @NotBlank String name , @Email String email , String photoUrl , @NotBlank String password ) {} public record UpdateContactRequest ( String name , @Email String email , String photoUrl , String password ) {} Response DTO \u00b6 public record ContactResponse ( String id , String name , String email , String photoUrl ) {} \ud83d\udd01 Mapping Strategies (Entity \u2194 DTO) \u00b6 Mapping = the glue between persistence and API layers. Several approaches exist \u2014 pick one main strategy. 1. MapStruct (recommended for production) \u00b6 Fast, compile-time, explicit. @Mapper ( componentModel = \"spring\" ) public interface ContactMapper { @Mapping ( target = \"id\" , ignore = true ) Contact toEntity ( CreateContactRequest req ); @BeanMapping ( nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy . IGNORE ) void updateEntity ( UpdateContactRequest req , @MappingTarget Contact target ); ContactResponse toResponse ( Contact entity ); } Service example: @Service @RequiredArgsConstructor public class ContactService { private final ContactRepository repo ; private final ContactMapper mapper ; private final PasswordEncoder encoder ; public ContactResponse create ( CreateContactRequest req ) { Contact c = mapper . toEntity ( req ); c . setPassword ( encoder . encode ( req . password ())); return mapper . toResponse ( repo . save ( c )); } public ContactResponse update ( String id , UpdateContactRequest req ) { Contact c = repo . findById ( id ). orElseThrow (); mapper . updateEntity ( req , c ); if ( req . password () != null && ! req . password (). isBlank ()) { c . setPassword ( encoder . encode ( req . password ())); } return mapper . toResponse ( repo . save ( c )); } } 2. ModelMapper (fast prototyping) \u00b6 Reflection-based, minimal setup, slower. @Configuration public class ModelMapperConfig { @Bean public ModelMapper modelMapper () { ModelMapper mm = new ModelMapper (); mm . getConfiguration (). setPropertyCondition ( Conditions . isNotNull ()); return mm ; } } Usage: Contact c = modelMapper . map ( req , Contact . class ); ContactResponse dto = modelMapper . map ( entity , ContactResponse . class ); Pros: zero boilerplate. Cons: less control, easy to miss subtle mismatches. 3. Manual Mapping (small apps) \u00b6 Ultimate control, no dependencies. @Component public class ContactMapper { public Contact toEntity ( CreateContactRequest req ) { Contact c = new Contact (); c . setName ( req . name ()); c . setEmail ( req . email ()); c . setPhotoUrl ( req . photoUrl ()); c . setPassword ( req . password ()); return c ; } public void applyUpdate ( UpdateContactRequest req , Contact c ) { if ( req . name () != null ) c . setName ( req . name ()); if ( req . email () != null ) c . setEmail ( req . email ()); if ( req . photoUrl () != null ) c . setPhotoUrl ( req . photoUrl ()); if ( req . password () != null && ! req . password (). isBlank ()) { c . setPassword ( req . password ()); } } public ContactResponse toResponse ( Contact c ) { return new ContactResponse ( c . getId (), c . getName (), c . getEmail (), c . getPhotoUrl ()); } } Pros: no magic. Cons: verbose as app grows. \ud83e\udde0 Spring Data Interface Projections \u00b6 Read-only, auto-mapped \u201cDTOs\u201d generated by Spring Data. public interface ContactView { String getId (); String getName (); } public interface ContactRepository extends JpaRepository < Contact , String > { List < ContactView > findByNameContainingIgnoreCase ( String q ); } Controller: @GetMapping ( \"/contacts\" ) public List < ContactView > list ( @RequestParam String q ) { return repo . findByNameContainingIgnoreCase ( q ); } \u2705 Great for lightweight reads. \u274c Not for writes (can\u2019t persist). \ud83d\udd04 Serialization Cycles (Jackson) \u00b6 When you serialize bidirectional relationships ( User \u2194 Order ), Jackson can loop infinitely. Option 1: @JsonManagedReference / @JsonBackReference \u00b6 Breaks recursion by ignoring the \u201cback\u201d side during serialization. class User { @JsonManagedReference List < Order > orders ; } class Order { @JsonBackReference User user ; } Good for simple parent\u2192child relationships. Option 2: @JsonIdentityInfo \u00b6 Uses object IDs instead of nesting endlessly. @JsonIdentityInfo ( generator = ObjectIdGenerators . PropertyGenerator . class , property = \"id\" ) class User { Long id ; List < Order > orders ; } @JsonIdentityInfo ( generator = ObjectIdGenerators . PropertyGenerator . class , property = \"id\" ) class Order { Long id ; User user ; } Good for complex graphs or both-direction references. \u2699\ufe0f Validation: API vs DB Constraints \u00b6 Layer Validation Type Example DTO API/business validation @NotBlank , @Email , @Pattern Entity DB-level constraints @Column(nullable=false) , unique indexes Fail fast at the API layer \u2014 never let invalid input hit the database. \ud83e\uddf0 Performance & Security Tips \u00b6 Use DTOs to avoid lazy-loading traps ( LazyInitializationException ). Don\u2019t return entire entity graphs \u2014 shape responses explicitly. Always whitelist fields (DTOs) instead of blacklisting ( @JsonIgnore ). Encode passwords in the service layer , not in mappers. For large APIs, use MapStruct + record DTOs \u2014 the cleanest and fastest. \ud83d\udce6 Project Skeleton (DTO-friendly Layout) \u00b6 src/ main/java/com/example/contacts/ entity/Contact.java dto/ CreateContactRequest.java UpdateContactRequest.java ContactResponse.java mapper/ContactMapper.java repo/ContactRepository.java service/ContactService.java web/ContactController.java Optional extras: config/SecurityConfig.java for PasswordEncoder , resources/application.yml for dev DB, test/.../ContactServiceTest.java . \ud83e\udded TL;DR \u2014 When to Use What \u00b6 Context Approach Small internal app Manual mapping or ModelMapper Production API MapStruct + record DTOs Read-only queries Spring Data projections Bi-directional relationships DTOs or @JsonIdentityInfo Security-critical data Always separate DTOs In short: Use Entities for persistence. Use DTOs for communication. Use Mappers as bridges. Keep them separate \u2014 your future self will thank you.","title":"DTOs vs Entities"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#spring-boot-dtos-vs-entities-cheatsheet","text":"Essence: Entities are your persistence model (database schema). DTOs (Data Transfer Objects) are your API model (request/response contracts). Mixing them leads to fragile APIs, security leaks, and serialization pain.","title":"\ud83e\udde9 Spring Boot \u2014 DTOs vs Entities Cheatsheet"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#core-distinction","text":"Aspect Entity DTO Purpose Persistence (DB schema) API request/response Managed by JPA/Hibernate Jackson / Validation Contains IDs, relationships, DB constraints only fields relevant to API Annotations @Entity , @Table , @Column @NotBlank , @Email , etc. Visibility Internal Public Evolution DB-driven Client-driven Remember: Jackson annotations \u2260 DTOs. They\u2019re formatting tools, not boundary definitions.","title":"\ud83d\udd11 Core Distinction"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#when-you-can-skip-dtos","text":"You can temporarily skip DTOs if: - The app is small and internal. - Entities are flat (no relations, no sensitive fields). - You accept API/DB coupling risk. But even then: - Use @JsonIgnore for sensitive data. - Handle cycles ( @JsonManagedReference / @JsonBackReference ). - Expect refactoring later when complexity grows.","title":"\ud83d\udeab When You Can Skip DTOs"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#why-you-should-use-dtos","text":"Security: Prevent leaking internal fields (e.g., password , isAdmin , audit data). Stability: Entities evolve freely while DTOs keep a stable public API. Validation: Add @NotBlank , @Email , etc. for request validation. Flexibility: Tailor different DTOs per endpoint (don\u2019t reuse everything). Performance: Avoid lazy-loading cycles or massive entity graphs. Versioning: Create v2 DTOs without breaking clients.","title":"\u2705 Why You Should Use DTOs"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#example-contact-entity-dtos","text":"@Entity @Table ( name = \"contacts\" ) public class Contact { @Id @GeneratedValue ( strategy = GenerationType . UUID ) private String id ; private String name ; private String email ; private String photoUrl ; // Never expose this! private String password ; }","title":"\ud83e\uddf1 Example: Contact Entity + DTOs"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#request-dtos","text":"public record CreateContactRequest ( @NotBlank String name , @Email String email , String photoUrl , @NotBlank String password ) {} public record UpdateContactRequest ( String name , @Email String email , String photoUrl , String password ) {}","title":"Request DTOs"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#response-dto","text":"public record ContactResponse ( String id , String name , String email , String photoUrl ) {}","title":"Response DTO"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#mapping-strategies-entity-dto","text":"Mapping = the glue between persistence and API layers. Several approaches exist \u2014 pick one main strategy.","title":"\ud83d\udd01 Mapping Strategies (Entity \u2194 DTO)"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#1-mapstruct-recommended-for-production","text":"Fast, compile-time, explicit. @Mapper ( componentModel = \"spring\" ) public interface ContactMapper { @Mapping ( target = \"id\" , ignore = true ) Contact toEntity ( CreateContactRequest req ); @BeanMapping ( nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy . IGNORE ) void updateEntity ( UpdateContactRequest req , @MappingTarget Contact target ); ContactResponse toResponse ( Contact entity ); } Service example: @Service @RequiredArgsConstructor public class ContactService { private final ContactRepository repo ; private final ContactMapper mapper ; private final PasswordEncoder encoder ; public ContactResponse create ( CreateContactRequest req ) { Contact c = mapper . toEntity ( req ); c . setPassword ( encoder . encode ( req . password ())); return mapper . toResponse ( repo . save ( c )); } public ContactResponse update ( String id , UpdateContactRequest req ) { Contact c = repo . findById ( id ). orElseThrow (); mapper . updateEntity ( req , c ); if ( req . password () != null && ! req . password (). isBlank ()) { c . setPassword ( encoder . encode ( req . password ())); } return mapper . toResponse ( repo . save ( c )); } }","title":"1. MapStruct (recommended for production)"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#2-modelmapper-fast-prototyping","text":"Reflection-based, minimal setup, slower. @Configuration public class ModelMapperConfig { @Bean public ModelMapper modelMapper () { ModelMapper mm = new ModelMapper (); mm . getConfiguration (). setPropertyCondition ( Conditions . isNotNull ()); return mm ; } } Usage: Contact c = modelMapper . map ( req , Contact . class ); ContactResponse dto = modelMapper . map ( entity , ContactResponse . class ); Pros: zero boilerplate. Cons: less control, easy to miss subtle mismatches.","title":"2. ModelMapper (fast prototyping)"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#3-manual-mapping-small-apps","text":"Ultimate control, no dependencies. @Component public class ContactMapper { public Contact toEntity ( CreateContactRequest req ) { Contact c = new Contact (); c . setName ( req . name ()); c . setEmail ( req . email ()); c . setPhotoUrl ( req . photoUrl ()); c . setPassword ( req . password ()); return c ; } public void applyUpdate ( UpdateContactRequest req , Contact c ) { if ( req . name () != null ) c . setName ( req . name ()); if ( req . email () != null ) c . setEmail ( req . email ()); if ( req . photoUrl () != null ) c . setPhotoUrl ( req . photoUrl ()); if ( req . password () != null && ! req . password (). isBlank ()) { c . setPassword ( req . password ()); } } public ContactResponse toResponse ( Contact c ) { return new ContactResponse ( c . getId (), c . getName (), c . getEmail (), c . getPhotoUrl ()); } } Pros: no magic. Cons: verbose as app grows.","title":"3. Manual Mapping (small apps)"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#spring-data-interface-projections","text":"Read-only, auto-mapped \u201cDTOs\u201d generated by Spring Data. public interface ContactView { String getId (); String getName (); } public interface ContactRepository extends JpaRepository < Contact , String > { List < ContactView > findByNameContainingIgnoreCase ( String q ); } Controller: @GetMapping ( \"/contacts\" ) public List < ContactView > list ( @RequestParam String q ) { return repo . findByNameContainingIgnoreCase ( q ); } \u2705 Great for lightweight reads. \u274c Not for writes (can\u2019t persist).","title":"\ud83e\udde0 Spring Data Interface Projections"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#serialization-cycles-jackson","text":"When you serialize bidirectional relationships ( User \u2194 Order ), Jackson can loop infinitely.","title":"\ud83d\udd04 Serialization Cycles (Jackson)"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#option-1-jsonmanagedreference-jsonbackreference","text":"Breaks recursion by ignoring the \u201cback\u201d side during serialization. class User { @JsonManagedReference List < Order > orders ; } class Order { @JsonBackReference User user ; } Good for simple parent\u2192child relationships.","title":"Option 1: @JsonManagedReference / @JsonBackReference"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#option-2-jsonidentityinfo","text":"Uses object IDs instead of nesting endlessly. @JsonIdentityInfo ( generator = ObjectIdGenerators . PropertyGenerator . class , property = \"id\" ) class User { Long id ; List < Order > orders ; } @JsonIdentityInfo ( generator = ObjectIdGenerators . PropertyGenerator . class , property = \"id\" ) class Order { Long id ; User user ; } Good for complex graphs or both-direction references.","title":"Option 2: @JsonIdentityInfo"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#validation-api-vs-db-constraints","text":"Layer Validation Type Example DTO API/business validation @NotBlank , @Email , @Pattern Entity DB-level constraints @Column(nullable=false) , unique indexes Fail fast at the API layer \u2014 never let invalid input hit the database.","title":"\u2699\ufe0f Validation: API vs DB Constraints"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#performance-security-tips","text":"Use DTOs to avoid lazy-loading traps ( LazyInitializationException ). Don\u2019t return entire entity graphs \u2014 shape responses explicitly. Always whitelist fields (DTOs) instead of blacklisting ( @JsonIgnore ). Encode passwords in the service layer , not in mappers. For large APIs, use MapStruct + record DTOs \u2014 the cleanest and fastest.","title":"\ud83e\uddf0 Performance &amp; Security Tips"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#project-skeleton-dto-friendly-layout","text":"src/ main/java/com/example/contacts/ entity/Contact.java dto/ CreateContactRequest.java UpdateContactRequest.java ContactResponse.java mapper/ContactMapper.java repo/ContactRepository.java service/ContactService.java web/ContactController.java Optional extras: config/SecurityConfig.java for PasswordEncoder , resources/application.yml for dev DB, test/.../ContactServiceTest.java .","title":"\ud83d\udce6 Project Skeleton (DTO-friendly Layout)"},{"location":"cheatsheets/languages/java/spring/layers/dto-vs-entities/#tldr-when-to-use-what","text":"Context Approach Small internal app Manual mapping or ModelMapper Production API MapStruct + record DTOs Read-only queries Spring Data projections Bi-directional relationships DTOs or @JsonIdentityInfo Security-critical data Always separate DTOs In short: Use Entities for persistence. Use DTOs for communication. Use Mappers as bridges. Keep them separate \u2014 your future self will thank you.","title":"\ud83e\udded TL;DR \u2014 When to Use What"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/","text":"\ud83d\ude80 Spring Boot Development in Containers (Podman on Fedora) \u00b6 1. Why develop inside containers? \u00b6 Reproducible & clean \u2192 Same JDK, Maven, OS libs as prod. No \u201cworks on my machine.\u201d No host pollution \u2192 No global JDK/Maven installs, no messy ~/.m2 , no system packages. Faster onboarding \u2192 Teammates just clone repo, run podman compose up , and it works. Easy reset \u2192 podman compose down --volumes wipes everything clean. Prod-like testing \u2192 Multi-stage Dockerfile ensures runtime is identical to deploy image. 2. Core setup \u00b6 Dev Compose ( docker-compose.dev.yml ) \u00b6 Runs Spring app via maven:temurin image. Mounts your project source ( .:/workspace:Z ) \u2192 hot reload with Spring DevTools. Exposes: 8080 \u2192 app HTTP port 5005 \u2192 JVM remote debug Uses named Maven repo volume to cache dependencies without polluting host. Remote Debugging \u00b6 The app JVM runs inside container. IntelliJ attaches over localhost:5005 . This is the standard way to debug any \u201cremote\u201d JVM (container, VM, Kubernetes, etc.). 3. Keeping host clean \u00b6 Source code : mounted into container with :Z (SELinux relabel). Dependencies : Maven repo isolated in named volume ( maven-repo ). Configs/env : use environment: in Compose or .env files \u2192 no leaking into host. User IDs : run container with user: \"${UID}:${GID}\" to avoid root-owned files on host. Reset at any time: podman compose -f docker-compose.dev.yml down --volumes 4. Workflow \u00b6 Start dev container podman compose -f docker-compose.dev.yml up 2. Open in IntelliJ \u2192 attach Remote JVM Debug at localhost:5005 . 3. Edit code on host \u2192 Spring DevTools reloads inside container. 4. Test via browser at http://localhost:8080 . 5. Stop/reset with podman compose down . Optional: wrap commands in a Makefile so you can do make run , make test , make clean . 5. Prod-like image \u00b6 Multi-stage Dockerfile builds .jar in Maven image, copies it into slim JRE image. Runtime container runs as non-root user . Useful for testing \u201creal deployment\u201d locally, CI/CD pipelines, or production itself. 6. Extensions \u00b6 Databases : Add Postgres or others as services in Compose ( depends_on: [db] ). Multiple profiles : SPRING_PROFILES_ACTIVE=local | dev | prod \u2192 separate configs. Secrets : For local dev, keep in .env ; for production, use Podman secrets/K8s secrets. Resource tuning : JVM flags ( JAVA_TOOL_OPTIONS=-XX:MaxRAMPercentage=75.0 ) if needed. 7. Fedora / Podman specifics \u00b6 Use :Z on all bind mounts \u2192 required for SELinux. Rootless Podman works fine for ports \u22651024 (8080/5005 safe). Shell access (when needed): podman compose -f docker-compose.dev.yml exec dev sh * Increase inotify watches if hot reload doesn\u2019t pick up changes: echo fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf sudo sysctl -p \u2705 TL;DR \u00b6 Run dev in container , edit locally \u2192 hot reload + remote debug. Host stays clean \u2192 Maven repo, JDK, dependencies live inside containers/volumes. Debug like remote app \u2192 attach IntelliJ to localhost:5005 . Reproducible prod builds \u2192 Multi-stage Dockerfile. Isolation + flexibility \u2192 configs in env, volumes for data, no root pollution. This gives you a clean, repeatable, \u201cas-it-runs-in-prod\u201d dev setup , without cluttering your Fedora host, while still keeping a smooth inner loop for coding + debugging. \ud83d\udc33 Spring Boot Development with Podman (Fedora-friendly Guide) \u00b6 1. Why use Podman for dev? \u00b6 Native on Fedora \u2192 runs rootless, integrates with SELinux. Clean host \u2192 no global JDK/Maven installs, no clutter in ~/.m2 . Same as prod \u2192 your app runs inside the same Java/Maven image you\u2019ll use for deployment. Reproducible \u2192 Dockerfile + Compose = self-documenting environment. Fast feedback \u2192 bind mounts + Spring DevTools = hot reload. Debug-friendly \u2192 remote JVM debug works seamlessly. 2. Key building blocks \u00b6 Dev container ( docker-compose.dev.yml ) \u00b6 Runs app using maven + JDK image . Mounts your project source so changes are seen instantly. Caches Maven dependencies in a named volume . Exposes 8080 (HTTP) and 5005 (debug) . Example: services : dev : image : maven:3.9-eclipse-temurin-21 working_dir : /workspace command : mvn spring-boot:run ports : - \"8080:8080\" - \"5005:5005\" environment : - MAVEN_OPTS=-Xmx1g - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 volumes : - .:/workspace:Z - maven-repo:/root/.m2:Z volumes : maven-repo : Production-like image ( Dockerfile ) \u00b6 Multi-stage build: compile in Maven image \u2192 run in slim JRE image. App runs as non-root user . Example: FROM maven:3.9-eclipse-temurin-21 AS build WORKDIR /app COPY pom.xml . RUN mvn -B -q -DskipTests dependency:go-offline COPY src ./src RUN mvn -B -DskipTests package FROM eclipse-temurin:21-jre WORKDIR /app COPY --from = build /app/target/*.jar app.jar RUN useradd --no-create-home spring && chown spring:spring /app/app.jar USER spring EXPOSE 8080 ENTRYPOINT [ \"java\" , \"-jar\" , \"/app/app.jar\" ] 3. Development workflow \u00b6 Start dev container podman compose -f docker-compose.dev.yml up 2. Open project in IntelliJ IDEA (Community is fine). 3. Attach debugger : * Run \u2192 Edit Configurations \u2192 Remote JVM Debug. * Host `localhost`, Port `5005`. * Breakpoints will hit. Edit code locally \u2192 DevTools reloads in container \u2192 refresh browser. Stop/reset : podman compose -f docker-compose.dev.yml down Add --volumes if you want a totally fresh environment. 4. Keeping host clean & consistent \u00b6 Bind mount code : .:/workspace:Z \u2192 edit on host, run in container. Named volume for Maven repo : keeps dependencies out of host home. Environment-as-code : use .env or environment: in Compose. User mapping : run with your UID/GID to avoid root-owned files: user : \"${UID}:${GID}\" and export: export UID = $( id -u ) GID = $( id -g ) 5. Extras \u00b6 Database (e.g., Postgres) \u2192 add as service in Compose: db : image : postgres:16 environment : POSTGRES_DB : appdb POSTGRES_USER : app POSTGRES_PASSWORD : secret volumes : - pgdata:/var/lib/postgresql/data:Z * Profiles \u2192 use SPRING_PROFILES_ACTIVE=local|dev|prod . * Secrets \u2192 in .env for dev, Podman/K8s secrets for production. * Automation \u2192 wrap commands in Makefile for easy make run/test/clean . 6. Fedora / Podman specifics \u00b6 SELinux : always add :Z to bind mounts. Rootless : ports \u22651024 (8080/5005) work fine. Debug : remote JVM debug is the normal way. File change detection : if reload is flaky, bump inotify: echo fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf sudo sysctl -p * Container shell (when needed): podman compose -f docker-compose.dev.yml exec dev sh \u2705 Final Takeaway \u00b6 Using Podman for Spring Boot development gives you: Reproducibility \u2192 same environment as teammates & prod. Isolation \u2192 no clutter on host, easy reset with one command. Fast inner loop \u2192 local edits reload instantly in container. Debug power \u2192 attach IntelliJ via remote JVM debug. Flexibility \u2192 databases, profiles, secrets all defined in Compose. Fedora-native \u2192 SELinux-friendly, rootless, lightweight. \ud83d\udc49 The combination of docker-compose.dev.yml (for hot reload + debug) and a multi-stage Dockerfile (for prod-like builds) is the golden setup for containerized Spring Boot development on Fedora with Podman.","title":"Development in Containers"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#spring-boot-development-in-containers-podman-on-fedora","text":"","title":"\ud83d\ude80 Spring Boot Development in Containers (Podman on Fedora)"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#1-why-develop-inside-containers","text":"Reproducible & clean \u2192 Same JDK, Maven, OS libs as prod. No \u201cworks on my machine.\u201d No host pollution \u2192 No global JDK/Maven installs, no messy ~/.m2 , no system packages. Faster onboarding \u2192 Teammates just clone repo, run podman compose up , and it works. Easy reset \u2192 podman compose down --volumes wipes everything clean. Prod-like testing \u2192 Multi-stage Dockerfile ensures runtime is identical to deploy image.","title":"1. Why develop inside containers?"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#2-core-setup","text":"","title":"2. Core setup"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#dev-compose-docker-composedevyml","text":"Runs Spring app via maven:temurin image. Mounts your project source ( .:/workspace:Z ) \u2192 hot reload with Spring DevTools. Exposes: 8080 \u2192 app HTTP port 5005 \u2192 JVM remote debug Uses named Maven repo volume to cache dependencies without polluting host.","title":"Dev Compose (docker-compose.dev.yml)"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#remote-debugging","text":"The app JVM runs inside container. IntelliJ attaches over localhost:5005 . This is the standard way to debug any \u201cremote\u201d JVM (container, VM, Kubernetes, etc.).","title":"Remote Debugging"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#3-keeping-host-clean","text":"Source code : mounted into container with :Z (SELinux relabel). Dependencies : Maven repo isolated in named volume ( maven-repo ). Configs/env : use environment: in Compose or .env files \u2192 no leaking into host. User IDs : run container with user: \"${UID}:${GID}\" to avoid root-owned files on host. Reset at any time: podman compose -f docker-compose.dev.yml down --volumes","title":"3. Keeping host clean"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#4-workflow","text":"Start dev container podman compose -f docker-compose.dev.yml up 2. Open in IntelliJ \u2192 attach Remote JVM Debug at localhost:5005 . 3. Edit code on host \u2192 Spring DevTools reloads inside container. 4. Test via browser at http://localhost:8080 . 5. Stop/reset with podman compose down . Optional: wrap commands in a Makefile so you can do make run , make test , make clean .","title":"4. Workflow"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#5-prod-like-image","text":"Multi-stage Dockerfile builds .jar in Maven image, copies it into slim JRE image. Runtime container runs as non-root user . Useful for testing \u201creal deployment\u201d locally, CI/CD pipelines, or production itself.","title":"5. Prod-like image"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#6-extensions","text":"Databases : Add Postgres or others as services in Compose ( depends_on: [db] ). Multiple profiles : SPRING_PROFILES_ACTIVE=local | dev | prod \u2192 separate configs. Secrets : For local dev, keep in .env ; for production, use Podman secrets/K8s secrets. Resource tuning : JVM flags ( JAVA_TOOL_OPTIONS=-XX:MaxRAMPercentage=75.0 ) if needed.","title":"6. Extensions"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#7-fedora-podman-specifics","text":"Use :Z on all bind mounts \u2192 required for SELinux. Rootless Podman works fine for ports \u22651024 (8080/5005 safe). Shell access (when needed): podman compose -f docker-compose.dev.yml exec dev sh * Increase inotify watches if hot reload doesn\u2019t pick up changes: echo fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf sudo sysctl -p","title":"7. Fedora / Podman specifics"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#tldr","text":"Run dev in container , edit locally \u2192 hot reload + remote debug. Host stays clean \u2192 Maven repo, JDK, dependencies live inside containers/volumes. Debug like remote app \u2192 attach IntelliJ to localhost:5005 . Reproducible prod builds \u2192 Multi-stage Dockerfile. Isolation + flexibility \u2192 configs in env, volumes for data, no root pollution. This gives you a clean, repeatable, \u201cas-it-runs-in-prod\u201d dev setup , without cluttering your Fedora host, while still keeping a smooth inner loop for coding + debugging.","title":"\u2705 TL;DR"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#spring-boot-development-with-podman-fedora-friendly-guide","text":"","title":"\ud83d\udc33 Spring Boot Development with Podman (Fedora-friendly Guide)"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#1-why-use-podman-for-dev","text":"Native on Fedora \u2192 runs rootless, integrates with SELinux. Clean host \u2192 no global JDK/Maven installs, no clutter in ~/.m2 . Same as prod \u2192 your app runs inside the same Java/Maven image you\u2019ll use for deployment. Reproducible \u2192 Dockerfile + Compose = self-documenting environment. Fast feedback \u2192 bind mounts + Spring DevTools = hot reload. Debug-friendly \u2192 remote JVM debug works seamlessly.","title":"1. Why use Podman for dev?"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#2-key-building-blocks","text":"","title":"2. Key building blocks"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#dev-container-docker-composedevyml","text":"Runs app using maven + JDK image . Mounts your project source so changes are seen instantly. Caches Maven dependencies in a named volume . Exposes 8080 (HTTP) and 5005 (debug) . Example: services : dev : image : maven:3.9-eclipse-temurin-21 working_dir : /workspace command : mvn spring-boot:run ports : - \"8080:8080\" - \"5005:5005\" environment : - MAVEN_OPTS=-Xmx1g - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 volumes : - .:/workspace:Z - maven-repo:/root/.m2:Z volumes : maven-repo :","title":"Dev container (docker-compose.dev.yml)"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#production-like-image-dockerfile","text":"Multi-stage build: compile in Maven image \u2192 run in slim JRE image. App runs as non-root user . Example: FROM maven:3.9-eclipse-temurin-21 AS build WORKDIR /app COPY pom.xml . RUN mvn -B -q -DskipTests dependency:go-offline COPY src ./src RUN mvn -B -DskipTests package FROM eclipse-temurin:21-jre WORKDIR /app COPY --from = build /app/target/*.jar app.jar RUN useradd --no-create-home spring && chown spring:spring /app/app.jar USER spring EXPOSE 8080 ENTRYPOINT [ \"java\" , \"-jar\" , \"/app/app.jar\" ]","title":"Production-like image (Dockerfile)"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#3-development-workflow","text":"Start dev container podman compose -f docker-compose.dev.yml up 2. Open project in IntelliJ IDEA (Community is fine). 3. Attach debugger : * Run \u2192 Edit Configurations \u2192 Remote JVM Debug. * Host `localhost`, Port `5005`. * Breakpoints will hit. Edit code locally \u2192 DevTools reloads in container \u2192 refresh browser. Stop/reset : podman compose -f docker-compose.dev.yml down Add --volumes if you want a totally fresh environment.","title":"3. Development workflow"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#4-keeping-host-clean-consistent","text":"Bind mount code : .:/workspace:Z \u2192 edit on host, run in container. Named volume for Maven repo : keeps dependencies out of host home. Environment-as-code : use .env or environment: in Compose. User mapping : run with your UID/GID to avoid root-owned files: user : \"${UID}:${GID}\" and export: export UID = $( id -u ) GID = $( id -g )","title":"4. Keeping host clean &amp; consistent"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#5-extras","text":"Database (e.g., Postgres) \u2192 add as service in Compose: db : image : postgres:16 environment : POSTGRES_DB : appdb POSTGRES_USER : app POSTGRES_PASSWORD : secret volumes : - pgdata:/var/lib/postgresql/data:Z * Profiles \u2192 use SPRING_PROFILES_ACTIVE=local|dev|prod . * Secrets \u2192 in .env for dev, Podman/K8s secrets for production. * Automation \u2192 wrap commands in Makefile for easy make run/test/clean .","title":"5. Extras"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#6-fedora-podman-specifics","text":"SELinux : always add :Z to bind mounts. Rootless : ports \u22651024 (8080/5005) work fine. Debug : remote JVM debug is the normal way. File change detection : if reload is flaky, bump inotify: echo fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf sudo sysctl -p * Container shell (when needed): podman compose -f docker-compose.dev.yml exec dev sh","title":"6. Fedora / Podman specifics"},{"location":"cheatsheets/languages/java/spring/setup/development-in-containers/#final-takeaway","text":"Using Podman for Spring Boot development gives you: Reproducibility \u2192 same environment as teammates & prod. Isolation \u2192 no clutter on host, easy reset with one command. Fast inner loop \u2192 local edits reload instantly in container. Debug power \u2192 attach IntelliJ via remote JVM debug. Flexibility \u2192 databases, profiles, secrets all defined in Compose. Fedora-native \u2192 SELinux-friendly, rootless, lightweight. \ud83d\udc49 The combination of docker-compose.dev.yml (for hot reload + debug) and a multi-stage Dockerfile (for prod-like builds) is the golden setup for containerized Spring Boot development on Fedora with Podman.","title":"\u2705 Final Takeaway"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/","text":"\ud83e\udded Project Configuration & Path Management \u2014 The Complete Cheatsheet \u00b6 Goal: Manage configuration in a way that is portable , safe , and predictable across environments \u2014 from local dev to containers and cloud. 1. Core Principles \u00b6 Externalize configuration \u2014 keep code constant; change values via YAML, profiles, or environment variables. Single source of truth \u2014 for every property, define exactly one authoritative source at runtime. Typed + validated \u2014 define schema and validate at startup. Profile-based environments \u2014 dev, test, staging, prod. Never hard-code paths \u2014 resolve Path s dynamically at startup. Immutable builds, mutable config \u2014 identical JARs, different configs. Expose effective config \u2014 redacted, layered view for observability. 2. Configuration Sources & Precedence \u00b6 Typical precedence (low \u2192 high): defaults.yml \u2192 application-{profile}.yml \u2192 local.yml \u2192 env vars \u2192 CLI/system props \u2192 secrets manager. Locations: Defaults: src/main/resources/application.yml Profiles: application-prod.yml Local overrides: .env or application-local.yml Secrets: /run/secrets/* or cloud secret store. 3. Spring Boot Binding \u2014 The Foundation \u00b6 Spring Boot automatically maps config values to fields. @Value \u00b6 For one-off keys: @Value ( \"${paths.entries.uploads:data/uploads}\" ) private String uploadsDir ; @ConfigurationProperties \u00b6 For structured configs: @ConfigurationProperties ( prefix = \"paths\" ) public record PathsProps ( String home , Map < String , String > entries ) {} Environment variable mapping: PATHS_ENTRIES_UPLOADS \u2192 paths.entries.uploads . 4. File Storage Path Management (Practical Example) \u00b6 Define in application.yml : myapp : home : \"${user.home}/IdeaProjects/playground/contacts\" photos-dir : \"data/photos\" Properties class: @Component @ConfigurationProperties ( prefix = \"myapp\" ) public class MyAppProperties { private String home ; private String photosDir ; public Path appHomePath () { return Path . of ( home ). toAbsolutePath (). normalize (); } public Path photosPath () { Path p = Path . of ( photosDir ); return p . isAbsolute () ? p . toAbsolutePath (). normalize () : appHomePath (). resolve ( p ). toAbsolutePath (). normalize (); } } File storage service: @Service public class FileStorageService { private final Path photos ; public FileStorageService ( MyAppProperties props ) throws IOException { this . photos = props . photosPath (); Files . createDirectories ( this . photos ); } public Path savePhoto ( String filename , byte [] bytes ) throws IOException { Path target = photos . resolve ( filename ). normalize (); if ( ! target . startsWith ( photos )) throw new IllegalArgumentException ( \"Invalid filename\" ); return Files . write ( target , bytes ); } } Best practices: Validate directory existence on startup. Log absolute resolved paths. Allow environment overrides ( MYAPP_HOME , MYAPP_PHOTOS_DIR ). 5. Generalized Path Registry Pattern \u00b6 One central class to manage all logical paths \u2014 uploads, logs, cache, configs, etc. application.yml: paths : home : \"${user.home}/IdeaProjects/playground/myapp\" entries : uploads : \"data/uploads\" cache : \"var/cache\" logs : \"/var/log/myapp\" keystore : \"config/keystore.p12\" Properties: @Component @ConfigurationProperties ( prefix = \"paths\" ) public class PathsProperties { private String home ; private Map < String , String > entries ; public Path homePath () { return Path . of ( home ). toAbsolutePath (). normalize (); } public Map < String , String > entries () { return Map . copyOf ( entries ); } } Registry: @Component public class PathRegistry { private final Path home ; private final Map < String , String > raw ; public PathRegistry ( PathsProperties props ) { this . home = props . homePath (); this . raw = props . entries (); } public Path resolve ( String key ) { String v = raw . get ( key ); if ( v == null ) throw new IllegalArgumentException ( \"Unknown path: \" + key ); Path p = Path . of ( v ); return ( p . isAbsolute () ? p : home . resolve ( p )). toAbsolutePath (). normalize (); } public Path ensureDir ( String key ) throws IOException { Path dir = resolve ( key ); Files . createDirectories ( dir ); return dir ; } public Path safeChild ( String dirKey , String filename ) { Path base = resolve ( dirKey ); Path child = base . resolve ( filename ). normalize (); if ( ! child . startsWith ( base )) throw new IllegalArgumentException ( \"Traversal: \" + filename ); return child ; } } Usage: @Service public class CacheService { private final Path cache ; public CacheService ( PathRegistry paths ) throws IOException { this . cache = paths . ensureDir ( \"cache\" ); } } 6. Validation & Observability \u00b6 CommandLineRunner \u2014 log + validate at startup \u00b6 @Component @Order ( 10 ) public class PathsStartupRunner implements CommandLineRunner { private static final Logger log = LoggerFactory . getLogger ( PathsStartupRunner . class ); private final PathRegistry paths ; private final List < String > requiredDirs = List . of ( \"uploads\" , \"cache\" , \"temp\" ); public PathsStartupRunner ( PathRegistry paths ) { this . paths = paths ; } @Override public void run ( String ... args ) throws Exception { log . info ( \"=== Resolving paths ===\" ); for ( String key : requiredDirs ) { Path dir = paths . ensureDir ( key ); log . info ( \"paths.{} -> {}\" , key , dir ); if ( ! Files . isWritable ( dir )) throw new IllegalStateException ( \"Not writable: \" + dir ); } log . info ( \"=== Path validation complete ===\" ); } } HealthIndicator \u2014 continuous liveness/readiness \u00b6 @Component ( \"paths\" ) public class PathsHealthIndicator implements HealthIndicator { private final PathRegistry paths ; private final String [] keys = { \"uploads\" , \"cache\" , \"temp\" }; public PathsHealthIndicator ( PathRegistry paths ) { this . paths = paths ; } @Override public Health health () { Map < String , Object > details = new LinkedHashMap <> (); boolean allOk = true ; for ( String key : keys ) { Path p = paths . resolve ( key ); boolean exists = Files . exists ( p ); boolean dir = exists && Files . isDirectory ( p ); boolean writable = dir && Files . isWritable ( p ); details . put ( key , Map . of ( \"path\" , p . toString (), \"exists\" , exists , \"dir\" , dir , \"writable\" , writable )); allOk &= exists && dir && writable ; } return allOk ? Health . up (). withDetails ( details ). build () : Health . down (). withDetails ( details ). build (); } } Enable Actuator: management : endpoints.web.exposure.include : health,info endpoint.health.show-details : when_authorized 7. Path & Directory Rules (Cross\u2011Platform) \u00b6 Always resolve to absolute paths at startup. Normalize ( .. , . ), unify separators, avoid trailing slashes. Use API joins ( Path.resolve , not string concatenation). Avoid non\u2011ASCII or space characters for portability. Containers: mount writable volumes; never write inside image filesystem. Respect XDG dirs ( ~/.config , ~/.cache ) for user apps. Environment vars mapping: PATHS_HOME = /data PATHS_ENTRIES_UPLOADS = data/uploads PATHS_ENTRIES_LOGS = /var/log/myapp Dockerfile: ENV PATHS_HOME = /data ENV PATHS_ENTRIES_UPLOADS = data/uploads ENV PATHS_ENTRIES_CACHE = var/cache 8. Quick Spring Boot Notes \u00b6 File order: application.yml < profile YAML < env < system props < CLI. Use ${VAR:default} placeholders. spring.config.import=optional:file:\u2026 to add layered configs. @ConfigurationProperties = typed binding; use @Validated for constraints. Default to stdout logging in containers; configurable via logging.file.name . \u2705 Summary \u00b6 Keep logical paths in config, not code. Bind them via @ConfigurationProperties . Resolve into absolute, normalized Path s. Validate + log at startup (fail fast). Use HealthIndicator for runtime monitoring. Containers + env vars should map cleanly. Result: portable, observable, safe configuration across every environment.","title":"Project Configuration"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#project-configuration-path-management-the-complete-cheatsheet","text":"Goal: Manage configuration in a way that is portable , safe , and predictable across environments \u2014 from local dev to containers and cloud.","title":"\ud83e\udded Project Configuration &amp; Path Management \u2014 The Complete Cheatsheet"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#1-core-principles","text":"Externalize configuration \u2014 keep code constant; change values via YAML, profiles, or environment variables. Single source of truth \u2014 for every property, define exactly one authoritative source at runtime. Typed + validated \u2014 define schema and validate at startup. Profile-based environments \u2014 dev, test, staging, prod. Never hard-code paths \u2014 resolve Path s dynamically at startup. Immutable builds, mutable config \u2014 identical JARs, different configs. Expose effective config \u2014 redacted, layered view for observability.","title":"1. Core Principles"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#2-configuration-sources-precedence","text":"Typical precedence (low \u2192 high): defaults.yml \u2192 application-{profile}.yml \u2192 local.yml \u2192 env vars \u2192 CLI/system props \u2192 secrets manager. Locations: Defaults: src/main/resources/application.yml Profiles: application-prod.yml Local overrides: .env or application-local.yml Secrets: /run/secrets/* or cloud secret store.","title":"2. Configuration Sources &amp; Precedence"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#3-spring-boot-binding-the-foundation","text":"Spring Boot automatically maps config values to fields.","title":"3. Spring Boot Binding \u2014 The Foundation"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#value","text":"For one-off keys: @Value ( \"${paths.entries.uploads:data/uploads}\" ) private String uploadsDir ;","title":"@Value"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#configurationproperties","text":"For structured configs: @ConfigurationProperties ( prefix = \"paths\" ) public record PathsProps ( String home , Map < String , String > entries ) {} Environment variable mapping: PATHS_ENTRIES_UPLOADS \u2192 paths.entries.uploads .","title":"@ConfigurationProperties"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#4-file-storage-path-management-practical-example","text":"Define in application.yml : myapp : home : \"${user.home}/IdeaProjects/playground/contacts\" photos-dir : \"data/photos\" Properties class: @Component @ConfigurationProperties ( prefix = \"myapp\" ) public class MyAppProperties { private String home ; private String photosDir ; public Path appHomePath () { return Path . of ( home ). toAbsolutePath (). normalize (); } public Path photosPath () { Path p = Path . of ( photosDir ); return p . isAbsolute () ? p . toAbsolutePath (). normalize () : appHomePath (). resolve ( p ). toAbsolutePath (). normalize (); } } File storage service: @Service public class FileStorageService { private final Path photos ; public FileStorageService ( MyAppProperties props ) throws IOException { this . photos = props . photosPath (); Files . createDirectories ( this . photos ); } public Path savePhoto ( String filename , byte [] bytes ) throws IOException { Path target = photos . resolve ( filename ). normalize (); if ( ! target . startsWith ( photos )) throw new IllegalArgumentException ( \"Invalid filename\" ); return Files . write ( target , bytes ); } } Best practices: Validate directory existence on startup. Log absolute resolved paths. Allow environment overrides ( MYAPP_HOME , MYAPP_PHOTOS_DIR ).","title":"4. File Storage Path Management (Practical Example)"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#5-generalized-path-registry-pattern","text":"One central class to manage all logical paths \u2014 uploads, logs, cache, configs, etc. application.yml: paths : home : \"${user.home}/IdeaProjects/playground/myapp\" entries : uploads : \"data/uploads\" cache : \"var/cache\" logs : \"/var/log/myapp\" keystore : \"config/keystore.p12\" Properties: @Component @ConfigurationProperties ( prefix = \"paths\" ) public class PathsProperties { private String home ; private Map < String , String > entries ; public Path homePath () { return Path . of ( home ). toAbsolutePath (). normalize (); } public Map < String , String > entries () { return Map . copyOf ( entries ); } } Registry: @Component public class PathRegistry { private final Path home ; private final Map < String , String > raw ; public PathRegistry ( PathsProperties props ) { this . home = props . homePath (); this . raw = props . entries (); } public Path resolve ( String key ) { String v = raw . get ( key ); if ( v == null ) throw new IllegalArgumentException ( \"Unknown path: \" + key ); Path p = Path . of ( v ); return ( p . isAbsolute () ? p : home . resolve ( p )). toAbsolutePath (). normalize (); } public Path ensureDir ( String key ) throws IOException { Path dir = resolve ( key ); Files . createDirectories ( dir ); return dir ; } public Path safeChild ( String dirKey , String filename ) { Path base = resolve ( dirKey ); Path child = base . resolve ( filename ). normalize (); if ( ! child . startsWith ( base )) throw new IllegalArgumentException ( \"Traversal: \" + filename ); return child ; } } Usage: @Service public class CacheService { private final Path cache ; public CacheService ( PathRegistry paths ) throws IOException { this . cache = paths . ensureDir ( \"cache\" ); } }","title":"5. Generalized Path Registry Pattern"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#6-validation-observability","text":"","title":"6. Validation &amp; Observability"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#commandlinerunner-log-validate-at-startup","text":"@Component @Order ( 10 ) public class PathsStartupRunner implements CommandLineRunner { private static final Logger log = LoggerFactory . getLogger ( PathsStartupRunner . class ); private final PathRegistry paths ; private final List < String > requiredDirs = List . of ( \"uploads\" , \"cache\" , \"temp\" ); public PathsStartupRunner ( PathRegistry paths ) { this . paths = paths ; } @Override public void run ( String ... args ) throws Exception { log . info ( \"=== Resolving paths ===\" ); for ( String key : requiredDirs ) { Path dir = paths . ensureDir ( key ); log . info ( \"paths.{} -> {}\" , key , dir ); if ( ! Files . isWritable ( dir )) throw new IllegalStateException ( \"Not writable: \" + dir ); } log . info ( \"=== Path validation complete ===\" ); } }","title":"CommandLineRunner \u2014 log + validate at startup"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#healthindicator-continuous-livenessreadiness","text":"@Component ( \"paths\" ) public class PathsHealthIndicator implements HealthIndicator { private final PathRegistry paths ; private final String [] keys = { \"uploads\" , \"cache\" , \"temp\" }; public PathsHealthIndicator ( PathRegistry paths ) { this . paths = paths ; } @Override public Health health () { Map < String , Object > details = new LinkedHashMap <> (); boolean allOk = true ; for ( String key : keys ) { Path p = paths . resolve ( key ); boolean exists = Files . exists ( p ); boolean dir = exists && Files . isDirectory ( p ); boolean writable = dir && Files . isWritable ( p ); details . put ( key , Map . of ( \"path\" , p . toString (), \"exists\" , exists , \"dir\" , dir , \"writable\" , writable )); allOk &= exists && dir && writable ; } return allOk ? Health . up (). withDetails ( details ). build () : Health . down (). withDetails ( details ). build (); } } Enable Actuator: management : endpoints.web.exposure.include : health,info endpoint.health.show-details : when_authorized","title":"HealthIndicator \u2014 continuous liveness/readiness"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#7-path-directory-rules-crossplatform","text":"Always resolve to absolute paths at startup. Normalize ( .. , . ), unify separators, avoid trailing slashes. Use API joins ( Path.resolve , not string concatenation). Avoid non\u2011ASCII or space characters for portability. Containers: mount writable volumes; never write inside image filesystem. Respect XDG dirs ( ~/.config , ~/.cache ) for user apps. Environment vars mapping: PATHS_HOME = /data PATHS_ENTRIES_UPLOADS = data/uploads PATHS_ENTRIES_LOGS = /var/log/myapp Dockerfile: ENV PATHS_HOME = /data ENV PATHS_ENTRIES_UPLOADS = data/uploads ENV PATHS_ENTRIES_CACHE = var/cache","title":"7. Path &amp; Directory Rules (Cross\u2011Platform)"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#8-quick-spring-boot-notes","text":"File order: application.yml < profile YAML < env < system props < CLI. Use ${VAR:default} placeholders. spring.config.import=optional:file:\u2026 to add layered configs. @ConfigurationProperties = typed binding; use @Validated for constraints. Default to stdout logging in containers; configurable via logging.file.name .","title":"8. Quick Spring Boot Notes"},{"location":"cheatsheets/languages/java/spring/setup/project-configuration/#summary","text":"Keep logical paths in config, not code. Bind them via @ConfigurationProperties . Resolve into absolute, normalized Path s. Validate + log at startup (fail fast). Use HealthIndicator for runtime monitoring. Containers + env vars should map cleanly. Result: portable, observable, safe configuration across every environment.","title":"\u2705 Summary"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/","text":"Project layout (dev-first) \u00b6 1) Project tree (dev-first) \u00b6 my-service/ \u251c\u2500 build.gradle / pom.xml \u251c\u2500 settings.gradle \u251c\u2500 .gitignore \u251c\u2500 README.md \u251c\u2500 .env # local-only env vars for compose/scripts (never commit secrets) \u2502 \u251c\u2500 src/ \u2502 \u251c\u2500 main/ \u2502 \u2502 \u251c\u2500 java/... # app code \u2502 \u2502 \u251c\u2500 resources/ \u2502 \u2502 \u2502 \u251c\u2500 application.yml # shared defaults (safe to commit) \u2502 \u2502 \u2502 \u251c\u2500 application-dev.yml # dev profile overrides (safe to commit) \u2502 \u2502 \u2502 \u2514\u2500 logback-spring.xml # logging config: console + file (to ./var/log) \u2502 \u2514\u2500 test/java/... # tests \u2502 \u251c\u2500 config/ # **externalized config** mounted/loaded in dev \u2502 \u251c\u2500 application-local.yml # machine-specific overrides; not committed \u2502 \u2514\u2500 secrets.example.yml # example only (commit), copy to secrets.yml locally \u2502 \u251c\u2500 var/ # dev runtime artifacts (git-ignored) \u2502 \u251c\u2500 log/ # app logs in dev \u2502 \u2502 \u2514\u2500 app.log \u2502 \u251c\u2500 data/ # app writable data (e.g., file uploads) \u2502 \u2514\u2500 tmp/ # ephemeral scratch files \u2502 \u251c\u2500 db/ # dev database assets \u2502 \u251c\u2500 migrations/ # Flyway/Liquibase scripts (commit) \u2502 \u2514\u2500 data/ # local DB files or mounted volume (git-ignored) \u2502 \u251c\u2500 docker/ \u2502 \u251c\u2500 Dockerfile \u2502 \u2514\u2500 compose.yml # local stack (app + postgres + pgadmin, etc.) \u2502 \u2514\u2500 scripts/ \u251c\u2500 run-dev.sh # runs app with dev profile + external config \u251c\u2500 format.sh \u2514\u2500 wait-for-it.sh Why this layout? \u00b6 src/main/resources/application.yml holds safe defaults (commit). application-dev.yml contains dev profile overrides you\u2019re happy to commit (e.g., use H2 or a local Postgres, verbose logging). config/ is for externalized, machine-specific config (don\u2019t commit secrets). Load via SPRING_CONFIG_ADDITIONAL_LOCATION . var/log , var/data , var/tmp keep runtime files out of your code and are git-ignored . db/migrations is versioned; db/data is not (local volumes only). 2) Minimal .gitignore \u00b6 # Build /target/ /build/ /out/ # IDE .idea/ .project .classpath .settings/ *.iml # Runtime (dev) /var/ /config/application-local.yml /config/secrets.yml /db/data/ /*.log # OS cruft .DS_Store Thumbs.db 3) Spring config: profiles + externalized location \u00b6 src/main/resources/application.yml (safe defaults) spring : application : name : my-service datasource : url : jdbc:postgresql://localhost:5432/my_service username : my_service password : changeme # defaults for dev only; override via external config or env jpa : hibernate : ddl-auto : validate flyway : locations : classpath:db/migration logging : file : name : var/log/app.log # relative to project root when run from there level : root : INFO server : port : 8080 src/main/resources/application-dev.yml spring : config : activate : on-profile : dev jpa : show-sql : true logging : level : org.springframework : DEBUG External (not committed): config/application-local.yml spring : datasource : url : jdbc:postgresql://localhost:5432/my_service username : my_service password : supersecret # local only Load it in dev with either: Env var: SPRING_PROFILES_ACTIVE=dev SPRING_CONFIG_ADDITIONAL_LOCATION=./config/ Or via CLI: ./gradlew bootRun --args='--spring.profiles.active=dev --spring.config.additional-location=./config/' 4) Logging to both console and file \u00b6 src/main/resources/logback-spring.xml <configuration scan= \"true\" > <property name= \"LOG_FILE\" value= \"var/log/app.log\" /> <appender name= \"CONSOLE\" class= \"ch.qos.logback.core.ConsoleAppender\" > <encoder> <pattern> %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n </pattern> </encoder> </appender> <appender name= \"FILE\" class= \"ch.qos.logback.core.rolling.RollingFileAppender\" > <file> ${LOG_FILE} </file> <rollingPolicy class= \"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\" > <fileNamePattern> var/log/app.%d{yyyy-MM-dd}.log </fileNamePattern> <maxHistory> 7 </maxHistory> </rollingPolicy> <encoder> <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n </pattern> </encoder> </appender> <root level= \"INFO\" > <appender-ref ref= \"CONSOLE\" /> <appender-ref ref= \"FILE\" /> </root> </configuration> 5) Docker Compose for local stack \u00b6 docker/compose.yml version : \"3.9\" services : db : image : postgres:16 container_name : my_service_db environment : POSTGRES_DB : my_service POSTGRES_USER : my_service POSTGRES_PASSWORD : supersecret volumes : - ../db/data:/var/lib/postgresql/data ports : - \"5432:5432\" app : build : context : .. dockerfile : docker/Dockerfile environment : SPRING_PROFILES_ACTIVE : dev SPRING_CONFIG_ADDITIONAL_LOCATION : /workspace/config/ volumes : - ..:/workspace # mount code (hot reload with DevTools) - ../var/log:/workspace/var/log - ../config:/workspace/config ports : - \"8080:8080\" depends_on : - db 6) Run scripts \u00b6 scripts/run-dev.sh #!/usr/bin/env bash set -euo pipefail export SPRING_PROFILES_ACTIVE = ${ SPRING_PROFILES_ACTIVE :- dev } export SPRING_CONFIG_ADDITIONAL_LOCATION = ${ SPRING_CONFIG_ADDITIONAL_LOCATION :- ./config/ } # Gradle ./gradlew bootRun \\ --args = \"--spring.config.additional-location= ${ SPRING_CONFIG_ADDITIONAL_LOCATION } --spring.profiles.active= ${ SPRING_PROFILES_ACTIVE } \" 7) Gradle/Maven snippets \u00b6 Gradle (Kotlin DSL) \u2014 add Spring Boot DevTools for hot reload dependencies { developmentOnly ( \"org.springframework.boot:spring-boot-devtools\" ) runtimeOnly ( \"org.postgresql:postgresql\" ) implementation ( \"org.flywaydb:flyway-core\" ) testImplementation ( \"org.springframework.boot:spring-boot-starter-test\" ) } Maven <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-devtools </artifactId> <scope> runtime </scope> <optional> true </optional> </dependency> <dependency> <groupId> org.postgresql </groupId> <artifactId> postgresql </artifactId> <scope> runtime </scope> </dependency> <dependency> <groupId> org.flywaydb </groupId> <artifactId> flyway-core </artifactId> </dependency> </dependencies> 8) Conventions & tips \u00b6 Never commit anything in var/ , config/application-local.yml , or db/data/ . Keep sane defaults in application.yml ; put dev overrides in application-dev.yml ; put machine secrets in config/application-local.yml . Point file-based resources (uploads, temp exports) to var/data and var/tmp . If you need multiple services later, keep this shape per service and add a /infra repo or a root-level compose.yml that wires them together.","title":"Project Layout Structure for Development"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#project-layout-dev-first","text":"","title":"Project layout (dev-first)"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#1-project-tree-dev-first","text":"my-service/ \u251c\u2500 build.gradle / pom.xml \u251c\u2500 settings.gradle \u251c\u2500 .gitignore \u251c\u2500 README.md \u251c\u2500 .env # local-only env vars for compose/scripts (never commit secrets) \u2502 \u251c\u2500 src/ \u2502 \u251c\u2500 main/ \u2502 \u2502 \u251c\u2500 java/... # app code \u2502 \u2502 \u251c\u2500 resources/ \u2502 \u2502 \u2502 \u251c\u2500 application.yml # shared defaults (safe to commit) \u2502 \u2502 \u2502 \u251c\u2500 application-dev.yml # dev profile overrides (safe to commit) \u2502 \u2502 \u2502 \u2514\u2500 logback-spring.xml # logging config: console + file (to ./var/log) \u2502 \u2514\u2500 test/java/... # tests \u2502 \u251c\u2500 config/ # **externalized config** mounted/loaded in dev \u2502 \u251c\u2500 application-local.yml # machine-specific overrides; not committed \u2502 \u2514\u2500 secrets.example.yml # example only (commit), copy to secrets.yml locally \u2502 \u251c\u2500 var/ # dev runtime artifacts (git-ignored) \u2502 \u251c\u2500 log/ # app logs in dev \u2502 \u2502 \u2514\u2500 app.log \u2502 \u251c\u2500 data/ # app writable data (e.g., file uploads) \u2502 \u2514\u2500 tmp/ # ephemeral scratch files \u2502 \u251c\u2500 db/ # dev database assets \u2502 \u251c\u2500 migrations/ # Flyway/Liquibase scripts (commit) \u2502 \u2514\u2500 data/ # local DB files or mounted volume (git-ignored) \u2502 \u251c\u2500 docker/ \u2502 \u251c\u2500 Dockerfile \u2502 \u2514\u2500 compose.yml # local stack (app + postgres + pgadmin, etc.) \u2502 \u2514\u2500 scripts/ \u251c\u2500 run-dev.sh # runs app with dev profile + external config \u251c\u2500 format.sh \u2514\u2500 wait-for-it.sh","title":"1) Project tree (dev-first)"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#why-this-layout","text":"src/main/resources/application.yml holds safe defaults (commit). application-dev.yml contains dev profile overrides you\u2019re happy to commit (e.g., use H2 or a local Postgres, verbose logging). config/ is for externalized, machine-specific config (don\u2019t commit secrets). Load via SPRING_CONFIG_ADDITIONAL_LOCATION . var/log , var/data , var/tmp keep runtime files out of your code and are git-ignored . db/migrations is versioned; db/data is not (local volumes only).","title":"Why this layout?"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#2-minimal-gitignore","text":"# Build /target/ /build/ /out/ # IDE .idea/ .project .classpath .settings/ *.iml # Runtime (dev) /var/ /config/application-local.yml /config/secrets.yml /db/data/ /*.log # OS cruft .DS_Store Thumbs.db","title":"2) Minimal .gitignore"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#3-spring-config-profiles-externalized-location","text":"src/main/resources/application.yml (safe defaults) spring : application : name : my-service datasource : url : jdbc:postgresql://localhost:5432/my_service username : my_service password : changeme # defaults for dev only; override via external config or env jpa : hibernate : ddl-auto : validate flyway : locations : classpath:db/migration logging : file : name : var/log/app.log # relative to project root when run from there level : root : INFO server : port : 8080 src/main/resources/application-dev.yml spring : config : activate : on-profile : dev jpa : show-sql : true logging : level : org.springframework : DEBUG External (not committed): config/application-local.yml spring : datasource : url : jdbc:postgresql://localhost:5432/my_service username : my_service password : supersecret # local only Load it in dev with either: Env var: SPRING_PROFILES_ACTIVE=dev SPRING_CONFIG_ADDITIONAL_LOCATION=./config/ Or via CLI: ./gradlew bootRun --args='--spring.profiles.active=dev --spring.config.additional-location=./config/'","title":"3) Spring config: profiles + externalized location"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#4-logging-to-both-console-and-file","text":"src/main/resources/logback-spring.xml <configuration scan= \"true\" > <property name= \"LOG_FILE\" value= \"var/log/app.log\" /> <appender name= \"CONSOLE\" class= \"ch.qos.logback.core.ConsoleAppender\" > <encoder> <pattern> %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n </pattern> </encoder> </appender> <appender name= \"FILE\" class= \"ch.qos.logback.core.rolling.RollingFileAppender\" > <file> ${LOG_FILE} </file> <rollingPolicy class= \"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\" > <fileNamePattern> var/log/app.%d{yyyy-MM-dd}.log </fileNamePattern> <maxHistory> 7 </maxHistory> </rollingPolicy> <encoder> <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n </pattern> </encoder> </appender> <root level= \"INFO\" > <appender-ref ref= \"CONSOLE\" /> <appender-ref ref= \"FILE\" /> </root> </configuration>","title":"4) Logging to both console and file"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#5-docker-compose-for-local-stack","text":"docker/compose.yml version : \"3.9\" services : db : image : postgres:16 container_name : my_service_db environment : POSTGRES_DB : my_service POSTGRES_USER : my_service POSTGRES_PASSWORD : supersecret volumes : - ../db/data:/var/lib/postgresql/data ports : - \"5432:5432\" app : build : context : .. dockerfile : docker/Dockerfile environment : SPRING_PROFILES_ACTIVE : dev SPRING_CONFIG_ADDITIONAL_LOCATION : /workspace/config/ volumes : - ..:/workspace # mount code (hot reload with DevTools) - ../var/log:/workspace/var/log - ../config:/workspace/config ports : - \"8080:8080\" depends_on : - db","title":"5) Docker Compose for local stack"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#6-run-scripts","text":"scripts/run-dev.sh #!/usr/bin/env bash set -euo pipefail export SPRING_PROFILES_ACTIVE = ${ SPRING_PROFILES_ACTIVE :- dev } export SPRING_CONFIG_ADDITIONAL_LOCATION = ${ SPRING_CONFIG_ADDITIONAL_LOCATION :- ./config/ } # Gradle ./gradlew bootRun \\ --args = \"--spring.config.additional-location= ${ SPRING_CONFIG_ADDITIONAL_LOCATION } --spring.profiles.active= ${ SPRING_PROFILES_ACTIVE } \"","title":"6) Run scripts"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#7-gradlemaven-snippets","text":"Gradle (Kotlin DSL) \u2014 add Spring Boot DevTools for hot reload dependencies { developmentOnly ( \"org.springframework.boot:spring-boot-devtools\" ) runtimeOnly ( \"org.postgresql:postgresql\" ) implementation ( \"org.flywaydb:flyway-core\" ) testImplementation ( \"org.springframework.boot:spring-boot-starter-test\" ) } Maven <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-devtools </artifactId> <scope> runtime </scope> <optional> true </optional> </dependency> <dependency> <groupId> org.postgresql </groupId> <artifactId> postgresql </artifactId> <scope> runtime </scope> </dependency> <dependency> <groupId> org.flywaydb </groupId> <artifactId> flyway-core </artifactId> </dependency> </dependencies>","title":"7) Gradle/Maven snippets"},{"location":"cheatsheets/languages/java/spring/setup/project-layout-structure/#8-conventions-tips","text":"Never commit anything in var/ , config/application-local.yml , or db/data/ . Keep sane defaults in application.yml ; put dev overrides in application-dev.yml ; put machine secrets in config/application-local.yml . Point file-based resources (uploads, temp exports) to var/data and var/tmp . If you need multiple services later, keep this shape per service and add a /infra repo or a root-level compose.yml that wires them together.","title":"8) Conventions &amp; tips"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/","text":"Deploy a Spring Boot JAR the \u201cLinux-native\u201d way using FHS + systemd + optional Nginx. \u00b6 1. What is the FHS (Filesystem Hierarchy Standard)? \u00b6 It\u2019s a set of conventions that says where things should live on a Linux system. Why? So that all apps, tools, and sysadmins know where to look for stuff \u2014 no surprises. Example: Logs usually live in /var/log/... \u2192 so logrotate , journalctl , monitoring tools, etc. can find them. Configs go in /etc/... \u2192 so sysadmins know where to tweak settings. Binaries in /usr/bin , /opt/... \u2192 so they don\u2019t clutter random places. Think of it like: a tidy house where the kitchen, bathroom, and bedroom are always in the same place. 2. How does this apply to any app? \u00b6 Yes \u2014 this is the standard for all Linux apps . Apache, Nginx, MySQL, Postgres\u2026 they all follow this structure. If you build your app this way, sysadmins treat it just like those apps. It\u2019s not \u201cmandatory\u201d (your app still runs if you just java -jar myapp.jar from your home folder), but following FHS makes it more professional and maintainable . 3. How does this relate to a Spring Boot app ? \u00b6 Spring Boot gives you a \u201cfat jar\u201d (executable JAR) that can run anywhere with java -jar . That\u2019s great for development, but in production you don\u2019t want everything in one random folder. Instead: Executable JAR Put it in /opt/myapp/myapp.jar \u2192 /opt is where \u201cadd-on software\u201d lives (things not part of the base system). Configs ( application.yml , .env ) Put in /etc/myapp/ \u2192 This way, when you redeploy a new JAR version, your configs survive. Logs Go to /var/log/myapp/ \u2192 Or you let systemd handle logs (view with journalctl -u myapp ). Persistent data (uploads, caches, DB files if embedded) Put in /var/lib/myapp/ \u2192 That\u2019s the \u201cstateful data\u201d place. Service management Create a systemd service file ( /etc/systemd/system/myapp.service ) so you can do: sudo systemctl start myapp sudo systemctl enable myapp sudo systemctl status myapp \u2192 This makes it behave like any system service. Reverse proxy / TLS If you use Nginx, config goes in /etc/nginx/sites-available/ (with a symlink into sites-enabled/ ). Log rotation If you write logs to files, put a config in /etc/logrotate.d/myapp \u2192 so old logs get rotated, compressed, and deleted automatically. 4. Beginner-friendly analogy \u00b6 Imagine your Spring Boot JAR is a toy robot \ud83e\uddbe: By default, you just dump it on your desk (your dev machine) and it runs. Following FHS is like putting it into a toolbox with labeled drawers in a workshop: /opt/myapp/ \u2192 where the robot itself lives. /etc/myapp/ \u2192 where you keep the robot\u2019s instructions (configs). /var/log/myapp/ \u2192 where you store the robot\u2019s diary (logs). /var/lib/myapp/ \u2192 where the robot stores its memory (persistent data). systemd \u2192 the workshop switch to turn the robot on/off. nginx \u2192 the receptionist who speaks to visitors and forwards requests to your robot. This way, any mechanic (sysadmin) walking in knows exactly where to look \u2014 they don\u2019t need to guess. Step-by-step guide to deploy a Spring Boot JAR the \u201cLinux-native\u201d way \u00b6 0) Assumptions \u00b6 App name: myapp JAR file you built: target/myapp-1.0.0.jar App listens on port 8080 (default Spring Boot) You can change names/ports\u2014just keep paths consistent. 1) Create a dedicated user and folders \u00b6 # 1) Least-privilege system user (no login shell) sudo useradd --system --home /opt/myapp --shell /usr/sbin/nologin myapp # 2) FHS directories sudo mkdir -p /opt/myapp sudo mkdir -p /etc/myapp sudo mkdir -p /var/log/myapp sudo mkdir -p /var/lib/myapp # 3) Permissions (only myapp can read/write its stuff) sudo chown -R myapp:myapp /opt/myapp /var/log/myapp /var/lib/myapp sudo chown root:root /etc/myapp sudo chmod 750 /opt/myapp /var/log/myapp /var/lib/myapp sudo chmod 750 /etc/myapp 2) Install the JAR \u00b6 # Copy your built jar into /opt/myapp and standardize the name sudo cp target/myapp-1.0.0.jar /opt/myapp/myapp.jar sudo chown myapp:myapp /opt/myapp/myapp.jar sudo chmod 640 /opt/myapp/myapp.jar Tip: for upgrades, replace myapp.jar atomically (see \u201cUpgrades\u201d below). 3) Externalize configuration \u00b6 3.1 /etc/myapp/application.yml \u00b6 server : port : 8080 spring : profiles : active : prod # If you want file logging (optional, see Section 6) # logging: # file: # name: /var/log/myapp/app.log sudo nano /etc/myapp/application.yml sudo chown root:root /etc/myapp/application.yml sudo chmod 640 /etc/myapp/application.yml 3.2 /etc/myapp/myapp.env (environment variables) \u00b6 # Example secrets and tuning (do NOT commit this to git) JAVA_OPTS = \"-Xms256m -Xmx512m\" SPRING_DATASOURCE_URL = \"jdbc:postgresql://db:5432/mydb\" SPRING_DATASOURCE_USERNAME = \"myuser\" SPRING_DATASOURCE_PASSWORD = \"supersecret\" # If you use a random secret: # SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_...=... sudo nano /etc/myapp/myapp.env sudo chown root:root /etc/myapp/myapp.env sudo chmod 640 /etc/myapp/myapp.env Spring Boot will read env vars automatically ( SPRING_* ). We\u2019ll also pass --spring.config.additional-location so it loads /etc/myapp/application.yml . 4) Create a systemd service \u00b6 /etc/systemd/system/myapp.service : [Unit] Description = MyApp Spring Boot Service After = network.target [Service] User = myapp Group = myapp WorkingDirectory = /opt/myapp EnvironmentFile = /etc/myapp/myapp.env # Load external config from /etc plus allow env vars to override ExecStart = /usr/bin/java $JAVA_OPTS \\ -jar /opt/myapp/myapp.jar \\ --spring.config.additional-location=file:/etc/myapp/application.yml # Restart rules Restart = always RestartSec = 5 # Security hardening (safe defaults; relax if needed) NoNewPrivileges = true PrivateTmp = true ProtectSystem = full ProtectHome = true ReadWritePaths = /var/log/myapp /var/lib/myapp # If you use port <1024, you'll need capabilities or a reverse proxy # Logging to journald (journalctl -u myapp) StandardOutput = journal StandardError = journal [Install] WantedBy = multi-user.target Enable + start: sudo systemctl daemon-reload sudo systemctl enable myapp sudo systemctl start myapp sudo systemctl status myapp # View logs journalctl -u myapp -f 5) (Optional) Put Nginx in front (reverse proxy + TLS) \u00b6 /etc/nginx/sites-available/myapp.conf : server { listen 80 ; server_name example.com ; location / { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_read_timeout 60s ; } } Enable and test: sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/myapp.conf sudo nginx -t sudo systemctl reload nginx TLS (recommended): use certbot/Let\u2019s Encrypt to upgrade the server block to listen 443 ssl with real certs. 6) Choose your logging strategy \u00b6 A) Use journald only (simplest) \u00b6 Already configured in the service. Tail logs: journalctl -u myapp -f No logrotate needed (journald handles rotation). B) Write to files in /var/log/myapp/ (if you must) \u00b6 Enable file logging (uncomment in application.yml or use env vars): logging : file : name : /var/log/myapp/app.log Logrotate config /etc/logrotate.d/myapp : /var/log/myapp/*.log { daily rotate 14 compress missingok notifempty copytruncate } Permissions: sudo chown myapp:myapp /var/log/myapp sudo chmod 750 /var/log/myapp 7) App data (persistent state) \u00b6 Put any uploads/caches/db files under: /var/lib/myapp/ Make sure your app points there (via config/env). The systemd unit allows write access to this path. 8) Health check & firewall \u00b6 # If your app exposes /actuator/health curl -i http://127.0.0.1:8080/actuator/health # Optional firewall (UFW example\u2014only expose 80/443 if using Nginx) sudo ufw allow 80 sudo ufw allow 443 # Keep 8080 internal only (don\u2019t allow from the internet) 9) Upgrades (zero-ish downtime) \u00b6 # 1) Copy new jar alongside (atomic swap) sudo cp target/myapp-1.1.0.jar /opt/myapp/myapp.jar.new sudo chown myapp:myapp /opt/myapp/myapp.jar.new sudo chmod 640 /opt/myapp/myapp.jar.new # 2) Swap sudo mv /opt/myapp/myapp.jar.new /opt/myapp/myapp.jar # 3) Restart service sudo systemctl restart myapp sudo systemctl status myapp Configs in /etc/myapp and data in /var/lib/myapp remain untouched. 10) Uninstall (clean removal) \u00b6 sudo systemctl stop myapp sudo systemctl disable myapp sudo rm -f /etc/systemd/system/myapp.service sudo systemctl daemon-reload # Optional: remove files (careful: data/logs!) # sudo rm -rf /opt/myapp /etc/myapp /var/lib/myapp /var/log/myapp # sudo userdel myapp Quick mental model (recap) \u00b6 /opt/myapp \u2192 the program (jar) /etc/myapp \u2192 settings/secrets /var/log/myapp \u2192 logs /var/lib/myapp \u2192 data systemd \u2192 start/stop/restart & autostart nginx \u2192 public entry + TLS","title":"Spring Boot JAR the \u201cLinux-native\u201d way"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#deploy-a-spring-boot-jar-the-linux-native-way-using-fhs-systemd-optional-nginx","text":"","title":"Deploy a Spring Boot JAR the \u201cLinux-native\u201d way using FHS + systemd + optional Nginx."},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#1-what-is-the-fhs-filesystem-hierarchy-standard","text":"It\u2019s a set of conventions that says where things should live on a Linux system. Why? So that all apps, tools, and sysadmins know where to look for stuff \u2014 no surprises. Example: Logs usually live in /var/log/... \u2192 so logrotate , journalctl , monitoring tools, etc. can find them. Configs go in /etc/... \u2192 so sysadmins know where to tweak settings. Binaries in /usr/bin , /opt/... \u2192 so they don\u2019t clutter random places. Think of it like: a tidy house where the kitchen, bathroom, and bedroom are always in the same place.","title":"1. What is the FHS (Filesystem Hierarchy Standard)?"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#2-how-does-this-apply-to-any-app","text":"Yes \u2014 this is the standard for all Linux apps . Apache, Nginx, MySQL, Postgres\u2026 they all follow this structure. If you build your app this way, sysadmins treat it just like those apps. It\u2019s not \u201cmandatory\u201d (your app still runs if you just java -jar myapp.jar from your home folder), but following FHS makes it more professional and maintainable .","title":"2. How does this apply to any app?"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#3-how-does-this-relate-to-a-spring-boot-app","text":"Spring Boot gives you a \u201cfat jar\u201d (executable JAR) that can run anywhere with java -jar . That\u2019s great for development, but in production you don\u2019t want everything in one random folder. Instead: Executable JAR Put it in /opt/myapp/myapp.jar \u2192 /opt is where \u201cadd-on software\u201d lives (things not part of the base system). Configs ( application.yml , .env ) Put in /etc/myapp/ \u2192 This way, when you redeploy a new JAR version, your configs survive. Logs Go to /var/log/myapp/ \u2192 Or you let systemd handle logs (view with journalctl -u myapp ). Persistent data (uploads, caches, DB files if embedded) Put in /var/lib/myapp/ \u2192 That\u2019s the \u201cstateful data\u201d place. Service management Create a systemd service file ( /etc/systemd/system/myapp.service ) so you can do: sudo systemctl start myapp sudo systemctl enable myapp sudo systemctl status myapp \u2192 This makes it behave like any system service. Reverse proxy / TLS If you use Nginx, config goes in /etc/nginx/sites-available/ (with a symlink into sites-enabled/ ). Log rotation If you write logs to files, put a config in /etc/logrotate.d/myapp \u2192 so old logs get rotated, compressed, and deleted automatically.","title":"3. How does this relate to a Spring Boot app?"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#4-beginner-friendly-analogy","text":"Imagine your Spring Boot JAR is a toy robot \ud83e\uddbe: By default, you just dump it on your desk (your dev machine) and it runs. Following FHS is like putting it into a toolbox with labeled drawers in a workshop: /opt/myapp/ \u2192 where the robot itself lives. /etc/myapp/ \u2192 where you keep the robot\u2019s instructions (configs). /var/log/myapp/ \u2192 where you store the robot\u2019s diary (logs). /var/lib/myapp/ \u2192 where the robot stores its memory (persistent data). systemd \u2192 the workshop switch to turn the robot on/off. nginx \u2192 the receptionist who speaks to visitors and forwards requests to your robot. This way, any mechanic (sysadmin) walking in knows exactly where to look \u2014 they don\u2019t need to guess.","title":"4. Beginner-friendly analogy"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#step-by-step-guide-to-deploy-a-spring-boot-jar-the-linux-native-way","text":"","title":"Step-by-step guide to deploy a Spring Boot JAR the \u201cLinux-native\u201d way"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#0-assumptions","text":"App name: myapp JAR file you built: target/myapp-1.0.0.jar App listens on port 8080 (default Spring Boot) You can change names/ports\u2014just keep paths consistent.","title":"0) Assumptions"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#1-create-a-dedicated-user-and-folders","text":"# 1) Least-privilege system user (no login shell) sudo useradd --system --home /opt/myapp --shell /usr/sbin/nologin myapp # 2) FHS directories sudo mkdir -p /opt/myapp sudo mkdir -p /etc/myapp sudo mkdir -p /var/log/myapp sudo mkdir -p /var/lib/myapp # 3) Permissions (only myapp can read/write its stuff) sudo chown -R myapp:myapp /opt/myapp /var/log/myapp /var/lib/myapp sudo chown root:root /etc/myapp sudo chmod 750 /opt/myapp /var/log/myapp /var/lib/myapp sudo chmod 750 /etc/myapp","title":"1) Create a dedicated user and folders"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#2-install-the-jar","text":"# Copy your built jar into /opt/myapp and standardize the name sudo cp target/myapp-1.0.0.jar /opt/myapp/myapp.jar sudo chown myapp:myapp /opt/myapp/myapp.jar sudo chmod 640 /opt/myapp/myapp.jar Tip: for upgrades, replace myapp.jar atomically (see \u201cUpgrades\u201d below).","title":"2) Install the JAR"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#3-externalize-configuration","text":"","title":"3) Externalize configuration"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#31-etcmyappapplicationyml","text":"server : port : 8080 spring : profiles : active : prod # If you want file logging (optional, see Section 6) # logging: # file: # name: /var/log/myapp/app.log sudo nano /etc/myapp/application.yml sudo chown root:root /etc/myapp/application.yml sudo chmod 640 /etc/myapp/application.yml","title":"3.1 /etc/myapp/application.yml"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#32-etcmyappmyappenv-environment-variables","text":"# Example secrets and tuning (do NOT commit this to git) JAVA_OPTS = \"-Xms256m -Xmx512m\" SPRING_DATASOURCE_URL = \"jdbc:postgresql://db:5432/mydb\" SPRING_DATASOURCE_USERNAME = \"myuser\" SPRING_DATASOURCE_PASSWORD = \"supersecret\" # If you use a random secret: # SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_...=... sudo nano /etc/myapp/myapp.env sudo chown root:root /etc/myapp/myapp.env sudo chmod 640 /etc/myapp/myapp.env Spring Boot will read env vars automatically ( SPRING_* ). We\u2019ll also pass --spring.config.additional-location so it loads /etc/myapp/application.yml .","title":"3.2 /etc/myapp/myapp.env (environment variables)"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#4-create-a-systemd-service","text":"/etc/systemd/system/myapp.service : [Unit] Description = MyApp Spring Boot Service After = network.target [Service] User = myapp Group = myapp WorkingDirectory = /opt/myapp EnvironmentFile = /etc/myapp/myapp.env # Load external config from /etc plus allow env vars to override ExecStart = /usr/bin/java $JAVA_OPTS \\ -jar /opt/myapp/myapp.jar \\ --spring.config.additional-location=file:/etc/myapp/application.yml # Restart rules Restart = always RestartSec = 5 # Security hardening (safe defaults; relax if needed) NoNewPrivileges = true PrivateTmp = true ProtectSystem = full ProtectHome = true ReadWritePaths = /var/log/myapp /var/lib/myapp # If you use port <1024, you'll need capabilities or a reverse proxy # Logging to journald (journalctl -u myapp) StandardOutput = journal StandardError = journal [Install] WantedBy = multi-user.target Enable + start: sudo systemctl daemon-reload sudo systemctl enable myapp sudo systemctl start myapp sudo systemctl status myapp # View logs journalctl -u myapp -f","title":"4) Create a systemd service"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#5-optional-put-nginx-in-front-reverse-proxy-tls","text":"/etc/nginx/sites-available/myapp.conf : server { listen 80 ; server_name example.com ; location / { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_read_timeout 60s ; } } Enable and test: sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/myapp.conf sudo nginx -t sudo systemctl reload nginx TLS (recommended): use certbot/Let\u2019s Encrypt to upgrade the server block to listen 443 ssl with real certs.","title":"5) (Optional) Put Nginx in front (reverse proxy + TLS)"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#6-choose-your-logging-strategy","text":"","title":"6) Choose your logging strategy"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#a-use-journald-only-simplest","text":"Already configured in the service. Tail logs: journalctl -u myapp -f No logrotate needed (journald handles rotation).","title":"A) Use journald only (simplest)"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#b-write-to-files-in-varlogmyapp-if-you-must","text":"Enable file logging (uncomment in application.yml or use env vars): logging : file : name : /var/log/myapp/app.log Logrotate config /etc/logrotate.d/myapp : /var/log/myapp/*.log { daily rotate 14 compress missingok notifempty copytruncate } Permissions: sudo chown myapp:myapp /var/log/myapp sudo chmod 750 /var/log/myapp","title":"B) Write to files in /var/log/myapp/ (if you must)"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#7-app-data-persistent-state","text":"Put any uploads/caches/db files under: /var/lib/myapp/ Make sure your app points there (via config/env). The systemd unit allows write access to this path.","title":"7) App data (persistent state)"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#8-health-check-firewall","text":"# If your app exposes /actuator/health curl -i http://127.0.0.1:8080/actuator/health # Optional firewall (UFW example\u2014only expose 80/443 if using Nginx) sudo ufw allow 80 sudo ufw allow 443 # Keep 8080 internal only (don\u2019t allow from the internet)","title":"8) Health check &amp; firewall"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#9-upgrades-zero-ish-downtime","text":"# 1) Copy new jar alongside (atomic swap) sudo cp target/myapp-1.1.0.jar /opt/myapp/myapp.jar.new sudo chown myapp:myapp /opt/myapp/myapp.jar.new sudo chmod 640 /opt/myapp/myapp.jar.new # 2) Swap sudo mv /opt/myapp/myapp.jar.new /opt/myapp/myapp.jar # 3) Restart service sudo systemctl restart myapp sudo systemctl status myapp Configs in /etc/myapp and data in /var/lib/myapp remain untouched.","title":"9) Upgrades (zero-ish downtime)"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#10-uninstall-clean-removal","text":"sudo systemctl stop myapp sudo systemctl disable myapp sudo rm -f /etc/systemd/system/myapp.service sudo systemctl daemon-reload # Optional: remove files (careful: data/logs!) # sudo rm -rf /opt/myapp /etc/myapp /var/lib/myapp /var/log/myapp # sudo userdel myapp","title":"10) Uninstall (clean removal)"},{"location":"cheatsheets/languages/java/spring/setup/spring-app-as-linux-native/#quick-mental-model-recap","text":"/opt/myapp \u2192 the program (jar) /etc/myapp \u2192 settings/secrets /var/log/myapp \u2192 logs /var/lib/myapp \u2192 data systemd \u2192 start/stop/restart & autostart nginx \u2192 public entry + TLS","title":"Quick mental model (recap)"},{"location":"cheatsheets/languages/python/basics/","text":"\ud83d\udc0d Python Basics Cheatsheet \u00b6 \ud83e\udde0 What Python Is \u00b6 Python is a high-level , interpreted programming language known for readability and simplicity. It focuses on clarity over cleverness . You write .py files and run them directly \u2014 no manual compilation needed. It\u2019s widely used for web backends (Django, Flask, FastAPI) , automation , data science , AI/ML , and scripting . python --version # check Python version python main.py # run script \u2699\ufe0f Setup and Environment \u00b6 # Create and activate virtual environment python -m venv .venv source .venv/bin/activate # Linux/Mac # .venv\\Scripts\\activate # Windows # Install packages pip install requests Use venv to isolate dependencies per project. This keeps versions clean and avoids global conflicts. \ud83e\uddf1 Python Basics \u00b6 Variables & Data Types \u00b6 No type declarations \u2014 Python is dynamically typed . x = 42 pi = 3.14 name = \"Edgaras\" is_ready = True Type Example Description int 10 Whole number float 3.14 Decimal number str \"hello\" Text bool True / False Logical value list [1, 2, 3] Ordered, mutable tuple (1, 2, 3) Ordered, immutable set {1, 2, 3} Unique, unordered dict {\"a\": 1} Key-value pairs Printing and Comments \u00b6 print ( \"Hello, world!\" ) # output text # Single-line comment \"\"\" Multi-line comment \"\"\" \ud83d\udd01 Control Flow \u00b6 if x > 10 : print ( \"Big\" ) elif x > 5 : print ( \"Medium\" ) else : print ( \"Small\" ) for fruit in [ \"apple\" , \"banana\" ]: print ( fruit ) while x < 5 : x += 1 Use indentation instead of braces \u2014 Python uses whitespace to define scope . \ud83d\udd27 Functions \u00b6 Functions are defined with def , return values with return . def greet ( name = \"friend\" ): return f \"Hello, { name } !\" print ( greet ( \"Edgaras\" )) Short functions (lambdas): add = lambda a , b : a + b \ud83e\udde9 Collections in Action \u00b6 Lists, sets, tuples, and dicts are the backbone of Python. # List nums = [ 1 , 2 , 3 ] nums . append ( 4 ) # Tuple coords = ( 10 , 20 ) # Set unique = { 1 , 2 , 2 , 3 } # {1, 2, 3} # Dict user = { \"name\" : \"Alice\" , \"age\" : 25 } print ( user [ \"name\" ]) List comprehension (Pythonic pattern): squares = [ x * x for x in range ( 5 )] # [0, 1, 4, 9, 16] \ud83d\udcc1 Files and Paths \u00b6 with open ( \"data.txt\" , \"r\" ) as f : text = f . read () with open ( \"output.txt\" , \"w\" ) as f : f . write ( \"Hello file!\" ) Modern way: from pathlib import Path data = Path ( \"data.txt\" ) . read_text () \ud83d\udea8 Errors and Exceptions \u00b6 Handle problems gracefully: try : risky () except ValueError as e : print ( \"Error:\" , e ) finally : print ( \"Cleanup done\" ) Raise your own error: raise Exception ( \"Something went wrong\" ) \ud83e\uddf1 Classes and Objects \u00b6 Python supports object-oriented programming , but doesn\u2019t force it. class Dog : def __init__ ( self , name ): self . name = name def bark ( self ): print ( f \" { self . name } says woof!\" ) dog = Dog ( \"Max\" ) dog . bark () Everything is an object \u2014 even functions, classes, and modules. \ud83d\udce6 Modules & Imports \u00b6 Split code across files and reuse it. import math from datetime import date print ( math . sqrt ( 16 )) print ( date . today ()) Run logic only when executed directly: if __name__ == \"__main__\" : main () \u2728 Modern Python Features \u00b6 # F-strings (formatted strings) user = \"Alice\" print ( f \"Hi, { user } !\" ) # Type hints (optional, for clarity) def add ( x : int , y : int ) -> int : return x + y # List comprehension squares = [ n * n for n in range ( 5 )] # Pattern matching (Python 3.10+) match command : case \"start\" : print ( \"Running...\" ) case \"stop\" : print ( \"Stopped\" ) case _ : print ( \"Unknown\" ) \ud83e\uddf0 Common Tools \u00b6 Tool Purpose pip Install packages venv Virtual environments pytest Testing black , flake8 Code formatting & linting jupyter Interactive notebooks pathlib Modern path handling requests Simple HTTP client \ud83e\udded The Python Mindset \u00b6 Prefer readable over clever. Use built-ins before reinventing logic. Code should explain itself \u2014 less ceremony, more clarity. Experiment freely in the REPL ( python in terminal). \u201cSimple is better than complex.\u201d \u201cReadability counts.\u201d \u2014 The Zen of Python ( import this )","title":"Python Basics"},{"location":"cheatsheets/languages/python/basics/#python-basics-cheatsheet","text":"","title":"\ud83d\udc0d Python Basics Cheatsheet"},{"location":"cheatsheets/languages/python/basics/#what-python-is","text":"Python is a high-level , interpreted programming language known for readability and simplicity. It focuses on clarity over cleverness . You write .py files and run them directly \u2014 no manual compilation needed. It\u2019s widely used for web backends (Django, Flask, FastAPI) , automation , data science , AI/ML , and scripting . python --version # check Python version python main.py # run script","title":"\ud83e\udde0 What Python Is"},{"location":"cheatsheets/languages/python/basics/#setup-and-environment","text":"# Create and activate virtual environment python -m venv .venv source .venv/bin/activate # Linux/Mac # .venv\\Scripts\\activate # Windows # Install packages pip install requests Use venv to isolate dependencies per project. This keeps versions clean and avoids global conflicts.","title":"\u2699\ufe0f Setup and Environment"},{"location":"cheatsheets/languages/python/basics/#python-basics","text":"","title":"\ud83e\uddf1 Python Basics"},{"location":"cheatsheets/languages/python/basics/#variables-data-types","text":"No type declarations \u2014 Python is dynamically typed . x = 42 pi = 3.14 name = \"Edgaras\" is_ready = True Type Example Description int 10 Whole number float 3.14 Decimal number str \"hello\" Text bool True / False Logical value list [1, 2, 3] Ordered, mutable tuple (1, 2, 3) Ordered, immutable set {1, 2, 3} Unique, unordered dict {\"a\": 1} Key-value pairs","title":"Variables &amp; Data Types"},{"location":"cheatsheets/languages/python/basics/#printing-and-comments","text":"print ( \"Hello, world!\" ) # output text # Single-line comment \"\"\" Multi-line comment \"\"\"","title":"Printing and Comments"},{"location":"cheatsheets/languages/python/basics/#control-flow","text":"if x > 10 : print ( \"Big\" ) elif x > 5 : print ( \"Medium\" ) else : print ( \"Small\" ) for fruit in [ \"apple\" , \"banana\" ]: print ( fruit ) while x < 5 : x += 1 Use indentation instead of braces \u2014 Python uses whitespace to define scope .","title":"\ud83d\udd01 Control Flow"},{"location":"cheatsheets/languages/python/basics/#functions","text":"Functions are defined with def , return values with return . def greet ( name = \"friend\" ): return f \"Hello, { name } !\" print ( greet ( \"Edgaras\" )) Short functions (lambdas): add = lambda a , b : a + b","title":"\ud83d\udd27 Functions"},{"location":"cheatsheets/languages/python/basics/#collections-in-action","text":"Lists, sets, tuples, and dicts are the backbone of Python. # List nums = [ 1 , 2 , 3 ] nums . append ( 4 ) # Tuple coords = ( 10 , 20 ) # Set unique = { 1 , 2 , 2 , 3 } # {1, 2, 3} # Dict user = { \"name\" : \"Alice\" , \"age\" : 25 } print ( user [ \"name\" ]) List comprehension (Pythonic pattern): squares = [ x * x for x in range ( 5 )] # [0, 1, 4, 9, 16]","title":"\ud83e\udde9 Collections in Action"},{"location":"cheatsheets/languages/python/basics/#files-and-paths","text":"with open ( \"data.txt\" , \"r\" ) as f : text = f . read () with open ( \"output.txt\" , \"w\" ) as f : f . write ( \"Hello file!\" ) Modern way: from pathlib import Path data = Path ( \"data.txt\" ) . read_text ()","title":"\ud83d\udcc1 Files and Paths"},{"location":"cheatsheets/languages/python/basics/#errors-and-exceptions","text":"Handle problems gracefully: try : risky () except ValueError as e : print ( \"Error:\" , e ) finally : print ( \"Cleanup done\" ) Raise your own error: raise Exception ( \"Something went wrong\" )","title":"\ud83d\udea8 Errors and Exceptions"},{"location":"cheatsheets/languages/python/basics/#classes-and-objects","text":"Python supports object-oriented programming , but doesn\u2019t force it. class Dog : def __init__ ( self , name ): self . name = name def bark ( self ): print ( f \" { self . name } says woof!\" ) dog = Dog ( \"Max\" ) dog . bark () Everything is an object \u2014 even functions, classes, and modules.","title":"\ud83e\uddf1 Classes and Objects"},{"location":"cheatsheets/languages/python/basics/#modules-imports","text":"Split code across files and reuse it. import math from datetime import date print ( math . sqrt ( 16 )) print ( date . today ()) Run logic only when executed directly: if __name__ == \"__main__\" : main ()","title":"\ud83d\udce6 Modules &amp; Imports"},{"location":"cheatsheets/languages/python/basics/#modern-python-features","text":"# F-strings (formatted strings) user = \"Alice\" print ( f \"Hi, { user } !\" ) # Type hints (optional, for clarity) def add ( x : int , y : int ) -> int : return x + y # List comprehension squares = [ n * n for n in range ( 5 )] # Pattern matching (Python 3.10+) match command : case \"start\" : print ( \"Running...\" ) case \"stop\" : print ( \"Stopped\" ) case _ : print ( \"Unknown\" )","title":"\u2728 Modern Python Features"},{"location":"cheatsheets/languages/python/basics/#common-tools","text":"Tool Purpose pip Install packages venv Virtual environments pytest Testing black , flake8 Code formatting & linting jupyter Interactive notebooks pathlib Modern path handling requests Simple HTTP client","title":"\ud83e\uddf0 Common Tools"},{"location":"cheatsheets/languages/python/basics/#the-python-mindset","text":"Prefer readable over clever. Use built-ins before reinventing logic. Code should explain itself \u2014 less ceremony, more clarity. Experiment freely in the REPL ( python in terminal). \u201cSimple is better than complex.\u201d \u201cReadability counts.\u201d \u2014 The Zen of Python ( import this )","title":"\ud83e\udded The Python Mindset"},{"location":"cheatsheets/languages/python/environments/venv/","text":"\ud83e\udde0 Python Virtual Environments ( venv ) \u2014 Cheatsheet \u00b6 \ud83e\udde9 What It Is \u00b6 venv means virtual environment . It\u2019s a self-contained Python environment that lives inside your project folder. Think of it as a sandbox where you can install Python packages without messing up your system or other projects. Each venv : Has its own Python interpreter (copied from your system\u2019s). Has its own site-packages folder (where libraries get installed). Ignores all global packages unless told otherwise. \ud83c\udfaf Why Use It \u00b6 Without venv , if you install libraries like this: pip install mkdocs they go into your global Python \u2014 polluting everything. Soon you\u2019ll have version conflicts and dependency chaos between projects. With venv : Every project has isolated dependencies . You can safely use different library versions per project. You can delete or recreate it anytime \u2014 your system stays clean. \u2699\ufe0f How To Create and Use \u00b6 1. Create a venv python3 -m venv .venv This makes a folder .venv with a fresh Python setup inside. 2. Activate it System Command Linux / macOS source .venv/bin/activate Windows (cmd) .venv\\Scripts\\activate Windows (PowerShell) .venv\\Scripts\\Activate.ps1 When active, your shell prompt changes \u2014 usually you\u2019ll see (.venv) in front. 3. Install libraries pip install mkdocs mkdocs-material mkdocs-obsidian They\u2019ll install inside .venv only , not globally. 4. Freeze (optional) If you want to share exact versions with others: pip freeze > requirements.txt Then anyone can recreate your setup with: pip install -r requirements.txt 5. Deactivate deactivate \ud83e\uddf9 In .gitignore \u00b6 You always exclude .venv/ : .venv/ Because it\u2019s bulky, system-specific, and can be recreated from requirements.txt . \ud83e\udde0 Quick Summary Table \u00b6 Task Command Notes Create python3 -m venv .venv Makes environment in .venv/ Activate source .venv/bin/activate Start using it Deactivate deactivate Return to system Python Install packages pip install <package> Only affects this project List packages pip list Shows installed inside venv Export dependencies pip freeze > requirements.txt For version tracking Reinstall from file pip install -r requirements.txt Recreates setup \ud83e\udde9 Mental Model \u00b6 Imagine your computer is a city. Each Python project is its own apartment . venv gives each apartment: Its own kitchen (libraries) Its own utilities (interpreter) But shares the city\u2019s infrastructure (OS-level Python) So if one apartment burns its kitchen down (dependency conflict), the others stay safe. \u26a0\ufe0f venv Troubleshooting & Common Pitfalls \u00b6 \ud83e\udde9 1. \u201cI installed a package, but Python says \u2018ModuleNotFoundError\u2019\u201d \u00b6 Cause: You forgot to activate your virtual environment. Fix: Activate it before installing or running: source .venv/bin/activate You\u2019ll know it\u2019s active when you see (.venv) before your prompt. \ud83d\udc0d 2. \u201cI have multiple Python versions \u2014 which one is used?\u201d \u00b6 Each venv is tied to the Python version that created it. Example: python3.11 -m venv .venv means your venv uses Python 3.11 , even if your system later upgrades to 3.12. If you remove or change your system Python, that venv might break. Tip: Always note your Python version in your README. \ud83d\udc80 3. \u201cThe venv folder got corrupted or too big\u201d \u00b6 Don\u2019t panic \u2014 just delete .venv/ and recreate it: rm -rf .venv python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt That\u2019s it. Your clean sandbox returns, good as new. \ud83e\udde0 4. \u201cMkDocs (or some tool) not found even though I installed it\u201d \u00b6 That means the tool was installed inside the venv, but your shell isn\u2019t using that path. Fix: activate the venv before running: source .venv/bin/activate mkdocs serve or run it explicitly from inside: .venv/bin/mkdocs serve \ud83d\udcbc 5. \u201cDo I need to commit .venv to Git?\u201d \u00b6 Never. Just commit your requirements.txt . .venv is like your temporary workbench \u2014 everyone can rebuild it from the list of dependencies. \u2699\ufe0f 6. \u201cCan I have more than one venv?\u201d \u00b6 Absolutely. You can have one per project, or even multiple inside one project for different experiments: .venv/ .venv-py311/ .venv-py312/ Just activate whichever one you need. \ud83d\udd04 7. \u201cI closed the terminal \u2014 do I have to activate again?\u201d \u00b6 Yes. The activation is per shell session. Once you close it, your environment resets, and you\u2019ll need to: source .venv/bin/activate again when reopening your project. \ud83e\udde0 Quick Diagnosis Checklist \u00b6 If something isn\u2019t working: Is your prompt showing (.venv) ? \u2192 If not, activate it. Does which python or where python show .venv/bin/python ? \u2192 If not, wrong environment. Did you reinstall dependencies after deleting .venv ? \u2192 Run pip install -r requirements.txt . \ud83d\udca1 Golden Rule \u00b6 When in doubt: Delete .venv , recreate it, reinstall. It\u2019s faster than debugging a broken environment. \u2699\ufe0f Advanced venv Tricks & Integrations \u00b6 \ud83e\udde0 1. Auto-activate in VS Code \u00b6 VS Code has native support for virtual environments. Open your project folder in VS Code (the one with .venv/ ). Open Command Palette \u2192 Python: Select Interpreter . Choose the one that points to .venv/bin/python (or .venv\\Scripts\\python.exe on Windows). Now every terminal inside VS Code auto-activates the venv , and \u201cRun\u201d or \u201cDebug\u201d commands use it automatically. Tip: Add this to your project\u2019s .vscode/settings.json (optional, but nice): { \"python.defaultInterpreterPath\" : \".venv/bin/python\" } \ud83d\udc1a 2. Auto-activate when entering folder (shell-level trick) \u00b6 If you live in your terminal, you can make the venv activate automatically whenever you cd into the project. For bash or zsh : \u00b6 Append to your ~/.bashrc or ~/.zshrc : # Auto-activate venv when entering project folder cd () { builtin cd \" $@ \" || return if [ -f \".venv/bin/activate\" ] ; then source .venv/bin/activate fi } That makes the environment self-starting \u2014 no more \u201cforgot to activate\u201d moments. \ud83d\udc33 3. Use venv in Docker (for consistent builds) \u00b6 You usually don\u2019t need venv inside Docker because Docker itself isolates environments \u2014 but it\u2019s sometimes useful when developing locally and deploying via container. A typical lightweight pattern: FROM python:3.11-slim WORKDIR /app COPY . . RUN python3 -m venv /venv ENV PATH = \"/venv/bin: $PATH \" RUN pip install --upgrade pip && pip install -r requirements.txt CMD [ \"mkdocs\" , \"serve\" , \"-a\" , \"0.0.0.0:8000\" ] This way, the container runs everything inside /venv , giving full reproducibility between your laptop and the container. \ud83d\udd04 4. Use venv in CI/CD (GitHub Actions, GitLab, etc.) \u00b6 Virtual environments integrate beautifully in automation. Example GitHub Actions job for MkDocs: jobs : build : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - uses : actions/setup-python@v5 with : python-version : '3.11' - run : python -m venv .venv - run : source .venv/bin/activate && pip install -r requirements.txt - run : source .venv/bin/activate && mkdocs build That ensures each run is clean, reproducible, and isolated \u2014 no dependency drift over time. \ud83e\udde9 5. Use venv executables directly (no activation needed) \u00b6 Sometimes automation scripts shouldn\u2019t depend on interactive activation. You can run any installed tool directly from inside .venv/bin : .venv/bin/mkdocs serve That works even if the venv isn\u2019t \u201cactivated.\u201d It\u2019s cleaner in scripts, cron jobs, or Dockerfiles. \ud83e\uddf9 6. Clean up and reset your environment fast \u00b6 When you want a fresh start: rm -rf .venv site/ __pycache__/ python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt That gives you a sterile lab again, like hitting \u201creset\u201d on a scientific experiment. \ud83e\udde0 Rule of Thumb for Power Users \u00b6 Local dev \u2192 always use .venv Dockerized app \u2192 system Python inside container is fine, or one global /venv CI/CD \u2192 recreate venv per run for reliability Next level from here would be environment management tools like: pip-tools \u2192 for precise dependency pinning poetry \u2192 combines venv + dependency management + packaging pyenv \u2192 handles multiple Python versions on one system","title":".venv"},{"location":"cheatsheets/languages/python/environments/venv/#python-virtual-environments-venv-cheatsheet","text":"","title":"\ud83e\udde0 Python Virtual Environments (venv) \u2014 Cheatsheet"},{"location":"cheatsheets/languages/python/environments/venv/#what-it-is","text":"venv means virtual environment . It\u2019s a self-contained Python environment that lives inside your project folder. Think of it as a sandbox where you can install Python packages without messing up your system or other projects. Each venv : Has its own Python interpreter (copied from your system\u2019s). Has its own site-packages folder (where libraries get installed). Ignores all global packages unless told otherwise.","title":"\ud83e\udde9 What It Is"},{"location":"cheatsheets/languages/python/environments/venv/#why-use-it","text":"Without venv , if you install libraries like this: pip install mkdocs they go into your global Python \u2014 polluting everything. Soon you\u2019ll have version conflicts and dependency chaos between projects. With venv : Every project has isolated dependencies . You can safely use different library versions per project. You can delete or recreate it anytime \u2014 your system stays clean.","title":"\ud83c\udfaf Why Use It"},{"location":"cheatsheets/languages/python/environments/venv/#how-to-create-and-use","text":"1. Create a venv python3 -m venv .venv This makes a folder .venv with a fresh Python setup inside. 2. Activate it System Command Linux / macOS source .venv/bin/activate Windows (cmd) .venv\\Scripts\\activate Windows (PowerShell) .venv\\Scripts\\Activate.ps1 When active, your shell prompt changes \u2014 usually you\u2019ll see (.venv) in front. 3. Install libraries pip install mkdocs mkdocs-material mkdocs-obsidian They\u2019ll install inside .venv only , not globally. 4. Freeze (optional) If you want to share exact versions with others: pip freeze > requirements.txt Then anyone can recreate your setup with: pip install -r requirements.txt 5. Deactivate deactivate","title":"\u2699\ufe0f How To Create and Use"},{"location":"cheatsheets/languages/python/environments/venv/#in-gitignore","text":"You always exclude .venv/ : .venv/ Because it\u2019s bulky, system-specific, and can be recreated from requirements.txt .","title":"\ud83e\uddf9 In .gitignore"},{"location":"cheatsheets/languages/python/environments/venv/#quick-summary-table","text":"Task Command Notes Create python3 -m venv .venv Makes environment in .venv/ Activate source .venv/bin/activate Start using it Deactivate deactivate Return to system Python Install packages pip install <package> Only affects this project List packages pip list Shows installed inside venv Export dependencies pip freeze > requirements.txt For version tracking Reinstall from file pip install -r requirements.txt Recreates setup","title":"\ud83e\udde0 Quick Summary Table"},{"location":"cheatsheets/languages/python/environments/venv/#mental-model","text":"Imagine your computer is a city. Each Python project is its own apartment . venv gives each apartment: Its own kitchen (libraries) Its own utilities (interpreter) But shares the city\u2019s infrastructure (OS-level Python) So if one apartment burns its kitchen down (dependency conflict), the others stay safe.","title":"\ud83e\udde9 Mental Model"},{"location":"cheatsheets/languages/python/environments/venv/#venv-troubleshooting-common-pitfalls","text":"","title":"\u26a0\ufe0f venv Troubleshooting &amp; Common Pitfalls"},{"location":"cheatsheets/languages/python/environments/venv/#1-i-installed-a-package-but-python-says-modulenotfounderror","text":"Cause: You forgot to activate your virtual environment. Fix: Activate it before installing or running: source .venv/bin/activate You\u2019ll know it\u2019s active when you see (.venv) before your prompt.","title":"\ud83e\udde9 1. \u201cI installed a package, but Python says \u2018ModuleNotFoundError\u2019\u201d"},{"location":"cheatsheets/languages/python/environments/venv/#2-i-have-multiple-python-versions-which-one-is-used","text":"Each venv is tied to the Python version that created it. Example: python3.11 -m venv .venv means your venv uses Python 3.11 , even if your system later upgrades to 3.12. If you remove or change your system Python, that venv might break. Tip: Always note your Python version in your README.","title":"\ud83d\udc0d 2. \u201cI have multiple Python versions \u2014 which one is used?\u201d"},{"location":"cheatsheets/languages/python/environments/venv/#3-the-venv-folder-got-corrupted-or-too-big","text":"Don\u2019t panic \u2014 just delete .venv/ and recreate it: rm -rf .venv python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt That\u2019s it. Your clean sandbox returns, good as new.","title":"\ud83d\udc80 3. \u201cThe venv folder got corrupted or too big\u201d"},{"location":"cheatsheets/languages/python/environments/venv/#4-mkdocs-or-some-tool-not-found-even-though-i-installed-it","text":"That means the tool was installed inside the venv, but your shell isn\u2019t using that path. Fix: activate the venv before running: source .venv/bin/activate mkdocs serve or run it explicitly from inside: .venv/bin/mkdocs serve","title":"\ud83e\udde0 4. \u201cMkDocs (or some tool) not found even though I installed it\u201d"},{"location":"cheatsheets/languages/python/environments/venv/#5-do-i-need-to-commit-venv-to-git","text":"Never. Just commit your requirements.txt . .venv is like your temporary workbench \u2014 everyone can rebuild it from the list of dependencies.","title":"\ud83d\udcbc 5. \u201cDo I need to commit .venv to Git?\u201d"},{"location":"cheatsheets/languages/python/environments/venv/#6-can-i-have-more-than-one-venv","text":"Absolutely. You can have one per project, or even multiple inside one project for different experiments: .venv/ .venv-py311/ .venv-py312/ Just activate whichever one you need.","title":"\u2699\ufe0f 6. \u201cCan I have more than one venv?\u201d"},{"location":"cheatsheets/languages/python/environments/venv/#7-i-closed-the-terminal-do-i-have-to-activate-again","text":"Yes. The activation is per shell session. Once you close it, your environment resets, and you\u2019ll need to: source .venv/bin/activate again when reopening your project.","title":"\ud83d\udd04 7. \u201cI closed the terminal \u2014 do I have to activate again?\u201d"},{"location":"cheatsheets/languages/python/environments/venv/#quick-diagnosis-checklist","text":"If something isn\u2019t working: Is your prompt showing (.venv) ? \u2192 If not, activate it. Does which python or where python show .venv/bin/python ? \u2192 If not, wrong environment. Did you reinstall dependencies after deleting .venv ? \u2192 Run pip install -r requirements.txt .","title":"\ud83e\udde0 Quick Diagnosis Checklist"},{"location":"cheatsheets/languages/python/environments/venv/#golden-rule","text":"When in doubt: Delete .venv , recreate it, reinstall. It\u2019s faster than debugging a broken environment.","title":"\ud83d\udca1 Golden Rule"},{"location":"cheatsheets/languages/python/environments/venv/#advanced-venv-tricks-integrations","text":"","title":"\u2699\ufe0f Advanced venv Tricks &amp; Integrations"},{"location":"cheatsheets/languages/python/environments/venv/#1-auto-activate-in-vs-code","text":"VS Code has native support for virtual environments. Open your project folder in VS Code (the one with .venv/ ). Open Command Palette \u2192 Python: Select Interpreter . Choose the one that points to .venv/bin/python (or .venv\\Scripts\\python.exe on Windows). Now every terminal inside VS Code auto-activates the venv , and \u201cRun\u201d or \u201cDebug\u201d commands use it automatically. Tip: Add this to your project\u2019s .vscode/settings.json (optional, but nice): { \"python.defaultInterpreterPath\" : \".venv/bin/python\" }","title":"\ud83e\udde0 1. Auto-activate in VS Code"},{"location":"cheatsheets/languages/python/environments/venv/#2-auto-activate-when-entering-folder-shell-level-trick","text":"If you live in your terminal, you can make the venv activate automatically whenever you cd into the project.","title":"\ud83d\udc1a 2. Auto-activate when entering folder (shell-level trick)"},{"location":"cheatsheets/languages/python/environments/venv/#for-bash-or-zsh","text":"Append to your ~/.bashrc or ~/.zshrc : # Auto-activate venv when entering project folder cd () { builtin cd \" $@ \" || return if [ -f \".venv/bin/activate\" ] ; then source .venv/bin/activate fi } That makes the environment self-starting \u2014 no more \u201cforgot to activate\u201d moments.","title":"For bash or zsh:"},{"location":"cheatsheets/languages/python/environments/venv/#3-use-venv-in-docker-for-consistent-builds","text":"You usually don\u2019t need venv inside Docker because Docker itself isolates environments \u2014 but it\u2019s sometimes useful when developing locally and deploying via container. A typical lightweight pattern: FROM python:3.11-slim WORKDIR /app COPY . . RUN python3 -m venv /venv ENV PATH = \"/venv/bin: $PATH \" RUN pip install --upgrade pip && pip install -r requirements.txt CMD [ \"mkdocs\" , \"serve\" , \"-a\" , \"0.0.0.0:8000\" ] This way, the container runs everything inside /venv , giving full reproducibility between your laptop and the container.","title":"\ud83d\udc33 3. Use venv in Docker (for consistent builds)"},{"location":"cheatsheets/languages/python/environments/venv/#4-use-venv-in-cicd-github-actions-gitlab-etc","text":"Virtual environments integrate beautifully in automation. Example GitHub Actions job for MkDocs: jobs : build : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - uses : actions/setup-python@v5 with : python-version : '3.11' - run : python -m venv .venv - run : source .venv/bin/activate && pip install -r requirements.txt - run : source .venv/bin/activate && mkdocs build That ensures each run is clean, reproducible, and isolated \u2014 no dependency drift over time.","title":"\ud83d\udd04 4. Use venv in CI/CD (GitHub Actions, GitLab, etc.)"},{"location":"cheatsheets/languages/python/environments/venv/#5-use-venv-executables-directly-no-activation-needed","text":"Sometimes automation scripts shouldn\u2019t depend on interactive activation. You can run any installed tool directly from inside .venv/bin : .venv/bin/mkdocs serve That works even if the venv isn\u2019t \u201cactivated.\u201d It\u2019s cleaner in scripts, cron jobs, or Dockerfiles.","title":"\ud83e\udde9 5. Use venv executables directly (no activation needed)"},{"location":"cheatsheets/languages/python/environments/venv/#6-clean-up-and-reset-your-environment-fast","text":"When you want a fresh start: rm -rf .venv site/ __pycache__/ python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt That gives you a sterile lab again, like hitting \u201creset\u201d on a scientific experiment.","title":"\ud83e\uddf9 6. Clean up and reset your environment fast"},{"location":"cheatsheets/languages/python/environments/venv/#rule-of-thumb-for-power-users","text":"Local dev \u2192 always use .venv Dockerized app \u2192 system Python inside container is fine, or one global /venv CI/CD \u2192 recreate venv per run for reliability Next level from here would be environment management tools like: pip-tools \u2192 for precise dependency pinning poetry \u2192 combines venv + dependency management + packaging pyenv \u2192 handles multiple Python versions on one system","title":"\ud83e\udde0 Rule of Thumb for Power Users"},{"location":"cheatsheets/networking/http/00-quickstart/","text":"\u26a1 HTTP \u2014 Quick Start \u00b6 A speed-run of the web\u2019s lingua franca. Keep this handy; split it later when you outgrow it. \ud83e\udded Mental Model \u00b6 HTTP is like sending letters through a global post office: You (the client ) write a request letter with headers and maybe a body. The server reads it and replies with a response letter . Each exchange is independent \u2014 no long-term memory unless you bring cookies. That\u2019s why you often combine it with: Sessions / Tokens \u2192 to maintain identity TLS (HTTPS) \u2192 to keep the mail private Caching \u2192 to avoid sending the same letter again 1) What HTTP Is (and Isn\u2019t) \u00b6 HTTP = H yper T ext T ransfer P rotocol \u2014 rules for how a client talks to a server . Stateless : each request stands alone. Servers don\u2019t \u201cremember\u201d you unless you give them state (cookies, tokens). Text-first : start line \u2192 headers \u2192 optional body. Easy to read, easy to debug. HTTPS = HTTP over TLS for privacy + integrity. Client \u2500\u2500request\u2500\u2500> Server <\u2500response\u2500\u2500 2) The Shape of a Request \u00b6 GET /path?key=value HTTP/1.1 Host: example.com User-Agent: curl/8.0 Accept: application/json Authorization: Bearer <token> <body is optional> Key parts: Method (GET/POST/PUT/DELETE/\u2026) Target ( /path?query ) Version (HTTP/1.1 or HTTP/2/HTTP/3) Headers (metadata) Body (optional; usually with POST/PUT/PATCH) Minimal cURL \u00b6 # Simple GET curl https://example.com/api/items # GET with query + headers curl -H \"Accept: application/json\" \\ \"https://example.com/search?q=books&page=2\" # POST JSON curl -X POST -H \"Content-Type: application/json\" \\ -d '{\"title\":\"Dune\"}' https://example.com/api/books 3) The Shape of a Response \u00b6 HTTP/1.1 200 OK Content-Type: application/json Content-Length: 27 Cache-Control: max-age=3600 {\"message\":\"hello, world\"} Status line : version + status code + reason phrase Headers : metadata about the payload/caching/etc. Body : bytes (JSON, HTML, image, zip\u2026). 4) Methods (What You\u2019re Asking For) \u00b6 Method Idempotent? Has body? Typical use GET \u2705 \u274c Fetch a resource (no side-effects). HEAD \u2705 \u274c GET without body (check headers/size). POST \u274c \u2705 Create / command / non-idempotent actions. PUT \u2705 \u2705 Replace a resource entirely at the target URI. PATCH \u274c(usually) \u2705 Partial update of a resource. DELETE \u2705 (opt) Remove a resource. OPTIONS \u2705 (opt) What can I do here? Used in CORS preflights. Idempotent = same request repeated \u2192 same result on the server. 5) Status Codes (Quick Map) \u00b6 2xx \u2014 Success \u00b6 200 OK \u2014 here\u2019s your thing. 201 Created \u2014 new resource made; often returns Location . 204 No Content \u2014 success, no body (e.g., DELETE). 3xx \u2014 Redirection \u00b6 301 Moved Permanently 302 Found (temporary) 303 See Other \u2014 after POST, go GET this URL. 307/308 \u2014 redirect but don\u2019t change method/body. 4xx \u2014 Client Errors \u00b6 400 Bad Request \u2014 malformed request. 401 Unauthorized \u2014 missing/invalid auth. 403 Forbidden \u2014 authenticated but not allowed. 404 Not Found 409 Conflict \u2014 version mismatch, duplicate data. 422 Unprocessable Content \u2014 validation failed. 429 Too Many Requests \u2014 rate-limited. 5xx \u2014 Server Errors \u00b6 500 Internal Server Error 502 Bad Gateway 503 Service Unavailable 504 Gateway Timeout 6) Headers That Actually Matter (Daily Use) \u00b6 Request headers \u00b6 Host: domain name (mandatory in HTTP/1.1). Accept: formats you\u2019ll accept. Authorization: bearer token or basic credentials. Content-Type: body\u2019s media type. If-None-Match: ask only if changed (ETag). If-Modified-Since: ask only if newer than date. Response headers \u00b6 Content-Type: what\u2019s in the body. Cache-Control: caching policy. ETag: body fingerprint for change detection. Last-Modified: timestamp of resource. Vary: which headers affect caching. Set-Cookie: session or tracking data. Location: for redirects or newly created resources. 7) Caching (Speed Without Lies) \u00b6 Goal: serve from cache when safe, skip server work, save bandwidth. Freshness Cache-Control: max-age=600 \u2192 cache 10 minutes. no-store = never save; no-cache = revalidate first. Revalidation If-None-Match + ETag or If-Modified-Since + Last-Modified . Unchanged \u2192 304 Not Modified . User data Cache-Control: private, no-store 8) Content Negotiation \u00b6 Client says what it wants; server chooses best match. Example: Accept: application/json, text/html;q=0.8 Response: Content-Type: application/json 9) CORS (Cross-Origin Resource Sharing) \u00b6 Browsers block JS calls across domains by default. Server enables access with headers: Access-Control-Allow-Origin: https://yourapp.com Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS Access-Control-Allow-Headers: Content-Type, Authorization Complex requests trigger an OPTIONS preflight . 10) HTTP Versions at a Glance \u00b6 HTTP/1.1: text-based, single request per connection. HTTP/2: binary, multiplexed, header compression (HPACK). HTTP/3: runs on QUIC (UDP), faster handshakes, fewer delays. Negotiated automatically; you don\u2019t code to versions. \ud83d\ude80 Performance & Modern HTTP Practices \u00b6 Compression: Content-Encoding: gzip or br . Connection reuse: Connection: keep-alive . Streaming: chunked transfer for large payloads. CDNs: act as distributed HTTP caches. Caching layers: browser \u2192 proxy \u2192 CDN \u2192 origin. \ud83d\udd10 Security at a Glance \u00b6 Always use HTTPS \u2014 plain HTTP is obsolete. Validate input even from \u201ctrusted\u201d clients. Don\u2019t leak stack traces or system info in errors. Use secure cookie flags: SameSite=Strict; Secure; HttpOnly Defensive headers: X-Content-Type-Options: nosniff X-Frame-Options: DENY Referrer-Policy: no-referrer Content-Security-Policy: default-src 'self' 11) Debug Like You Mean It \u00b6 # Show response headers only curl -I https://example.com # Verbose curl -v https://example.com # Follow redirects curl -L https://example.com # Conditional GET curl -H 'If-None-Match: \"abc123\"' -I https://example.com/resource 12) Tiny REST API Primer \u00b6 Resources get URIs : /users/42 , /orders/77/items . Methods model intent: GET , POST , PUT , PATCH , DELETE . Status codes = communication contract. Representation is usually JSON: Content-Type: application/json Error body: structured JSON with code , message , fields . 13) Minimal \u201cMust-Know\u201d List \u00b6 Methods: GET / POST / PUT / PATCH / DELETE Codes: 200 / 201 / 204 / 301 / 304 / 400 / 401 / 403 / 404 / 409 / 422 / 429 / 500 Headers: Content-Type / Accept / Authorization / Cache-Control / ETag / Vary / Location Caching: max-age / ETag + If-None-Match / 304 14) Java & Spring Quick Hooks \u00b6 @GetMapping ( \"/books/{id}\" ) @PostMapping ( value = \"/books\" , consumes = \"application/json\" , produces = \"application/json\" ) @PutMapping ( \"/books/{id}\" ) @DeleteMapping ( \"/books/{id}\" ) return ResponseEntity . ok () . header ( \"Cache-Control\" , \"public, max-age=60\" ) . eTag ( hash ) . body ( dto ); \ud83e\udde9 Pocket Glossary \u00b6 Idempotent: redoing the same call yields the same server state. Safe: doesn\u2019t change server state (GET, HEAD). Origin: scheme + host + port combo. Payload: the body of a request or response. \ud83e\uddf1 When You Split This File Later \u00b6 Break into: http-basics.md methods.md headers.md status-codes.md caching.md security.md Keep this file as your top-level \u201cmap\u201d of HTTP knowledge.","title":"Quick Start"},{"location":"cheatsheets/networking/http/00-quickstart/#http-quick-start","text":"A speed-run of the web\u2019s lingua franca. Keep this handy; split it later when you outgrow it.","title":"\u26a1 HTTP \u2014 Quick Start"},{"location":"cheatsheets/networking/http/00-quickstart/#mental-model","text":"HTTP is like sending letters through a global post office: You (the client ) write a request letter with headers and maybe a body. The server reads it and replies with a response letter . Each exchange is independent \u2014 no long-term memory unless you bring cookies. That\u2019s why you often combine it with: Sessions / Tokens \u2192 to maintain identity TLS (HTTPS) \u2192 to keep the mail private Caching \u2192 to avoid sending the same letter again","title":"\ud83e\udded Mental Model"},{"location":"cheatsheets/networking/http/00-quickstart/#1-what-http-is-and-isnt","text":"HTTP = H yper T ext T ransfer P rotocol \u2014 rules for how a client talks to a server . Stateless : each request stands alone. Servers don\u2019t \u201cremember\u201d you unless you give them state (cookies, tokens). Text-first : start line \u2192 headers \u2192 optional body. Easy to read, easy to debug. HTTPS = HTTP over TLS for privacy + integrity. Client \u2500\u2500request\u2500\u2500> Server <\u2500response\u2500\u2500","title":"1) What HTTP Is (and Isn\u2019t)"},{"location":"cheatsheets/networking/http/00-quickstart/#2-the-shape-of-a-request","text":"GET /path?key=value HTTP/1.1 Host: example.com User-Agent: curl/8.0 Accept: application/json Authorization: Bearer <token> <body is optional> Key parts: Method (GET/POST/PUT/DELETE/\u2026) Target ( /path?query ) Version (HTTP/1.1 or HTTP/2/HTTP/3) Headers (metadata) Body (optional; usually with POST/PUT/PATCH)","title":"2) The Shape of a Request"},{"location":"cheatsheets/networking/http/00-quickstart/#minimal-curl","text":"# Simple GET curl https://example.com/api/items # GET with query + headers curl -H \"Accept: application/json\" \\ \"https://example.com/search?q=books&page=2\" # POST JSON curl -X POST -H \"Content-Type: application/json\" \\ -d '{\"title\":\"Dune\"}' https://example.com/api/books","title":"Minimal cURL"},{"location":"cheatsheets/networking/http/00-quickstart/#3-the-shape-of-a-response","text":"HTTP/1.1 200 OK Content-Type: application/json Content-Length: 27 Cache-Control: max-age=3600 {\"message\":\"hello, world\"} Status line : version + status code + reason phrase Headers : metadata about the payload/caching/etc. Body : bytes (JSON, HTML, image, zip\u2026).","title":"3) The Shape of a Response"},{"location":"cheatsheets/networking/http/00-quickstart/#4-methods-what-youre-asking-for","text":"Method Idempotent? Has body? Typical use GET \u2705 \u274c Fetch a resource (no side-effects). HEAD \u2705 \u274c GET without body (check headers/size). POST \u274c \u2705 Create / command / non-idempotent actions. PUT \u2705 \u2705 Replace a resource entirely at the target URI. PATCH \u274c(usually) \u2705 Partial update of a resource. DELETE \u2705 (opt) Remove a resource. OPTIONS \u2705 (opt) What can I do here? Used in CORS preflights. Idempotent = same request repeated \u2192 same result on the server.","title":"4) Methods (What You\u2019re Asking For)"},{"location":"cheatsheets/networking/http/00-quickstart/#5-status-codes-quick-map","text":"","title":"5) Status Codes (Quick Map)"},{"location":"cheatsheets/networking/http/00-quickstart/#2xx-success","text":"200 OK \u2014 here\u2019s your thing. 201 Created \u2014 new resource made; often returns Location . 204 No Content \u2014 success, no body (e.g., DELETE).","title":"2xx \u2014 Success"},{"location":"cheatsheets/networking/http/00-quickstart/#3xx-redirection","text":"301 Moved Permanently 302 Found (temporary) 303 See Other \u2014 after POST, go GET this URL. 307/308 \u2014 redirect but don\u2019t change method/body.","title":"3xx \u2014 Redirection"},{"location":"cheatsheets/networking/http/00-quickstart/#4xx-client-errors","text":"400 Bad Request \u2014 malformed request. 401 Unauthorized \u2014 missing/invalid auth. 403 Forbidden \u2014 authenticated but not allowed. 404 Not Found 409 Conflict \u2014 version mismatch, duplicate data. 422 Unprocessable Content \u2014 validation failed. 429 Too Many Requests \u2014 rate-limited.","title":"4xx \u2014 Client Errors"},{"location":"cheatsheets/networking/http/00-quickstart/#5xx-server-errors","text":"500 Internal Server Error 502 Bad Gateway 503 Service Unavailable 504 Gateway Timeout","title":"5xx \u2014 Server Errors"},{"location":"cheatsheets/networking/http/00-quickstart/#6-headers-that-actually-matter-daily-use","text":"","title":"6) Headers That Actually Matter (Daily Use)"},{"location":"cheatsheets/networking/http/00-quickstart/#request-headers","text":"Host: domain name (mandatory in HTTP/1.1). Accept: formats you\u2019ll accept. Authorization: bearer token or basic credentials. Content-Type: body\u2019s media type. If-None-Match: ask only if changed (ETag). If-Modified-Since: ask only if newer than date.","title":"Request headers"},{"location":"cheatsheets/networking/http/00-quickstart/#response-headers","text":"Content-Type: what\u2019s in the body. Cache-Control: caching policy. ETag: body fingerprint for change detection. Last-Modified: timestamp of resource. Vary: which headers affect caching. Set-Cookie: session or tracking data. Location: for redirects or newly created resources.","title":"Response headers"},{"location":"cheatsheets/networking/http/00-quickstart/#7-caching-speed-without-lies","text":"Goal: serve from cache when safe, skip server work, save bandwidth. Freshness Cache-Control: max-age=600 \u2192 cache 10 minutes. no-store = never save; no-cache = revalidate first. Revalidation If-None-Match + ETag or If-Modified-Since + Last-Modified . Unchanged \u2192 304 Not Modified . User data Cache-Control: private, no-store","title":"7) Caching (Speed Without Lies)"},{"location":"cheatsheets/networking/http/00-quickstart/#8-content-negotiation","text":"Client says what it wants; server chooses best match. Example: Accept: application/json, text/html;q=0.8 Response: Content-Type: application/json","title":"8) Content Negotiation"},{"location":"cheatsheets/networking/http/00-quickstart/#9-cors-cross-origin-resource-sharing","text":"Browsers block JS calls across domains by default. Server enables access with headers: Access-Control-Allow-Origin: https://yourapp.com Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS Access-Control-Allow-Headers: Content-Type, Authorization Complex requests trigger an OPTIONS preflight .","title":"9) CORS (Cross-Origin Resource Sharing)"},{"location":"cheatsheets/networking/http/00-quickstart/#10-http-versions-at-a-glance","text":"HTTP/1.1: text-based, single request per connection. HTTP/2: binary, multiplexed, header compression (HPACK). HTTP/3: runs on QUIC (UDP), faster handshakes, fewer delays. Negotiated automatically; you don\u2019t code to versions.","title":"10) HTTP Versions at a Glance"},{"location":"cheatsheets/networking/http/00-quickstart/#performance-modern-http-practices","text":"Compression: Content-Encoding: gzip or br . Connection reuse: Connection: keep-alive . Streaming: chunked transfer for large payloads. CDNs: act as distributed HTTP caches. Caching layers: browser \u2192 proxy \u2192 CDN \u2192 origin.","title":"\ud83d\ude80 Performance &amp; Modern HTTP Practices"},{"location":"cheatsheets/networking/http/00-quickstart/#security-at-a-glance","text":"Always use HTTPS \u2014 plain HTTP is obsolete. Validate input even from \u201ctrusted\u201d clients. Don\u2019t leak stack traces or system info in errors. Use secure cookie flags: SameSite=Strict; Secure; HttpOnly Defensive headers: X-Content-Type-Options: nosniff X-Frame-Options: DENY Referrer-Policy: no-referrer Content-Security-Policy: default-src 'self'","title":"\ud83d\udd10 Security at a Glance"},{"location":"cheatsheets/networking/http/00-quickstart/#11-debug-like-you-mean-it","text":"# Show response headers only curl -I https://example.com # Verbose curl -v https://example.com # Follow redirects curl -L https://example.com # Conditional GET curl -H 'If-None-Match: \"abc123\"' -I https://example.com/resource","title":"11) Debug Like You Mean It"},{"location":"cheatsheets/networking/http/00-quickstart/#12-tiny-rest-api-primer","text":"Resources get URIs : /users/42 , /orders/77/items . Methods model intent: GET , POST , PUT , PATCH , DELETE . Status codes = communication contract. Representation is usually JSON: Content-Type: application/json Error body: structured JSON with code , message , fields .","title":"12) Tiny REST API Primer"},{"location":"cheatsheets/networking/http/00-quickstart/#13-minimal-must-know-list","text":"Methods: GET / POST / PUT / PATCH / DELETE Codes: 200 / 201 / 204 / 301 / 304 / 400 / 401 / 403 / 404 / 409 / 422 / 429 / 500 Headers: Content-Type / Accept / Authorization / Cache-Control / ETag / Vary / Location Caching: max-age / ETag + If-None-Match / 304","title":"13) Minimal \u201cMust-Know\u201d List"},{"location":"cheatsheets/networking/http/00-quickstart/#14-java-spring-quick-hooks","text":"@GetMapping ( \"/books/{id}\" ) @PostMapping ( value = \"/books\" , consumes = \"application/json\" , produces = \"application/json\" ) @PutMapping ( \"/books/{id}\" ) @DeleteMapping ( \"/books/{id}\" ) return ResponseEntity . ok () . header ( \"Cache-Control\" , \"public, max-age=60\" ) . eTag ( hash ) . body ( dto );","title":"14) Java &amp; Spring Quick Hooks"},{"location":"cheatsheets/networking/http/00-quickstart/#pocket-glossary","text":"Idempotent: redoing the same call yields the same server state. Safe: doesn\u2019t change server state (GET, HEAD). Origin: scheme + host + port combo. Payload: the body of a request or response.","title":"\ud83e\udde9 Pocket Glossary"},{"location":"cheatsheets/networking/http/00-quickstart/#when-you-split-this-file-later","text":"Break into: http-basics.md methods.md headers.md status-codes.md caching.md security.md Keep this file as your top-level \u201cmap\u201d of HTTP knowledge.","title":"\ud83e\uddf1 When You Split This File Later"},{"location":"cheatsheets/networking/http/state/","text":"\ud83c\udf6a Sessions, Tokens & Cookies \u2014 Quick Refresher \u00b6 How HTTP, a stateless protocol, learns to remember you. See also: HTTP State Evolution 1) The Core Problem \u00b6 HTTP by design has no memory . Each request is independent \u2014 the server doesn\u2019t know it\u2019s you returning unless you tell it every time. So to build logins, carts, dashboards, and \u201cremember me\u201d experiences, we need a state mechanism \u2014 something that links separate requests together. Three main patterns exist: Mechanism Where State Lives Common Use Sessions On the server Web apps, classic login Cookies On the client (browser) Store session IDs, small data Tokens On the client (API world) JWTs, OAuth access tokens 2) Sessions \u2014 The Old but Gold Approach \u00b6 \ud83e\udde9 Idea \u00b6 Store a \u201csession record\u201d on the server \u2014 usually a hash map like: sessionId -> { userId: 42, role: \"admin\", cart: [...] } The client just holds a random session ID: Cookie: sessionId=abc123 The server looks it up on every request. \u2699\ufe0f How It Works \u00b6 User logs in with username/password. Server creates a session in memory or database. Server sends the session ID to the client as a cookie. Client sends it with every request. \ud83d\udca1 Pros \u00b6 Easy to invalidate ( delete sessionId server-side). Works with simple cookies (no JWT complexity). Secure if server stores minimal data. \u26a0\ufe0f Cons \u00b6 Doesn\u2019t scale easily across multiple servers unless you share session storage (Redis, database, etc.). Not ideal for stateless APIs. Example \u00b6 POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure GET /profile \u2192 Cookie: sessionId=abc123 3) Cookies \u2014 The Tiny Carriers of State \u00b6 Cookies are small text blobs (\u22484KB each) stored by browsers per origin. They automatically attach to every HTTP request to that site. \ud83c\udf6c Example \u00b6 Set-Cookie: theme=dark; Path=/; Max-Age=3600; SameSite=Lax Browser then adds: Cookie: theme=dark \ud83e\udde0 Key Attributes \u00b6 Attribute Meaning Domain which host(s) can read it Path restrict cookie to part of site Expires / Max-Age when to delete it Secure only send over HTTPS HttpOnly JS can\u2019t access it (prevents XSS stealing) SameSite controls cross-site sending (prevents CSRF) \ud83d\udd12 Security baseline \u00b6 Set-Cookie: sessionId=abc123; Secure; HttpOnly; SameSite=Strict 4) Tokens \u2014 Modern, Stateless Authentication \u00b6 Tokens shift state to the client , so servers don\u2019t store sessions. They\u2019re ideal for APIs, SPAs, and mobile apps. The two main types: Token Type Format Where Stored Expiry JWT (JSON Web Token) signed JSON localStorage / cookie short-lived (mins\u2013hrs) Opaque Token random ID server DB lookup flexible \ud83d\udd27 JWT Example \u00b6 Header.Payload.Signature \u2014 all Base64 encoded. { \"sub\" : \"42\" , \"name\" : \"Edgaras\" , \"exp\" : 1737000000 } JWTs are signed with a secret (HMAC) or private key (RSA). The server verifies the signature \u2014 no DB lookup needed. Typical Flow \u00b6 User logs in \u2192 server returns access_token + refresh_token . Client stores them (preferably in memory or httpOnly cookie ). Sends token in every request: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR... 4. When access token expires, client uses refresh token to get a new one. \ud83d\udca1 Pros \u00b6 Perfect for distributed / stateless backends. Scales easily. Easy to integrate with mobile / third-party clients. \u26a0\ufe0f Cons \u00b6 Harder to invalidate before expiry (you can only blacklist). Token theft = full impersonation until expiry. 5) Cookies vs Tokens \u2014 The Real Difference \u00b6 Aspect Cookie Session Token-based State stored Server-side Client-side Transport Automatic via browser Manual in Authorization header Invalidation Easy (delete on server) Harder (must track blacklists) Scalability Requires shared session store Scales horizontally Works with Browser + HTML apps APIs, SPAs, mobile apps CSRF risk Yes Minimal (if no cookies used) 6) Mixing Cookies & Tokens (Hybrid Pattern) \u00b6 Modern secure apps often use tokens inside cookies . Set-Cookie: access_token=<JWT>; HttpOnly; Secure; SameSite=Strict Benefits: Automatic sending like sessions. JWT\u2019s stateless verification. HttpOnly flag protects from JS theft. Used by major frameworks like NextAuth , Spring Security , and Django Rest Framework . 7) Refresh Tokens \u00b6 To balance security and convenience , many systems use two tokens: Type Lifetime Purpose Access token short (5\u201315 min) Used for API requests Refresh token long (days\u2013weeks) Used to get new access token The refresh token is sent only to /auth/refresh endpoint \u2014 not every request. 8) CSRF & XSS \u2014 The Twin Threats \u00b6 Cross-Site Request Forgery (CSRF) \u00b6 When attacker tricks browser into sending a cookie-authenticated request. Prevent with: SameSite=Strict or Lax cookies. CSRF token in form submissions. Use of Authorization header instead of cookies for APIs. Cross-Site Scripting (XSS) \u00b6 When injected JS steals tokens or cookies. Prevent with: HttpOnly cookies. Strict Content-Security-Policy. Input sanitization. 9) Practical Example \u2014 Login Flow Comparison \u00b6 \ud83c\udf6a Cookie-based (Sessions) \u00b6 POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure GET /dashboard \u2192 Cookie: sessionId=abc123 \ud83e\ude99 Token-based (JWT) \u00b6 POST /login \u2192 { \"access_token\": \"eyJ...\", \"refresh_token\": \"eyJ...\" } GET /profile \u2192 Authorization: Bearer eyJ... 10) Quick Recap \u2014 What to Use When \u00b6 Use Case Recommended Classic server-rendered site Sessions + Cookies REST API / mobile app JWTs (access + refresh tokens) Microservices / distributed JWTs or opaque tokens with gateway validation Sensitive data / high security Short-lived tokens + HttpOnly cookies Public API API keys (simple token variant) 11) Java & Spring Quick Hooks \u00b6 Session Example \u00b6 @PostMapping ( \"/login\" ) public ResponseEntity <?> login ( HttpSession session ) { session . setAttribute ( \"user\" , user ); return ResponseEntity . ok (). build (); } JWT Filter Example \u00b6 String authHeader = request . getHeader ( \"Authorization\" ); if ( authHeader != null && authHeader . startsWith ( \"Bearer \" )) { String token = authHeader . substring ( 7 ); Claims claims = jwtUtil . validateToken ( token ); // attach user info to security context } 12) Pocket Glossary \u00b6 Session: server-side memory of a user\u2019s state. Cookie: key-value pair stored on client, sent automatically with requests. Token: signed credential representing a user (e.g., JWT). Refresh token: used to issue new access tokens. CSRF: tricking browser into unintended requests. XSS: injecting scripts that run in a user\u2019s browser. 13) Summary Thought \u00b6 HTTP forgets. Sessions, cookies, and tokens are three ways to make it remember \u2014 but each trades simplicity for scalability, and security for convenience. Knowing when to store state and when to trust statelessness is what separates beginners from real backend engineers.","title":"State"},{"location":"cheatsheets/networking/http/state/#sessions-tokens-cookies-quick-refresher","text":"How HTTP, a stateless protocol, learns to remember you. See also: HTTP State Evolution","title":"\ud83c\udf6a Sessions, Tokens &amp; Cookies \u2014 Quick Refresher"},{"location":"cheatsheets/networking/http/state/#1-the-core-problem","text":"HTTP by design has no memory . Each request is independent \u2014 the server doesn\u2019t know it\u2019s you returning unless you tell it every time. So to build logins, carts, dashboards, and \u201cremember me\u201d experiences, we need a state mechanism \u2014 something that links separate requests together. Three main patterns exist: Mechanism Where State Lives Common Use Sessions On the server Web apps, classic login Cookies On the client (browser) Store session IDs, small data Tokens On the client (API world) JWTs, OAuth access tokens","title":"1) The Core Problem"},{"location":"cheatsheets/networking/http/state/#2-sessions-the-old-but-gold-approach","text":"","title":"2) Sessions \u2014 The Old but Gold Approach"},{"location":"cheatsheets/networking/http/state/#idea","text":"Store a \u201csession record\u201d on the server \u2014 usually a hash map like: sessionId -> { userId: 42, role: \"admin\", cart: [...] } The client just holds a random session ID: Cookie: sessionId=abc123 The server looks it up on every request.","title":"\ud83e\udde9 Idea"},{"location":"cheatsheets/networking/http/state/#how-it-works","text":"User logs in with username/password. Server creates a session in memory or database. Server sends the session ID to the client as a cookie. Client sends it with every request.","title":"\u2699\ufe0f How It Works"},{"location":"cheatsheets/networking/http/state/#pros","text":"Easy to invalidate ( delete sessionId server-side). Works with simple cookies (no JWT complexity). Secure if server stores minimal data.","title":"\ud83d\udca1 Pros"},{"location":"cheatsheets/networking/http/state/#cons","text":"Doesn\u2019t scale easily across multiple servers unless you share session storage (Redis, database, etc.). Not ideal for stateless APIs.","title":"\u26a0\ufe0f Cons"},{"location":"cheatsheets/networking/http/state/#example","text":"POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure GET /profile \u2192 Cookie: sessionId=abc123","title":"Example"},{"location":"cheatsheets/networking/http/state/#3-cookies-the-tiny-carriers-of-state","text":"Cookies are small text blobs (\u22484KB each) stored by browsers per origin. They automatically attach to every HTTP request to that site.","title":"3) Cookies \u2014 The Tiny Carriers of State"},{"location":"cheatsheets/networking/http/state/#example_1","text":"Set-Cookie: theme=dark; Path=/; Max-Age=3600; SameSite=Lax Browser then adds: Cookie: theme=dark","title":"\ud83c\udf6c Example"},{"location":"cheatsheets/networking/http/state/#key-attributes","text":"Attribute Meaning Domain which host(s) can read it Path restrict cookie to part of site Expires / Max-Age when to delete it Secure only send over HTTPS HttpOnly JS can\u2019t access it (prevents XSS stealing) SameSite controls cross-site sending (prevents CSRF)","title":"\ud83e\udde0 Key Attributes"},{"location":"cheatsheets/networking/http/state/#security-baseline","text":"Set-Cookie: sessionId=abc123; Secure; HttpOnly; SameSite=Strict","title":"\ud83d\udd12 Security baseline"},{"location":"cheatsheets/networking/http/state/#4-tokens-modern-stateless-authentication","text":"Tokens shift state to the client , so servers don\u2019t store sessions. They\u2019re ideal for APIs, SPAs, and mobile apps. The two main types: Token Type Format Where Stored Expiry JWT (JSON Web Token) signed JSON localStorage / cookie short-lived (mins\u2013hrs) Opaque Token random ID server DB lookup flexible","title":"4) Tokens \u2014 Modern, Stateless Authentication"},{"location":"cheatsheets/networking/http/state/#jwt-example","text":"Header.Payload.Signature \u2014 all Base64 encoded. { \"sub\" : \"42\" , \"name\" : \"Edgaras\" , \"exp\" : 1737000000 } JWTs are signed with a secret (HMAC) or private key (RSA). The server verifies the signature \u2014 no DB lookup needed.","title":"\ud83d\udd27 JWT Example"},{"location":"cheatsheets/networking/http/state/#typical-flow","text":"User logs in \u2192 server returns access_token + refresh_token . Client stores them (preferably in memory or httpOnly cookie ). Sends token in every request: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR... 4. When access token expires, client uses refresh token to get a new one.","title":"Typical Flow"},{"location":"cheatsheets/networking/http/state/#pros_1","text":"Perfect for distributed / stateless backends. Scales easily. Easy to integrate with mobile / third-party clients.","title":"\ud83d\udca1 Pros"},{"location":"cheatsheets/networking/http/state/#cons_1","text":"Harder to invalidate before expiry (you can only blacklist). Token theft = full impersonation until expiry.","title":"\u26a0\ufe0f Cons"},{"location":"cheatsheets/networking/http/state/#5-cookies-vs-tokens-the-real-difference","text":"Aspect Cookie Session Token-based State stored Server-side Client-side Transport Automatic via browser Manual in Authorization header Invalidation Easy (delete on server) Harder (must track blacklists) Scalability Requires shared session store Scales horizontally Works with Browser + HTML apps APIs, SPAs, mobile apps CSRF risk Yes Minimal (if no cookies used)","title":"5) Cookies vs Tokens \u2014 The Real Difference"},{"location":"cheatsheets/networking/http/state/#6-mixing-cookies-tokens-hybrid-pattern","text":"Modern secure apps often use tokens inside cookies . Set-Cookie: access_token=<JWT>; HttpOnly; Secure; SameSite=Strict Benefits: Automatic sending like sessions. JWT\u2019s stateless verification. HttpOnly flag protects from JS theft. Used by major frameworks like NextAuth , Spring Security , and Django Rest Framework .","title":"6) Mixing Cookies &amp; Tokens (Hybrid Pattern)"},{"location":"cheatsheets/networking/http/state/#7-refresh-tokens","text":"To balance security and convenience , many systems use two tokens: Type Lifetime Purpose Access token short (5\u201315 min) Used for API requests Refresh token long (days\u2013weeks) Used to get new access token The refresh token is sent only to /auth/refresh endpoint \u2014 not every request.","title":"7) Refresh Tokens"},{"location":"cheatsheets/networking/http/state/#8-csrf-xss-the-twin-threats","text":"","title":"8) CSRF &amp; XSS \u2014 The Twin Threats"},{"location":"cheatsheets/networking/http/state/#cross-site-request-forgery-csrf","text":"When attacker tricks browser into sending a cookie-authenticated request. Prevent with: SameSite=Strict or Lax cookies. CSRF token in form submissions. Use of Authorization header instead of cookies for APIs.","title":"Cross-Site Request Forgery (CSRF)"},{"location":"cheatsheets/networking/http/state/#cross-site-scripting-xss","text":"When injected JS steals tokens or cookies. Prevent with: HttpOnly cookies. Strict Content-Security-Policy. Input sanitization.","title":"Cross-Site Scripting (XSS)"},{"location":"cheatsheets/networking/http/state/#9-practical-example-login-flow-comparison","text":"","title":"9) Practical Example \u2014 Login Flow Comparison"},{"location":"cheatsheets/networking/http/state/#cookie-based-sessions","text":"POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure GET /dashboard \u2192 Cookie: sessionId=abc123","title":"\ud83c\udf6a Cookie-based (Sessions)"},{"location":"cheatsheets/networking/http/state/#token-based-jwt","text":"POST /login \u2192 { \"access_token\": \"eyJ...\", \"refresh_token\": \"eyJ...\" } GET /profile \u2192 Authorization: Bearer eyJ...","title":"\ud83e\ude99 Token-based (JWT)"},{"location":"cheatsheets/networking/http/state/#10-quick-recap-what-to-use-when","text":"Use Case Recommended Classic server-rendered site Sessions + Cookies REST API / mobile app JWTs (access + refresh tokens) Microservices / distributed JWTs or opaque tokens with gateway validation Sensitive data / high security Short-lived tokens + HttpOnly cookies Public API API keys (simple token variant)","title":"10) Quick Recap \u2014 What to Use When"},{"location":"cheatsheets/networking/http/state/#11-java-spring-quick-hooks","text":"","title":"11) Java &amp; Spring Quick Hooks"},{"location":"cheatsheets/networking/http/state/#session-example","text":"@PostMapping ( \"/login\" ) public ResponseEntity <?> login ( HttpSession session ) { session . setAttribute ( \"user\" , user ); return ResponseEntity . ok (). build (); }","title":"Session Example"},{"location":"cheatsheets/networking/http/state/#jwt-filter-example","text":"String authHeader = request . getHeader ( \"Authorization\" ); if ( authHeader != null && authHeader . startsWith ( \"Bearer \" )) { String token = authHeader . substring ( 7 ); Claims claims = jwtUtil . validateToken ( token ); // attach user info to security context }","title":"JWT Filter Example"},{"location":"cheatsheets/networking/http/state/#12-pocket-glossary","text":"Session: server-side memory of a user\u2019s state. Cookie: key-value pair stored on client, sent automatically with requests. Token: signed credential representing a user (e.g., JWT). Refresh token: used to issue new access tokens. CSRF: tricking browser into unintended requests. XSS: injecting scripts that run in a user\u2019s browser.","title":"12) Pocket Glossary"},{"location":"cheatsheets/networking/http/state/#13-summary-thought","text":"HTTP forgets. Sessions, cookies, and tokens are three ways to make it remember \u2014 but each trades simplicity for scalability, and security for convenience. Knowing when to store state and when to trust statelessness is what separates beginners from real backend engineers.","title":"13) Summary Thought"},{"location":"cheatsheets/tools/architecture/backend-overview/","text":"\ud83e\udde9 Backend System Architecture Overview \u00b6 (Git \u2192 Docker \u2192 Nginx \u2192 PostgreSQL \u2192 Redis \u2192 systemd) \u00b6 This overview connects the dots between your core tools \u2014 how they work together to deliver a modern backend system. You now have the whole pipeline from code commit to production runtime. \ud83e\uddf1 1. The Big Picture: Data Flow and Control Flow \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Git \u2502 push\u2192 \u2502 Docker \u2502 run\u2192 \u2502 systemd \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 build images \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 Containers: \u2502 \u2502 \u2502 \u251c\u2500 Nginx (proxy) \u2502 \u2502 \u2502 \u251c\u2500 Backend (API) \u2502 \u2502 \u2502 \u251c\u2500 PostgreSQL (DB)\u2502 \u2502 \u2502 \u2514\u2500 Redis (cache) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 inbound requests \u2502 \u2502 \u2502 Clients \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ```` **Data flow summary:** 1. Users \u2192 **Nginx** \u2192 **Backend API** 2. API \u2192 **PostgreSQL** for durable data 3. API \u2194 **Redis** for caching/session data 4. All of it runs under **Docker**, orchestrated by **systemd** 5. Source code and configs tracked via **Git** --- ## \u2699\ufe0f 2. Startup Order (Dependency Chain) When your system boots or deploys: | Order | Component | Managed By | Description | |--------|------------|-------------|--------------| | 1\ufe0f\u20e3 | systemd | Linux | Starts Docker, PostgreSQL, Redis, Nginx | | 2\ufe0f\u20e3 | Docker | systemd | Brings containers online | | 3\ufe0f\u20e3 | Databases (Postgres, Redis) | Docker Compose | Foundational services | | 4\ufe0f\u20e3 | Application backend | Docker Compose | Connects to DBs | | 5\ufe0f\u20e3 | Nginx | Docker Compose | Public entrypoint | | 6\ufe0f\u20e3 | Developers | Git | Deploy and version control updates | \ud83d\udca1 In production, **systemd manages Docker**, while **Docker manages everything else.** --- ## \ud83e\uddf0 3. Git: The Source of Truth **Purpose:** Version control for everything \u2014 code, Dockerfiles, configs. ```bash git clone repo-url git commit -m \"Add Nginx reverse proxy\" git push origin main ```` **Best practice:** Store `.env.example`, `docker-compose.yml`, `nginx.conf`, and service configs in Git \u2014 but **never credentials**. Use `.gitignore` for: .env *.log pycache / data/ --- ## \ud83d\udc33 4. Docker: The Environment Fabric **Purpose:** Package and run every service in isolation. Typical structure: docker/ \u251c\u2500 nginx/ \u251c\u2500 backend/ \u251c\u2500 postgres/ \u2514\u2500 redis/ **docker-compose.yml** ```yaml services: nginx: image: nginx:latest ports: [\"80:80\"] backend: build: ./backend depends_on: [postgres, redis] postgres: image: postgres:16 redis: image: redis:7 Docker defines your runtime graph ; Compose defines relationships . Everything above this line (Nginx, API, DB) lives in its own lightweight container. \ud83c\udf10 5. Nginx: The Front Gate \u00b6 Purpose: Routes HTTP traffic, handles HTTPS, and load-balances backend requests. Flow: Client \u2192 Nginx \u2192 Backend container Common setup: server { listen 80 ; server_name example.com ; location /api/ { proxy_pass http://backend:8080 ; } location / { root /usr/share/nginx/html ; } } Nginx offloads: SSL termination Static assets Reverse proxying Rate limiting and caching \ud83d\udc18 6. PostgreSQL: The Reliable Store \u00b6 Purpose: Permanent relational data. It lives in its own container with a mounted volume for persistence. Connections: jdbc:postgresql://postgres:5432/appdb Rules of thumb: Use volumes for data durability. Create separate users for apps. Use pgAdmin or IDE to manage schemas. \ud83d\udd34 7. Redis: The Speed Layer \u00b6 Purpose: In-memory cache, session store, and message broker. Communicates with backend over internal Docker network. Common patterns: Cache-Aside (read-through) Pub/Sub for async events Distributed locks (e.g., for job workers) Spring Boot example: spring.data.redis.host = redis spring.cache.type = redis Redis acts as the short-term memory of your system. \u2699\ufe0f 8. systemd: The Foundation Layer \u00b6 Purpose: Boot, supervise, and restart everything automatically. systemctl controls Docker, PostgreSQL, Redis, and Nginx daemons: sudo systemctl start docker postgresql redis nginx sudo systemctl enable docker systemd ensures services recover after crashes and start at boot. \ud83d\udd01 9. Lifecycle Summary \u00b6 Phase Tool Purpose Development Git, Docker Compose Build and test stack locally Startup systemd Boot and manage background services Runtime Docker Run isolated services Networking Nginx Route traffic Persistence PostgreSQL Store structured data Performance Redis Cache data and speed up requests Recovery systemd Auto-restart failed services Versioning Git Track everything that changes \ud83e\udde0 10. Environment Interaction Diagram \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Clients \u2502 \u2502 (Browser, API consumer, mobile app) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Nginx \u2502 (HTTP entrypoint) \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Backend (API) \u2502 \u2502 (Spring, Python) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 SQL queries Cached data \u2502 \u2502 \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PostgreSQL \u2502 \u2502 Redis \u2502 \u2502 (data at rest) \u2502 \u2502 (data in RAM) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25b2 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Docker \u2502 \u2502 (runs all) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 systemd \u2502 \u2502 (boots Docker) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Git \u2502 \u2502 (build source) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \ud83e\uddf0 11. Developer Flow: \u201cFrom Code to Live System\u201d \u00b6 Code change \u2192 Commit in Git. Build image \u2192 Docker builds backend image. Run stack \u2192 docker compose up -d . Test endpoints \u2192 via Nginx reverse proxy. Persist data \u2192 PostgreSQL. Speed up responses \u2192 Redis caching. Control startup & uptime \u2192 systemd. Repeat confidently \u2014 everything reproducible and tracked. \ud83d\udd12 12. Security & Configuration Flow \u00b6 Layer Responsibility Nginx SSL, headers, access control Docker Container isolation PostgreSQL Authentication, roles Redis Password protection, internal-only binding systemd OS-level permissions, restart policy Git Audit trail, version history \ud83e\udded 13. Future Expansions \u00b6 Once you\u2019re comfortable with this foundation: Add CI/CD (GitHub Actions, Jenkins, or GitLab CI). Introduce Prometheus + Grafana for monitoring. Explore Kubernetes (for distributed orchestration). Use Ansible or Terraform for infrastructure automation. \u2705 14. Summary \u00b6 Git \u2013 tracks your code and infrastructure definitions. Docker \u2013 builds and isolates your runtime. systemd \u2013 ensures your stack survives reboots. Nginx \u2013 routes and protects requests. PostgreSQL \u2013 stores long-term state. Redis \u2013 provides instant responses and caching. Everything fits like gears in a machine \u2014 from developer commit to production uptime.","title":"backend-system-overview"},{"location":"cheatsheets/tools/architecture/backend-overview/#backend-system-architecture-overview","text":"","title":"\ud83e\udde9 Backend System Architecture Overview"},{"location":"cheatsheets/tools/architecture/backend-overview/#git-docker-nginx-postgresql-redis-systemd","text":"This overview connects the dots between your core tools \u2014 how they work together to deliver a modern backend system. You now have the whole pipeline from code commit to production runtime.","title":"(Git \u2192 Docker \u2192 Nginx \u2192 PostgreSQL \u2192 Redis \u2192 systemd)"},{"location":"cheatsheets/tools/architecture/backend-overview/#1-the-big-picture-data-flow-and-control-flow","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Git \u2502 push\u2192 \u2502 Docker \u2502 run\u2192 \u2502 systemd \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 build images \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 Containers: \u2502 \u2502 \u2502 \u251c\u2500 Nginx (proxy) \u2502 \u2502 \u2502 \u251c\u2500 Backend (API) \u2502 \u2502 \u2502 \u251c\u2500 PostgreSQL (DB)\u2502 \u2502 \u2502 \u2514\u2500 Redis (cache) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 inbound requests \u2502 \u2502 \u2502 Clients \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ```` **Data flow summary:** 1. Users \u2192 **Nginx** \u2192 **Backend API** 2. API \u2192 **PostgreSQL** for durable data 3. API \u2194 **Redis** for caching/session data 4. All of it runs under **Docker**, orchestrated by **systemd** 5. Source code and configs tracked via **Git** --- ## \u2699\ufe0f 2. Startup Order (Dependency Chain) When your system boots or deploys: | Order | Component | Managed By | Description | |--------|------------|-------------|--------------| | 1\ufe0f\u20e3 | systemd | Linux | Starts Docker, PostgreSQL, Redis, Nginx | | 2\ufe0f\u20e3 | Docker | systemd | Brings containers online | | 3\ufe0f\u20e3 | Databases (Postgres, Redis) | Docker Compose | Foundational services | | 4\ufe0f\u20e3 | Application backend | Docker Compose | Connects to DBs | | 5\ufe0f\u20e3 | Nginx | Docker Compose | Public entrypoint | | 6\ufe0f\u20e3 | Developers | Git | Deploy and version control updates | \ud83d\udca1 In production, **systemd manages Docker**, while **Docker manages everything else.** --- ## \ud83e\uddf0 3. Git: The Source of Truth **Purpose:** Version control for everything \u2014 code, Dockerfiles, configs. ```bash git clone repo-url git commit -m \"Add Nginx reverse proxy\" git push origin main ```` **Best practice:** Store `.env.example`, `docker-compose.yml`, `nginx.conf`, and service configs in Git \u2014 but **never credentials**. Use `.gitignore` for: .env *.log pycache / data/ --- ## \ud83d\udc33 4. Docker: The Environment Fabric **Purpose:** Package and run every service in isolation. Typical structure: docker/ \u251c\u2500 nginx/ \u251c\u2500 backend/ \u251c\u2500 postgres/ \u2514\u2500 redis/ **docker-compose.yml** ```yaml services: nginx: image: nginx:latest ports: [\"80:80\"] backend: build: ./backend depends_on: [postgres, redis] postgres: image: postgres:16 redis: image: redis:7 Docker defines your runtime graph ; Compose defines relationships . Everything above this line (Nginx, API, DB) lives in its own lightweight container.","title":"\ud83e\uddf1 1. The Big Picture: Data Flow and Control Flow"},{"location":"cheatsheets/tools/architecture/backend-overview/#5-nginx-the-front-gate","text":"Purpose: Routes HTTP traffic, handles HTTPS, and load-balances backend requests. Flow: Client \u2192 Nginx \u2192 Backend container Common setup: server { listen 80 ; server_name example.com ; location /api/ { proxy_pass http://backend:8080 ; } location / { root /usr/share/nginx/html ; } } Nginx offloads: SSL termination Static assets Reverse proxying Rate limiting and caching","title":"\ud83c\udf10 5. Nginx: The Front Gate"},{"location":"cheatsheets/tools/architecture/backend-overview/#6-postgresql-the-reliable-store","text":"Purpose: Permanent relational data. It lives in its own container with a mounted volume for persistence. Connections: jdbc:postgresql://postgres:5432/appdb Rules of thumb: Use volumes for data durability. Create separate users for apps. Use pgAdmin or IDE to manage schemas.","title":"\ud83d\udc18 6. PostgreSQL: The Reliable Store"},{"location":"cheatsheets/tools/architecture/backend-overview/#7-redis-the-speed-layer","text":"Purpose: In-memory cache, session store, and message broker. Communicates with backend over internal Docker network. Common patterns: Cache-Aside (read-through) Pub/Sub for async events Distributed locks (e.g., for job workers) Spring Boot example: spring.data.redis.host = redis spring.cache.type = redis Redis acts as the short-term memory of your system.","title":"\ud83d\udd34 7. Redis: The Speed Layer"},{"location":"cheatsheets/tools/architecture/backend-overview/#8-systemd-the-foundation-layer","text":"Purpose: Boot, supervise, and restart everything automatically. systemctl controls Docker, PostgreSQL, Redis, and Nginx daemons: sudo systemctl start docker postgresql redis nginx sudo systemctl enable docker systemd ensures services recover after crashes and start at boot.","title":"\u2699\ufe0f 8. systemd: The Foundation Layer"},{"location":"cheatsheets/tools/architecture/backend-overview/#9-lifecycle-summary","text":"Phase Tool Purpose Development Git, Docker Compose Build and test stack locally Startup systemd Boot and manage background services Runtime Docker Run isolated services Networking Nginx Route traffic Persistence PostgreSQL Store structured data Performance Redis Cache data and speed up requests Recovery systemd Auto-restart failed services Versioning Git Track everything that changes","title":"\ud83d\udd01 9. Lifecycle Summary"},{"location":"cheatsheets/tools/architecture/backend-overview/#10-environment-interaction-diagram","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Clients \u2502 \u2502 (Browser, API consumer, mobile app) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Nginx \u2502 (HTTP entrypoint) \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Backend (API) \u2502 \u2502 (Spring, Python) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 SQL queries Cached data \u2502 \u2502 \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PostgreSQL \u2502 \u2502 Redis \u2502 \u2502 (data at rest) \u2502 \u2502 (data in RAM) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25b2 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Docker \u2502 \u2502 (runs all) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 systemd \u2502 \u2502 (boots Docker) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Git \u2502 \u2502 (build source) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"\ud83e\udde0 10. Environment Interaction Diagram"},{"location":"cheatsheets/tools/architecture/backend-overview/#11-developer-flow-from-code-to-live-system","text":"Code change \u2192 Commit in Git. Build image \u2192 Docker builds backend image. Run stack \u2192 docker compose up -d . Test endpoints \u2192 via Nginx reverse proxy. Persist data \u2192 PostgreSQL. Speed up responses \u2192 Redis caching. Control startup & uptime \u2192 systemd. Repeat confidently \u2014 everything reproducible and tracked.","title":"\ud83e\uddf0 11. Developer Flow: \u201cFrom Code to Live System\u201d"},{"location":"cheatsheets/tools/architecture/backend-overview/#12-security-configuration-flow","text":"Layer Responsibility Nginx SSL, headers, access control Docker Container isolation PostgreSQL Authentication, roles Redis Password protection, internal-only binding systemd OS-level permissions, restart policy Git Audit trail, version history","title":"\ud83d\udd12 12. Security &amp; Configuration Flow"},{"location":"cheatsheets/tools/architecture/backend-overview/#13-future-expansions","text":"Once you\u2019re comfortable with this foundation: Add CI/CD (GitHub Actions, Jenkins, or GitLab CI). Introduce Prometheus + Grafana for monitoring. Explore Kubernetes (for distributed orchestration). Use Ansible or Terraform for infrastructure automation.","title":"\ud83e\udded 13. Future Expansions"},{"location":"cheatsheets/tools/architecture/backend-overview/#14-summary","text":"Git \u2013 tracks your code and infrastructure definitions. Docker \u2013 builds and isolates your runtime. systemd \u2013 ensures your stack survives reboots. Nginx \u2013 routes and protects requests. PostgreSQL \u2013 stores long-term state. Redis \u2013 provides instant responses and caching. Everything fits like gears in a machine \u2014 from developer commit to production uptime.","title":"\u2705 14. Summary"},{"location":"cheatsheets/tools/architecture/frontend-overview/","text":"\ud83d\udca1 Frontend System Architecture Overview \u00b6 (Node.js \u2192 npm \u2192 React/Vite \u2192 API \u2192 Build & Deployment) \u00b6 The frontend layer is the bridge between users and your backend. It manages UI, application state, and communication with your APIs \u2014 built, bundled, and served through Node.js tooling. This document shows how the frontend development pipeline fits into your full-stack environment. \ud83e\uddf1 1. The Big Picture \u00b6 User \u2192 Browser \u2192 Frontend App (React/Vite) \u2502 \u25bc REST / GraphQL API (Nginx \u2192 Backend) \u2502 PostgreSQL & Redis under the hood ```` **Frontend role:** Present data, handle input, manage state, call backend endpoints, and render updates instantly. --- ## \u2699\ufe0f 2. Core Components of Modern Frontend | Component | Purpose | Tool | |------------|----------|------| | **Runtime** | JavaScript engine for tooling & builds | Node.js | | **Package Manager** | Installs dependencies | npm / pnpm / yarn | | **Framework** | UI logic and components | React, Vue, Svelte | | **Bundler/Dev Server** | Hot reload, build output | Vite / Webpack | | **State Management** | Handle UI data flow | Redux, Zustand, Context API | | **API Layer** | Communicate with backend | Fetch / Axios | | **Build Output** | Static assets for Nginx | `dist/` folder | --- ## \ud83e\udde9 3. Local Development Flow ```bash # Install dependencies npm install # Start dev server npm run dev ```` Default: * Vite dev server on `http://localhost:5173` * Auto-reloads when files change * Proxy API calls to backend (e.g., `http://localhost:8080`) **Example Vite proxy config:** ```js // vite.config.js export default { server: { proxy: { '/api': 'http://localhost:8080' } } }; \ud83e\udde0 4. Folder Structure \u00b6 frontend/ \u251c\u2500 src/ \u2502 \u251c\u2500 components/ \u2502 \u251c\u2500 pages/ \u2502 \u251c\u2500 hooks/ \u2502 \u251c\u2500 context/ \u2502 \u251c\u2500 services/ # API calls, Axios configs \u2502 \u251c\u2500 assets/ # images, styles \u2502 \u2514\u2500 main.jsx \u251c\u2500 public/ \u2502 \u2514\u2500 index.html \u251c\u2500 package.json \u251c\u2500 vite.config.js \u2514\u2500 .env \u26a1 5. Environment Variables \u00b6 Stored in .env (never committed). VITE_API_URL=http://localhost:8080/api VITE_APP_ENV=development Access in React: const apiUrl = import . meta . env . VITE_API_URL ; \u2705 Prefix with VITE_ for access in client-side code. \ud83e\uddf0 6. Communication with Backend \u00b6 REST Example (Axios) \u00b6 import axios from 'axios' ; const api = axios . create ({ baseURL : import . meta . env . VITE_API_URL , }); export const fetchUsers = async () => { const res = await api . get ( '/users' ); return res . data ; }; GraphQL Example \u00b6 import { request , gql } from 'graphql-request' ; const API = import . meta . env . VITE_API_URL + '/graphql' ; const query = gql ` query Users { users { id name } } ` ; export async function getUsers () { return await request ( API , query ); } \ud83e\uddf1 7. State and Caching Strategy \u00b6 Layer Example Purpose React Context AuthContext Manage global state LocalStorage token Persist login SWR / React Query useQuery() Cache API calls Redux / Zustand store slice Predictable state container Rule of thumb: Global state for global data, local state for local UI. \ud83e\udde9 8. Building for Production \u00b6 npm run build Outputs optimized static assets to: frontend/dist/ Files include: index.html assets/*.js , *.css You serve these via Nginx : server { listen 80 ; server_name example.com ; root /usr/share/nginx/html ; index index.html ; location / { try_files $uri /index.html ; } location /api/ { proxy_pass http://backend:8080 ; } } \ud83d\ude80 9. Dockerizing the Frontend \u00b6 Dockerfile: # Build stage FROM node:20-alpine AS build WORKDIR /app COPY package*.json ./ RUN npm install COPY . . RUN npm run build # Serve stage FROM nginx:latest COPY --from = build /app/dist /usr/share/nginx/html COPY nginx.conf /etc/nginx/conf.d/default.conf docker-compose.yml: services : frontend : build : ./frontend ports : - \"3000:80\" depends_on : - backend \ud83d\udcbb 10. Frontend in IDEs (JetBrains / VS Code) \u00b6 JetBrains (WebStorm / IntelliJ Ultimate) \u00b6 Built-in React + TypeScript tooling. Integrated terminal \u2192 run npm run dev . Live linting, code formatting, and Git integration. Debugger for browser + Node processes. Shortcut tips: Shift+F10 \u2014 run dev server Ctrl+B \u2014 jump to component definition Ctrl+Shift+R \u2014 run npm script VS Code Setup \u00b6 Recommended extensions: ESLint \u2014 static analysis Prettier \u2014 formatting Vite \u2014 syntax + run configs Tailwind CSS IntelliSense REST Client \u2014 test API endpoints \ud83e\udde0 11. Testing and Quality \u00b6 Unit tests npm run test Tools: Vitest / Jest. E2E tests npx playwright test Define flows: User logs in Calls /api/users Checks UI update Lint & format npm run lint npm run format Automation ensures consistent builds across machines. \u2699\ufe0f 12. Build \u2192 Deploy Pipeline \u00b6 Local \u2192 Staging \u2192 Production \u00b6 Step Tool Description Code changes Git Track & commit Build Vite Bundle assets Test Jest / Playwright Validate functionality Package Docker Create deployable image Deploy Nginx / CI/CD Serve to users CI/CD example (GitHub Actions): - name : Build and Push Frontend run : | docker build -t ghcr.io/user/frontend:${{ github.sha }} . docker push ghcr.io/user/frontend:${{ github.sha }} \ud83e\udde9 13. Communication with Backend Stack \u00b6 Interaction Description API Requests fetch() or Axios calls to /api/ Auth Tokens Sent via Authorization: Bearer <token> headers Rate Limiting Controlled by Nginx or Redis CORS Managed by backend or Nginx Real-Time Updates WebSockets or Redis Pub/Sub bridges All HTTP requests pass through Nginx , which proxies to the backend and ensures security. \ud83e\uddf0 14. Developer Workflow Summary \u00b6 Pull latest code: git pull Run dev server: npm run dev Build assets: npm run build Serve with Docker or Nginx. Deploy via CI/CD or manually. \ud83e\udded 15. Frontend \u2194 Backend Integration Diagram \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Browser \u2502 \u2502 (React/Vite) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 REST/GraphQL calls \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Nginx Proxy \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 forwards requests \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Backend API \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u25bc PostgreSQL Redis (storage) (cache) \u2705 16. Summary \u00b6 Node.js \u2013 runtime & package manager. Vite/React \u2013 fast UI development. Axios/Fetch \u2013 API communication. Docker & Nginx \u2013 consistent build + deployment. Git & CI/CD \u2013 version control and automation. Together, these tools mirror the backend architecture \u2014 the same principles of reproducibility, versioning, and service boundaries apply.","title":"frontend-system-overview"},{"location":"cheatsheets/tools/architecture/frontend-overview/#frontend-system-architecture-overview","text":"","title":"\ud83d\udca1 Frontend System Architecture Overview"},{"location":"cheatsheets/tools/architecture/frontend-overview/#nodejs-npm-reactvite-api-build-deployment","text":"The frontend layer is the bridge between users and your backend. It manages UI, application state, and communication with your APIs \u2014 built, bundled, and served through Node.js tooling. This document shows how the frontend development pipeline fits into your full-stack environment.","title":"(Node.js \u2192 npm \u2192 React/Vite \u2192 API \u2192 Build &amp; Deployment)"},{"location":"cheatsheets/tools/architecture/frontend-overview/#1-the-big-picture","text":"User \u2192 Browser \u2192 Frontend App (React/Vite) \u2502 \u25bc REST / GraphQL API (Nginx \u2192 Backend) \u2502 PostgreSQL & Redis under the hood ```` **Frontend role:** Present data, handle input, manage state, call backend endpoints, and render updates instantly. --- ## \u2699\ufe0f 2. Core Components of Modern Frontend | Component | Purpose | Tool | |------------|----------|------| | **Runtime** | JavaScript engine for tooling & builds | Node.js | | **Package Manager** | Installs dependencies | npm / pnpm / yarn | | **Framework** | UI logic and components | React, Vue, Svelte | | **Bundler/Dev Server** | Hot reload, build output | Vite / Webpack | | **State Management** | Handle UI data flow | Redux, Zustand, Context API | | **API Layer** | Communicate with backend | Fetch / Axios | | **Build Output** | Static assets for Nginx | `dist/` folder | --- ## \ud83e\udde9 3. Local Development Flow ```bash # Install dependencies npm install # Start dev server npm run dev ```` Default: * Vite dev server on `http://localhost:5173` * Auto-reloads when files change * Proxy API calls to backend (e.g., `http://localhost:8080`) **Example Vite proxy config:** ```js // vite.config.js export default { server: { proxy: { '/api': 'http://localhost:8080' } } };","title":"\ud83e\uddf1 1. The Big Picture"},{"location":"cheatsheets/tools/architecture/frontend-overview/#4-folder-structure","text":"frontend/ \u251c\u2500 src/ \u2502 \u251c\u2500 components/ \u2502 \u251c\u2500 pages/ \u2502 \u251c\u2500 hooks/ \u2502 \u251c\u2500 context/ \u2502 \u251c\u2500 services/ # API calls, Axios configs \u2502 \u251c\u2500 assets/ # images, styles \u2502 \u2514\u2500 main.jsx \u251c\u2500 public/ \u2502 \u2514\u2500 index.html \u251c\u2500 package.json \u251c\u2500 vite.config.js \u2514\u2500 .env","title":"\ud83e\udde0 4. Folder Structure"},{"location":"cheatsheets/tools/architecture/frontend-overview/#5-environment-variables","text":"Stored in .env (never committed). VITE_API_URL=http://localhost:8080/api VITE_APP_ENV=development Access in React: const apiUrl = import . meta . env . VITE_API_URL ; \u2705 Prefix with VITE_ for access in client-side code.","title":"\u26a1 5. Environment Variables"},{"location":"cheatsheets/tools/architecture/frontend-overview/#6-communication-with-backend","text":"","title":"\ud83e\uddf0 6. Communication with Backend"},{"location":"cheatsheets/tools/architecture/frontend-overview/#rest-example-axios","text":"import axios from 'axios' ; const api = axios . create ({ baseURL : import . meta . env . VITE_API_URL , }); export const fetchUsers = async () => { const res = await api . get ( '/users' ); return res . data ; };","title":"REST Example (Axios)"},{"location":"cheatsheets/tools/architecture/frontend-overview/#graphql-example","text":"import { request , gql } from 'graphql-request' ; const API = import . meta . env . VITE_API_URL + '/graphql' ; const query = gql ` query Users { users { id name } } ` ; export async function getUsers () { return await request ( API , query ); }","title":"GraphQL Example"},{"location":"cheatsheets/tools/architecture/frontend-overview/#7-state-and-caching-strategy","text":"Layer Example Purpose React Context AuthContext Manage global state LocalStorage token Persist login SWR / React Query useQuery() Cache API calls Redux / Zustand store slice Predictable state container Rule of thumb: Global state for global data, local state for local UI.","title":"\ud83e\uddf1 7. State and Caching Strategy"},{"location":"cheatsheets/tools/architecture/frontend-overview/#8-building-for-production","text":"npm run build Outputs optimized static assets to: frontend/dist/ Files include: index.html assets/*.js , *.css You serve these via Nginx : server { listen 80 ; server_name example.com ; root /usr/share/nginx/html ; index index.html ; location / { try_files $uri /index.html ; } location /api/ { proxy_pass http://backend:8080 ; } }","title":"\ud83e\udde9 8. Building for Production"},{"location":"cheatsheets/tools/architecture/frontend-overview/#9-dockerizing-the-frontend","text":"Dockerfile: # Build stage FROM node:20-alpine AS build WORKDIR /app COPY package*.json ./ RUN npm install COPY . . RUN npm run build # Serve stage FROM nginx:latest COPY --from = build /app/dist /usr/share/nginx/html COPY nginx.conf /etc/nginx/conf.d/default.conf docker-compose.yml: services : frontend : build : ./frontend ports : - \"3000:80\" depends_on : - backend","title":"\ud83d\ude80 9. Dockerizing the Frontend"},{"location":"cheatsheets/tools/architecture/frontend-overview/#10-frontend-in-ides-jetbrains-vs-code","text":"","title":"\ud83d\udcbb 10. Frontend in IDEs (JetBrains / VS Code)"},{"location":"cheatsheets/tools/architecture/frontend-overview/#jetbrains-webstorm-intellij-ultimate","text":"Built-in React + TypeScript tooling. Integrated terminal \u2192 run npm run dev . Live linting, code formatting, and Git integration. Debugger for browser + Node processes. Shortcut tips: Shift+F10 \u2014 run dev server Ctrl+B \u2014 jump to component definition Ctrl+Shift+R \u2014 run npm script","title":"JetBrains (WebStorm / IntelliJ Ultimate)"},{"location":"cheatsheets/tools/architecture/frontend-overview/#vs-code-setup","text":"Recommended extensions: ESLint \u2014 static analysis Prettier \u2014 formatting Vite \u2014 syntax + run configs Tailwind CSS IntelliSense REST Client \u2014 test API endpoints","title":"VS Code Setup"},{"location":"cheatsheets/tools/architecture/frontend-overview/#11-testing-and-quality","text":"Unit tests npm run test Tools: Vitest / Jest. E2E tests npx playwright test Define flows: User logs in Calls /api/users Checks UI update Lint & format npm run lint npm run format Automation ensures consistent builds across machines.","title":"\ud83e\udde0 11. Testing and Quality"},{"location":"cheatsheets/tools/architecture/frontend-overview/#12-build-deploy-pipeline","text":"","title":"\u2699\ufe0f 12. Build \u2192 Deploy Pipeline"},{"location":"cheatsheets/tools/architecture/frontend-overview/#local-staging-production","text":"Step Tool Description Code changes Git Track & commit Build Vite Bundle assets Test Jest / Playwright Validate functionality Package Docker Create deployable image Deploy Nginx / CI/CD Serve to users CI/CD example (GitHub Actions): - name : Build and Push Frontend run : | docker build -t ghcr.io/user/frontend:${{ github.sha }} . docker push ghcr.io/user/frontend:${{ github.sha }}","title":"Local \u2192 Staging \u2192 Production"},{"location":"cheatsheets/tools/architecture/frontend-overview/#13-communication-with-backend-stack","text":"Interaction Description API Requests fetch() or Axios calls to /api/ Auth Tokens Sent via Authorization: Bearer <token> headers Rate Limiting Controlled by Nginx or Redis CORS Managed by backend or Nginx Real-Time Updates WebSockets or Redis Pub/Sub bridges All HTTP requests pass through Nginx , which proxies to the backend and ensures security.","title":"\ud83e\udde9 13. Communication with Backend Stack"},{"location":"cheatsheets/tools/architecture/frontend-overview/#14-developer-workflow-summary","text":"Pull latest code: git pull Run dev server: npm run dev Build assets: npm run build Serve with Docker or Nginx. Deploy via CI/CD or manually.","title":"\ud83e\uddf0 14. Developer Workflow Summary"},{"location":"cheatsheets/tools/architecture/frontend-overview/#15-frontend-backend-integration-diagram","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Browser \u2502 \u2502 (React/Vite) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 REST/GraphQL calls \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Nginx Proxy \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 forwards requests \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Backend API \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u25bc PostgreSQL Redis (storage) (cache)","title":"\ud83e\udded 15. Frontend \u2194 Backend Integration Diagram"},{"location":"cheatsheets/tools/architecture/frontend-overview/#16-summary","text":"Node.js \u2013 runtime & package manager. Vite/React \u2013 fast UI development. Axios/Fetch \u2013 API communication. Docker & Nginx \u2013 consistent build + deployment. Git & CI/CD \u2013 version control and automation. Together, these tools mirror the backend architecture \u2014 the same principles of reproducibility, versioning, and service boundaries apply.","title":"\u2705 16. Summary"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/","text":"\ud83d\ude80 Full Stack Deployment & Operations Overview \u00b6 (Frontend + Backend + Infrastructure + CI/CD) \u00b6 This document connects everything \u2014 from developer commits to live, monitored systems. It shows how Git, Docker, Nginx, PostgreSQL, Redis, and systemd interact across environments, supported by CI/CD pipelines and monitoring. \ud83e\udde9 1. The Complete Stack \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Developer \u2502 \u2502 (Git + IDE + Docker) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 push/build \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Continuous Integration (CI) \u2502 \u2502 Build \u2192 Test \u2192 Package \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Continuous Deployment (CD) \u2502 \u2502 Deploy \u2192 Start Services \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Production Server \u2502 \u2502 (systemd + Docker + Nginx) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Monitoring & Logs \u2502 \u2502 (Prometheus, Grafana, ELK) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Everything begins with Git , moves through CI/CD automation , lands on a Dockerized host managed by systemd , and is served to the world through Nginx . \u2699\ufe0f 2. Environments and Their Roles \u00b6 Environment Purpose Key Tools Local Fast iteration, testing Docker Compose, local DB Staging Full stack replica Docker Compose, CI/CD Production Stable live system Docker, systemd, Nginx CI Runner Automated testing GitHub Actions / GitLab CI Golden rule: Each environment should be identical in architecture, differing only in configuration. \ud83e\uddf1 3. Stack Layers Overview \u00b6 Layer Component Purpose Source Control Git Version all code and infrastructure Build Layer Node.js, Gradle/Maven Build frontend + backend artifacts Runtime Layer Docker Run isolated containers Routing Layer Nginx Route external traffic Data Layer PostgreSQL, Redis Persistent + cached data Orchestration Layer systemd Ensure uptime and startup order Automation Layer CI/CD Test, build, and deploy automatically Observation Layer Prometheus, Grafana, Logs Metrics, alerts, traces \ud83d\udc33 4. Docker Compose for Unified Stack \u00b6 The glue that connects your local and staging environments. version : \"3.9\" services : nginx : image : nginx:latest ports : - \"80:80\" volumes : - ./nginx.conf:/etc/nginx/nginx.conf:ro depends_on : [ backend , frontend ] frontend : build : ./frontend expose : - \"5173\" backend : build : ./backend environment : SPRING_DATASOURCE_URL : jdbc:postgresql://postgres:5432/appdb SPRING_DATASOURCE_USERNAME : devuser SPRING_DATASOURCE_PASSWORD : secret depends_on : [ postgres , redis ] postgres : image : postgres:16 volumes : - pg_data:/var/lib/postgresql/data redis : image : redis:7 volumes : - redis_data:/data volumes : pg_data : redis_data : This setup runs the entire full stack locally, exactly as it would in staging or production. \ud83d\udd01 5. CI/CD Pipeline Flow \u00b6 Continuous Integration (CI) ensures your build works and tests pass. Continuous Deployment (CD) delivers it safely to your server. Example (GitHub Actions) \u00b6 name : Build & Deploy Full Stack on : push : branches : [ main ] jobs : build : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Build backend run : ./gradlew build - name : Build frontend run : npm ci && npm run build - name : Build Docker images run : | docker build -t ghcr.io/user/backend:${{ github.sha }} backend/ docker build -t ghcr.io/user/frontend:${{ github.sha }} frontend/ - name : Push Images run : | docker push ghcr.io/user/backend:${{ github.sha }} docker push ghcr.io/user/frontend:${{ github.sha }} deploy : runs-on : ubuntu-latest needs : build steps : - name : SSH & Deploy run : | ssh user@server \" docker pull ghcr.io/user/backend:${{ github.sha }} && docker pull ghcr.io/user/frontend:${{ github.sha }} && docker compose up -d && sudo systemctl reload nginx \" This pipeline: Builds both backend and frontend. Pushes images to a container registry. SSHes into the server and redeploys. Reloads Nginx to apply new frontend files. \u26a1 6. Deployment Directory Structure (on server) \u00b6 /opt/app/ \u251c\u2500 docker-compose.yml \u251c\u2500 nginx.conf \u251c\u2500 .env \u251c\u2500 frontend/ \u251c\u2500 backend/ \u251c\u2500 logs/ \u2514\u2500 volumes/ \u251c\u2500 postgres/ \u2514\u2500 redis/ systemd runs Docker as the service manager underneath: sudo systemctl restart docker sudo docker compose up -d \ud83e\udde9 7. Nginx as the Traffic Controller \u00b6 Handles requests, SSL, static serving, and proxying: server { listen 80 ; server_name example.com ; location / { root /usr/share/nginx/html ; try_files $uri /index.html ; } location /api/ { proxy_pass http://backend:8080 ; } } Nginx routes browser traffic \u2192 frontend, and /api calls \u2192 backend \u2192 PostgreSQL/Redis. \ud83d\udc18 8. Databases and Persistence \u00b6 PostgreSQL \u00b6 Stores structured, durable data. Mounted via Docker volume ( pg_data ). Managed by systemd through Docker. Redis \u00b6 In-memory caching + sessions. Mounted volume for optional persistence ( redis_data ). Communicates over internal Docker network. \ud83e\udde0 9. Configuration & Secrets Management \u00b6 All environments read from .env files: DB_USER=devuser DB_PASS=secret REDIS_PASS=redispass API_KEY=some_key For production: Use .env.prod with stronger creds. Never commit secrets \u2014 use CI/CD secrets storage. \ud83d\udcbe 10. Backup & Recovery \u00b6 PostgreSQL backup: \u00b6 pg_dump -U devuser appdb | gzip > backup_ $( date +%F ) .sql.gz Redis snapshot: \u00b6 redis-cli save Automate backups with systemd timers or cron. \ud83e\udded 11. Monitoring & Logging \u00b6 Tool Purpose journalctl OS & service logs Docker logs Container-level events Prometheus Metrics collection Grafana Visualization & alerts ELK stack (Elasticsearch + Logstash + Kibana) Centralized logging Minimal local setup: docker run -d -p 9090 :9090 prom/prometheus docker run -d -p 3000 :3000 grafana/grafana \ud83d\udd12 12. Security Layers \u00b6 Layer Defense Network Nginx firewall rules, fail2ban Transport HTTPS via Let\u2019s Encrypt Application Authentication, rate limiting Data Encrypted DB connections Access SSH keys, non-root Docker users Secrets Environment variables in CI/CD secrets store \ud83d\udd01 13. Continuous Maintenance Workflow \u00b6 Task Tool Frequency Code updates Git Continuous Build & deploy CI/CD On every push Logs review journalctl / Grafana Daily Backup rotation systemd timer Daily/weekly Security patches apt, Docker images Weekly Service healthcheck systemctl, Prometheus Ongoing \ud83e\udde9 14. Disaster Recovery Pattern \u00b6 Restore from latest DB + Redis backups. Pull latest images from registry. Deploy via docker compose up -d . Reconnect DNS / certificates. Verify via Nginx health endpoints. Recovery time objective: minutes, not hours. \ud83e\udde0 15. Developer-to-Production Mental Model \u00b6 Role Tool Responsibility Developer Git, Docker Build and test features Integrator CI Verify builds Deployer CD Push working containers live Operator systemd Keep services healthy Observer Grafana/Logs Detect issues early \u2705 16. Summary \u00b6 Git \u2192 tracks source and triggers builds. Docker \u2192 standardizes runtime. Nginx \u2192 routes traffic to services. PostgreSQL \u2192 stores persistent state. Redis \u2192 accelerates performance. systemd \u2192 ensures everything starts and stays alive. CI/CD \u2192 automates the entire loop. Monitoring tools \u2192 give visibility and peace of mind. Everything runs as a modular, reproducible, observable system \u2014 a fully self-contained full stack.","title":"fullstack-deployment-overview"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#full-stack-deployment-operations-overview","text":"","title":"\ud83d\ude80 Full Stack Deployment &amp; Operations Overview"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#frontend-backend-infrastructure-cicd","text":"This document connects everything \u2014 from developer commits to live, monitored systems. It shows how Git, Docker, Nginx, PostgreSQL, Redis, and systemd interact across environments, supported by CI/CD pipelines and monitoring.","title":"(Frontend + Backend + Infrastructure + CI/CD)"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#1-the-complete-stack","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Developer \u2502 \u2502 (Git + IDE + Docker) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 push/build \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Continuous Integration (CI) \u2502 \u2502 Build \u2192 Test \u2192 Package \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Continuous Deployment (CD) \u2502 \u2502 Deploy \u2192 Start Services \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Production Server \u2502 \u2502 (systemd + Docker + Nginx) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Monitoring & Logs \u2502 \u2502 (Prometheus, Grafana, ELK) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Everything begins with Git , moves through CI/CD automation , lands on a Dockerized host managed by systemd , and is served to the world through Nginx .","title":"\ud83e\udde9 1. The Complete Stack"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#2-environments-and-their-roles","text":"Environment Purpose Key Tools Local Fast iteration, testing Docker Compose, local DB Staging Full stack replica Docker Compose, CI/CD Production Stable live system Docker, systemd, Nginx CI Runner Automated testing GitHub Actions / GitLab CI Golden rule: Each environment should be identical in architecture, differing only in configuration.","title":"\u2699\ufe0f 2. Environments and Their Roles"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#3-stack-layers-overview","text":"Layer Component Purpose Source Control Git Version all code and infrastructure Build Layer Node.js, Gradle/Maven Build frontend + backend artifacts Runtime Layer Docker Run isolated containers Routing Layer Nginx Route external traffic Data Layer PostgreSQL, Redis Persistent + cached data Orchestration Layer systemd Ensure uptime and startup order Automation Layer CI/CD Test, build, and deploy automatically Observation Layer Prometheus, Grafana, Logs Metrics, alerts, traces","title":"\ud83e\uddf1 3. Stack Layers Overview"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#4-docker-compose-for-unified-stack","text":"The glue that connects your local and staging environments. version : \"3.9\" services : nginx : image : nginx:latest ports : - \"80:80\" volumes : - ./nginx.conf:/etc/nginx/nginx.conf:ro depends_on : [ backend , frontend ] frontend : build : ./frontend expose : - \"5173\" backend : build : ./backend environment : SPRING_DATASOURCE_URL : jdbc:postgresql://postgres:5432/appdb SPRING_DATASOURCE_USERNAME : devuser SPRING_DATASOURCE_PASSWORD : secret depends_on : [ postgres , redis ] postgres : image : postgres:16 volumes : - pg_data:/var/lib/postgresql/data redis : image : redis:7 volumes : - redis_data:/data volumes : pg_data : redis_data : This setup runs the entire full stack locally, exactly as it would in staging or production.","title":"\ud83d\udc33 4. Docker Compose for Unified Stack"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#5-cicd-pipeline-flow","text":"Continuous Integration (CI) ensures your build works and tests pass. Continuous Deployment (CD) delivers it safely to your server.","title":"\ud83d\udd01 5. CI/CD Pipeline Flow"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#example-github-actions","text":"name : Build & Deploy Full Stack on : push : branches : [ main ] jobs : build : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Build backend run : ./gradlew build - name : Build frontend run : npm ci && npm run build - name : Build Docker images run : | docker build -t ghcr.io/user/backend:${{ github.sha }} backend/ docker build -t ghcr.io/user/frontend:${{ github.sha }} frontend/ - name : Push Images run : | docker push ghcr.io/user/backend:${{ github.sha }} docker push ghcr.io/user/frontend:${{ github.sha }} deploy : runs-on : ubuntu-latest needs : build steps : - name : SSH & Deploy run : | ssh user@server \" docker pull ghcr.io/user/backend:${{ github.sha }} && docker pull ghcr.io/user/frontend:${{ github.sha }} && docker compose up -d && sudo systemctl reload nginx \" This pipeline: Builds both backend and frontend. Pushes images to a container registry. SSHes into the server and redeploys. Reloads Nginx to apply new frontend files.","title":"Example (GitHub Actions)"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#6-deployment-directory-structure-on-server","text":"/opt/app/ \u251c\u2500 docker-compose.yml \u251c\u2500 nginx.conf \u251c\u2500 .env \u251c\u2500 frontend/ \u251c\u2500 backend/ \u251c\u2500 logs/ \u2514\u2500 volumes/ \u251c\u2500 postgres/ \u2514\u2500 redis/ systemd runs Docker as the service manager underneath: sudo systemctl restart docker sudo docker compose up -d","title":"\u26a1 6. Deployment Directory Structure (on server)"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#7-nginx-as-the-traffic-controller","text":"Handles requests, SSL, static serving, and proxying: server { listen 80 ; server_name example.com ; location / { root /usr/share/nginx/html ; try_files $uri /index.html ; } location /api/ { proxy_pass http://backend:8080 ; } } Nginx routes browser traffic \u2192 frontend, and /api calls \u2192 backend \u2192 PostgreSQL/Redis.","title":"\ud83e\udde9 7. Nginx as the Traffic Controller"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#8-databases-and-persistence","text":"","title":"\ud83d\udc18 8. Databases and Persistence"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#postgresql","text":"Stores structured, durable data. Mounted via Docker volume ( pg_data ). Managed by systemd through Docker.","title":"PostgreSQL"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#redis","text":"In-memory caching + sessions. Mounted volume for optional persistence ( redis_data ). Communicates over internal Docker network.","title":"Redis"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#9-configuration-secrets-management","text":"All environments read from .env files: DB_USER=devuser DB_PASS=secret REDIS_PASS=redispass API_KEY=some_key For production: Use .env.prod with stronger creds. Never commit secrets \u2014 use CI/CD secrets storage.","title":"\ud83e\udde0 9. Configuration &amp; Secrets Management"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#10-backup-recovery","text":"","title":"\ud83d\udcbe 10. Backup &amp; Recovery"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#postgresql-backup","text":"pg_dump -U devuser appdb | gzip > backup_ $( date +%F ) .sql.gz","title":"PostgreSQL backup:"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#redis-snapshot","text":"redis-cli save Automate backups with systemd timers or cron.","title":"Redis snapshot:"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#11-monitoring-logging","text":"Tool Purpose journalctl OS & service logs Docker logs Container-level events Prometheus Metrics collection Grafana Visualization & alerts ELK stack (Elasticsearch + Logstash + Kibana) Centralized logging Minimal local setup: docker run -d -p 9090 :9090 prom/prometheus docker run -d -p 3000 :3000 grafana/grafana","title":"\ud83e\udded 11. Monitoring &amp; Logging"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#12-security-layers","text":"Layer Defense Network Nginx firewall rules, fail2ban Transport HTTPS via Let\u2019s Encrypt Application Authentication, rate limiting Data Encrypted DB connections Access SSH keys, non-root Docker users Secrets Environment variables in CI/CD secrets store","title":"\ud83d\udd12 12. Security Layers"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#13-continuous-maintenance-workflow","text":"Task Tool Frequency Code updates Git Continuous Build & deploy CI/CD On every push Logs review journalctl / Grafana Daily Backup rotation systemd timer Daily/weekly Security patches apt, Docker images Weekly Service healthcheck systemctl, Prometheus Ongoing","title":"\ud83d\udd01 13. Continuous Maintenance Workflow"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#14-disaster-recovery-pattern","text":"Restore from latest DB + Redis backups. Pull latest images from registry. Deploy via docker compose up -d . Reconnect DNS / certificates. Verify via Nginx health endpoints. Recovery time objective: minutes, not hours.","title":"\ud83e\udde9 14. Disaster Recovery Pattern"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#15-developer-to-production-mental-model","text":"Role Tool Responsibility Developer Git, Docker Build and test features Integrator CI Verify builds Deployer CD Push working containers live Operator systemd Keep services healthy Observer Grafana/Logs Detect issues early","title":"\ud83e\udde0 15. Developer-to-Production Mental Model"},{"location":"cheatsheets/tools/architecture/fullstack-deployment-overview/#16-summary","text":"Git \u2192 tracks source and triggers builds. Docker \u2192 standardizes runtime. Nginx \u2192 routes traffic to services. PostgreSQL \u2192 stores persistent state. Redis \u2192 accelerates performance. systemd \u2192 ensures everything starts and stays alive. CI/CD \u2192 automates the entire loop. Monitoring tools \u2192 give visibility and peace of mind. Everything runs as a modular, reproducible, observable system \u2014 a fully self-contained full stack.","title":"\u2705 16. Summary"},{"location":"cheatsheets/tools/editors/_meta/blueprint/","text":"Editor/ Blueprint \u00b6 Folder layout (future-proof) \u00b6 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 editors/ \u251c\u2500 idea/ \u2502 \u251c\u2500 code-snippets.md # Live Templates, postfix tricks, surround templates \u2502 \u251c\u2500 shortcuts.md # Keymap & combos \u2502 \u251c\u2500 debugging.md # Breakpoints, watches, eval expr \u2502 \u251c\u2500 configuration.md # Code style, inspections, file templates \u2502 \u251c\u2500 run-configurations.md # App/Test/Spring Boot configs \u2502 \u251c\u2500 settings-sync.md # Sync/export settings strategy \u2502 \u2514\u2500 refactoring.md # Structural search/replace, safe delete, intentions \u251c\u2500 vscode/ \u2502 \u251c\u2500 code-snippets.md # JSON snippets, multi-cursor patterns \u2502 \u251c\u2500 shortcuts.md # Keybindings & chords \u2502 \u251c\u2500 debugging.md # launch.json, DAP tips \u2502 \u251c\u2500 configuration.md # settings.json, workspace vs user \u2502 \u251c\u2500 extensions.md # Curated list w/ why + config \u2502 \u2514\u2500 settings-sync.md \u2514\u2500 vim/ \u251c\u2500 code-snippets.md # UltiSnips/Luasnip (optional) \u251c\u2500 shortcuts.md \u2514\u2500 configuration.md File naming rules (simple + consistent) \u00b6 Keep one concept per file : code-snippets.md , shortcuts.md , debugging.md , configuration.md . Use editor folder to carry specificity. Inside idea/ , code-snippets.md = \u201cIntelliJ Live Templates/snippets\u201d. Inside vscode/ , same name = VS Code snippets. If a concept grows big, split with suffixes: configuration-formatting.md , configuration-inspections.md . Front matter template (uniform metadata) \u00b6 Use the same front matter across all editor docs for fast filtering/search: --- title: IDEA \u2014 Code Snippets tags: [editors, idea, code, snippets] summary: Live Templates, postfix, and surround examples for IntelliJ IDEA. aliases: --- Change only the title , tags , and summary per file: tags suggestions: IDEA: [editors, idea, snippets] , [editors, idea, debugging] , [editors, idea, config] VS Code: [editors, vscode, snippets] , [editors, vscode, extensions] Optional: a tiny README index per editor \u00b6 Add a minimal README.md inside each editor folder: --- title: IDEA \u2014 Index tags: [editors, idea] summary: Entry points for all IntelliJ notes. --- - [ Code Snippets ]( ./code-snippets.md ) - [ Shortcuts ]( ./shortcuts.md ) - [ Debugging ]( ./debugging.md ) - [ Configuration ]( ./configuration.md ) - [ Run Configurations ]( ./run-configurations.md ) - [ Settings Sync ]( ./settings-sync.md ) - [ Refactoring ]( ./refactoring.md ) This gives you a stable, parallel structure for IDEA , VS Code , and any future editor without bikeshedding filenames.","title":"Editors \u2014 Future Blueprint"},{"location":"cheatsheets/tools/editors/_meta/blueprint/#editor-blueprint","text":"","title":"Editor/ Blueprint"},{"location":"cheatsheets/tools/editors/_meta/blueprint/#folder-layout-future-proof","text":"cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 editors/ \u251c\u2500 idea/ \u2502 \u251c\u2500 code-snippets.md # Live Templates, postfix tricks, surround templates \u2502 \u251c\u2500 shortcuts.md # Keymap & combos \u2502 \u251c\u2500 debugging.md # Breakpoints, watches, eval expr \u2502 \u251c\u2500 configuration.md # Code style, inspections, file templates \u2502 \u251c\u2500 run-configurations.md # App/Test/Spring Boot configs \u2502 \u251c\u2500 settings-sync.md # Sync/export settings strategy \u2502 \u2514\u2500 refactoring.md # Structural search/replace, safe delete, intentions \u251c\u2500 vscode/ \u2502 \u251c\u2500 code-snippets.md # JSON snippets, multi-cursor patterns \u2502 \u251c\u2500 shortcuts.md # Keybindings & chords \u2502 \u251c\u2500 debugging.md # launch.json, DAP tips \u2502 \u251c\u2500 configuration.md # settings.json, workspace vs user \u2502 \u251c\u2500 extensions.md # Curated list w/ why + config \u2502 \u2514\u2500 settings-sync.md \u2514\u2500 vim/ \u251c\u2500 code-snippets.md # UltiSnips/Luasnip (optional) \u251c\u2500 shortcuts.md \u2514\u2500 configuration.md","title":"Folder layout (future-proof)"},{"location":"cheatsheets/tools/editors/_meta/blueprint/#file-naming-rules-simple-consistent","text":"Keep one concept per file : code-snippets.md , shortcuts.md , debugging.md , configuration.md . Use editor folder to carry specificity. Inside idea/ , code-snippets.md = \u201cIntelliJ Live Templates/snippets\u201d. Inside vscode/ , same name = VS Code snippets. If a concept grows big, split with suffixes: configuration-formatting.md , configuration-inspections.md .","title":"File naming rules (simple + consistent)"},{"location":"cheatsheets/tools/editors/_meta/blueprint/#front-matter-template-uniform-metadata","text":"Use the same front matter across all editor docs for fast filtering/search: --- title: IDEA \u2014 Code Snippets tags: [editors, idea, code, snippets] summary: Live Templates, postfix, and surround examples for IntelliJ IDEA. aliases: --- Change only the title , tags , and summary per file: tags suggestions: IDEA: [editors, idea, snippets] , [editors, idea, debugging] , [editors, idea, config] VS Code: [editors, vscode, snippets] , [editors, vscode, extensions]","title":"Front matter template (uniform metadata)"},{"location":"cheatsheets/tools/editors/_meta/blueprint/#optional-a-tiny-readme-index-per-editor","text":"Add a minimal README.md inside each editor folder: --- title: IDEA \u2014 Index tags: [editors, idea] summary: Entry points for all IntelliJ notes. --- - [ Code Snippets ]( ./code-snippets.md ) - [ Shortcuts ]( ./shortcuts.md ) - [ Debugging ]( ./debugging.md ) - [ Configuration ]( ./configuration.md ) - [ Run Configurations ]( ./run-configurations.md ) - [ Settings Sync ]( ./settings-sync.md ) - [ Refactoring ]( ./refactoring.md ) This gives you a stable, parallel structure for IDEA , VS Code , and any future editor without bikeshedding filenames.","title":"Optional: a tiny README index per editor"},{"location":"cheatsheets/tools/editors/idea/code-snippets/","text":"\ud83d\udca1 IntelliJ IDEA \u2014 Code Snippets (Live Templates & File Templates) \u00b6 \ud83e\udded Introduction \u00b6 IntelliJ IDEA supports two powerful snippet systems: Live Templates \u2014 dynamic, context-aware snippets you trigger manually inside existing files (e.g., typing yfm \u2192 Tab). They use IntelliJ macros like date() , className() , and clipboard() to inject live data. File Templates \u2014 static, prefilled structures used when creating new files. They use Velocity-style variables like ${NAME} , ${DATE} , and ${YEAR}-${MONTH}-${DAY} . Together, they automate everything from boilerplate code to note headers and logging patterns \u2014 turning IntelliJ into a serious productivity engine. \ud83e\udde9 PART 1 \u2014 Live Templates \u00b6 \u2699\ufe0f What Live Templates Are \u00b6 Live Templates let you expand small abbreviations into complete code or text blocks. They\u2019re ideal for repeating structures (YAML headers, annotations, logging, test stubs, etc.) and can include dynamic macros that automatically fill in data such as the date, file name, or user. Path: Settings \u2192 Editor \u2192 Live Templates \ud83e\uddf1 Example \u2014 Markdown Front Matter with Auto Date \u00b6 Abbreviation: yfm Template text: --- title: $TITLE$ date: $DATE$ tags: summary: $SUMMARY$ aliases: --- $END$ Variable setup (Edit Variables\u2026): Variable Expression Stop at? Description TITLE (empty) \u2705 You fill it manually DATE date(\"yyyy-MM-dd\") \u274c Auto-fills today\u2019s date SUMMARY (empty) \u2705 Optional summary Now type yfm \u2192 press Tab \u2192 IntelliJ expands to: --- title: date: 2025-10-17 tags: summary: aliases: --- \u26a1 Insert or Trigger a Live Template \u00b6 Action Shortcut Description Expand template Tab Type abbreviation and press Tab Show available templates Ctrl + J (Win/Linux) / \u2318J (macOS) Lists all templates valid in this context Surround selected text Ctrl + Alt + J / \u2325\u2318J For templates with $SELECTION$ Manage templates Settings \u2192 Editor \u2192 Live Templates Template editor \ud83e\uddf0 Commonly Used IntelliJ Macros \u00b6 Macro Example Output Description date(\"yyyy-MM-dd\") 2025-10-17 Current date (custom format) time(\"HH:mm\") 08:42 Current time user() edgaras Your system/IDE username clipboard() (clipboard text) Pastes clipboard content className() MainController Current class name methodName() getUserById Current method name packageName() com.example.app Current package fileName() UserService.java File name fileNameWithoutExtension() UserService File name stripped of extension uuid() 2a4e... Generates a UUID selection() (selected code) Used in Surround templates capitalize(\u2026) Hello Capitalizes text snakeCase(\u2026) my_variable Converts to snake_case camelCase(\u2026) myVariable Converts to camelCase prompt(\"Label\") (asks user) Prompts for input \ud83d\udca1 Power Tips \u00b6 Prefix abbreviations by category ( md_ , j_ , r_ , etc.) to keep lists organized. $END$ marks where the cursor lands after expansion. $SELECTION$ allows templates that wrap selected text. Combine macros: capitalize(fileNameWithoutExtension()) \u2192 MyFile camelCase(clipboard()) \u2192 convert copied text to variable name uuid().substring(0,8) \u2192 short random ID \ud83c\udfd7\ufe0f PART 2 \u2014 File Templates \u00b6 \u2699\ufe0f What File Templates Are \u00b6 File Templates define prefilled content for new files. When you create a new file (e.g., \u201cNew \u2192 MD Note\u201d), IntelliJ uses these templates to populate default text. They use a simpler syntax \u2014 Velocity variables \u2014 which look like ${VARIABLE} . These are resolved at creation time, not live while editing. Path: Settings \u2192 Editor \u2192 File and Code Templates \ud83e\uddf1 Example \u2014 Markdown Note Template \u00b6 Name: MD Note Extension: md Template text: --- title: ${NAME} date: ${YEAR}-${MONTH}-${DAY} tags: summary: aliases: --- Result when creating a new file: --- title: my-new-note date: 2025-10-17 tags: summary: aliases: --- \ud83d\udcd8 Common File Template Variables \u00b6 Variable Example Output Description ${NAME} my-file New file name ${USER} edgaras Current system user ${DATE} 17/10/2025 Localized date ${TIME} 09:12 Current time ${YEAR} 2025 Current year ${MONTH} 10 Current month ${DAY} 17 Current day ${PACKAGE_NAME} com.example Java package ${CLASS_NAME} UserService Derived from file name Velocity Tip: You can use expressions like: ${YEAR}-${MONTH}-${DAY}_${TIME} to generate unique timestamps for file names. \ud83d\udca1 Power Tips \u00b6 Use File Templates for your recurring file types: configuration files, test classes, documentation stubs. Use ${DATE} for locale-aware date or ${YEAR}-${MONTH}-${DAY} for ISO-style. Add includes for shared blocks (Settings \u2192 File and Code Templates \u2192 Includes tab). Works great combined with Live Templates \u2014 start from a File Template, enhance later with dynamic snippets. \ud83e\udded Quick Reference \u00b6 Template Type Purpose Syntax Trigger Live Template Dynamic snippets inside existing files $VARIABLE$ Abbrev + Tab File Template Prefilled structure for new files ${VARIABLE} File \u2192 New Postfix Template Inline transformation ( .if , .for , .nn ) \u2014 After expression + Tab Surround Template Wrap selected code $SELECTION$ Ctrl+Alt+J / \u2325\u2318J \ud83e\udde0 Summary \u00b6 Live Templates \u2014 dynamic, context-aware snippets for existing files. Use IntelliJ macros such as date() , className() , clipboard() , uuid() , and user() to auto-fill information. File Templates \u2014 static, prefilled structures for new files. Use Velocity-style variables like ${NAME} , ${DATE} , ${YEAR}-${MONTH}-${DAY} to scaffold default content. Both systems complement each other: Live Templates automate repetitive typing. File Templates provide consistent starting points. Together, they\u2019re the backbone of a fast, error-free workflow inside IntelliJ IDEA.","title":"IDEA Code Snippets"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#intellij-idea-code-snippets-live-templates-file-templates","text":"","title":"\ud83d\udca1 IntelliJ IDEA \u2014 Code Snippets (Live Templates &amp; File Templates)"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#introduction","text":"IntelliJ IDEA supports two powerful snippet systems: Live Templates \u2014 dynamic, context-aware snippets you trigger manually inside existing files (e.g., typing yfm \u2192 Tab). They use IntelliJ macros like date() , className() , and clipboard() to inject live data. File Templates \u2014 static, prefilled structures used when creating new files. They use Velocity-style variables like ${NAME} , ${DATE} , and ${YEAR}-${MONTH}-${DAY} . Together, they automate everything from boilerplate code to note headers and logging patterns \u2014 turning IntelliJ into a serious productivity engine.","title":"\ud83e\udded Introduction"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#part-1-live-templates","text":"","title":"\ud83e\udde9 PART 1 \u2014 Live Templates"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#what-live-templates-are","text":"Live Templates let you expand small abbreviations into complete code or text blocks. They\u2019re ideal for repeating structures (YAML headers, annotations, logging, test stubs, etc.) and can include dynamic macros that automatically fill in data such as the date, file name, or user. Path: Settings \u2192 Editor \u2192 Live Templates","title":"\u2699\ufe0f What Live Templates Are"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#example-markdown-front-matter-with-auto-date","text":"Abbreviation: yfm Template text: --- title: $TITLE$ date: $DATE$ tags: summary: $SUMMARY$ aliases: --- $END$ Variable setup (Edit Variables\u2026): Variable Expression Stop at? Description TITLE (empty) \u2705 You fill it manually DATE date(\"yyyy-MM-dd\") \u274c Auto-fills today\u2019s date SUMMARY (empty) \u2705 Optional summary Now type yfm \u2192 press Tab \u2192 IntelliJ expands to: --- title: date: 2025-10-17 tags: summary: aliases: ---","title":"\ud83e\uddf1 Example \u2014 Markdown Front Matter with Auto Date"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#insert-or-trigger-a-live-template","text":"Action Shortcut Description Expand template Tab Type abbreviation and press Tab Show available templates Ctrl + J (Win/Linux) / \u2318J (macOS) Lists all templates valid in this context Surround selected text Ctrl + Alt + J / \u2325\u2318J For templates with $SELECTION$ Manage templates Settings \u2192 Editor \u2192 Live Templates Template editor","title":"\u26a1 Insert or Trigger a Live Template"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#commonly-used-intellij-macros","text":"Macro Example Output Description date(\"yyyy-MM-dd\") 2025-10-17 Current date (custom format) time(\"HH:mm\") 08:42 Current time user() edgaras Your system/IDE username clipboard() (clipboard text) Pastes clipboard content className() MainController Current class name methodName() getUserById Current method name packageName() com.example.app Current package fileName() UserService.java File name fileNameWithoutExtension() UserService File name stripped of extension uuid() 2a4e... Generates a UUID selection() (selected code) Used in Surround templates capitalize(\u2026) Hello Capitalizes text snakeCase(\u2026) my_variable Converts to snake_case camelCase(\u2026) myVariable Converts to camelCase prompt(\"Label\") (asks user) Prompts for input","title":"\ud83e\uddf0 Commonly Used IntelliJ Macros"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#power-tips","text":"Prefix abbreviations by category ( md_ , j_ , r_ , etc.) to keep lists organized. $END$ marks where the cursor lands after expansion. $SELECTION$ allows templates that wrap selected text. Combine macros: capitalize(fileNameWithoutExtension()) \u2192 MyFile camelCase(clipboard()) \u2192 convert copied text to variable name uuid().substring(0,8) \u2192 short random ID","title":"\ud83d\udca1 Power Tips"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#part-2-file-templates","text":"","title":"\ud83c\udfd7\ufe0f PART 2 \u2014 File Templates"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#what-file-templates-are","text":"File Templates define prefilled content for new files. When you create a new file (e.g., \u201cNew \u2192 MD Note\u201d), IntelliJ uses these templates to populate default text. They use a simpler syntax \u2014 Velocity variables \u2014 which look like ${VARIABLE} . These are resolved at creation time, not live while editing. Path: Settings \u2192 Editor \u2192 File and Code Templates","title":"\u2699\ufe0f What File Templates Are"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#example-markdown-note-template","text":"Name: MD Note Extension: md Template text: --- title: ${NAME} date: ${YEAR}-${MONTH}-${DAY} tags: summary: aliases: --- Result when creating a new file: --- title: my-new-note date: 2025-10-17 tags: summary: aliases: ---","title":"\ud83e\uddf1 Example \u2014 Markdown Note Template"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#common-file-template-variables","text":"Variable Example Output Description ${NAME} my-file New file name ${USER} edgaras Current system user ${DATE} 17/10/2025 Localized date ${TIME} 09:12 Current time ${YEAR} 2025 Current year ${MONTH} 10 Current month ${DAY} 17 Current day ${PACKAGE_NAME} com.example Java package ${CLASS_NAME} UserService Derived from file name Velocity Tip: You can use expressions like: ${YEAR}-${MONTH}-${DAY}_${TIME} to generate unique timestamps for file names.","title":"\ud83d\udcd8 Common File Template Variables"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#power-tips_1","text":"Use File Templates for your recurring file types: configuration files, test classes, documentation stubs. Use ${DATE} for locale-aware date or ${YEAR}-${MONTH}-${DAY} for ISO-style. Add includes for shared blocks (Settings \u2192 File and Code Templates \u2192 Includes tab). Works great combined with Live Templates \u2014 start from a File Template, enhance later with dynamic snippets.","title":"\ud83d\udca1 Power Tips"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#quick-reference","text":"Template Type Purpose Syntax Trigger Live Template Dynamic snippets inside existing files $VARIABLE$ Abbrev + Tab File Template Prefilled structure for new files ${VARIABLE} File \u2192 New Postfix Template Inline transformation ( .if , .for , .nn ) \u2014 After expression + Tab Surround Template Wrap selected code $SELECTION$ Ctrl+Alt+J / \u2325\u2318J","title":"\ud83e\udded Quick Reference"},{"location":"cheatsheets/tools/editors/idea/code-snippets/#summary","text":"Live Templates \u2014 dynamic, context-aware snippets for existing files. Use IntelliJ macros such as date() , className() , clipboard() , uuid() , and user() to auto-fill information. File Templates \u2014 static, prefilled structures for new files. Use Velocity-style variables like ${NAME} , ${DATE} , ${YEAR}-${MONTH}-${DAY} to scaffold default content. Both systems complement each other: Live Templates automate repetitive typing. File Templates provide consistent starting points. Together, they\u2019re the backbone of a fast, error-free workflow inside IntelliJ IDEA.","title":"\ud83e\udde0 Summary"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/","text":"\ud83d\udca1 VS Code \u2014 Code Snippets Cheatsheet \u00b6 \ud83e\udded Introduction \u00b6 VS Code supports two complementary systems for automation: User Snippets \u2014 dynamic, context-aware pieces of code or text that you trigger manually inside existing files. They live in JSON files and expand when you type their prefix and hit Tab . File Templates (via Extensions or Snippet Files) \u2014 prefilled structures for new files, often provided by extensions like Project Templates or File Templates Generator . These use the same variable system but apply automatically when you create a file. Together, they make VS Code behave like a lightweight IDE: boilerplate vanishes, consistency remains. \ud83e\udde9 PART 1 \u2014 User Snippets \u00b6 \u2699\ufe0f What User Snippets Are \u00b6 User snippets are stored in JSON files per language (or globally). Each snippet includes a prefix , body , and description . Variables like TM_FILENAME or CURRENT_YEAR can be embedded directly in the body. Path: File \u2192 Preferences \u2192 User Snippets \u2192 choose language or New Global Snippets file\u2026 \ud83e\uddf1 Example \u2014 Markdown Front Matter with Auto Date \u00b6 File: markdown.json { \"YAML Front Matter\" : { \"prefix\" : \"yfm\" , \"description\" : \"YAML front matter for Markdown\" , \"body\" : [ \"---\" , \"title: ${1:title}\" , \"date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}\" , \"tags:\" , \"summary: ${2:summary}\" , \"aliases:\" , \"---\" , \"$0\" ] } } Usage: Type yfm \u2192 Tab \u2192 VS Code expands to: --- title : My Note date : 2025-10-17 tags : summary : Short intro aliases : --- \u26a1 Triggering Snippets \u00b6 Action Shortcut Description Expand snippet Tab Type prefix and press Tab Show available snippets Ctrl + Space (Win/Linux) / \u2318 Space (macOS) Lists snippets valid for the current file Edit snippets Ctrl + Shift + P \u2192 Configure User Snippets Opens snippet files \ud83e\uddf0 Common VS Code Snippet Variables \u00b6 Variable Example Output Description $CURRENT_YEAR 2025 Current year $CURRENT_MONTH 10 Current month $CURRENT_DATE 17 Current day $CURRENT_HOUR 14 Current hour $CURRENT_MINUTE 32 Current minute $CURRENT_SECOND 07 Current second $TM_FILENAME UserService.java File name $TM_FILENAME_BASE UserService File name without extension $TM_LINE_NUMBER 42 Current line number $TM_SELECTED_TEXT (selected code) Selected text $TM_CURRENT_WORD (word under cursor) Current word $CLIPBOARD (clipboard text) Clipboard contents $RANDOM random integer Random value $UUID 2a4e... Unique identifier $BLOCK_COMMENT_START /* Language\u2019s block comment start $BLOCK_COMMENT_END */ Language\u2019s block comment end $TM_DIRECTORY /home/user/project/src Directory of the current file $RELATIVE_FILEPATH src/app.js Relative path from workspace root $WORKSPACE_NAME my-project Workspace folder name ${1:placeholder} cursor tabstop Field for manual input $0 \u2014 Final cursor position Pro tip: You can nest variables: \"${TM_FILENAME_BASE}_${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}\" \u2192 UserService_2025-10-17 \ud83d\udca1 Power Tips for Snippets \u00b6 Add tab stops ${1} , ${2} \u2026 and a final $0 to control cursor flow. Use ${CLIPBOARD} to instantly insert what\u2019s copied. For optional defaults: ${1:defaultValue} \u2192 replaced when you type. Multi-line snippets use an array of strings \u2014 each line quoted. Use language-specific snippet files ( markdown.json , java.json , etc.) to scope snippets. \ud83c\udfd7\ufe0f PART 2 \u2014 File Templates (Projects and New Files) \u00b6 \u2699\ufe0f What File Templates Are \u00b6 VS Code doesn\u2019t have a native \u201cFile Template\u201d system like IntelliJ, but several extensions provide similar behavior: Project Templates by zardoy \u2014 create project/file blueprints. Snippet Templates or Advanced New File \u2014 insert predefined content on file creation. Or simply use a global snippet with the command Insert Snippet ( Ctrl + Shift + P ). All use the same variables as normal snippets. \ud83e\uddf1 Example \u2014 Markdown Note Template \u00b6 Using the same YAML header pattern for new Markdown files: { \"New MD Note\" : { \"prefix\" : \"newnote\" , \"description\" : \"Prefilled Markdown note structure\" , \"body\" : [ \"---\" , \"title: ${TM_FILENAME_BASE}\" , \"date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}\" , \"tags:\" , \"summary:\" , \"aliases:\" , \"---\" , \"\" , \"$0\" ] } } Usage: Type newnote in a new empty file \u2192 Tab \u2192 prefilled note. \ud83d\udcd8 Common Patterns for Templates \u00b6 Timestamps: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}_${CURRENT_HOUR}${CURRENT_MINUTE} User header: Author: ${USER} (works if environment variable set) Filename metadata: File: ${TM_FILENAME} Unique ID: id: ${UUID} \ud83e\udded Quick Reference \u00b6 System Purpose Syntax Trigger User Snippet Expand snippet inside existing file ${VARIABLE} Prefix + Tab File Template (via extension) Prefilled new file content ${VARIABLE} New File command / snippet Multi-cursor / Selection Insert across many lines $TM_SELECTED_TEXT Works with multi-cursor Clipboard Insert Paste clipboard text $CLIPBOARD Inside snippet body \ud83e\udde0 Summary \u00b6 User Snippets \u2192 dynamic, context-aware expansions inside existing files. Use VS Code variables like $CURRENT_YEAR , $TM_FILENAME_BASE , $UUID , and $CLIPBOARD to insert live data. File Templates \u2192 prefilled structures for new files, implemented via extensions or global snippets. Use the same ${VARIABLE} syntax for consistency. Both systems integrate seamlessly \u2014 create once, reuse forever. VS Code\u2019s JSON-based approach makes snippets portable, version-controlled, and easy to share across machines.","title":"VS Code Snippets"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#vs-code-code-snippets-cheatsheet","text":"","title":"\ud83d\udca1 VS Code \u2014 Code Snippets Cheatsheet"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#introduction","text":"VS Code supports two complementary systems for automation: User Snippets \u2014 dynamic, context-aware pieces of code or text that you trigger manually inside existing files. They live in JSON files and expand when you type their prefix and hit Tab . File Templates (via Extensions or Snippet Files) \u2014 prefilled structures for new files, often provided by extensions like Project Templates or File Templates Generator . These use the same variable system but apply automatically when you create a file. Together, they make VS Code behave like a lightweight IDE: boilerplate vanishes, consistency remains.","title":"\ud83e\udded Introduction"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#part-1-user-snippets","text":"","title":"\ud83e\udde9 PART 1 \u2014 User Snippets"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#what-user-snippets-are","text":"User snippets are stored in JSON files per language (or globally). Each snippet includes a prefix , body , and description . Variables like TM_FILENAME or CURRENT_YEAR can be embedded directly in the body. Path: File \u2192 Preferences \u2192 User Snippets \u2192 choose language or New Global Snippets file\u2026","title":"\u2699\ufe0f What User Snippets Are"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#example-markdown-front-matter-with-auto-date","text":"File: markdown.json { \"YAML Front Matter\" : { \"prefix\" : \"yfm\" , \"description\" : \"YAML front matter for Markdown\" , \"body\" : [ \"---\" , \"title: ${1:title}\" , \"date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}\" , \"tags:\" , \"summary: ${2:summary}\" , \"aliases:\" , \"---\" , \"$0\" ] } } Usage: Type yfm \u2192 Tab \u2192 VS Code expands to: --- title : My Note date : 2025-10-17 tags : summary : Short intro aliases : ---","title":"\ud83e\uddf1 Example \u2014 Markdown Front Matter with Auto Date"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#triggering-snippets","text":"Action Shortcut Description Expand snippet Tab Type prefix and press Tab Show available snippets Ctrl + Space (Win/Linux) / \u2318 Space (macOS) Lists snippets valid for the current file Edit snippets Ctrl + Shift + P \u2192 Configure User Snippets Opens snippet files","title":"\u26a1 Triggering Snippets"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#common-vs-code-snippet-variables","text":"Variable Example Output Description $CURRENT_YEAR 2025 Current year $CURRENT_MONTH 10 Current month $CURRENT_DATE 17 Current day $CURRENT_HOUR 14 Current hour $CURRENT_MINUTE 32 Current minute $CURRENT_SECOND 07 Current second $TM_FILENAME UserService.java File name $TM_FILENAME_BASE UserService File name without extension $TM_LINE_NUMBER 42 Current line number $TM_SELECTED_TEXT (selected code) Selected text $TM_CURRENT_WORD (word under cursor) Current word $CLIPBOARD (clipboard text) Clipboard contents $RANDOM random integer Random value $UUID 2a4e... Unique identifier $BLOCK_COMMENT_START /* Language\u2019s block comment start $BLOCK_COMMENT_END */ Language\u2019s block comment end $TM_DIRECTORY /home/user/project/src Directory of the current file $RELATIVE_FILEPATH src/app.js Relative path from workspace root $WORKSPACE_NAME my-project Workspace folder name ${1:placeholder} cursor tabstop Field for manual input $0 \u2014 Final cursor position Pro tip: You can nest variables: \"${TM_FILENAME_BASE}_${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}\" \u2192 UserService_2025-10-17","title":"\ud83e\uddf0 Common VS Code Snippet Variables"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#power-tips-for-snippets","text":"Add tab stops ${1} , ${2} \u2026 and a final $0 to control cursor flow. Use ${CLIPBOARD} to instantly insert what\u2019s copied. For optional defaults: ${1:defaultValue} \u2192 replaced when you type. Multi-line snippets use an array of strings \u2014 each line quoted. Use language-specific snippet files ( markdown.json , java.json , etc.) to scope snippets.","title":"\ud83d\udca1 Power Tips for Snippets"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#part-2-file-templates-projects-and-new-files","text":"","title":"\ud83c\udfd7\ufe0f PART 2 \u2014 File Templates (Projects and New Files)"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#what-file-templates-are","text":"VS Code doesn\u2019t have a native \u201cFile Template\u201d system like IntelliJ, but several extensions provide similar behavior: Project Templates by zardoy \u2014 create project/file blueprints. Snippet Templates or Advanced New File \u2014 insert predefined content on file creation. Or simply use a global snippet with the command Insert Snippet ( Ctrl + Shift + P ). All use the same variables as normal snippets.","title":"\u2699\ufe0f What File Templates Are"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#example-markdown-note-template","text":"Using the same YAML header pattern for new Markdown files: { \"New MD Note\" : { \"prefix\" : \"newnote\" , \"description\" : \"Prefilled Markdown note structure\" , \"body\" : [ \"---\" , \"title: ${TM_FILENAME_BASE}\" , \"date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}\" , \"tags:\" , \"summary:\" , \"aliases:\" , \"---\" , \"\" , \"$0\" ] } } Usage: Type newnote in a new empty file \u2192 Tab \u2192 prefilled note.","title":"\ud83e\uddf1 Example \u2014 Markdown Note Template"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#common-patterns-for-templates","text":"Timestamps: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}_${CURRENT_HOUR}${CURRENT_MINUTE} User header: Author: ${USER} (works if environment variable set) Filename metadata: File: ${TM_FILENAME} Unique ID: id: ${UUID}","title":"\ud83d\udcd8 Common Patterns for Templates"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#quick-reference","text":"System Purpose Syntax Trigger User Snippet Expand snippet inside existing file ${VARIABLE} Prefix + Tab File Template (via extension) Prefilled new file content ${VARIABLE} New File command / snippet Multi-cursor / Selection Insert across many lines $TM_SELECTED_TEXT Works with multi-cursor Clipboard Insert Paste clipboard text $CLIPBOARD Inside snippet body","title":"\ud83e\udded Quick Reference"},{"location":"cheatsheets/tools/editors/vscode/code-snippets/#summary","text":"User Snippets \u2192 dynamic, context-aware expansions inside existing files. Use VS Code variables like $CURRENT_YEAR , $TM_FILENAME_BASE , $UUID , and $CLIPBOARD to insert live data. File Templates \u2192 prefilled structures for new files, implemented via extensions or global snippets. Use the same ${VARIABLE} syntax for consistency. Both systems integrate seamlessly \u2014 create once, reuse forever. VS Code\u2019s JSON-based approach makes snippets portable, version-controlled, and easy to share across machines.","title":"\ud83e\udde0 Summary"},{"location":"cheatsheets/tools/git/quick-start/","text":"\ud83e\udde0 Git: From Basics to Advanced Workflow Mastery \u00b6 Git is a distributed version control system (DVCS) \u2014 it tracks changes to files over time, lets developers collaborate, and makes every clone a complete backup of the repository. It\u2019s the tool that powers GitHub, GitLab, and most of modern software development. \u2699\ufe0f 1. What Git Actually Does \u00b6 Git records snapshots of your project (commits), not just diffs. Each commit stores the entire state of your code at that moment, compressed efficiently. You can move through history (like checkpoints in a game), branch off to experiment, and merge or rebase to integrate changes. # See history git log --oneline --graph --decorate \ud83d\udc49 In short: Git is your project\u2019s time machine + collaboration layer . \ud83e\uddf1 2. Core Concepts \u00b6 Concept Description Repository (repo) A Git-managed folder containing code and version history ( .git folder inside). Commit A snapshot of your files at a moment in time. Branch A movable pointer to a commit \u2014 allows parallel development. HEAD Your current working branch (where you are in history). Staging area Where you prepare changes before committing. Remote A copy of your repo hosted elsewhere (e.g., GitHub). Merge Combines histories from different branches. Rebase Moves commits onto a new base, creating a linear history. \u2692\ufe0f 3. The Git Workflow (mental model) \u00b6 Working Directory \u2192 Staging Area \u2192 Local Repository \u2192 Remote Repository Edit files \u2192 git add Save snapshot \u2192 git commit Share/pull changes \u2192 git push / git pull \ud83d\udd27 4. Quick Command Reference \u00b6 Initialize or Clone \u00b6 git init # start a new repo git clone https://github.com/user/repo.git Inspect \u00b6 git status # show changed files git diff # show unstaged changes git log --oneline --graph --decorate Stage and Commit \u00b6 git add file.txt # stage file git add . # stage all changes git commit -m \"Add new feature\" # create commit Branch and Merge \u00b6 git branch # list branches git switch -c feature/login # create + switch git merge feature/login # merge into current branch git branch -d feature/login # delete local branch Sync with Remote \u00b6 git remote -v # show remotes git fetch # get new data, no merge git pull # fetch + merge current branch git push origin main # upload local commits \ud83c\udf3f 5. Branching and Collaboration Patterns \u00b6 Main workflow: main \u251c\u2500 feature/login \u251c\u2500 feature/dashboard \u2514\u2500 fix/typo Branch naming convention: feature/\u2026 , fix/\u2026 , refactor/\u2026 , release/\u2026 Recommended pattern: main \u2014 stable release branch develop \u2014 active integration branch feature/* \u2014 short-lived branches hotfix/* \u2014 emergency fixes release/* \u2014 prep for deployment \u26a1 6. Undoing and Time Travel \u00b6 git restore file.txt # discard unstaged changes git restore --staged file.txt # unstage git checkout <commit> -- file.txt # restore from old commit git reset --soft HEAD~1 # undo last commit, keep changes staged git reset --hard HEAD~1 # undo commit + changes git revert <commit> # create new commit that undoes another \ud83d\udc49 reset rewrites history; revert adds a new commit that undoes previous work safely. Caution Attention when rewriting history on shared branches! Update the remote to match your local (force rewrite remote branch): # safer force (recommended even when alone) git push --force-with-lease origin <your-branch> # or force (less safe) git push --force origin <your-branch> Notes: --force-with-lease prevents clobbering a remote you don\u2019t expect \u2014 it fails if remote changed since you last fetched. If you accidentally delete something, git reflog can usually recover the commit SHA. \ud83e\udde9 7. Working with Remotes (GitHub, etc.) \u00b6 git remote add origin https://github.com/user/repo.git git push -u origin main Next time, just: git push git pull Clone and work: git clone <url> git switch -c feature/branch Sync fork or upstream: git remote add upstream https://github.com/source/repo.git git fetch upstream git merge upstream/main \ud83e\uddf0 8. Real-World Example (Feature Workflow) \u00b6 # Start new work git switch -c feature/login # Edit code git add . git commit -m \"Implement login feature\" # Update main and rebase to stay up-to-date git fetch origin git rebase origin/main # Push branch for review git push -u origin feature/login # After merge, clean up git switch main git pull git branch -d feature/login \ud83e\uddfc 9. Maintenance and Cleanup \u00b6 git branch -vv # see tracking info git fetch -p # prune deleted remote branches git gc # clean up unnecessary files and optimize repo \ud83e\udde0 10. Common Troubleshooting \u00b6 Problem Fix Accidentally committed wrong file git reset HEAD~1 then re-commit Merge conflict Edit conflicted file \u2192 git add . \u2192 git commit Detached HEAD git switch main to reattach \u201cnon-fast-forward\u201d error on push Pull first ( git pull --rebase ) then push again Wrong commit message git commit --amend -m \"New message\" \ud83e\udde9 11. Advanced Tools (for later) \u00b6 Rebase vs Merge: Rebase keeps history linear, merge preserves branching. Cherry-pick: apply specific commits between branches. git cherry-pick <commit> * Stash: temporarily save changes. git stash git stash pop * Hooks: automate pre-commit checks and CI workflows. * Submodules: include external repos inside your repo. \u2705 Summary \u00b6 Git snapshots your code and lets you time-travel safely. Commits build your local history, remotes sync it across the team. Branches isolate work; merges and rebases integrate it. git status and git log are your best debugging friends. Never panic \u2014 you can almost always recover history in Git. \ud83e\udded Next Step Ideas \u00b6 When you outgrow this refresher: Split into git-basics.md , git-advanced.md , git-troubleshooting.md Add practical guides for branching strategies or GitHub workflows. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 git/ \u2514\u2500 quick-start.md \ud83d\udcbb 12. Git in Your IDE (JetBrains & VS Code) \u00b6 Git isn\u2019t just a command-line tool \u2014 every modern IDE wraps it into a visual workflow. But it helps to understand what each action actually does under the hood. \ud83e\udde9 JetBrains IDEs (IntelliJ IDEA, PyCharm, etc.) \u00b6 Action What It Actually Does Commit (Ctrl+K) Stages & commits changes locally. Equivalent to git add + git commit . Push (Ctrl+Shift+K) Uploads commits to the remote ( git push ). Update Project (Ctrl+T) Fetch + merge (or rebase, if configured). Rebase Onto Upstream Equivalent to git rebase origin/main . Keeps history clean. Show History (Alt+9 \u2192 Log tab) Visual git log + branch graph. Cherry-pick Commit Applies selected commit(s) onto your branch ( git cherry-pick ). Shelve Changes JetBrains' own version of git stash \u2014 great for quick context switches. \ud83d\udc49 Pro tip: JetBrains auto-detects Git roots. If a folder contains .git , it treats it as a repo automatically. Good workflow habit inside JetBrains: 1. Regularly commit small, meaningful chunks. 2. Rebase before pushing to keep branches fast-forwardable. 3. Always inspect your commit diff before confirming. \ud83e\udde0 VS Code Integration \u00b6 VS Code\u2019s Source Control panel is a friendly wrapper around core Git commands. Icon Action Git Equivalent \u2713 Commit git commit \u2b06\ufe0f Push git push \u2b07\ufe0f Pull git pull \ud83d\udd01 Sync Changes Pull + Push \u2295 Stage Change git add \ud83d\uddd1\ufe0f Discard Change git restore Extensions worth adding: - GitLens \u2192 deep history, blame, branch insights. - Git Graph \u2192 visual branching and merges. - GitHub Pull Requests \u2192 manage PRs directly in VS Code. \u270d\ufe0f 13. Writing Great Commit Messages \u00b6 Clear commit messages are part of professional hygiene. A Git log should read like a timeline of meaningful decisions, not noise. Format (conventional style): <type>(scope): short summary [optional body] [optional footer] Examples: feat(auth): add JWT token validation fix(api): correct null pointer on user fetch docs(readme): add setup instructions refactor(core): simplify cache layer Common types: Type Meaning feat new feature fix bug fix docs documentation change refactor code restructure without behavior change test adding or fixing tests chore maintenance or tooling changes \ud83d\udc49 A good commit message should explain why a change exists, not just what changed. \ud83e\udde9 14. Practical Git + IDE Workflow Example \u00b6 Here\u2019s how a typical developer loop looks: Start new work git switch -c feature/login (Or use JetBrains \u201cNew Branch\u201d button.) Code \u2192 test \u2192 commit Stage meaningful changes Commit with a clear message: feat(login): add session management Stay up to date git fetch origin git rebase origin/main (Or \u201cRebase onto Main\u201d in IDE.) Push for review git push -u origin feature/login (Or \u201cPush\u201d in IDE.) After PR merge git switch main git pull git branch -d feature/login (Or \u201cDelete Branch\u201d safely in IDE.) \ud83e\uddfc 15. Tips for Clean Repositories \u00b6 Keep .gitignore tight \u2014 no IDE caches or .venv/ folders. Avoid committing binaries, logs, or secrets. Use .gitattributes to manage line endings across systems. Squash small commits before merging to keep history readable: ```bash git rebase -i HEAD~5 ```` Use git tag for versioning: bash git tag -a v1.0.0 -m \"Initial release\" git push origin v1.0.0 \u2705 Final Notes \u00b6 The IDE is just a lens \u2014 Git remains the same underneath. Always review the diff before committing. Favor small, focused commits over massive all-in-one pushes. Treat your Git history as a story \u2014 future you will thank you.","title":"Quick Start"},{"location":"cheatsheets/tools/git/quick-start/#git-from-basics-to-advanced-workflow-mastery","text":"Git is a distributed version control system (DVCS) \u2014 it tracks changes to files over time, lets developers collaborate, and makes every clone a complete backup of the repository. It\u2019s the tool that powers GitHub, GitLab, and most of modern software development.","title":"\ud83e\udde0 Git: From Basics to Advanced Workflow Mastery"},{"location":"cheatsheets/tools/git/quick-start/#1-what-git-actually-does","text":"Git records snapshots of your project (commits), not just diffs. Each commit stores the entire state of your code at that moment, compressed efficiently. You can move through history (like checkpoints in a game), branch off to experiment, and merge or rebase to integrate changes. # See history git log --oneline --graph --decorate \ud83d\udc49 In short: Git is your project\u2019s time machine + collaboration layer .","title":"\u2699\ufe0f 1. What Git Actually Does"},{"location":"cheatsheets/tools/git/quick-start/#2-core-concepts","text":"Concept Description Repository (repo) A Git-managed folder containing code and version history ( .git folder inside). Commit A snapshot of your files at a moment in time. Branch A movable pointer to a commit \u2014 allows parallel development. HEAD Your current working branch (where you are in history). Staging area Where you prepare changes before committing. Remote A copy of your repo hosted elsewhere (e.g., GitHub). Merge Combines histories from different branches. Rebase Moves commits onto a new base, creating a linear history.","title":"\ud83e\uddf1 2. Core Concepts"},{"location":"cheatsheets/tools/git/quick-start/#3-the-git-workflow-mental-model","text":"Working Directory \u2192 Staging Area \u2192 Local Repository \u2192 Remote Repository Edit files \u2192 git add Save snapshot \u2192 git commit Share/pull changes \u2192 git push / git pull","title":"\u2692\ufe0f 3. The Git Workflow (mental model)"},{"location":"cheatsheets/tools/git/quick-start/#4-quick-command-reference","text":"","title":"\ud83d\udd27 4. Quick Command Reference"},{"location":"cheatsheets/tools/git/quick-start/#initialize-or-clone","text":"git init # start a new repo git clone https://github.com/user/repo.git","title":"Initialize or Clone"},{"location":"cheatsheets/tools/git/quick-start/#inspect","text":"git status # show changed files git diff # show unstaged changes git log --oneline --graph --decorate","title":"Inspect"},{"location":"cheatsheets/tools/git/quick-start/#stage-and-commit","text":"git add file.txt # stage file git add . # stage all changes git commit -m \"Add new feature\" # create commit","title":"Stage and Commit"},{"location":"cheatsheets/tools/git/quick-start/#branch-and-merge","text":"git branch # list branches git switch -c feature/login # create + switch git merge feature/login # merge into current branch git branch -d feature/login # delete local branch","title":"Branch and Merge"},{"location":"cheatsheets/tools/git/quick-start/#sync-with-remote","text":"git remote -v # show remotes git fetch # get new data, no merge git pull # fetch + merge current branch git push origin main # upload local commits","title":"Sync with Remote"},{"location":"cheatsheets/tools/git/quick-start/#5-branching-and-collaboration-patterns","text":"Main workflow: main \u251c\u2500 feature/login \u251c\u2500 feature/dashboard \u2514\u2500 fix/typo Branch naming convention: feature/\u2026 , fix/\u2026 , refactor/\u2026 , release/\u2026 Recommended pattern: main \u2014 stable release branch develop \u2014 active integration branch feature/* \u2014 short-lived branches hotfix/* \u2014 emergency fixes release/* \u2014 prep for deployment","title":"\ud83c\udf3f 5. Branching and Collaboration Patterns"},{"location":"cheatsheets/tools/git/quick-start/#6-undoing-and-time-travel","text":"git restore file.txt # discard unstaged changes git restore --staged file.txt # unstage git checkout <commit> -- file.txt # restore from old commit git reset --soft HEAD~1 # undo last commit, keep changes staged git reset --hard HEAD~1 # undo commit + changes git revert <commit> # create new commit that undoes another \ud83d\udc49 reset rewrites history; revert adds a new commit that undoes previous work safely. Caution Attention when rewriting history on shared branches! Update the remote to match your local (force rewrite remote branch): # safer force (recommended even when alone) git push --force-with-lease origin <your-branch> # or force (less safe) git push --force origin <your-branch> Notes: --force-with-lease prevents clobbering a remote you don\u2019t expect \u2014 it fails if remote changed since you last fetched. If you accidentally delete something, git reflog can usually recover the commit SHA.","title":"\u26a1 6. Undoing and Time Travel"},{"location":"cheatsheets/tools/git/quick-start/#7-working-with-remotes-github-etc","text":"git remote add origin https://github.com/user/repo.git git push -u origin main Next time, just: git push git pull Clone and work: git clone <url> git switch -c feature/branch Sync fork or upstream: git remote add upstream https://github.com/source/repo.git git fetch upstream git merge upstream/main","title":"\ud83e\udde9 7. Working with Remotes (GitHub, etc.)"},{"location":"cheatsheets/tools/git/quick-start/#8-real-world-example-feature-workflow","text":"# Start new work git switch -c feature/login # Edit code git add . git commit -m \"Implement login feature\" # Update main and rebase to stay up-to-date git fetch origin git rebase origin/main # Push branch for review git push -u origin feature/login # After merge, clean up git switch main git pull git branch -d feature/login","title":"\ud83e\uddf0 8. Real-World Example (Feature Workflow)"},{"location":"cheatsheets/tools/git/quick-start/#9-maintenance-and-cleanup","text":"git branch -vv # see tracking info git fetch -p # prune deleted remote branches git gc # clean up unnecessary files and optimize repo","title":"\ud83e\uddfc 9. Maintenance and Cleanup"},{"location":"cheatsheets/tools/git/quick-start/#10-common-troubleshooting","text":"Problem Fix Accidentally committed wrong file git reset HEAD~1 then re-commit Merge conflict Edit conflicted file \u2192 git add . \u2192 git commit Detached HEAD git switch main to reattach \u201cnon-fast-forward\u201d error on push Pull first ( git pull --rebase ) then push again Wrong commit message git commit --amend -m \"New message\"","title":"\ud83e\udde0 10. Common Troubleshooting"},{"location":"cheatsheets/tools/git/quick-start/#11-advanced-tools-for-later","text":"Rebase vs Merge: Rebase keeps history linear, merge preserves branching. Cherry-pick: apply specific commits between branches. git cherry-pick <commit> * Stash: temporarily save changes. git stash git stash pop * Hooks: automate pre-commit checks and CI workflows. * Submodules: include external repos inside your repo.","title":"\ud83e\udde9 11. Advanced Tools (for later)"},{"location":"cheatsheets/tools/git/quick-start/#summary","text":"Git snapshots your code and lets you time-travel safely. Commits build your local history, remotes sync it across the team. Branches isolate work; merges and rebases integrate it. git status and git log are your best debugging friends. Never panic \u2014 you can almost always recover history in Git.","title":"\u2705 Summary"},{"location":"cheatsheets/tools/git/quick-start/#next-step-ideas","text":"When you outgrow this refresher: Split into git-basics.md , git-advanced.md , git-troubleshooting.md Add practical guides for branching strategies or GitHub workflows. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 git/ \u2514\u2500 quick-start.md","title":"\ud83e\udded Next Step Ideas"},{"location":"cheatsheets/tools/git/quick-start/#12-git-in-your-ide-jetbrains-vs-code","text":"Git isn\u2019t just a command-line tool \u2014 every modern IDE wraps it into a visual workflow. But it helps to understand what each action actually does under the hood.","title":"\ud83d\udcbb 12. Git in Your IDE (JetBrains &amp; VS Code)"},{"location":"cheatsheets/tools/git/quick-start/#jetbrains-ides-intellij-idea-pycharm-etc","text":"Action What It Actually Does Commit (Ctrl+K) Stages & commits changes locally. Equivalent to git add + git commit . Push (Ctrl+Shift+K) Uploads commits to the remote ( git push ). Update Project (Ctrl+T) Fetch + merge (or rebase, if configured). Rebase Onto Upstream Equivalent to git rebase origin/main . Keeps history clean. Show History (Alt+9 \u2192 Log tab) Visual git log + branch graph. Cherry-pick Commit Applies selected commit(s) onto your branch ( git cherry-pick ). Shelve Changes JetBrains' own version of git stash \u2014 great for quick context switches. \ud83d\udc49 Pro tip: JetBrains auto-detects Git roots. If a folder contains .git , it treats it as a repo automatically. Good workflow habit inside JetBrains: 1. Regularly commit small, meaningful chunks. 2. Rebase before pushing to keep branches fast-forwardable. 3. Always inspect your commit diff before confirming.","title":"\ud83e\udde9 JetBrains IDEs (IntelliJ IDEA, PyCharm, etc.)"},{"location":"cheatsheets/tools/git/quick-start/#vs-code-integration","text":"VS Code\u2019s Source Control panel is a friendly wrapper around core Git commands. Icon Action Git Equivalent \u2713 Commit git commit \u2b06\ufe0f Push git push \u2b07\ufe0f Pull git pull \ud83d\udd01 Sync Changes Pull + Push \u2295 Stage Change git add \ud83d\uddd1\ufe0f Discard Change git restore Extensions worth adding: - GitLens \u2192 deep history, blame, branch insights. - Git Graph \u2192 visual branching and merges. - GitHub Pull Requests \u2192 manage PRs directly in VS Code.","title":"\ud83e\udde0 VS Code Integration"},{"location":"cheatsheets/tools/git/quick-start/#13-writing-great-commit-messages","text":"Clear commit messages are part of professional hygiene. A Git log should read like a timeline of meaningful decisions, not noise. Format (conventional style): <type>(scope): short summary [optional body] [optional footer] Examples: feat(auth): add JWT token validation fix(api): correct null pointer on user fetch docs(readme): add setup instructions refactor(core): simplify cache layer Common types: Type Meaning feat new feature fix bug fix docs documentation change refactor code restructure without behavior change test adding or fixing tests chore maintenance or tooling changes \ud83d\udc49 A good commit message should explain why a change exists, not just what changed.","title":"\u270d\ufe0f 13. Writing Great Commit Messages"},{"location":"cheatsheets/tools/git/quick-start/#14-practical-git-ide-workflow-example","text":"Here\u2019s how a typical developer loop looks: Start new work git switch -c feature/login (Or use JetBrains \u201cNew Branch\u201d button.) Code \u2192 test \u2192 commit Stage meaningful changes Commit with a clear message: feat(login): add session management Stay up to date git fetch origin git rebase origin/main (Or \u201cRebase onto Main\u201d in IDE.) Push for review git push -u origin feature/login (Or \u201cPush\u201d in IDE.) After PR merge git switch main git pull git branch -d feature/login (Or \u201cDelete Branch\u201d safely in IDE.)","title":"\ud83e\udde9 14. Practical Git + IDE Workflow Example"},{"location":"cheatsheets/tools/git/quick-start/#15-tips-for-clean-repositories","text":"Keep .gitignore tight \u2014 no IDE caches or .venv/ folders. Avoid committing binaries, logs, or secrets. Use .gitattributes to manage line endings across systems. Squash small commits before merging to keep history readable: ```bash git rebase -i HEAD~5 ```` Use git tag for versioning: bash git tag -a v1.0.0 -m \"Initial release\" git push origin v1.0.0","title":"\ud83e\uddfc 15. Tips for Clean Repositories"},{"location":"cheatsheets/tools/git/quick-start/#final-notes","text":"The IDE is just a lens \u2014 Git remains the same underneath. Always review the diff before committing. Favor small, focused commits over massive all-in-one pushes. Treat your Git history as a story \u2014 future you will thank you.","title":"\u2705 Final Notes"},{"location":"cheatsheets/tools/git/remotes/","text":"\ud83d\udcdd Git Local \u2194 Remote Cheat Sheet \u00b6 \ud83d\udd11 Core ideas \u00b6 clone \u2192 make a new local folder from remote init \u2192 make current folder a repo remote = nickname + URL ( origin ) upstream = default remote branch your local branch tracks \ud83d\ude80 Common Scenarios \u00b6 1. Start from Remote \u2192 Local \u00b6 git clone <REMOTE-URL> [ folder ] cd [ folder ] \u2705 Now just git pull and git push 2. Start from Local \u2192 Remote \u00b6 git init git add . git commit -m \"first commit\" git branch -M main git remote add origin <REMOTE-URL> git push -u origin main The -u flag sets the upstream for your branch. It tells Git: \u201c main should track origin/main from now on.\u201d 3. Already Have Both (Sync Them) \u00b6 git remote -v git fetch origin git switch main git pull --rebase git push If unrelated histories: git pull --rebase --allow-unrelated-histories \ud83c\udf0d Understanding \u201cUpstream\u201d \u00b6 The upstream branch is what your local branch \u201ctracks.\u201d When you set it, git pull and git push automatically know which remote branch to sync with \u2014 no need to retype origin main every time. git branch -vv # see tracking info git push -u origin main # set upstream during first push git branch --set-upstream-to = origin/main main # set manually After setting upstream: git pull # pulls from origin/main automatically git push # pushes to origin/main automatically If you ever clone a repo, upstreams are usually set for you. You\u2019ll only need to set them manually when creating new branches or pushing from a freshly inited local repo. Think of it this way: origin is the remote name (like a server nickname). origin/main is the remote branch . The upstream is your local branch\u2019s connection to it. \ud83d\udcc2 Folder Rules \u00b6 git clone <url> \u2192 makes a new folder git clone <url> myfolder \u2192 makes myfolder git clone <url> . \u2192 current empty folder Always run Git inside the repo folder \ud83e\udd14 Which First? \u00b6 Solo / quick test: local \u2192 push Team / templates / CI: remote \u2192 clone \u26a1 Handy Commands \u00b6 git remote -v # list remotes git push -u origin main # first push, set upstream git pull --rebase # cleaner pulls git remote set-url origin <url> # change remote git branch -vv # show tracking branches \u26a0\ufe0f Pitfalls \u00b6 Remote has README \u2192 git pull --rebase --allow-unrelated-histories Wrong branch name \u2192 git branch -M main Tracked junk files \u2192 fix .gitignore , then: git rm -r --cached . git add . git commit -m \"clean tracked files\" \ud83d\uddc2\ufe0f Decision Tree \u00b6 Have remote? \u2192 git clone <url> Have local only? \u2192 git init \u2192 git push -u origin main Both exist? \u2192 git fetch \u2192 git pull --rebase \u2192 git push \ud83d\udc49 This is the minimal flow you\u2019ll use 99% of the time. ``` Why this matters \u00b6 Without an upstream, every git pull or git push must specify remote + branch manually ( git push origin main ). Once set, you can just type git push . That\u2019s why -u is quietly one of the most powerful flags in Git \u2014 it wires your local branch into the network.","title":"Remote \u2194 Local"},{"location":"cheatsheets/tools/git/remotes/#git-local-remote-cheat-sheet","text":"","title":"\ud83d\udcdd Git Local \u2194 Remote Cheat Sheet"},{"location":"cheatsheets/tools/git/remotes/#core-ideas","text":"clone \u2192 make a new local folder from remote init \u2192 make current folder a repo remote = nickname + URL ( origin ) upstream = default remote branch your local branch tracks","title":"\ud83d\udd11 Core ideas"},{"location":"cheatsheets/tools/git/remotes/#common-scenarios","text":"","title":"\ud83d\ude80 Common Scenarios"},{"location":"cheatsheets/tools/git/remotes/#1-start-from-remote-local","text":"git clone <REMOTE-URL> [ folder ] cd [ folder ] \u2705 Now just git pull and git push","title":"1. Start from Remote \u2192 Local"},{"location":"cheatsheets/tools/git/remotes/#2-start-from-local-remote","text":"git init git add . git commit -m \"first commit\" git branch -M main git remote add origin <REMOTE-URL> git push -u origin main The -u flag sets the upstream for your branch. It tells Git: \u201c main should track origin/main from now on.\u201d","title":"2. Start from Local \u2192 Remote"},{"location":"cheatsheets/tools/git/remotes/#3-already-have-both-sync-them","text":"git remote -v git fetch origin git switch main git pull --rebase git push If unrelated histories: git pull --rebase --allow-unrelated-histories","title":"3. Already Have Both (Sync Them)"},{"location":"cheatsheets/tools/git/remotes/#understanding-upstream","text":"The upstream branch is what your local branch \u201ctracks.\u201d When you set it, git pull and git push automatically know which remote branch to sync with \u2014 no need to retype origin main every time. git branch -vv # see tracking info git push -u origin main # set upstream during first push git branch --set-upstream-to = origin/main main # set manually After setting upstream: git pull # pulls from origin/main automatically git push # pushes to origin/main automatically If you ever clone a repo, upstreams are usually set for you. You\u2019ll only need to set them manually when creating new branches or pushing from a freshly inited local repo. Think of it this way: origin is the remote name (like a server nickname). origin/main is the remote branch . The upstream is your local branch\u2019s connection to it.","title":"\ud83c\udf0d Understanding \u201cUpstream\u201d"},{"location":"cheatsheets/tools/git/remotes/#folder-rules","text":"git clone <url> \u2192 makes a new folder git clone <url> myfolder \u2192 makes myfolder git clone <url> . \u2192 current empty folder Always run Git inside the repo folder","title":"\ud83d\udcc2 Folder Rules"},{"location":"cheatsheets/tools/git/remotes/#which-first","text":"Solo / quick test: local \u2192 push Team / templates / CI: remote \u2192 clone","title":"\ud83e\udd14 Which First?"},{"location":"cheatsheets/tools/git/remotes/#handy-commands","text":"git remote -v # list remotes git push -u origin main # first push, set upstream git pull --rebase # cleaner pulls git remote set-url origin <url> # change remote git branch -vv # show tracking branches","title":"\u26a1 Handy Commands"},{"location":"cheatsheets/tools/git/remotes/#pitfalls","text":"Remote has README \u2192 git pull --rebase --allow-unrelated-histories Wrong branch name \u2192 git branch -M main Tracked junk files \u2192 fix .gitignore , then: git rm -r --cached . git add . git commit -m \"clean tracked files\"","title":"\u26a0\ufe0f Pitfalls"},{"location":"cheatsheets/tools/git/remotes/#decision-tree","text":"Have remote? \u2192 git clone <url> Have local only? \u2192 git init \u2192 git push -u origin main Both exist? \u2192 git fetch \u2192 git pull --rebase \u2192 git push \ud83d\udc49 This is the minimal flow you\u2019ll use 99% of the time. ```","title":"\ud83d\uddc2\ufe0f Decision Tree"},{"location":"cheatsheets/tools/git/remotes/#why-this-matters","text":"Without an upstream, every git pull or git push must specify remote + branch manually ( git push origin main ). Once set, you can just type git push . That\u2019s why -u is quietly one of the most powerful flags in Git \u2014 it wires your local branch into the network.","title":"Why this matters"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/","text":"\ud83d\udcc2 Linux Filesystem Hierarchy \u2014 Final Comprehensive Summary \u00b6 \ud83d\udcda Overview \u00b6 The Linux filesystem is structured as a single inverted tree , starting at the root directory / . Everything (files, devices, sockets, processes) is represented as a file under / . \ud83d\udd11 Root Directory / \u00b6 The top-level directory containing all system files, user files, devices, and mounts. \ud83d\udcc1 Key Directories Under / \u00b6 1. /bin \u00b6 Essential user binaries (commands) needed for booting and single-user mode. Examples: ls , cp , mv , cat , grep , bash . 2. /sbin \u00b6 Essential system binaries for administration, mainly used by root. Examples: init , fsck , ifconfig , reboot . 3. /boot \u00b6 Files needed for booting the system. Kernel ( vmlinuz ), initramfs ( initrd.img ), GRUB files. 4. /dev \u00b6 Device files (special files that interface with hardware/peripherals). Examples: /dev/sda \u2192 first SATA disk /dev/null \u2192 null device /dev/tty \u2192 terminal devices 5. /etc \u00b6 System-wide configuration files . Examples: /etc/passwd \u2192 user accounts /etc/fstab \u2192 filesystem mount table /etc/hosts \u2192 hostname mappings 6. /home \u00b6 User home directories. Example: /home/alice , /home/bob 7. /lib , /lib64 \u00b6 Essential shared libraries for programs in /bin and /sbin . Examples: /lib/libc.so \u2192 C library /lib/modules \u2192 kernel modules 8. /media \u00b6 Mount point for removable media . Examples: /media/usb , /media/cdrom 9. /mnt \u00b6 Generic temporary mount point (often used for manual mounts). Example: /mnt/data 10. /opt \u00b6 Optional or third-party software packages. Example: /opt/google/chrome/ 11. /proc \u00b6 Virtual filesystem providing process and kernel info. Examples: /proc/cpuinfo /proc/meminfo /proc/[PID]/ 12. /root \u00b6 Home directory of the root user (not / itself). 13. /run \u00b6 Volatile runtime data (replaces /var/run in modern systems). Example: process IDs, sockets. 14. /srv \u00b6 Site-specific service data (e.g., web/ftp server files). Example: /srv/www/ 15. /sys \u00b6 Virtual filesystem exposing kernel/device info . Example: /sys/class/net/ 16. /tmp \u00b6 Temporary files (writable by anyone, usually cleared on reboot). Example: session files, sockets. 17. /usr \u00b6 Secondary hierarchy for user applications and read-only data . Often very large. /usr/bin \u2192 non-essential user binaries /usr/sbin \u2192 non-essential system binaries /usr/lib \u2192 libraries /usr/include \u2192 header files /usr/share \u2192 architecture-independent data (man pages, docs, icons) /usr/local \u2192 locally installed software 18. /var \u00b6 Variable files (expected to grow). /var/log \u2192 log files /var/spool \u2192 queued tasks (print, mail) /var/tmp \u2192 temp files that persist across reboots /var/cache \u2192 cached data \ud83d\uddc2 Special Notes \u00b6 Everything is a file : devices, processes, sockets. Hard vs Soft links : Multiple references to files. Mount points : Additional filesystems mounted under / . Virtual filesystems : /proc and /sys don\u2019t hold real files, but kernel-generated info. \u2705 Mnemonic Tip : bin/sbin \u2192 binaries etc \u2192 configuration var \u2192 variable data usr \u2192 user apps lib \u2192 libraries dev \u2192 devices proc/sys \u2192 system + kernel info \ud83c\udf33 Full Directory Tree with Annotations \u00b6 / # root of the entire filesystem tree \u251c\u2500 bin/ # essential user commands (ls, cp, mv, cat, bash) \u251c\u2500 sbin/ # essential system binaries for root (init, reboot, fsck) \u251c\u2500 boot/ # boot loader + kernel \u2502 \u251c\u2500 vmlinuz # Linux kernel \u2502 \u251c\u2500 initrd.img # initial RAM disk \u2502 \u2514\u2500 grub/ # GRUB bootloader files \u251c\u2500 dev/ # device files (interface to hardware/peripherals) \u2502 \u251c\u2500 sda # first hard disk \u2502 \u251c\u2500 null # discard output \u2502 \u251c\u2500 tty # terminals \u2502 \u2514\u2500 random # random number generator \u251c\u2500 etc/ # system-wide configuration files \u2502 \u251c\u2500 passwd # user accounts \u2502 \u251c\u2500 shadow # secure user passwords \u2502 \u251c\u2500 fstab # filesystem mount table \u2502 \u2514\u2500 hosts # static hostname mappings \u251c\u2500 home/ # user home directories \u2502 \u251c\u2500 alice/ # home dir for user \"alice\" \u2502 \u2514\u2500 bob/ # home dir for user \"bob\" \u251c\u2500 lib/ # essential shared libraries for /bin and /sbin \u251c\u2500 lib64/ # 64-bit libraries (on 64-bit systems) \u251c\u2500 media/ # mount points for removable media (USB, CD-ROM) \u251c\u2500 mnt/ # generic temporary mount point (manual use) \u251c\u2500 opt/ # optional / third-party software \u251c\u2500 proc/ # virtual filesystem with process & kernel info \u2502 \u251c\u2500 cpuinfo # CPU details \u2502 \u251c\u2500 meminfo # memory details \u2502 \u2514\u2500 [PID]/ # info for each running process \u251c\u2500 root/ # root user\u2019s home directory \u251c\u2500 run/ # volatile runtime data (PID files, sockets) \u2014 cleared on reboot \u251c\u2500 srv/ # service-specific data (web, ftp, etc.) \u251c\u2500 sys/ # virtual filesystem exposing kernel & device info \u251c\u2500 tmp/ # temporary files (world-writable, cleared on reboot) \u251c\u2500 usr/ # user applications and read-only data (very large) \u2502 \u251c\u2500 bin/ # non-essential user commands (awk, gcc, python) \u2502 \u251c\u2500 sbin/ # non-essential system binaries (httpd, named) \u2502 \u251c\u2500 lib/ # libraries for /usr/bin and /usr/sbin \u2502 \u251c\u2500 include/ # header files (C, C++) \u2502 \u251c\u2500 share/ # arch-independent data (docs, man pages, icons) \u2502 \u2514\u2500 local/ # locally installed software (safe from package manager) \u2514\u2500 var/ # variable data files (changes frequently) \u251c\u2500 log/ # log files (syslog, dmesg, auth.log) \u251c\u2500 spool/ # queued tasks (mail, print jobs) \u251c\u2500 tmp/ # temporary files that persist across reboot \u2514\u2500 cache/ # application cache data \ud83d\udd11 Key Principles \u00b6 Everything is a file : devices, sockets, processes, directories. Essential binaries \u2192 /bin , /sbin . Configuration \u2192 /etc . User data \u2192 /home . Variable data \u2192 /var . Kernel + process info \u2192 /proc , /sys . Boot files \u2192 /boot . Temporary storage \u2192 /tmp , /var/tmp . 3rd party software \u2192 /opt , /usr/local . \u2705 This summary gives you: A tree-structured overview (easy to visualize). Detailed annotations (purpose + examples). A unified cheat sheet for study or quick reference.","title":"Linux Filesystem Hierarchy"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#linux-filesystem-hierarchy-final-comprehensive-summary","text":"","title":"\ud83d\udcc2 Linux Filesystem Hierarchy \u2014 Final Comprehensive Summary"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#overview","text":"The Linux filesystem is structured as a single inverted tree , starting at the root directory / . Everything (files, devices, sockets, processes) is represented as a file under / .","title":"\ud83d\udcda Overview"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#root-directory","text":"The top-level directory containing all system files, user files, devices, and mounts.","title":"\ud83d\udd11 Root Directory /"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#key-directories-under","text":"","title":"\ud83d\udcc1 Key Directories Under /"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#1-bin","text":"Essential user binaries (commands) needed for booting and single-user mode. Examples: ls , cp , mv , cat , grep , bash .","title":"1. /bin"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#2-sbin","text":"Essential system binaries for administration, mainly used by root. Examples: init , fsck , ifconfig , reboot .","title":"2. /sbin"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#3-boot","text":"Files needed for booting the system. Kernel ( vmlinuz ), initramfs ( initrd.img ), GRUB files.","title":"3. /boot"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#4-dev","text":"Device files (special files that interface with hardware/peripherals). Examples: /dev/sda \u2192 first SATA disk /dev/null \u2192 null device /dev/tty \u2192 terminal devices","title":"4. /dev"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#5-etc","text":"System-wide configuration files . Examples: /etc/passwd \u2192 user accounts /etc/fstab \u2192 filesystem mount table /etc/hosts \u2192 hostname mappings","title":"5. /etc"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#6-home","text":"User home directories. Example: /home/alice , /home/bob","title":"6. /home"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#7-lib-lib64","text":"Essential shared libraries for programs in /bin and /sbin . Examples: /lib/libc.so \u2192 C library /lib/modules \u2192 kernel modules","title":"7. /lib, /lib64"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#8-media","text":"Mount point for removable media . Examples: /media/usb , /media/cdrom","title":"8. /media"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#9-mnt","text":"Generic temporary mount point (often used for manual mounts). Example: /mnt/data","title":"9. /mnt"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#10-opt","text":"Optional or third-party software packages. Example: /opt/google/chrome/","title":"10. /opt"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#11-proc","text":"Virtual filesystem providing process and kernel info. Examples: /proc/cpuinfo /proc/meminfo /proc/[PID]/","title":"11. /proc"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#12-root","text":"Home directory of the root user (not / itself).","title":"12. /root"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#13-run","text":"Volatile runtime data (replaces /var/run in modern systems). Example: process IDs, sockets.","title":"13. /run"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#14-srv","text":"Site-specific service data (e.g., web/ftp server files). Example: /srv/www/","title":"14. /srv"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#15-sys","text":"Virtual filesystem exposing kernel/device info . Example: /sys/class/net/","title":"15. /sys"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#16-tmp","text":"Temporary files (writable by anyone, usually cleared on reboot). Example: session files, sockets.","title":"16. /tmp"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#17-usr","text":"Secondary hierarchy for user applications and read-only data . Often very large. /usr/bin \u2192 non-essential user binaries /usr/sbin \u2192 non-essential system binaries /usr/lib \u2192 libraries /usr/include \u2192 header files /usr/share \u2192 architecture-independent data (man pages, docs, icons) /usr/local \u2192 locally installed software","title":"17. /usr"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#18-var","text":"Variable files (expected to grow). /var/log \u2192 log files /var/spool \u2192 queued tasks (print, mail) /var/tmp \u2192 temp files that persist across reboots /var/cache \u2192 cached data","title":"18. /var"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#special-notes","text":"Everything is a file : devices, processes, sockets. Hard vs Soft links : Multiple references to files. Mount points : Additional filesystems mounted under / . Virtual filesystems : /proc and /sys don\u2019t hold real files, but kernel-generated info. \u2705 Mnemonic Tip : bin/sbin \u2192 binaries etc \u2192 configuration var \u2192 variable data usr \u2192 user apps lib \u2192 libraries dev \u2192 devices proc/sys \u2192 system + kernel info","title":"\ud83d\uddc2 Special Notes"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#full-directory-tree-with-annotations","text":"/ # root of the entire filesystem tree \u251c\u2500 bin/ # essential user commands (ls, cp, mv, cat, bash) \u251c\u2500 sbin/ # essential system binaries for root (init, reboot, fsck) \u251c\u2500 boot/ # boot loader + kernel \u2502 \u251c\u2500 vmlinuz # Linux kernel \u2502 \u251c\u2500 initrd.img # initial RAM disk \u2502 \u2514\u2500 grub/ # GRUB bootloader files \u251c\u2500 dev/ # device files (interface to hardware/peripherals) \u2502 \u251c\u2500 sda # first hard disk \u2502 \u251c\u2500 null # discard output \u2502 \u251c\u2500 tty # terminals \u2502 \u2514\u2500 random # random number generator \u251c\u2500 etc/ # system-wide configuration files \u2502 \u251c\u2500 passwd # user accounts \u2502 \u251c\u2500 shadow # secure user passwords \u2502 \u251c\u2500 fstab # filesystem mount table \u2502 \u2514\u2500 hosts # static hostname mappings \u251c\u2500 home/ # user home directories \u2502 \u251c\u2500 alice/ # home dir for user \"alice\" \u2502 \u2514\u2500 bob/ # home dir for user \"bob\" \u251c\u2500 lib/ # essential shared libraries for /bin and /sbin \u251c\u2500 lib64/ # 64-bit libraries (on 64-bit systems) \u251c\u2500 media/ # mount points for removable media (USB, CD-ROM) \u251c\u2500 mnt/ # generic temporary mount point (manual use) \u251c\u2500 opt/ # optional / third-party software \u251c\u2500 proc/ # virtual filesystem with process & kernel info \u2502 \u251c\u2500 cpuinfo # CPU details \u2502 \u251c\u2500 meminfo # memory details \u2502 \u2514\u2500 [PID]/ # info for each running process \u251c\u2500 root/ # root user\u2019s home directory \u251c\u2500 run/ # volatile runtime data (PID files, sockets) \u2014 cleared on reboot \u251c\u2500 srv/ # service-specific data (web, ftp, etc.) \u251c\u2500 sys/ # virtual filesystem exposing kernel & device info \u251c\u2500 tmp/ # temporary files (world-writable, cleared on reboot) \u251c\u2500 usr/ # user applications and read-only data (very large) \u2502 \u251c\u2500 bin/ # non-essential user commands (awk, gcc, python) \u2502 \u251c\u2500 sbin/ # non-essential system binaries (httpd, named) \u2502 \u251c\u2500 lib/ # libraries for /usr/bin and /usr/sbin \u2502 \u251c\u2500 include/ # header files (C, C++) \u2502 \u251c\u2500 share/ # arch-independent data (docs, man pages, icons) \u2502 \u2514\u2500 local/ # locally installed software (safe from package manager) \u2514\u2500 var/ # variable data files (changes frequently) \u251c\u2500 log/ # log files (syslog, dmesg, auth.log) \u251c\u2500 spool/ # queued tasks (mail, print jobs) \u251c\u2500 tmp/ # temporary files that persist across reboot \u2514\u2500 cache/ # application cache data","title":"\ud83c\udf33 Full Directory Tree with Annotations"},{"location":"cheatsheets/tools/linux/core/filesystem-hierarchy/#key-principles","text":"Everything is a file : devices, sockets, processes, directories. Essential binaries \u2192 /bin , /sbin . Configuration \u2192 /etc . User data \u2192 /home . Variable data \u2192 /var . Kernel + process info \u2192 /proc , /sys . Boot files \u2192 /boot . Temporary storage \u2192 /tmp , /var/tmp . 3rd party software \u2192 /opt , /usr/local . \u2705 This summary gives you: A tree-structured overview (easy to visualize). Detailed annotations (purpose + examples). A unified cheat sheet for study or quick reference.","title":"\ud83d\udd11 Key Principles"},{"location":"cheatsheets/tools/linux/core/systemd/","text":"\u2699\ufe0f Linux systemd & systemctl: From Basics to Service Mastery \u00b6 systemd is the init system and service manager used by most modern Linux distributions (Ubuntu, Debian, Fedora, Arch, CentOS, etc.). It\u2019s what boots your system, starts background services, handles logs, timers, sockets, and shutdowns. systemctl is the command-line interface for controlling systemd . \ud83e\udde0 1. What systemd Actually Does \u00b6 When Linux boots, systemd : 1. Mounts file systems. 2. Spawns essential processes. 3. Starts all enabled services. 4. Manages dependencies and restarts on failure. It replaces older systems like SysVinit and upstart , providing faster parallel startup and fine-grained control. \ud83d\udc49 In short: systemd is the conductor ; services are the instruments . \ud83e\udde9 2. Key systemctl Commands (Quick Reference) \u00b6 # Service management sudo systemctl start docker sudo systemctl stop nginx sudo systemctl restart postgresql sudo systemctl reload nginx # reload config without stopping sudo systemctl status redis # check active status + logs # Boot-time behavior sudo systemctl enable docker # start automatically at boot sudo systemctl disable docker # disable at boot sudo systemctl is-enabled nginx # check status # Logs and info journalctl -u nginx # logs for one service journalctl -xe # detailed system logs systemctl list-units --type = service # all active services systemctl list-timers # scheduled timers # System power control sudo systemctl reboot sudo systemctl poweroff ```` --- ## \ud83e\uddf1 3. Anatomy of a Systemd Unit File Unit files define how services behave. They live under: /etc/systemd/system/ # custom user units /lib/systemd/system/ # system packages Example: `/etc/systemd/system/myapp.service` ```ini [Unit] Description=My Java Spring Boot Application After=network.target [Service] User=appuser WorkingDirectory=/opt/myapp ExecStart=/usr/bin/java -jar app.jar Restart=on-failure EnvironmentFile=/opt/myapp/.env [Install] WantedBy=multi-user.target Explanation: \u00b6 [Unit] \u2014 dependencies and metadata. [Service] \u2014 what to run, as whom, and how to handle restarts. [Install] \u2014 links service into system targets (boot-time groups). Reload after editing: sudo systemctl daemon-reload sudo systemctl enable myapp sudo systemctl start myapp \ud83e\uddf0 4. Common Service States \u00b6 Command Meaning active (running) Service is up. inactive (dead) Stopped. failed Crashed or exited abnormally. reloading Reloading config. activating/deactivating In startup/shutdown phase. \ud83e\udde9 5. Dependency and Target System \u00b6 systemd organizes services into targets \u2014 logical groups like: multi-user.target \u2192 standard multi-user system (normal operation) graphical.target \u2192 with GUI network.target \u2192 networking online default.target \u2192 system\u2019s default startup target Check default: systemctl get-default Change it (e.g., to boot without GUI): sudo systemctl set-default multi-user.target \u26a1 6. Journal Logs and Debugging \u00b6 journalctl reads systemd\u2019s binary logs. journalctl -u docker.service # logs for Docker only journalctl --since \"2 hours ago\" journalctl -f # follow logs (like tail -f) journalctl -k # kernel logs Filter by boot: journalctl -b -1 # previous boot logs \ud83e\uddf0 7. Timers (systemd\u2019s Cron Alternative) \u00b6 Timers replace cron with more flexibility and better logging. Example: /etc/systemd/system/backup.timer [Unit] Description = Nightly DB Backup [Timer] OnCalendar = daily Persistent = true [Install] WantedBy = timers.target Then /etc/systemd/system/backup.service : [Service] Type = oneshot ExecStart = /usr/local/bin/backup.sh Enable: sudo systemctl enable --now backup.timer systemctl list-timers \ud83e\udde9 8. User Services (Per-User systemd) \u00b6 You can run systemd-managed processes without root : systemctl --user enable myscript.service systemctl --user start myscript.service systemctl --user status myscript.service Useful for background scripts, language servers, or dev daemons. Config lives under: ~/.config/systemd/user/ \ud83e\uddf1 9. Service Restart and Recovery Patterns \u00b6 Add to [Service] section: Restart = on-failure RestartSec = 5 StartLimitIntervalSec = 0 Optional advanced options: Restart=always \u2192 restarts even after manual stop. ExecStartPre=/usr/bin/sleep 10 \u2192 delay before launch. ExecStopPost=/usr/bin/logger \"Service stopped\" \u2192 log cleanup. \ud83e\udde0 10. Practical Developer Workflow \u00b6 Most backend tools (Docker, PostgreSQL, Redis, Nginx) are systemd-managed . Here\u2019s the unified pattern for checking and controlling them: sudo systemctl status docker postgresql redis nginx sudo systemctl restart nginx sudo systemctl enable postgresql redis To verify all are active: systemctl list-units --type = service | grep -E 'nginx|redis|docker|postgres' \ud83d\udca1 If you use Docker Compose, those containers run inside Docker, but Docker itself is still a systemd service \u2014 systemctl restart docker affects them all. \ud83e\udde9 11. systemd + Development Environments \u00b6 JetBrains IDE Integration \u00b6 \u201cBefore Launch\u201d task: run sudo systemctl start <service> automatically. Add shell scripts to your Run Configurations for restarting or tailing logs. Combine with remote deployment \u2014 JetBrains can SSH + reload services post-deploy. Example remote deploy script: scp -r ./app.jar user@server:/opt/myapp/ ssh user@server \"sudo systemctl restart myapp\" VS Code Tasks \u00b6 Add to .vscode/tasks.json : { \"label\" : \"Restart Nginx\" , \"type\" : \"shell\" , \"command\" : \"sudo systemctl restart nginx\" } Run directly from VS Code\u2019s command palette. \ud83e\uddf0 12. Troubleshooting Common Issues \u00b6 Problem Fix \u201cUnit not found\u201d Create a .service file under /etc/systemd/system and reload daemon. Service doesn\u2019t start Check journalctl -u <service> . Config edits not applied Run sudo systemctl daemon-reload . Service loops restart Review Restart= directives or logs. Permission denied Ensure correct User= and file ownership. \ud83e\udde9 13. Real-World Example: Custom API Service \u00b6 /etc/systemd/system/backend.service [Unit] Description = Spring Boot API After = network.target [Service] User = appuser ExecStart = /usr/bin/java -jar /opt/backend/app.jar Restart = always Environment = SPRING_PROFILES_ACTIVE=prod EnvironmentFile = /opt/backend/.env [Install] WantedBy = multi-user.target Commands: sudo systemctl daemon-reload sudo systemctl enable backend sudo systemctl start backend sudo systemctl status backend \u2705 14. Summary \u00b6 systemd boots, manages, restarts, and logs all major services. systemctl gives you direct command-line control. Services are defined via .service unit files \u2014 easy to write, easy to automate. Timers replace cron with more control. Understanding this layer makes you a confident operator \u2014 not just a developer.","title":"Systemd + Systemctl"},{"location":"cheatsheets/tools/linux/core/systemd/#linux-systemd-systemctl-from-basics-to-service-mastery","text":"systemd is the init system and service manager used by most modern Linux distributions (Ubuntu, Debian, Fedora, Arch, CentOS, etc.). It\u2019s what boots your system, starts background services, handles logs, timers, sockets, and shutdowns. systemctl is the command-line interface for controlling systemd .","title":"\u2699\ufe0f Linux systemd &amp; systemctl: From Basics to Service Mastery"},{"location":"cheatsheets/tools/linux/core/systemd/#1-what-systemd-actually-does","text":"When Linux boots, systemd : 1. Mounts file systems. 2. Spawns essential processes. 3. Starts all enabled services. 4. Manages dependencies and restarts on failure. It replaces older systems like SysVinit and upstart , providing faster parallel startup and fine-grained control. \ud83d\udc49 In short: systemd is the conductor ; services are the instruments .","title":"\ud83e\udde0 1. What systemd Actually Does"},{"location":"cheatsheets/tools/linux/core/systemd/#2-key-systemctl-commands-quick-reference","text":"# Service management sudo systemctl start docker sudo systemctl stop nginx sudo systemctl restart postgresql sudo systemctl reload nginx # reload config without stopping sudo systemctl status redis # check active status + logs # Boot-time behavior sudo systemctl enable docker # start automatically at boot sudo systemctl disable docker # disable at boot sudo systemctl is-enabled nginx # check status # Logs and info journalctl -u nginx # logs for one service journalctl -xe # detailed system logs systemctl list-units --type = service # all active services systemctl list-timers # scheduled timers # System power control sudo systemctl reboot sudo systemctl poweroff ```` --- ## \ud83e\uddf1 3. Anatomy of a Systemd Unit File Unit files define how services behave. They live under: /etc/systemd/system/ # custom user units /lib/systemd/system/ # system packages Example: `/etc/systemd/system/myapp.service` ```ini [Unit] Description=My Java Spring Boot Application After=network.target [Service] User=appuser WorkingDirectory=/opt/myapp ExecStart=/usr/bin/java -jar app.jar Restart=on-failure EnvironmentFile=/opt/myapp/.env [Install] WantedBy=multi-user.target","title":"\ud83e\udde9 2. Key systemctl Commands (Quick Reference)"},{"location":"cheatsheets/tools/linux/core/systemd/#explanation","text":"[Unit] \u2014 dependencies and metadata. [Service] \u2014 what to run, as whom, and how to handle restarts. [Install] \u2014 links service into system targets (boot-time groups). Reload after editing: sudo systemctl daemon-reload sudo systemctl enable myapp sudo systemctl start myapp","title":"Explanation:"},{"location":"cheatsheets/tools/linux/core/systemd/#4-common-service-states","text":"Command Meaning active (running) Service is up. inactive (dead) Stopped. failed Crashed or exited abnormally. reloading Reloading config. activating/deactivating In startup/shutdown phase.","title":"\ud83e\uddf0 4. Common Service States"},{"location":"cheatsheets/tools/linux/core/systemd/#5-dependency-and-target-system","text":"systemd organizes services into targets \u2014 logical groups like: multi-user.target \u2192 standard multi-user system (normal operation) graphical.target \u2192 with GUI network.target \u2192 networking online default.target \u2192 system\u2019s default startup target Check default: systemctl get-default Change it (e.g., to boot without GUI): sudo systemctl set-default multi-user.target","title":"\ud83e\udde9 5. Dependency and Target System"},{"location":"cheatsheets/tools/linux/core/systemd/#6-journal-logs-and-debugging","text":"journalctl reads systemd\u2019s binary logs. journalctl -u docker.service # logs for Docker only journalctl --since \"2 hours ago\" journalctl -f # follow logs (like tail -f) journalctl -k # kernel logs Filter by boot: journalctl -b -1 # previous boot logs","title":"\u26a1 6. Journal Logs and Debugging"},{"location":"cheatsheets/tools/linux/core/systemd/#7-timers-systemds-cron-alternative","text":"Timers replace cron with more flexibility and better logging. Example: /etc/systemd/system/backup.timer [Unit] Description = Nightly DB Backup [Timer] OnCalendar = daily Persistent = true [Install] WantedBy = timers.target Then /etc/systemd/system/backup.service : [Service] Type = oneshot ExecStart = /usr/local/bin/backup.sh Enable: sudo systemctl enable --now backup.timer systemctl list-timers","title":"\ud83e\uddf0 7. Timers (systemd\u2019s Cron Alternative)"},{"location":"cheatsheets/tools/linux/core/systemd/#8-user-services-per-user-systemd","text":"You can run systemd-managed processes without root : systemctl --user enable myscript.service systemctl --user start myscript.service systemctl --user status myscript.service Useful for background scripts, language servers, or dev daemons. Config lives under: ~/.config/systemd/user/","title":"\ud83e\udde9 8. User Services (Per-User systemd)"},{"location":"cheatsheets/tools/linux/core/systemd/#9-service-restart-and-recovery-patterns","text":"Add to [Service] section: Restart = on-failure RestartSec = 5 StartLimitIntervalSec = 0 Optional advanced options: Restart=always \u2192 restarts even after manual stop. ExecStartPre=/usr/bin/sleep 10 \u2192 delay before launch. ExecStopPost=/usr/bin/logger \"Service stopped\" \u2192 log cleanup.","title":"\ud83e\uddf1 9. Service Restart and Recovery Patterns"},{"location":"cheatsheets/tools/linux/core/systemd/#10-practical-developer-workflow","text":"Most backend tools (Docker, PostgreSQL, Redis, Nginx) are systemd-managed . Here\u2019s the unified pattern for checking and controlling them: sudo systemctl status docker postgresql redis nginx sudo systemctl restart nginx sudo systemctl enable postgresql redis To verify all are active: systemctl list-units --type = service | grep -E 'nginx|redis|docker|postgres' \ud83d\udca1 If you use Docker Compose, those containers run inside Docker, but Docker itself is still a systemd service \u2014 systemctl restart docker affects them all.","title":"\ud83e\udde0 10. Practical Developer Workflow"},{"location":"cheatsheets/tools/linux/core/systemd/#11-systemd-development-environments","text":"","title":"\ud83e\udde9 11. systemd + Development Environments"},{"location":"cheatsheets/tools/linux/core/systemd/#jetbrains-ide-integration","text":"\u201cBefore Launch\u201d task: run sudo systemctl start <service> automatically. Add shell scripts to your Run Configurations for restarting or tailing logs. Combine with remote deployment \u2014 JetBrains can SSH + reload services post-deploy. Example remote deploy script: scp -r ./app.jar user@server:/opt/myapp/ ssh user@server \"sudo systemctl restart myapp\"","title":"JetBrains IDE Integration"},{"location":"cheatsheets/tools/linux/core/systemd/#vs-code-tasks","text":"Add to .vscode/tasks.json : { \"label\" : \"Restart Nginx\" , \"type\" : \"shell\" , \"command\" : \"sudo systemctl restart nginx\" } Run directly from VS Code\u2019s command palette.","title":"VS Code Tasks"},{"location":"cheatsheets/tools/linux/core/systemd/#12-troubleshooting-common-issues","text":"Problem Fix \u201cUnit not found\u201d Create a .service file under /etc/systemd/system and reload daemon. Service doesn\u2019t start Check journalctl -u <service> . Config edits not applied Run sudo systemctl daemon-reload . Service loops restart Review Restart= directives or logs. Permission denied Ensure correct User= and file ownership.","title":"\ud83e\uddf0 12. Troubleshooting Common Issues"},{"location":"cheatsheets/tools/linux/core/systemd/#13-real-world-example-custom-api-service","text":"/etc/systemd/system/backend.service [Unit] Description = Spring Boot API After = network.target [Service] User = appuser ExecStart = /usr/bin/java -jar /opt/backend/app.jar Restart = always Environment = SPRING_PROFILES_ACTIVE=prod EnvironmentFile = /opt/backend/.env [Install] WantedBy = multi-user.target Commands: sudo systemctl daemon-reload sudo systemctl enable backend sudo systemctl start backend sudo systemctl status backend","title":"\ud83e\udde9 13. Real-World Example: Custom API Service"},{"location":"cheatsheets/tools/linux/core/systemd/#14-summary","text":"systemd boots, manages, restarts, and logs all major services. systemctl gives you direct command-line control. Services are defined via .service unit files \u2014 easy to write, easy to automate. Timers replace cron with more control. Understanding this layer makes you a confident operator \u2014 not just a developer.","title":"\u2705 14. Summary"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/","text":"\ud83d\udc27 Fedora DNF Cheat Sheet \u00b6 \ud83d\udce6 Installing & Removing \u00b6 sudo dnf install <pkg> # install package sudo dnf remove <pkg> # uninstall package -y \u2192 auto-confirm yes sudo dnf install -y <pkg> \ud83d\udd04 Updating \u00b6 sudo dnf upgrade # upgrade all packages sudo dnf upgrade <pkg> # upgrade single package --refresh \u2192 ignore old cache, fetch fresh repo data \ud83d\udd0e Searching & Info \u00b6 dnf search <keyword> # search packages dnf info <pkg> # details about package \ud83d\uddc2 Repositories \u00b6 dnf repolist # list enabled repos dnf repolist all # list all repos Manage repos with config-manager (from dnf-plugins-core ): \u00b6 sudo dnf config-manager --add-repo <url> # add new repo sudo dnf config-manager --set-enabled <repoid> sudo dnf config-manager --set-disabled <repoid> \ud83d\udcdd Example \u00b6 Let\u2019s say you want to add the Docker CE repo (so you can install Docker directly from Docker\u2019s official packages). Add the repo: sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo Then install Docker: sudo dnf install docker-ce docker-ce-cli containerd.io \ud83d\udc49 Different vendors (like Oracle, Microsoft, Google) give you a similar .repo URL or a .repo file to place in /etc/yum.repos.d/ . Once added, you can install their packages with normal dnf install . \ud83e\uddf9 Cleaning Cache \u00b6 sudo dnf clean all # clear ALL cached metadata & packages sudo dnf makecache # rebuild cache with fresh repo metadata Use clean all if cache is outdated/corrupted or you want to free space. Use makecache to pre-load fresh repo info for faster installs/search. \ud83d\udd75\ufe0f Useful Extras \u00b6 dnf list installed # show installed packages dnf list available # show available packages dnf list updates # show upgradable packages dnf provides /path/to/file # find which package owns a file \ud83d\udee0 If Package is Missing \u00b6 Flatpak (universal packages): flatpak install flathub <app-id> Example: flatpak install flathub com.mysql.Workbench Vendor repo: add vendor\u2019s .repo (with config-manager or manual file in /etc/yum.repos.d/ ), then install via dnf install . \u2705 Quick Survival Rules \u00b6 Try dnf first (Fedora repos). If not there \u2192 use Flatpak (Flathub). Still missing \u2192 add vendor repo . If things act weird \u2192 sudo dnf clean all && sudo dnf makecache . \ud83d\udcda Understanding dnf config-manager \u00b6 \ud83d\udd27 What is dnf config-manager ? \u00b6 config-manager is a subcommand (plugin) of dnf . It\u2019s not installed by default on minimal Fedora systems, but it comes with the package dnf-plugins-core . If you don\u2019t have it, install it: sudo dnf install dnf-plugins-core Once installed, you get extra commands like dnf config-manager . \ud83c\udff7\ufe0f What does it do? \u00b6 It\u2019s used to manage DNF/YUM repo configurations . Think of it as a helper to enable, disable, or add new repositories without manually editing files. \ud83d\udea9 Common Flags (Options) \u00b6 --add-repo <url> \u2192 Add a new repository (from a .repo file or repo URL). --set-enabled <repoid> \u2192 Enable a repo that exists but is disabled. --set-disabled <repoid> \u2192 Disable a repo temporarily or permanently. Example: \u00b6 Enable the fedora-modular repo: sudo dnf config-manager --set-enabled fedora-modular Disable it: sudo dnf config-manager --set-disabled fedora-modular \ud83d\uddc2 Manual Alternative \u00b6 Without config-manager , you could manually place .repo files into: /etc/yum.repos.d/ Each .repo file is just a config text file telling DNF where to fetch packages. Example file /etc/yum.repos.d/docker.repo : [docker-ce-stable] name = Docker CE Stable - $basearch baseurl = https://download.docker.com/linux/fedora/$releasever/$basearch/stable enabled = 1 gpgcheck = 1 gpgkey = https://download.docker.com/linux/fedora/gpg \u2705 Summary: dnf config-manager = a helper command from dnf-plugins-core . --add-repo = quick way to add new repos. Other useful flags: --set-enabled , --set-disabled . If you don\u2019t want to use it, you can always just drop a .repo file into /etc/yum.repos.d/ .","title":"Installing/Managing Software (DNF guide)"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#fedora-dnf-cheat-sheet","text":"","title":"\ud83d\udc27 Fedora DNF Cheat Sheet"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#installing-removing","text":"sudo dnf install <pkg> # install package sudo dnf remove <pkg> # uninstall package -y \u2192 auto-confirm yes sudo dnf install -y <pkg>","title":"\ud83d\udce6 Installing &amp; Removing"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#updating","text":"sudo dnf upgrade # upgrade all packages sudo dnf upgrade <pkg> # upgrade single package --refresh \u2192 ignore old cache, fetch fresh repo data","title":"\ud83d\udd04 Updating"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#searching-info","text":"dnf search <keyword> # search packages dnf info <pkg> # details about package","title":"\ud83d\udd0e Searching &amp; Info"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#repositories","text":"dnf repolist # list enabled repos dnf repolist all # list all repos","title":"\ud83d\uddc2 Repositories"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#manage-repos-with-config-manager-from-dnf-plugins-core","text":"sudo dnf config-manager --add-repo <url> # add new repo sudo dnf config-manager --set-enabled <repoid> sudo dnf config-manager --set-disabled <repoid>","title":"Manage repos with config-manager (from dnf-plugins-core):"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#example","text":"Let\u2019s say you want to add the Docker CE repo (so you can install Docker directly from Docker\u2019s official packages). Add the repo: sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo Then install Docker: sudo dnf install docker-ce docker-ce-cli containerd.io \ud83d\udc49 Different vendors (like Oracle, Microsoft, Google) give you a similar .repo URL or a .repo file to place in /etc/yum.repos.d/ . Once added, you can install their packages with normal dnf install .","title":"\ud83d\udcdd Example"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#cleaning-cache","text":"sudo dnf clean all # clear ALL cached metadata & packages sudo dnf makecache # rebuild cache with fresh repo metadata Use clean all if cache is outdated/corrupted or you want to free space. Use makecache to pre-load fresh repo info for faster installs/search.","title":"\ud83e\uddf9 Cleaning Cache"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#useful-extras","text":"dnf list installed # show installed packages dnf list available # show available packages dnf list updates # show upgradable packages dnf provides /path/to/file # find which package owns a file","title":"\ud83d\udd75\ufe0f Useful Extras"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#if-package-is-missing","text":"Flatpak (universal packages): flatpak install flathub <app-id> Example: flatpak install flathub com.mysql.Workbench Vendor repo: add vendor\u2019s .repo (with config-manager or manual file in /etc/yum.repos.d/ ), then install via dnf install .","title":"\ud83d\udee0 If Package is Missing"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#quick-survival-rules","text":"Try dnf first (Fedora repos). If not there \u2192 use Flatpak (Flathub). Still missing \u2192 add vendor repo . If things act weird \u2192 sudo dnf clean all && sudo dnf makecache .","title":"\u2705 Quick Survival Rules"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#understanding-dnf-config-manager","text":"","title":"\ud83d\udcda Understanding dnf config-manager"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#what-is-dnf-config-manager","text":"config-manager is a subcommand (plugin) of dnf . It\u2019s not installed by default on minimal Fedora systems, but it comes with the package dnf-plugins-core . If you don\u2019t have it, install it: sudo dnf install dnf-plugins-core Once installed, you get extra commands like dnf config-manager .","title":"\ud83d\udd27 What is dnf config-manager?"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#what-does-it-do","text":"It\u2019s used to manage DNF/YUM repo configurations . Think of it as a helper to enable, disable, or add new repositories without manually editing files.","title":"\ud83c\udff7\ufe0f What does it do?"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#common-flags-options","text":"--add-repo <url> \u2192 Add a new repository (from a .repo file or repo URL). --set-enabled <repoid> \u2192 Enable a repo that exists but is disabled. --set-disabled <repoid> \u2192 Disable a repo temporarily or permanently.","title":"\ud83d\udea9 Common Flags (Options)"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#example_1","text":"Enable the fedora-modular repo: sudo dnf config-manager --set-enabled fedora-modular Disable it: sudo dnf config-manager --set-disabled fedora-modular","title":"Example:"},{"location":"cheatsheets/tools/linux/fedora/installing-and-managing-software/#manual-alternative","text":"Without config-manager , you could manually place .repo files into: /etc/yum.repos.d/ Each .repo file is just a config text file telling DNF where to fetch packages. Example file /etc/yum.repos.d/docker.repo : [docker-ce-stable] name = Docker CE Stable - $basearch baseurl = https://download.docker.com/linux/fedora/$releasever/$basearch/stable enabled = 1 gpgcheck = 1 gpgkey = https://download.docker.com/linux/fedora/gpg \u2705 Summary: dnf config-manager = a helper command from dnf-plugins-core . --add-repo = quick way to add new repos. Other useful flags: --set-enabled , --set-disabled . If you don\u2019t want to use it, you can always just drop a .repo file into /etc/yum.repos.d/ .","title":"\ud83d\uddc2 Manual Alternative"},{"location":"cheatsheets/tools/mkdocs/setup/","text":"MkDocs \u2014 Setup & Structure (for knowledge-vault/docs ) \u00b6 Goal: Write in Obsidian with [[wikilinks]] \u2192 publish a polished docs site via MkDocs Material. Two modes: Cheatsheets (quick lookup) and Concepts (deep understanding). Keep them separate but cross-linked. 0) Prereqs \u00b6 Python 3.8+ Git Obsidian app (optional but recommended for writing) 1) Repo layout (the shape we\u2019re aiming for) \u00b6 knowledge-vault/ \u251c\u2500 mkdocs.yml # site config (we\u2019ll create it below) \u251c\u2500 README.md # for GitHub visitors (how to run/deploy) \u2514\u2500 docs/ # all site content lives here \u251c\u2500 index.md # site homepage \u251c\u2500 cheatsheets/ # quick references (APIs, commands, patterns) \u2502 \u251c\u2500 index.md # cheatsheets landing page \u2502 \u251c\u2500 languages/ \u2502 \u2502 \u251c\u2500 java/ \u2502 \u2502 \u2502 \u251c\u2500 core/ \u2502 \u2502 \u2502 \u2502 \u2514\u2500 streams.md \u2502 \u2502 \u2502 \u2514\u2500 frameworks/ \u2502 \u2502 \u2502 \u2514\u2500 spring/ \u2502 \u2502 \u2502 \u251c\u2500 annotations.md \u2502 \u2502 \u2502 \u2514\u2500 rest-controller.md \u2502 \u2502 \u2514\u2500 python/ \u2502 \u2502 \u2514\u2500 basics.md \u2502 \u251c\u2500 databases/ \u2502 \u2502 \u251c\u2500 sql/ \u2502 \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2502 \u2514\u2500 joins.md \u2502 \u2502 \u251c\u2500 mysql/ \u2502 \u2502 \u2502 \u251c\u2500 setup/ \u2502 \u2502 \u2502 \u2502 \u251c\u2500 java.md \u2502 \u2502 \u2502 \u2502 \u2514\u2500 python.md \u2502 \u2502 \u2502 \u2514\u2500 queries.md \u2502 \u2502 \u2514\u2500 orm/ \u2502 \u2502 \u251c\u2500 jpa-java-annotations.md \u2502 \u2502 \u2514\u2500 sqlalchemy-python-cheats.md \u2502 \u251c\u2500 networking/ \u2502 \u2502 \u2514\u2500 http/ \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2514\u2500 headers.md \u2502 \u2514\u2500 tools/ \u2502 \u251c\u2500 git.md \u2502 \u251c\u2500 docker.md \u2502 \u2514\u2500 obsidian-mkdocs-setup.md \u2190 this cheatsheet \u2514\u2500 concepts/ # deeper explanations and trade-offs \u251c\u2500 index.md # concepts landing page \u251c\u2500 backend/ \u2502 \u251c\u2500 http.md \u2502 \u251c\u2500 rest-api.md \u2502 \u2514\u2500 caching.md \u251c\u2500 databases/ \u2502 \u251c\u2500 normalization.md \u2502 \u251c\u2500 indexing.md \u2502 \u251c\u2500 transactions-acid.md \u2502 \u2514\u2500 orm/ \u2502 \u251c\u2500 orm-concepts.md \u2502 \u2514\u2500 jpa-vs-sqlalchemy.md \u251c\u2500 frameworks/ \u2502 \u251c\u2500 spring-core.md \u2502 \u2514\u2500 hibernate.md \u2514\u2500 design/ \u251c\u2500 dependency-injection.md \u2514\u2500 microservices.md Why this structure? Cheatsheets = fast lookup (language/framework/API); Concepts = how/why/architecture. It mirrors how your brain flips between coding and understanding, and keeps search results clean. 2) One-time install \u00b6 cd knowledge-vault # (Optional) keep Python deps isolated python -m venv .venv source .venv/bin/activate # Windows: .venv\\Scripts\\activate python -m pip install --upgrade pip # Core: MkDocs + Material + \"Last updated\" git plugin pip install -U mkdocs mkdocs-git-revision-date-localized-plugin # themes: https://pawamoy.github.io/mkdocs-gallery/themes/readthedocs/ # 1) Material pip install mkdocs-material # 2) Windmill #pip install mkdocs-windmill # 3) Bootstrap / Bootswatch #pip install mkdocs-bootstrap mkdocs-bootswatch # Pick ONE wikilinks plugin (to convert [[Page]] to proper links): # Option A (popular): Roam/Obsidian-style wikilinks + Obsidian-style callouts pip install mkdocs-roamlinks-plugin mkdocs-callouts # Option B (also good): Wikilinks via \"ezlinks\" (plugin name is mkdocs-wikilinks-plugin) # pip install mkdocs-wikilinks-plugin Open the repo as an Obsidian vault (Obsidian \u2192 Open folder as vault \u2192 select knowledge-vault/ ). Recommended Obsidian settings: Files & Links \u2192 Use [[Wikilinks]] : On Files & Links \u2192 New link format : Shortest Files & Links \u2192 Default location for new notes : Same folder as current file Editor \u2192 Show frontmatter : On 2.5) Obsidian setup (optional but useful) \u00b6 Core plugins to enable Backlinks, Outgoing Links \u2192 fast x-ref navigation Templates \u2192 front-matter snippets Daily Notes (optional) \u2192 scratchpad/logs that won\u2019t be published Community plugins that play nicely with MkDocs Material Admonition \u2014 renders MkDocs !!! note|tip|warning blocks inside Obsidian . Use this in your notes so one syntax works everywhere: !!! tip Use the search bar for method names, error snippets, or concepts. Advanced Tables (or Table Editor 2) \u2014 auto-align pipes, tab to next column. Linter \u2014 auto-fix headings, trailing spaces, YAML ordering (keep title/tags/summary neat). Templater \u2014 quick scaffolds for cheatsheets/concepts. Example templates: --- title: <% tp.file.title %> \u2014 Quickref tags: [cheatsheet, <topic>, <tech>] summary: One-liner for why this exists. --- # <% tp.file.title %> \u2014 Quickref > See concepts: [concepts/...](<../../../concepts/...>) --- title: <% tp.file.title %> tags: [concept, <domain>] summary: What it is, why it matters, trade-offs. --- # <% tp.file.title %> > See cheatsheet: [cheatsheets/...](<../../...>) Markdown Attributes \u2014 previews {#id .class} so Obsidian shows what attr_list does in MkDocs. Paste URL into Selection \u2014 speeds up linking text \u2192 [text](url) . Tag Wrangler \u2014 bulk-rename/merge tags. Obsidian Git (optional) \u2014 commit/pull from inside Obsidian if you\u2019re not using IDEA for VCS. Nice-to-have (safe, but non-exporting) Dataview \u2014 dashboards/lists in the vault. Remember: Dataview queries don\u2019t render in MkDocs . Use it for in-vault discovery, not for pages you publish, or export the results as static lists before publishing. Syntax alignment cheats Admonitions: Prefer MkDocs syntax ( !!! note ) + Admonition plugin \u2192 same source renders well in both places. Avoid Obsidian callouts ( > [!NOTE] ) if you want one true syntax. Tabs: pymdownx.tabbed looks great on the site but won\u2019t render as tabs inside Obsidian. In notes, keep tab blocks short; Obsidian will show them as plain headings\u2014good enough for editing. Wikilinks: Keep writing [[wikilinks]] . mkdocs-obsidian resolves them on build, so reorganizing folders won\u2019t break links. Ignore these in publish Your .obsidian/ stays out of the site\u2014already covered by: excluded_dirs: ['.obsidian', '.trash'] and .gitignore should include: .obsidian/ .trash/ Gotchas Dataview, buttons, or any Obsidian-only syntax isn\u2019t rendered by MkDocs. Keep publishable pages in plain Markdown + MkDocs features. If Linter rewrites YAML keys, make sure it doesn\u2019t nuke custom fields you care about. If you switch to Obsidian callouts, you\u2019ll need a pre-processor to convert them to !!! blocks; staying with !!! avoids that whole dance. 3) Create folders fast (scaffold) \u00b6 Run in repo root ( knowledge-vault/ ). Adjust to taste. mkdir -p docs/ { cheatsheets/ { languages/ { java/ { core,frameworks/spring } ,python } ,databases/ { sql,mysql/setup,orm } ,networking/http,tools } ,concepts/ { backend,databases/orm,frameworks,design }} 4) mkdocs.yml configuration \u00b6 Create knowledge-vault/mkdocs.yml with this content: # mkdocs.yml \u2014 Site configuration for \"Knowledge Vault\" # MkDocs reads Markdown from ./docs and outputs static HTML into ./site site_name : Knowledge Vault # Shown in header and metadata site_url : https://<your-username>.github.io/knowledge-vault # Used for canonical links/sitemaps repo_url : https://github.com/<your-username>/knowledge-vault # \u201cEdit on GitHub\u201d links edit_uri : edit/main/docs/ # Path to open files in GitHub\u2019s editor use_directory_urls : true # Pretty URLs: /path/ instead of /path.html #https://pawamoy.github.io/mkdocs-gallery/themes/readthedocs/ extra_css : - css/overrides.css theme : name : readthedocs # A classic, documentation-focused theme navigation_depth : 6 # how deep the sidebar goes #name: dracula # A dark theme #name: material # Material for MkDocs theme (feature-rich) #name: windmill # A simple, responsive theme #name: bootstrap # or a Bootswatch variant via the bootswatch package language : en features : - navigation.instant # Faster page transitions - navigation.tracking # Highlight active section as you scroll - navigation.sections # Group pages by top-level sections - navigation.tabs # Top-level sections as tabs - toc.integrate # Merge page TOC into the sidebar - content.code.copy # Copy button on code blocks - content.code.annotate # Inline annotations on code - content.action.edit # \u201cEdit this page\u201d button - search.suggest # Search autocomplete - search.highlight # Highlight matches on page # # Color schemes (light/dark) that follow OS preference # palette: # # --- Scheme 1: Light (shown when OS prefers light) --- # - media: \"(prefers-color-scheme: light)\" # follow OS light mode # scheme: default # Material's default light scheme # primary: indigo # header / accents # accent: indigo # buttons / highlights # toggle: # icon: material/weather-night # icon shown while in light mode # name: Switch to dark mode # accessible label (tooltip) # # # --- Scheme 2: Dark (shown when OS prefers dark) --- # - media: \"(prefers-color-scheme: dark)\" # follow OS dark mode # scheme: slate # Material's dark scheme # primary: indigo # accent: indigo # toggle: # icon: material/weather-sunny # icon shown while in dark mode # name: Switch to light mode # docs_dir defaults to \"docs\". Keeping it implicit = cleaner config. # docs_dir: docs plugins : - search # Full-text search # If you installed Option A: - roamlinks - callouts # If you installed Option B instead: # - ezlinks - git-revision-date-localized : # \u201cLast updated\u201d timestamps fallback_to_build_date : true markdown_extensions : - admonition # !!! note/tip/warning blocks - attr_list # {#id .class} on elements - def_list # Definition lists - md_in_html # Markdown inside HTML blocks - tables # Advanced tables - toc : permalink : true # Link anchors for headings - pymdownx.details # <details> collapsible sections - pymdownx.highlight : anchor_linenums : true # Clickable line numbers in code line_spans : __span # For precise CSS targeting - pymdownx.inlinehilite # `==inline code==` highlighting - pymdownx.magiclink # Autolink URLs and issues - pymdownx.superfences # Fenced code blocks inside lists, tabs - pymdownx.tabbed : alternate_style : true # Nice UI for tabbed code examples - pymdownx.tasklist : custom_checkbox : true # Pretty checkboxes in lists # Exclude meta folders from the documentation build #exclude_docs: | # **/_meta/** # **/meta/** # Navigation: # Option A (recommended): start minimal and let filesystem drive nav while drafting \u2014 comment out nav. # Option B: curate the nav to control order/labels (uncomment to use). # # nav: # - Home: index.md # - Cheatsheets: # - Overview: cheatsheets/index.md # - Languages: # - Java: # - Streams: cheatsheets/languages/java/core/streams.md # - Spring Annotations: cheatsheets/languages/java/frameworks/spring/annotations.md # - REST Controller: cheatsheets/languages/java/frameworks/spring/rest-controller.md # - Python: # - Basics: cheatsheets/languages/python/basics.md # - Databases: # - SQL: # - Basics: cheatsheets/databases/sql/basics.md # - Joins: cheatsheets/databases/sql/joins.md # - MySQL: # - Setup (Java): cheatsheets/databases/mysql/setup/java.md # - Setup (Python): cheatsheets/databases/mysql/setup/python.md # - Queries: cheatsheets/databases/mysql/queries.md # - ORM: # - JPA Annotations (Java): cheatsheets/databases/orm/jpa-java-annotations.md # - SQLAlchemy Cheats (Python): cheatsheets/databases/orm/sqlalchemy-python-cheats.md # - Networking: # - HTTP Basics: cheatsheets/networking/http/basics.md # - Headers: cheatsheets/networking/http/headers.md # - Tools: # - Git: cheatsheets/tools/git.md # - Docker: cheatsheets/tools/docker.md # - Obsidian + MkDocs Setup: cheatsheets/tools/obsidian-mkdocs-setup.md # - Concepts: # - Overview: concepts/index.md # - Backend: # - HTTP: concepts/backend/http.md # - REST API: concepts/backend/rest-api.md # - Caching: concepts/backend/caching.md # - Databases: # - Normalization: concepts/databases/normalization.md # - Indexing: concepts/databases/indexing.md # - Transactions (ACID): concepts/databases/transactions-acid.md # - ORM: # - ORM Concepts: concepts/databases/orm/orm-concepts.md # - JPA vs SQLAlchemy: concepts/databases/orm/jpa-vs-sqlalchemy.md # - Frameworks: # - Spring Core: concepts/frameworks/spring-core.md # - Hibernate: concepts/frameworks/hibernate.md # - Design: # - Dependency Injection: concepts/design/dependency-injection.md # - Microservices: concepts/design/microservices.md Why comment out nav: at first? While you\u2019re building content, filesystem ordering is simpler. Later, un-comment nav: to curate labels and order. 5) Homepages (three index.md files) \u00b6 index.md turns a folder into a landing page and gives you clean URLs: docs/index.md \u2192 / docs/cheatsheets/index.md \u2192 /cheatsheets/ docs/concepts/index.md \u2192 /concepts/ 5.1 docs/index.md (site homepage) \u00b6 --- title: Knowledge Vault summary: Personal developer wiki \u2014 cheatsheets for speed, concepts for mastery. --- # \ud83e\udde0 Knowledge Vault Two modes, one brain: - **Cheatsheets** \u2192 quick reference while coding - **Concepts** \u2192 deeper understanding and architecture ## \ud83d\udeaa Start Here - [ Java Streams \u2014 Quickref ]( <../../languages/java/core/streams.md> ) - [ SQL Basics \u2014 Cheatsheet ]( <../../databases/sql/basics.md> ) - [ HTTP \u2014 Concepts ]( <concepts/backend/http> ) - [ Git \u2014 Commands ]( <../git.md> ) - [ HTTP Headers \u2014 Quickref ]( <cheatsheets/networking/http/headers> ) ## \ud83d\udd0e How to Use !!! tip Use the search bar for method names, error snippets, or concepts (e.g., `@Transactional` , `N+1` , `Content-Type` ). 5.2 docs/cheatsheets/index.md (section landing) \u00b6 --- title: Cheatsheets summary: Quick references for languages, frameworks, databases, tools, and commands. --- # \u26a1 Cheatsheets Fast lookup. Minimal theory. Maximum clarity. ## \ud83e\uddf1 Categories ### Languages - Java: [ Streams ]( <../../languages/java/core/streams.md> ) \u00b7 [ Spring Annotations ]( <../../languages/java/frameworks/spring/annotations.md> ) - Python: [ Basics ]( <../../languages/python/basics.md> ) ### Databases - SQL: [ Basics ]( <../../databases/sql/basics.md> ) \u00b7 [ Joins ]( <../../databases/sql/joins.md> ) - MySQL: [ Setup (Java) ]( <../../databases/mysql/setup/java.md> ) \u00b7 [ Setup (Python) ]( <../../databases/mysql/setup/python.md> ) \u00b7 [ Queries ]( <../../databases/mysql/queries.md> ) - ORM: [ JPA Annotations ]( <../../databases/orm/jpa-java-annotations.md> ) \u00b7 [ SQLAlchemy ]( <../../databases/orm/sqlalchemy-python-cheats.md> ) ### Networking - [ HTTP Basics ]( <cheatsheets/networking/http/basics> ) \u00b7 [ Headers ]( <cheatsheets/networking/http/headers> ) ### Tools - [ Git ]( <../git.md> ) \u00b7 [ Docker ]( <../docker.md> ) \u00b7 [ Obsidian + MkDocs Setup ]( <../obsidian-mkdocs-setup.md> ) 5.3 docs/concepts/index.md (section landing) \u00b6 --- title: Concepts summary: Deep dives into how systems work \u2014 theory, trade-offs, and reasoning. --- # \ud83e\udde0 Concepts Where understanding replaces memorization. ## \ud83e\udde9 Topics ### Backend - [ HTTP ]( <concepts/backend/http> ) \u00b7 [ REST API ]( <../../../concepts/backend/rest-api.md> ) \u00b7 [ Caching ]( <../../../concepts/backend/caching.md> ) ### Databases - [ Normalization ]( <../../../concepts/databases/normalization.md> ) \u00b7 [ Indexing ]( <../../../concepts/databases/indexing.md> ) \u00b7 [ Transactions (ACID) ]( <../../../concepts/databases/transactions-acid.md> ) - ORM: [ ORM Concepts ]( <../../../concepts/databases/orm/orm-concepts.md> ) \u00b7 [ JPA vs SQLAlchemy ]( <../../../concepts/databases/orm/jpa-vs-sqlalchemy.md> ) ### Frameworks - [ Spring Core ]( <../../../concepts/frameworks/spring-core.md> ) \u00b7 [ Hibernate ]( <../../../concepts/frameworks/hibernate.md> ) ### Design - [ Dependency Injection ]( <../../../concepts/design/dependency-injection.md> ) \u00b7 [ Microservices ]( <../../../concepts/design/microservices.md> ) Do you need to define folder structure in index.md ? No. index.md is content , not configuration. It\u2019s a curated landing page for the folder. The site structure is driven by the filesystem and (optionally) the nav: in mkdocs.yml . 6) Front-matter templates (copy/paste into pages) \u00b6 Cheatsheet: --- title: <Title> \u2014 Quickref tags: [cheatsheet, <topic>, <tech>] summary: One-line reason this exists (lookup while coding). --- # <Title> \u2014 Quickref > See concepts: [concepts/...](<../../../concepts/...>) Concept: --- title: <Concept Name> tags: [concept, <domain>] summary: What it is, why it matters, trade-offs. --- # <Concept Name> > See cheatsheet: [cheatsheets/...](<../../...>) 7) Local dev & deploy \u00b6 # Local preview (auto-reload) mkdocs serve # open http://127.0.0.1:8000/ # Deploy to GitHub Pages mkdocs gh-deploy # your site: https://<your-username>.github.io/knowledge-vault/ 8) FAQ / Gotchas \u00b6 Where should README.md live? At repo root. It explains the project + how to run/deploy. The site homepage is docs/index.md . Do I need docs_dir: docs ? No. That\u2019s the default; keeping it implicit is cleaner. What makes /cheatsheets/ and /concepts/ routes work? The index.md files in those folders + use_directory_urls: true . What if I move files around? [[wikilinks]] are updated by mkdocs-obsidian on build. Rebuild after reorganizing. Should I curate nav: now? Early on, skip it. When structure stabilizes, un-comment nav: in mkdocs.yml to control order and labels. 9) Mental model (why this works) \u00b6 Separation of concerns: README.md (GitHub), docs/index.md (site), mkdocs.yml (wiring). Two modes = less friction: Cheatsheets for speed, Concepts for depth. Wikilinks = future-proof: Rearrange folders without rewriting links. Indexes = clean URLs: Section index.md gives /cheatsheets/ and /concepts/ real landing pages. Ship it. Then iterate. The vault grows with you, not against you.","title":"MkDocs Setup"},{"location":"cheatsheets/tools/mkdocs/setup/#mkdocs-setup-structure-for-knowledge-vaultdocs","text":"Goal: Write in Obsidian with [[wikilinks]] \u2192 publish a polished docs site via MkDocs Material. Two modes: Cheatsheets (quick lookup) and Concepts (deep understanding). Keep them separate but cross-linked.","title":"MkDocs \u2014 Setup &amp; Structure (for knowledge-vault/docs)"},{"location":"cheatsheets/tools/mkdocs/setup/#0-prereqs","text":"Python 3.8+ Git Obsidian app (optional but recommended for writing)","title":"0) Prereqs"},{"location":"cheatsheets/tools/mkdocs/setup/#1-repo-layout-the-shape-were-aiming-for","text":"knowledge-vault/ \u251c\u2500 mkdocs.yml # site config (we\u2019ll create it below) \u251c\u2500 README.md # for GitHub visitors (how to run/deploy) \u2514\u2500 docs/ # all site content lives here \u251c\u2500 index.md # site homepage \u251c\u2500 cheatsheets/ # quick references (APIs, commands, patterns) \u2502 \u251c\u2500 index.md # cheatsheets landing page \u2502 \u251c\u2500 languages/ \u2502 \u2502 \u251c\u2500 java/ \u2502 \u2502 \u2502 \u251c\u2500 core/ \u2502 \u2502 \u2502 \u2502 \u2514\u2500 streams.md \u2502 \u2502 \u2502 \u2514\u2500 frameworks/ \u2502 \u2502 \u2502 \u2514\u2500 spring/ \u2502 \u2502 \u2502 \u251c\u2500 annotations.md \u2502 \u2502 \u2502 \u2514\u2500 rest-controller.md \u2502 \u2502 \u2514\u2500 python/ \u2502 \u2502 \u2514\u2500 basics.md \u2502 \u251c\u2500 databases/ \u2502 \u2502 \u251c\u2500 sql/ \u2502 \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2502 \u2514\u2500 joins.md \u2502 \u2502 \u251c\u2500 mysql/ \u2502 \u2502 \u2502 \u251c\u2500 setup/ \u2502 \u2502 \u2502 \u2502 \u251c\u2500 java.md \u2502 \u2502 \u2502 \u2502 \u2514\u2500 python.md \u2502 \u2502 \u2502 \u2514\u2500 queries.md \u2502 \u2502 \u2514\u2500 orm/ \u2502 \u2502 \u251c\u2500 jpa-java-annotations.md \u2502 \u2502 \u2514\u2500 sqlalchemy-python-cheats.md \u2502 \u251c\u2500 networking/ \u2502 \u2502 \u2514\u2500 http/ \u2502 \u2502 \u251c\u2500 basics.md \u2502 \u2502 \u2514\u2500 headers.md \u2502 \u2514\u2500 tools/ \u2502 \u251c\u2500 git.md \u2502 \u251c\u2500 docker.md \u2502 \u2514\u2500 obsidian-mkdocs-setup.md \u2190 this cheatsheet \u2514\u2500 concepts/ # deeper explanations and trade-offs \u251c\u2500 index.md # concepts landing page \u251c\u2500 backend/ \u2502 \u251c\u2500 http.md \u2502 \u251c\u2500 rest-api.md \u2502 \u2514\u2500 caching.md \u251c\u2500 databases/ \u2502 \u251c\u2500 normalization.md \u2502 \u251c\u2500 indexing.md \u2502 \u251c\u2500 transactions-acid.md \u2502 \u2514\u2500 orm/ \u2502 \u251c\u2500 orm-concepts.md \u2502 \u2514\u2500 jpa-vs-sqlalchemy.md \u251c\u2500 frameworks/ \u2502 \u251c\u2500 spring-core.md \u2502 \u2514\u2500 hibernate.md \u2514\u2500 design/ \u251c\u2500 dependency-injection.md \u2514\u2500 microservices.md Why this structure? Cheatsheets = fast lookup (language/framework/API); Concepts = how/why/architecture. It mirrors how your brain flips between coding and understanding, and keeps search results clean.","title":"1) Repo layout (the shape we\u2019re aiming for)"},{"location":"cheatsheets/tools/mkdocs/setup/#2-one-time-install","text":"cd knowledge-vault # (Optional) keep Python deps isolated python -m venv .venv source .venv/bin/activate # Windows: .venv\\Scripts\\activate python -m pip install --upgrade pip # Core: MkDocs + Material + \"Last updated\" git plugin pip install -U mkdocs mkdocs-git-revision-date-localized-plugin # themes: https://pawamoy.github.io/mkdocs-gallery/themes/readthedocs/ # 1) Material pip install mkdocs-material # 2) Windmill #pip install mkdocs-windmill # 3) Bootstrap / Bootswatch #pip install mkdocs-bootstrap mkdocs-bootswatch # Pick ONE wikilinks plugin (to convert [[Page]] to proper links): # Option A (popular): Roam/Obsidian-style wikilinks + Obsidian-style callouts pip install mkdocs-roamlinks-plugin mkdocs-callouts # Option B (also good): Wikilinks via \"ezlinks\" (plugin name is mkdocs-wikilinks-plugin) # pip install mkdocs-wikilinks-plugin Open the repo as an Obsidian vault (Obsidian \u2192 Open folder as vault \u2192 select knowledge-vault/ ). Recommended Obsidian settings: Files & Links \u2192 Use [[Wikilinks]] : On Files & Links \u2192 New link format : Shortest Files & Links \u2192 Default location for new notes : Same folder as current file Editor \u2192 Show frontmatter : On","title":"2) One-time install"},{"location":"cheatsheets/tools/mkdocs/setup/#25-obsidian-setup-optional-but-useful","text":"Core plugins to enable Backlinks, Outgoing Links \u2192 fast x-ref navigation Templates \u2192 front-matter snippets Daily Notes (optional) \u2192 scratchpad/logs that won\u2019t be published Community plugins that play nicely with MkDocs Material Admonition \u2014 renders MkDocs !!! note|tip|warning blocks inside Obsidian . Use this in your notes so one syntax works everywhere: !!! tip Use the search bar for method names, error snippets, or concepts. Advanced Tables (or Table Editor 2) \u2014 auto-align pipes, tab to next column. Linter \u2014 auto-fix headings, trailing spaces, YAML ordering (keep title/tags/summary neat). Templater \u2014 quick scaffolds for cheatsheets/concepts. Example templates: --- title: <% tp.file.title %> \u2014 Quickref tags: [cheatsheet, <topic>, <tech>] summary: One-liner for why this exists. --- # <% tp.file.title %> \u2014 Quickref > See concepts: [concepts/...](<../../../concepts/...>) --- title: <% tp.file.title %> tags: [concept, <domain>] summary: What it is, why it matters, trade-offs. --- # <% tp.file.title %> > See cheatsheet: [cheatsheets/...](<../../...>) Markdown Attributes \u2014 previews {#id .class} so Obsidian shows what attr_list does in MkDocs. Paste URL into Selection \u2014 speeds up linking text \u2192 [text](url) . Tag Wrangler \u2014 bulk-rename/merge tags. Obsidian Git (optional) \u2014 commit/pull from inside Obsidian if you\u2019re not using IDEA for VCS. Nice-to-have (safe, but non-exporting) Dataview \u2014 dashboards/lists in the vault. Remember: Dataview queries don\u2019t render in MkDocs . Use it for in-vault discovery, not for pages you publish, or export the results as static lists before publishing. Syntax alignment cheats Admonitions: Prefer MkDocs syntax ( !!! note ) + Admonition plugin \u2192 same source renders well in both places. Avoid Obsidian callouts ( > [!NOTE] ) if you want one true syntax. Tabs: pymdownx.tabbed looks great on the site but won\u2019t render as tabs inside Obsidian. In notes, keep tab blocks short; Obsidian will show them as plain headings\u2014good enough for editing. Wikilinks: Keep writing [[wikilinks]] . mkdocs-obsidian resolves them on build, so reorganizing folders won\u2019t break links. Ignore these in publish Your .obsidian/ stays out of the site\u2014already covered by: excluded_dirs: ['.obsidian', '.trash'] and .gitignore should include: .obsidian/ .trash/ Gotchas Dataview, buttons, or any Obsidian-only syntax isn\u2019t rendered by MkDocs. Keep publishable pages in plain Markdown + MkDocs features. If Linter rewrites YAML keys, make sure it doesn\u2019t nuke custom fields you care about. If you switch to Obsidian callouts, you\u2019ll need a pre-processor to convert them to !!! blocks; staying with !!! avoids that whole dance.","title":"2.5) Obsidian setup (optional but useful)"},{"location":"cheatsheets/tools/mkdocs/setup/#3-create-folders-fast-scaffold","text":"Run in repo root ( knowledge-vault/ ). Adjust to taste. mkdir -p docs/ { cheatsheets/ { languages/ { java/ { core,frameworks/spring } ,python } ,databases/ { sql,mysql/setup,orm } ,networking/http,tools } ,concepts/ { backend,databases/orm,frameworks,design }}","title":"3) Create folders fast (scaffold)"},{"location":"cheatsheets/tools/mkdocs/setup/#4-mkdocsyml-configuration","text":"Create knowledge-vault/mkdocs.yml with this content: # mkdocs.yml \u2014 Site configuration for \"Knowledge Vault\" # MkDocs reads Markdown from ./docs and outputs static HTML into ./site site_name : Knowledge Vault # Shown in header and metadata site_url : https://<your-username>.github.io/knowledge-vault # Used for canonical links/sitemaps repo_url : https://github.com/<your-username>/knowledge-vault # \u201cEdit on GitHub\u201d links edit_uri : edit/main/docs/ # Path to open files in GitHub\u2019s editor use_directory_urls : true # Pretty URLs: /path/ instead of /path.html #https://pawamoy.github.io/mkdocs-gallery/themes/readthedocs/ extra_css : - css/overrides.css theme : name : readthedocs # A classic, documentation-focused theme navigation_depth : 6 # how deep the sidebar goes #name: dracula # A dark theme #name: material # Material for MkDocs theme (feature-rich) #name: windmill # A simple, responsive theme #name: bootstrap # or a Bootswatch variant via the bootswatch package language : en features : - navigation.instant # Faster page transitions - navigation.tracking # Highlight active section as you scroll - navigation.sections # Group pages by top-level sections - navigation.tabs # Top-level sections as tabs - toc.integrate # Merge page TOC into the sidebar - content.code.copy # Copy button on code blocks - content.code.annotate # Inline annotations on code - content.action.edit # \u201cEdit this page\u201d button - search.suggest # Search autocomplete - search.highlight # Highlight matches on page # # Color schemes (light/dark) that follow OS preference # palette: # # --- Scheme 1: Light (shown when OS prefers light) --- # - media: \"(prefers-color-scheme: light)\" # follow OS light mode # scheme: default # Material's default light scheme # primary: indigo # header / accents # accent: indigo # buttons / highlights # toggle: # icon: material/weather-night # icon shown while in light mode # name: Switch to dark mode # accessible label (tooltip) # # # --- Scheme 2: Dark (shown when OS prefers dark) --- # - media: \"(prefers-color-scheme: dark)\" # follow OS dark mode # scheme: slate # Material's dark scheme # primary: indigo # accent: indigo # toggle: # icon: material/weather-sunny # icon shown while in dark mode # name: Switch to light mode # docs_dir defaults to \"docs\". Keeping it implicit = cleaner config. # docs_dir: docs plugins : - search # Full-text search # If you installed Option A: - roamlinks - callouts # If you installed Option B instead: # - ezlinks - git-revision-date-localized : # \u201cLast updated\u201d timestamps fallback_to_build_date : true markdown_extensions : - admonition # !!! note/tip/warning blocks - attr_list # {#id .class} on elements - def_list # Definition lists - md_in_html # Markdown inside HTML blocks - tables # Advanced tables - toc : permalink : true # Link anchors for headings - pymdownx.details # <details> collapsible sections - pymdownx.highlight : anchor_linenums : true # Clickable line numbers in code line_spans : __span # For precise CSS targeting - pymdownx.inlinehilite # `==inline code==` highlighting - pymdownx.magiclink # Autolink URLs and issues - pymdownx.superfences # Fenced code blocks inside lists, tabs - pymdownx.tabbed : alternate_style : true # Nice UI for tabbed code examples - pymdownx.tasklist : custom_checkbox : true # Pretty checkboxes in lists # Exclude meta folders from the documentation build #exclude_docs: | # **/_meta/** # **/meta/** # Navigation: # Option A (recommended): start minimal and let filesystem drive nav while drafting \u2014 comment out nav. # Option B: curate the nav to control order/labels (uncomment to use). # # nav: # - Home: index.md # - Cheatsheets: # - Overview: cheatsheets/index.md # - Languages: # - Java: # - Streams: cheatsheets/languages/java/core/streams.md # - Spring Annotations: cheatsheets/languages/java/frameworks/spring/annotations.md # - REST Controller: cheatsheets/languages/java/frameworks/spring/rest-controller.md # - Python: # - Basics: cheatsheets/languages/python/basics.md # - Databases: # - SQL: # - Basics: cheatsheets/databases/sql/basics.md # - Joins: cheatsheets/databases/sql/joins.md # - MySQL: # - Setup (Java): cheatsheets/databases/mysql/setup/java.md # - Setup (Python): cheatsheets/databases/mysql/setup/python.md # - Queries: cheatsheets/databases/mysql/queries.md # - ORM: # - JPA Annotations (Java): cheatsheets/databases/orm/jpa-java-annotations.md # - SQLAlchemy Cheats (Python): cheatsheets/databases/orm/sqlalchemy-python-cheats.md # - Networking: # - HTTP Basics: cheatsheets/networking/http/basics.md # - Headers: cheatsheets/networking/http/headers.md # - Tools: # - Git: cheatsheets/tools/git.md # - Docker: cheatsheets/tools/docker.md # - Obsidian + MkDocs Setup: cheatsheets/tools/obsidian-mkdocs-setup.md # - Concepts: # - Overview: concepts/index.md # - Backend: # - HTTP: concepts/backend/http.md # - REST API: concepts/backend/rest-api.md # - Caching: concepts/backend/caching.md # - Databases: # - Normalization: concepts/databases/normalization.md # - Indexing: concepts/databases/indexing.md # - Transactions (ACID): concepts/databases/transactions-acid.md # - ORM: # - ORM Concepts: concepts/databases/orm/orm-concepts.md # - JPA vs SQLAlchemy: concepts/databases/orm/jpa-vs-sqlalchemy.md # - Frameworks: # - Spring Core: concepts/frameworks/spring-core.md # - Hibernate: concepts/frameworks/hibernate.md # - Design: # - Dependency Injection: concepts/design/dependency-injection.md # - Microservices: concepts/design/microservices.md Why comment out nav: at first? While you\u2019re building content, filesystem ordering is simpler. Later, un-comment nav: to curate labels and order.","title":"4) mkdocs.yml configuration"},{"location":"cheatsheets/tools/mkdocs/setup/#5-homepages-three-indexmd-files","text":"index.md turns a folder into a landing page and gives you clean URLs: docs/index.md \u2192 / docs/cheatsheets/index.md \u2192 /cheatsheets/ docs/concepts/index.md \u2192 /concepts/","title":"5) Homepages (three index.md files)"},{"location":"cheatsheets/tools/mkdocs/setup/#51-docsindexmd-site-homepage","text":"--- title: Knowledge Vault summary: Personal developer wiki \u2014 cheatsheets for speed, concepts for mastery. --- # \ud83e\udde0 Knowledge Vault Two modes, one brain: - **Cheatsheets** \u2192 quick reference while coding - **Concepts** \u2192 deeper understanding and architecture ## \ud83d\udeaa Start Here - [ Java Streams \u2014 Quickref ]( <../../languages/java/core/streams.md> ) - [ SQL Basics \u2014 Cheatsheet ]( <../../databases/sql/basics.md> ) - [ HTTP \u2014 Concepts ]( <concepts/backend/http> ) - [ Git \u2014 Commands ]( <../git.md> ) - [ HTTP Headers \u2014 Quickref ]( <cheatsheets/networking/http/headers> ) ## \ud83d\udd0e How to Use !!! tip Use the search bar for method names, error snippets, or concepts (e.g., `@Transactional` , `N+1` , `Content-Type` ).","title":"5.1 docs/index.md (site homepage)"},{"location":"cheatsheets/tools/mkdocs/setup/#52-docscheatsheetsindexmd-section-landing","text":"--- title: Cheatsheets summary: Quick references for languages, frameworks, databases, tools, and commands. --- # \u26a1 Cheatsheets Fast lookup. Minimal theory. Maximum clarity. ## \ud83e\uddf1 Categories ### Languages - Java: [ Streams ]( <../../languages/java/core/streams.md> ) \u00b7 [ Spring Annotations ]( <../../languages/java/frameworks/spring/annotations.md> ) - Python: [ Basics ]( <../../languages/python/basics.md> ) ### Databases - SQL: [ Basics ]( <../../databases/sql/basics.md> ) \u00b7 [ Joins ]( <../../databases/sql/joins.md> ) - MySQL: [ Setup (Java) ]( <../../databases/mysql/setup/java.md> ) \u00b7 [ Setup (Python) ]( <../../databases/mysql/setup/python.md> ) \u00b7 [ Queries ]( <../../databases/mysql/queries.md> ) - ORM: [ JPA Annotations ]( <../../databases/orm/jpa-java-annotations.md> ) \u00b7 [ SQLAlchemy ]( <../../databases/orm/sqlalchemy-python-cheats.md> ) ### Networking - [ HTTP Basics ]( <cheatsheets/networking/http/basics> ) \u00b7 [ Headers ]( <cheatsheets/networking/http/headers> ) ### Tools - [ Git ]( <../git.md> ) \u00b7 [ Docker ]( <../docker.md> ) \u00b7 [ Obsidian + MkDocs Setup ]( <../obsidian-mkdocs-setup.md> )","title":"5.2 docs/cheatsheets/index.md (section landing)"},{"location":"cheatsheets/tools/mkdocs/setup/#53-docsconceptsindexmd-section-landing","text":"--- title: Concepts summary: Deep dives into how systems work \u2014 theory, trade-offs, and reasoning. --- # \ud83e\udde0 Concepts Where understanding replaces memorization. ## \ud83e\udde9 Topics ### Backend - [ HTTP ]( <concepts/backend/http> ) \u00b7 [ REST API ]( <../../../concepts/backend/rest-api.md> ) \u00b7 [ Caching ]( <../../../concepts/backend/caching.md> ) ### Databases - [ Normalization ]( <../../../concepts/databases/normalization.md> ) \u00b7 [ Indexing ]( <../../../concepts/databases/indexing.md> ) \u00b7 [ Transactions (ACID) ]( <../../../concepts/databases/transactions-acid.md> ) - ORM: [ ORM Concepts ]( <../../../concepts/databases/orm/orm-concepts.md> ) \u00b7 [ JPA vs SQLAlchemy ]( <../../../concepts/databases/orm/jpa-vs-sqlalchemy.md> ) ### Frameworks - [ Spring Core ]( <../../../concepts/frameworks/spring-core.md> ) \u00b7 [ Hibernate ]( <../../../concepts/frameworks/hibernate.md> ) ### Design - [ Dependency Injection ]( <../../../concepts/design/dependency-injection.md> ) \u00b7 [ Microservices ]( <../../../concepts/design/microservices.md> ) Do you need to define folder structure in index.md ? No. index.md is content , not configuration. It\u2019s a curated landing page for the folder. The site structure is driven by the filesystem and (optionally) the nav: in mkdocs.yml .","title":"5.3 docs/concepts/index.md (section landing)"},{"location":"cheatsheets/tools/mkdocs/setup/#6-front-matter-templates-copypaste-into-pages","text":"Cheatsheet: --- title: <Title> \u2014 Quickref tags: [cheatsheet, <topic>, <tech>] summary: One-line reason this exists (lookup while coding). --- # <Title> \u2014 Quickref > See concepts: [concepts/...](<../../../concepts/...>) Concept: --- title: <Concept Name> tags: [concept, <domain>] summary: What it is, why it matters, trade-offs. --- # <Concept Name> > See cheatsheet: [cheatsheets/...](<../../...>)","title":"6) Front-matter templates (copy/paste into pages)"},{"location":"cheatsheets/tools/mkdocs/setup/#7-local-dev-deploy","text":"# Local preview (auto-reload) mkdocs serve # open http://127.0.0.1:8000/ # Deploy to GitHub Pages mkdocs gh-deploy # your site: https://<your-username>.github.io/knowledge-vault/","title":"7) Local dev &amp; deploy"},{"location":"cheatsheets/tools/mkdocs/setup/#8-faq-gotchas","text":"Where should README.md live? At repo root. It explains the project + how to run/deploy. The site homepage is docs/index.md . Do I need docs_dir: docs ? No. That\u2019s the default; keeping it implicit is cleaner. What makes /cheatsheets/ and /concepts/ routes work? The index.md files in those folders + use_directory_urls: true . What if I move files around? [[wikilinks]] are updated by mkdocs-obsidian on build. Rebuild after reorganizing. Should I curate nav: now? Early on, skip it. When structure stabilizes, un-comment nav: in mkdocs.yml to control order and labels.","title":"8) FAQ / Gotchas"},{"location":"cheatsheets/tools/mkdocs/setup/#9-mental-model-why-this-works","text":"Separation of concerns: README.md (GitHub), docs/index.md (site), mkdocs.yml (wiring). Two modes = less friction: Cheatsheets for speed, Concepts for depth. Wikilinks = future-proof: Rearrange folders without rewriting links. Indexes = clean URLs: Section index.md gives /cheatsheets/ and /concepts/ real landing pages. Ship it. Then iterate. The vault grows with you, not against you.","title":"9) Mental model (why this works)"},{"location":"cheatsheets/tools/nginx/quick-start/","text":"\ud83c\udf10 Nginx: From Basics to High-Performance Web Serving \u00b6 Nginx (\u201cengine-x\u201d) is a high-performance web server, reverse proxy, and load balancer . It\u2019s lightweight, event-driven, and designed to handle thousands of concurrent connections with minimal resources. You\u2019ll find it serving static sites, routing API traffic, proxying backend apps, or terminating SSL \u2014 often all at once. \u2699\ufe0f 1. What Nginx Actually Does \u00b6 Nginx can play multiple roles depending on configuration: Role Description Web server Serves static files directly (HTML, JS, CSS, images). Reverse proxy Forwards client requests to backend apps (e.g., Node, Spring Boot). Load balancer Distributes requests across multiple backend servers. TLS terminator Handles HTTPS encryption before passing traffic internally. Cache layer Stores responses to reduce backend load. \ud83d\udc49 In short: Nginx sits between the internet and your application , managing how traffic flows. \ud83e\uddf1 2. Core Concepts \u00b6 Concept Description Worker processes Handle client connections. Nginx scales by using multiple workers efficiently. Directives Configuration commands that define behavior (e.g., listen , server_name ). Context blocks Hierarchical sections: main , http , server , and location . Server block Defines a virtual host \u2014 domain, ports, SSL, routes. Location block Defines how to handle requests matching specific URIs. \ud83e\udde9 3. File Structure Overview \u00b6 Typical Linux layout after install: /etc/nginx/ \u251c\u2500 nginx.conf # main config (includes others) \u251c\u2500 conf.d/ # custom site configs (enabled by default) \u251c\u2500 sites-available/ # optional (Debian/Ubuntu layout) \u251c\u2500 sites-enabled/ # symlinks to active sites \u251c\u2500 snippets/ # reusable config fragments \u2514\u2500 logs/ \u251c\u2500 access.log \u2514\u2500 error.log Test and reload Nginx safely: sudo nginx -t # test syntax sudo systemctl reload nginx sudo systemctl status nginx \ud83e\uddf0 4. Basic HTTP Server Example \u00b6 Goal: Serve static files from /var/www/html on port 80. server { listen 80 ; server_name example.com ; root /var/www/html ; index index.html ; access_log /var/log/nginx/access.log ; error_log /var/log/nginx/error.log ; location / { try_files $uri $uri/ = 404 ; } } \ud83d\udc49 This is Nginx as a pure web server \u2014 no proxying, just serving files. \ud83d\udd01 5. Reverse Proxy Setup \u00b6 Goal: Forward traffic from Nginx \u2192 backend app (e.g., Spring Boot or Node). server { listen 80 ; server_name api.example.com ; location / { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; } } \u2705 Best practice: Always pass client IP headers. Use proxy_pass without trailing slash unless you understand path rewriting. Protect upstreams (never expose raw app ports to the internet). \ud83d\udd12 6. HTTPS (TLS) Configuration \u00b6 Using Let\u2019s Encrypt certificates (managed by certbot ): sudo certbot --nginx -d example.com -d www.example.com Manual example: server { listen 443 ssl ; server_name example.com ; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem ; location / { proxy_pass http://127.0.0.1:8080 ; } } server { listen 80 ; server_name example.com ; return 301 https:// $host$request_uri ; } \ud83d\udc49 Always redirect HTTP \u2192 HTTPS. \u26a1 7. Load Balancing Example \u00b6 Round-robin across two backend servers: upstream backend_cluster { server 10.0.0.2 : 8080 ; server 10.0.0.3 : 8080 ; } server { listen 80 ; server_name app.example.com ; location / { proxy_pass http://backend_cluster ; } } Variants: ip_hash; for sticky sessions least_conn; for even load \ud83e\udde0 8. Useful Directives & Variables \u00b6 Directive Purpose root Directory to serve files from index Default file to serve server_name Hostname match for requests error_page Custom error responses rewrite URL rewriting try_files Fallbacks for static serving proxy_pass Forward to backend proxy_set_header Pass headers to backend Common variables: $remote_addr \u2192 client IP $host \u2192 domain in request $uri \u2192 path part of request $request_uri \u2192 original request including query $upstream_addr \u2192 backend server used \ud83e\udde9 9. Logging and Monitoring \u00b6 Logs are your best debugging friend: tail -f /var/log/nginx/access.log tail -f /var/log/nginx/error.log Sample log format: 127.0.0.1 - - [15/Oct/2025:12:34:56 +0000] \"GET /index.html HTTP/1.1\" 200 612 You can define custom formats: log_format main ' $remote_addr - $host [ $time_local] \" $request\" $status $body_bytes_sent' ; access_log /var/log/nginx/access.log main ; \ud83e\udde9 10. Caching Static Assets \u00b6 location ~ * \\.(jpg|jpeg|png|gif|css|js|ico|woff2?) $ { expires 30d ; add_header Cache-Control \"public, no-transform\" ; } \ud83d\udc49 Offload repeated requests from your backend and improve browser performance. \ud83e\uddf1 11. Security Hardening \u00b6 Disable server version info: server_tokens off ; * Limit request size: client_max_body_size 10M ; * Prevent clickjacking & MIME sniffing: add_header X-Frame-Options SAMEORIGIN ; add_header X-Content-Type-Options nosniff ; * Use rate limiting (basic DDOS protection): limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s ; location /api/ { limit_req zone=api burst=20 ; proxy_pass http://backend ; } \ud83e\udde9 12. Example Full Setup (Static + API Proxy + HTTPS) \u00b6 server { listen 80 ; server_name example.com www.example.com ; return 301 https:// $host$request_uri ; } server { listen 443 ssl http2 ; server_name example.com www.example.com ; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem ; root /var/www/html ; index index.html ; location /api/ { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Forwarded-For $remote_addr ; } location / { try_files $uri $uri/ = 404 ; } } \ud83e\udde9 13. Nginx in Development Environments \u00b6 JetBrains (IDEA / PyCharm) \u00b6 You can run and debug local servers via \u201cEdit Configurations \u2192 Nginx\u201d. Syntax highlighting is built-in; test configs directly with nginx -t . Use Deployment tools to sync /etc/nginx/ or container configs to remote hosts. VS Code \u00b6 Install: Nginx Configuration Language (syntax highlighting) Nginx Snippets (ready-to-use config templates) Docker Extension (if you\u2019re running Nginx in containers) Run via Docker: docker run -d -p 8080 :80 -v $( pwd ) /nginx.conf:/etc/nginx/nginx.conf nginx \ud83e\uddf0 14. Troubleshooting \u00b6 Problem Fix Config change not applied sudo nginx -t && sudo systemctl reload nginx \u201cBad Gateway (502)\u201d Backend down or wrong proxy_pass target Permission denied Ensure Nginx user ( www-data / nginx ) can access files Infinite redirect loop Check proxy_pass URLs and rewrite rules SSL errors Verify certificate paths & permissions \ud83e\udde0 15. Advanced Topics (for later) \u00b6 Reverse proxy caching ( proxy_cache_path , proxy_cache ). HTTP/2 and QUIC/HTTP3 enablement. Gzip and Brotli compression. Load balancing with health checks. Serving multiple domains (SNI). Dockerized Nginx reverse proxy setups. Using Nginx as a static file CDN. \u2705 Summary \u00b6 Nginx is both a web server and a reverse proxy \u2014 efficient, flexible, and production-grade. Serve static content directly and offload dynamic requests to backends. Always test ( nginx -t ) before reloading. Secure with HTTPS, caching, and rate limiting. Lightweight, predictable, and nearly indestructible \u2014 it\u2019s the web\u2019s quiet workhorse. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 nginx/ \u2514\u2500 quick-start.md \ud83d\udcbb 16. Nginx in Developer Workflows (JetBrains & VS Code) \u00b6 Nginx isn\u2019t just a server you \u201cdeploy somewhere.\u201d It\u2019s a local testing tool , reverse proxy in development , and part of modern CI/CD pipelines. \ud83e\udde9 JetBrains IDEs (IntelliJ IDEA, PyCharm, etc.) \u00b6 Feature What It Does File templates Built-in syntax highlighting for nginx.conf and .conf files. Remote deployment Sync /etc/nginx/ or Docker configs via \u201cDeployment \u2192 Remote Host\u201d. Before launch tasks Run nginx -t automatically to test config before restarting. Docker integration Configure Nginx container services directly in IDE Services tab. Pro tip: In JetBrains, you can make a Run Configuration that executes: sudo nginx -t && sudo systemctl reload nginx This gives you one-click config validation + reload directly from the IDE. \ud83e\udde0 VS Code Integration \u00b6 VS Code can act as your Nginx control panel with the right extensions. Recommended setup: Nginx Configuration Language \u2192 syntax + linting Nginx Snippets \u2192 quick templates Docker Extension \u2192 manage running containers REST Client \u2192 test API endpoints proxied through Nginx You can run Nginx locally for frontend-backend routing: docker run -d \\ --name dev-nginx \\ -p 8080 :80 \\ -v $( pwd ) /nginx.conf:/etc/nginx/nginx.conf:ro \\ nginx:latest \ud83e\uddf0 17. Nginx + Docker Compose in Local Development \u00b6 A clean, composable setup to proxy requests between your frontend and backend: version : \"3.9\" services : nginx : image : nginx:latest container_name : nginx ports : - \"80:80\" volumes : - ./nginx.conf:/etc/nginx/nginx.conf:ro depends_on : - backend - frontend frontend : build : ./frontend expose : - \"3000\" backend : build : ./backend expose : - \"8080\" Then nginx.conf : events {} http { server { listen 80 ; location / { proxy_pass http://frontend:3000 ; } location /api/ { proxy_pass http://backend:8080 ; } } } \u2705 Benefits: Unified local environment \u2014 no cross-origin chaos. Hot reload compatible (mount local code). Easier to mirror staging/production later. \ud83d\ude80 18. Staging vs. Production Patterns \u00b6 Environment Goal Typical Nginx Role Local Simulate routing and test caching/proxy rules Run via Docker or native install Staging Mimic production routing and SSL Reverse proxy + TLS Production Serve static content + proxy dynamic requests Load balancer + cache layer Example split configs: nginx/ \u251c\u2500 nginx.conf # global settings \u251c\u2500 conf.d/ \u2502 \u251c\u2500 dev.conf # local proxy setup \u2502 \u251c\u2500 staging.conf # SSL, rate limiting \u2502 \u2514\u2500 production.conf # caching, load balancing \ud83e\udde9 19. Common CI/CD Integrations \u00b6 Build pipeline (Dockerized): # Dockerfile FROM nginx:latest COPY nginx.conf /etc/nginx/nginx.conf COPY dist/ /usr/share/nginx/html GitHub Actions snippet: - name : Build & Push Nginx Image run : | docker build -t ghcr.io/user/app-nginx:${{ github.sha }} . docker push ghcr.io/user/app-nginx:${{ github.sha }} Deployment example (Docker Swarm / Kubernetes): # Swarm stack.yml services : nginx : image : ghcr.io/user/app-nginx:latest ports : - \"80:80\" - \"443:443\" deploy : replicas : 2 restart_policy : condition : on-failure \ud83e\udde0 20. Best Practices & Developer Habits \u00b6 Configuration Hygiene \u00b6 Keep production configs readonly and version-controlled. Split by domain or role \u2014 one file per app. Use includes: include /etc/nginx/conf.d/*.conf ; Developer sanity checklist \u00b6 Always run nginx -t before reload. Use $host and $remote_addr headers when proxying. Don\u2019t run with root inside containers (use nginx user). Redirect all HTTP to HTTPS \u2014 even locally, if possible. Keep logs rotated ( logrotate or Docker log limits). IDE habit \u00b6 Format configs automatically before commit. Use pre-commit hooks to validate syntax: nginx -t -q || exit 1 \u2705 Summary (Developer Edition) \u00b6 Integrate Nginx directly in IDE or Compose \u2014 no manual SSH needed. Test configs automatically before reloads. Run the same Nginx image locally and in production for consistency. Version-control your .conf files like code \u2014 because they are code. Treat Nginx as your traffic controller , not just a web server.","title":"Quick Start"},{"location":"cheatsheets/tools/nginx/quick-start/#nginx-from-basics-to-high-performance-web-serving","text":"Nginx (\u201cengine-x\u201d) is a high-performance web server, reverse proxy, and load balancer . It\u2019s lightweight, event-driven, and designed to handle thousands of concurrent connections with minimal resources. You\u2019ll find it serving static sites, routing API traffic, proxying backend apps, or terminating SSL \u2014 often all at once.","title":"\ud83c\udf10 Nginx: From Basics to High-Performance Web Serving"},{"location":"cheatsheets/tools/nginx/quick-start/#1-what-nginx-actually-does","text":"Nginx can play multiple roles depending on configuration: Role Description Web server Serves static files directly (HTML, JS, CSS, images). Reverse proxy Forwards client requests to backend apps (e.g., Node, Spring Boot). Load balancer Distributes requests across multiple backend servers. TLS terminator Handles HTTPS encryption before passing traffic internally. Cache layer Stores responses to reduce backend load. \ud83d\udc49 In short: Nginx sits between the internet and your application , managing how traffic flows.","title":"\u2699\ufe0f 1. What Nginx Actually Does"},{"location":"cheatsheets/tools/nginx/quick-start/#2-core-concepts","text":"Concept Description Worker processes Handle client connections. Nginx scales by using multiple workers efficiently. Directives Configuration commands that define behavior (e.g., listen , server_name ). Context blocks Hierarchical sections: main , http , server , and location . Server block Defines a virtual host \u2014 domain, ports, SSL, routes. Location block Defines how to handle requests matching specific URIs.","title":"\ud83e\uddf1 2. Core Concepts"},{"location":"cheatsheets/tools/nginx/quick-start/#3-file-structure-overview","text":"Typical Linux layout after install: /etc/nginx/ \u251c\u2500 nginx.conf # main config (includes others) \u251c\u2500 conf.d/ # custom site configs (enabled by default) \u251c\u2500 sites-available/ # optional (Debian/Ubuntu layout) \u251c\u2500 sites-enabled/ # symlinks to active sites \u251c\u2500 snippets/ # reusable config fragments \u2514\u2500 logs/ \u251c\u2500 access.log \u2514\u2500 error.log Test and reload Nginx safely: sudo nginx -t # test syntax sudo systemctl reload nginx sudo systemctl status nginx","title":"\ud83e\udde9 3. File Structure Overview"},{"location":"cheatsheets/tools/nginx/quick-start/#4-basic-http-server-example","text":"Goal: Serve static files from /var/www/html on port 80. server { listen 80 ; server_name example.com ; root /var/www/html ; index index.html ; access_log /var/log/nginx/access.log ; error_log /var/log/nginx/error.log ; location / { try_files $uri $uri/ = 404 ; } } \ud83d\udc49 This is Nginx as a pure web server \u2014 no proxying, just serving files.","title":"\ud83e\uddf0 4. Basic HTTP Server Example"},{"location":"cheatsheets/tools/nginx/quick-start/#5-reverse-proxy-setup","text":"Goal: Forward traffic from Nginx \u2192 backend app (e.g., Spring Boot or Node). server { listen 80 ; server_name api.example.com ; location / { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; } } \u2705 Best practice: Always pass client IP headers. Use proxy_pass without trailing slash unless you understand path rewriting. Protect upstreams (never expose raw app ports to the internet).","title":"\ud83d\udd01 5. Reverse Proxy Setup"},{"location":"cheatsheets/tools/nginx/quick-start/#6-https-tls-configuration","text":"Using Let\u2019s Encrypt certificates (managed by certbot ): sudo certbot --nginx -d example.com -d www.example.com Manual example: server { listen 443 ssl ; server_name example.com ; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem ; location / { proxy_pass http://127.0.0.1:8080 ; } } server { listen 80 ; server_name example.com ; return 301 https:// $host$request_uri ; } \ud83d\udc49 Always redirect HTTP \u2192 HTTPS.","title":"\ud83d\udd12 6. HTTPS (TLS) Configuration"},{"location":"cheatsheets/tools/nginx/quick-start/#7-load-balancing-example","text":"Round-robin across two backend servers: upstream backend_cluster { server 10.0.0.2 : 8080 ; server 10.0.0.3 : 8080 ; } server { listen 80 ; server_name app.example.com ; location / { proxy_pass http://backend_cluster ; } } Variants: ip_hash; for sticky sessions least_conn; for even load","title":"\u26a1 7. Load Balancing Example"},{"location":"cheatsheets/tools/nginx/quick-start/#8-useful-directives-variables","text":"Directive Purpose root Directory to serve files from index Default file to serve server_name Hostname match for requests error_page Custom error responses rewrite URL rewriting try_files Fallbacks for static serving proxy_pass Forward to backend proxy_set_header Pass headers to backend Common variables: $remote_addr \u2192 client IP $host \u2192 domain in request $uri \u2192 path part of request $request_uri \u2192 original request including query $upstream_addr \u2192 backend server used","title":"\ud83e\udde0 8. Useful Directives &amp; Variables"},{"location":"cheatsheets/tools/nginx/quick-start/#9-logging-and-monitoring","text":"Logs are your best debugging friend: tail -f /var/log/nginx/access.log tail -f /var/log/nginx/error.log Sample log format: 127.0.0.1 - - [15/Oct/2025:12:34:56 +0000] \"GET /index.html HTTP/1.1\" 200 612 You can define custom formats: log_format main ' $remote_addr - $host [ $time_local] \" $request\" $status $body_bytes_sent' ; access_log /var/log/nginx/access.log main ;","title":"\ud83e\udde9 9. Logging and Monitoring"},{"location":"cheatsheets/tools/nginx/quick-start/#10-caching-static-assets","text":"location ~ * \\.(jpg|jpeg|png|gif|css|js|ico|woff2?) $ { expires 30d ; add_header Cache-Control \"public, no-transform\" ; } \ud83d\udc49 Offload repeated requests from your backend and improve browser performance.","title":"\ud83e\udde9 10. Caching Static Assets"},{"location":"cheatsheets/tools/nginx/quick-start/#11-security-hardening","text":"Disable server version info: server_tokens off ; * Limit request size: client_max_body_size 10M ; * Prevent clickjacking & MIME sniffing: add_header X-Frame-Options SAMEORIGIN ; add_header X-Content-Type-Options nosniff ; * Use rate limiting (basic DDOS protection): limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s ; location /api/ { limit_req zone=api burst=20 ; proxy_pass http://backend ; }","title":"\ud83e\uddf1 11. Security Hardening"},{"location":"cheatsheets/tools/nginx/quick-start/#12-example-full-setup-static-api-proxy-https","text":"server { listen 80 ; server_name example.com www.example.com ; return 301 https:// $host$request_uri ; } server { listen 443 ssl http2 ; server_name example.com www.example.com ; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem ; root /var/www/html ; index index.html ; location /api/ { proxy_pass http://127.0.0.1:8080 ; proxy_set_header Host $host ; proxy_set_header X-Forwarded-For $remote_addr ; } location / { try_files $uri $uri/ = 404 ; } }","title":"\ud83e\udde9 12. Example Full Setup (Static + API Proxy + HTTPS)"},{"location":"cheatsheets/tools/nginx/quick-start/#13-nginx-in-development-environments","text":"","title":"\ud83e\udde9 13. Nginx in Development Environments"},{"location":"cheatsheets/tools/nginx/quick-start/#jetbrains-idea-pycharm","text":"You can run and debug local servers via \u201cEdit Configurations \u2192 Nginx\u201d. Syntax highlighting is built-in; test configs directly with nginx -t . Use Deployment tools to sync /etc/nginx/ or container configs to remote hosts.","title":"JetBrains (IDEA / PyCharm)"},{"location":"cheatsheets/tools/nginx/quick-start/#vs-code","text":"Install: Nginx Configuration Language (syntax highlighting) Nginx Snippets (ready-to-use config templates) Docker Extension (if you\u2019re running Nginx in containers) Run via Docker: docker run -d -p 8080 :80 -v $( pwd ) /nginx.conf:/etc/nginx/nginx.conf nginx","title":"VS Code"},{"location":"cheatsheets/tools/nginx/quick-start/#14-troubleshooting","text":"Problem Fix Config change not applied sudo nginx -t && sudo systemctl reload nginx \u201cBad Gateway (502)\u201d Backend down or wrong proxy_pass target Permission denied Ensure Nginx user ( www-data / nginx ) can access files Infinite redirect loop Check proxy_pass URLs and rewrite rules SSL errors Verify certificate paths & permissions","title":"\ud83e\uddf0 14. Troubleshooting"},{"location":"cheatsheets/tools/nginx/quick-start/#15-advanced-topics-for-later","text":"Reverse proxy caching ( proxy_cache_path , proxy_cache ). HTTP/2 and QUIC/HTTP3 enablement. Gzip and Brotli compression. Load balancing with health checks. Serving multiple domains (SNI). Dockerized Nginx reverse proxy setups. Using Nginx as a static file CDN.","title":"\ud83e\udde0 15. Advanced Topics (for later)"},{"location":"cheatsheets/tools/nginx/quick-start/#summary","text":"Nginx is both a web server and a reverse proxy \u2014 efficient, flexible, and production-grade. Serve static content directly and offload dynamic requests to backends. Always test ( nginx -t ) before reloading. Secure with HTTPS, caching, and rate limiting. Lightweight, predictable, and nearly indestructible \u2014 it\u2019s the web\u2019s quiet workhorse. \ud83d\udcc4 File path suggestion: docs/ \u2514\u2500 cheatsheets/ \u2514\u2500 tools/ \u2514\u2500 nginx/ \u2514\u2500 quick-start.md","title":"\u2705 Summary"},{"location":"cheatsheets/tools/nginx/quick-start/#16-nginx-in-developer-workflows-jetbrains-vs-code","text":"Nginx isn\u2019t just a server you \u201cdeploy somewhere.\u201d It\u2019s a local testing tool , reverse proxy in development , and part of modern CI/CD pipelines.","title":"\ud83d\udcbb 16. Nginx in Developer Workflows (JetBrains &amp; VS Code)"},{"location":"cheatsheets/tools/nginx/quick-start/#jetbrains-ides-intellij-idea-pycharm-etc","text":"Feature What It Does File templates Built-in syntax highlighting for nginx.conf and .conf files. Remote deployment Sync /etc/nginx/ or Docker configs via \u201cDeployment \u2192 Remote Host\u201d. Before launch tasks Run nginx -t automatically to test config before restarting. Docker integration Configure Nginx container services directly in IDE Services tab. Pro tip: In JetBrains, you can make a Run Configuration that executes: sudo nginx -t && sudo systemctl reload nginx This gives you one-click config validation + reload directly from the IDE.","title":"\ud83e\udde9 JetBrains IDEs (IntelliJ IDEA, PyCharm, etc.)"},{"location":"cheatsheets/tools/nginx/quick-start/#vs-code-integration","text":"VS Code can act as your Nginx control panel with the right extensions. Recommended setup: Nginx Configuration Language \u2192 syntax + linting Nginx Snippets \u2192 quick templates Docker Extension \u2192 manage running containers REST Client \u2192 test API endpoints proxied through Nginx You can run Nginx locally for frontend-backend routing: docker run -d \\ --name dev-nginx \\ -p 8080 :80 \\ -v $( pwd ) /nginx.conf:/etc/nginx/nginx.conf:ro \\ nginx:latest","title":"\ud83e\udde0 VS Code Integration"},{"location":"cheatsheets/tools/nginx/quick-start/#17-nginx-docker-compose-in-local-development","text":"A clean, composable setup to proxy requests between your frontend and backend: version : \"3.9\" services : nginx : image : nginx:latest container_name : nginx ports : - \"80:80\" volumes : - ./nginx.conf:/etc/nginx/nginx.conf:ro depends_on : - backend - frontend frontend : build : ./frontend expose : - \"3000\" backend : build : ./backend expose : - \"8080\" Then nginx.conf : events {} http { server { listen 80 ; location / { proxy_pass http://frontend:3000 ; } location /api/ { proxy_pass http://backend:8080 ; } } } \u2705 Benefits: Unified local environment \u2014 no cross-origin chaos. Hot reload compatible (mount local code). Easier to mirror staging/production later.","title":"\ud83e\uddf0 17. Nginx + Docker Compose in Local Development"},{"location":"cheatsheets/tools/nginx/quick-start/#18-staging-vs-production-patterns","text":"Environment Goal Typical Nginx Role Local Simulate routing and test caching/proxy rules Run via Docker or native install Staging Mimic production routing and SSL Reverse proxy + TLS Production Serve static content + proxy dynamic requests Load balancer + cache layer Example split configs: nginx/ \u251c\u2500 nginx.conf # global settings \u251c\u2500 conf.d/ \u2502 \u251c\u2500 dev.conf # local proxy setup \u2502 \u251c\u2500 staging.conf # SSL, rate limiting \u2502 \u2514\u2500 production.conf # caching, load balancing","title":"\ud83d\ude80 18. Staging vs. Production Patterns"},{"location":"cheatsheets/tools/nginx/quick-start/#19-common-cicd-integrations","text":"Build pipeline (Dockerized): # Dockerfile FROM nginx:latest COPY nginx.conf /etc/nginx/nginx.conf COPY dist/ /usr/share/nginx/html GitHub Actions snippet: - name : Build & Push Nginx Image run : | docker build -t ghcr.io/user/app-nginx:${{ github.sha }} . docker push ghcr.io/user/app-nginx:${{ github.sha }} Deployment example (Docker Swarm / Kubernetes): # Swarm stack.yml services : nginx : image : ghcr.io/user/app-nginx:latest ports : - \"80:80\" - \"443:443\" deploy : replicas : 2 restart_policy : condition : on-failure","title":"\ud83e\udde9 19. Common CI/CD Integrations"},{"location":"cheatsheets/tools/nginx/quick-start/#20-best-practices-developer-habits","text":"","title":"\ud83e\udde0 20. Best Practices &amp; Developer Habits"},{"location":"cheatsheets/tools/nginx/quick-start/#configuration-hygiene","text":"Keep production configs readonly and version-controlled. Split by domain or role \u2014 one file per app. Use includes: include /etc/nginx/conf.d/*.conf ;","title":"Configuration Hygiene"},{"location":"cheatsheets/tools/nginx/quick-start/#developer-sanity-checklist","text":"Always run nginx -t before reload. Use $host and $remote_addr headers when proxying. Don\u2019t run with root inside containers (use nginx user). Redirect all HTTP to HTTPS \u2014 even locally, if possible. Keep logs rotated ( logrotate or Docker log limits).","title":"Developer sanity checklist"},{"location":"cheatsheets/tools/nginx/quick-start/#ide-habit","text":"Format configs automatically before commit. Use pre-commit hooks to validate syntax: nginx -t -q || exit 1","title":"IDE habit"},{"location":"cheatsheets/tools/nginx/quick-start/#summary-developer-edition","text":"Integrate Nginx directly in IDE or Compose \u2014 no manual SSH needed. Test configs automatically before reloads. Run the same Nginx image locally and in production for consistency. Version-control your .conf files like code \u2014 because they are code. Treat Nginx as your traffic controller , not just a web server.","title":"\u2705 Summary (Developer Edition)"},{"location":"concepts/languages/java/_meta/blueprint/","text":"\ud83d\udcda Java Reflection & Class Loading Cheatsheet and Concept Blueprint \u00b6 \ud83e\udde9 Suggested Folder Layout \u00b6 docs/ \u2514\u2500 cheatsheets/ \u251c\u2500 languages/ \u2502 \u2514\u2500 java/ \u2502 \u251c\u2500 core/ \u2502 \u2502 \u251c\u2500 reflection-basics.md \u2502 \u2502 \u251c\u2500 classpath-and-classloader.md \u2502 \u2502 \u251c\u2500 annotations.md \u2502 \u2502 \u251c\u2500 jvm-runtime-environment.md \u2502 \u2502 \u2514\u2500 bytecode-and-compilation-flow.md \u2502 \u251c\u2500 spring/ \u2502 \u2502 \u251c\u2500 spring-reflection-and-autowired.md \u2502 \u2502 \u251c\u2500 spring-bean-lifecycle.md \u2502 \u2502 \u251c\u2500 spring-context-loading.md \u2502 \u2502 \u2514\u2500 spring-boot-run-sequence.md \u2502 \u2514\u2500 advanced/ \u2502 \u251c\u2500 custom-classloader-example.md \u2502 \u2514\u2500 hot-reload-concept.md \u2514\u2500 concepts/ \u251c\u2500 java/ \u2502 \u251c\u2500 what-is-reflection.md \u2502 \u251c\u2500 how-jvm-loads-classes.md \u2502 \u251c\u2500 runtime-vs-compile-time.md \u2502 \u2514\u2500 jre-jvm-jdk-differences.md \u2514\u2500 spring/ \u251c\u2500 why-spring-uses-reflection.md \u251c\u2500 dependency-injection-mechanics.md \u2514\u2500 how-annotations-drive-spring.md \ud83e\udded Content Breakdown and Key Ideas \u00b6 1. Reflection Basics (cheatsheet) \u00b6 Focus: Practical syntax and examples. Sections: What reflection is. Core classes ( Class , Field , Method , Constructor ). Reading annotations. Creating instances with reflection. When to use / not to use. 2. What Is Reflection (concept) \u00b6 Focus: Explanation in plain language. Idea: Java program inspecting itself. Why frameworks need it. Example of simple use ( Class.forName , .newInstance() ). Advantages and trade-offs. 3. Classpath & ClassLoader (cheatsheet) \u00b6 Focus: Practical reference. What \u201cclasspath\u201d means. Compile vs runtime classpath. java -cp , Maven/Gradle defaults. Layers of class loaders (bootstrap, platform, app). Typical errors ( ClassNotFoundException , NoClassDefFoundError ). 4. How JVM Loads Classes (concept) \u00b6 Focus: Mechanism & lifecycle. Step-by-step from command to main . Class loading, linking, initialization. ClassLoader hierarchy. When reflection happens during loading. 5. JVM Runtime Environment (cheatsheet) \u00b6 JVM vs JRE vs JDK. Runtime memory areas (heap, method area, stack). Execution process (load \u2192 verify \u2192 execute). 6. Spring Boot Run Sequence (cheatsheet) \u00b6 Show the journey of SpringApplication.run() : Bootstrapping context. Component scan. Bean creation. Dependency injection. Ready state. 7. Spring Reflection & @Autowired (cheatsheet) \u00b6 How Spring reads annotations via reflection. How fields and constructors are injected. Order of resolution ( @Primary , @Qualifier , type match). Simplified pseudo-code for reflection steps. 8. Why Spring Uses Reflection (concept) \u00b6 Dynamic discovery instead of hard-coding. Annotations as metadata. Inversion of Control (IoC). Trade-offs (speed, safety). 9. Custom ClassLoader Example (advanced cheatsheet) \u00b6 Minimal example code of a class loader. Step-by-step description of defineClass . Use case in plugin systems or frameworks. 10. Hot Reload Concept (advanced concept) \u00b6 How reloading works (new class loader, drop old references). Relation to Spring Boot DevTools and Tomcat. Memory & isolation considerations. 11. Runtime vs Compile-time (concept) \u00b6 Difference in who \u201cknows\u201d what when. Why reflection and annotations belong to runtime. How compile-time tools (e.g., Lombok) differ. 12. Bean Lifecycle (cheatsheet) \u00b6 Creation \u2192 dependency injection \u2192 initialization \u2192 destruction. Hooks ( @PostConstruct , @PreDestroy ). Where reflection enters each phase. 13. Dependency Injection Mechanics (concept) \u00b6 How Spring resolves dependencies. Bean scopes, qualifiers, primaries. Circular dependencies and lazy initialization. 14. How Annotations Drive Spring (concept) \u00b6 Annotations as configuration language. Scanning and metadata parsing. Comparison to XML config. 15. JRE, JVM, JDK Differences (concept) \u00b6 Short overview: JDK = development kit, JRE = runtime environment, JVM = execution engine. Which one includes which. \ud83e\udde0 How to Write Them \u00b6 Cheatsheets : fast lookup; short examples, commands, diagrams. Concepts : calm explanations; analogies and short code snippets. Keep each file self-contained \u2014 someone reading it six months later should not need context. docs(algomonster): add problem \"parking spot\" descriptions for \"OOP Design\" section. feat(playing-cards-java): add practice implementation with solution and tests.","title":"\ud83d\udcda Java Reflection &amp; Class Loading Cheatsheet and Concept Blueprint"},{"location":"concepts/languages/java/_meta/blueprint/#java-reflection-class-loading-cheatsheet-and-concept-blueprint","text":"","title":"\ud83d\udcda Java Reflection &amp; Class Loading Cheatsheet and Concept Blueprint"},{"location":"concepts/languages/java/_meta/blueprint/#suggested-folder-layout","text":"docs/ \u2514\u2500 cheatsheets/ \u251c\u2500 languages/ \u2502 \u2514\u2500 java/ \u2502 \u251c\u2500 core/ \u2502 \u2502 \u251c\u2500 reflection-basics.md \u2502 \u2502 \u251c\u2500 classpath-and-classloader.md \u2502 \u2502 \u251c\u2500 annotations.md \u2502 \u2502 \u251c\u2500 jvm-runtime-environment.md \u2502 \u2502 \u2514\u2500 bytecode-and-compilation-flow.md \u2502 \u251c\u2500 spring/ \u2502 \u2502 \u251c\u2500 spring-reflection-and-autowired.md \u2502 \u2502 \u251c\u2500 spring-bean-lifecycle.md \u2502 \u2502 \u251c\u2500 spring-context-loading.md \u2502 \u2502 \u2514\u2500 spring-boot-run-sequence.md \u2502 \u2514\u2500 advanced/ \u2502 \u251c\u2500 custom-classloader-example.md \u2502 \u2514\u2500 hot-reload-concept.md \u2514\u2500 concepts/ \u251c\u2500 java/ \u2502 \u251c\u2500 what-is-reflection.md \u2502 \u251c\u2500 how-jvm-loads-classes.md \u2502 \u251c\u2500 runtime-vs-compile-time.md \u2502 \u2514\u2500 jre-jvm-jdk-differences.md \u2514\u2500 spring/ \u251c\u2500 why-spring-uses-reflection.md \u251c\u2500 dependency-injection-mechanics.md \u2514\u2500 how-annotations-drive-spring.md","title":"\ud83e\udde9 Suggested Folder Layout"},{"location":"concepts/languages/java/_meta/blueprint/#content-breakdown-and-key-ideas","text":"","title":"\ud83e\udded Content Breakdown and Key Ideas"},{"location":"concepts/languages/java/_meta/blueprint/#1-reflection-basics-cheatsheet","text":"Focus: Practical syntax and examples. Sections: What reflection is. Core classes ( Class , Field , Method , Constructor ). Reading annotations. Creating instances with reflection. When to use / not to use.","title":"1. Reflection Basics (cheatsheet)"},{"location":"concepts/languages/java/_meta/blueprint/#2-what-is-reflection-concept","text":"Focus: Explanation in plain language. Idea: Java program inspecting itself. Why frameworks need it. Example of simple use ( Class.forName , .newInstance() ). Advantages and trade-offs.","title":"2. What Is Reflection (concept)"},{"location":"concepts/languages/java/_meta/blueprint/#3-classpath-classloader-cheatsheet","text":"Focus: Practical reference. What \u201cclasspath\u201d means. Compile vs runtime classpath. java -cp , Maven/Gradle defaults. Layers of class loaders (bootstrap, platform, app). Typical errors ( ClassNotFoundException , NoClassDefFoundError ).","title":"3. Classpath &amp; ClassLoader (cheatsheet)"},{"location":"concepts/languages/java/_meta/blueprint/#4-how-jvm-loads-classes-concept","text":"Focus: Mechanism & lifecycle. Step-by-step from command to main . Class loading, linking, initialization. ClassLoader hierarchy. When reflection happens during loading.","title":"4. How JVM Loads Classes (concept)"},{"location":"concepts/languages/java/_meta/blueprint/#5-jvm-runtime-environment-cheatsheet","text":"JVM vs JRE vs JDK. Runtime memory areas (heap, method area, stack). Execution process (load \u2192 verify \u2192 execute).","title":"5. JVM Runtime Environment (cheatsheet)"},{"location":"concepts/languages/java/_meta/blueprint/#6-spring-boot-run-sequence-cheatsheet","text":"Show the journey of SpringApplication.run() : Bootstrapping context. Component scan. Bean creation. Dependency injection. Ready state.","title":"6. Spring Boot Run Sequence (cheatsheet)"},{"location":"concepts/languages/java/_meta/blueprint/#7-spring-reflection-autowired-cheatsheet","text":"How Spring reads annotations via reflection. How fields and constructors are injected. Order of resolution ( @Primary , @Qualifier , type match). Simplified pseudo-code for reflection steps.","title":"7. Spring Reflection &amp; @Autowired (cheatsheet)"},{"location":"concepts/languages/java/_meta/blueprint/#8-why-spring-uses-reflection-concept","text":"Dynamic discovery instead of hard-coding. Annotations as metadata. Inversion of Control (IoC). Trade-offs (speed, safety).","title":"8. Why Spring Uses Reflection (concept)"},{"location":"concepts/languages/java/_meta/blueprint/#9-custom-classloader-example-advanced-cheatsheet","text":"Minimal example code of a class loader. Step-by-step description of defineClass . Use case in plugin systems or frameworks.","title":"9. Custom ClassLoader Example (advanced cheatsheet)"},{"location":"concepts/languages/java/_meta/blueprint/#10-hot-reload-concept-advanced-concept","text":"How reloading works (new class loader, drop old references). Relation to Spring Boot DevTools and Tomcat. Memory & isolation considerations.","title":"10. Hot Reload Concept (advanced concept)"},{"location":"concepts/languages/java/_meta/blueprint/#11-runtime-vs-compile-time-concept","text":"Difference in who \u201cknows\u201d what when. Why reflection and annotations belong to runtime. How compile-time tools (e.g., Lombok) differ.","title":"11. Runtime vs Compile-time (concept)"},{"location":"concepts/languages/java/_meta/blueprint/#12-bean-lifecycle-cheatsheet","text":"Creation \u2192 dependency injection \u2192 initialization \u2192 destruction. Hooks ( @PostConstruct , @PreDestroy ). Where reflection enters each phase.","title":"12. Bean Lifecycle (cheatsheet)"},{"location":"concepts/languages/java/_meta/blueprint/#13-dependency-injection-mechanics-concept","text":"How Spring resolves dependencies. Bean scopes, qualifiers, primaries. Circular dependencies and lazy initialization.","title":"13. Dependency Injection Mechanics (concept)"},{"location":"concepts/languages/java/_meta/blueprint/#14-how-annotations-drive-spring-concept","text":"Annotations as configuration language. Scanning and metadata parsing. Comparison to XML config.","title":"14. How Annotations Drive Spring (concept)"},{"location":"concepts/languages/java/_meta/blueprint/#15-jre-jvm-jdk-differences-concept","text":"Short overview: JDK = development kit, JRE = runtime environment, JVM = execution engine. Which one includes which.","title":"15. JRE, JVM, JDK Differences (concept)"},{"location":"concepts/languages/java/_meta/blueprint/#how-to-write-them","text":"Cheatsheets : fast lookup; short examples, commands, diagrams. Concepts : calm explanations; analogies and short code snippets. Keep each file self-contained \u2014 someone reading it six months later should not need context. docs(algomonster): add problem \"parking spot\" descriptions for \"OOP Design\" section. feat(playing-cards-java): add practice implementation with solution and tests.","title":"\ud83e\udde0 How to Write Them"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/","text":"\u2699\ufe0f Java Runtime & Reflection \u2014 Quick Starter \u00b6 A guided chain from JVM internals \u2192 runtime behavior \u2192 reflection \u2192 Spring magic . 1. JVM \u2014 The Beating Heart of Java \u00b6 The Java Virtual Machine (JVM) is the engine that runs your compiled Java code. It doesn\u2019t run .java source files directly. You write code, the compiler ( javac ) translates it into bytecode ( .class files) , and the JVM interprets or JIT-compiles that bytecode into real CPU instructions. Think of the JVM as: A simulated computer inside your computer . It handles memory, threads, exceptions, and cross-platform behavior. The JVM is platform-dependent , but Java bytecode is platform-independent \u2014 that\u2019s how Java stays \u201cwrite once, run anywhere\u201d. 2. JVM Memory \u2014 Heap and Metaspace \u00b6 Inside the JVM, memory is divided into several regions. The most important: \ud83e\udde0 Heap \u00b6 Where objects live . Created when you use new . Garbage Collected (GC) when no references remain. Divided into generations: Young (Eden + Survivor) and Old (Tenured) space. \ud83d\udcd8 Metaspace \u00b6 Where class metadata lives (replaced \u201cPermGen\u201d from Java 8+). Stores the structure of each loaded class (its methods, fields, annotations, etc.). Grows dynamically; not part of the heap. \ud83e\udde9 Others (for completeness) \u00b6 Stack \u2014 each thread gets its own, holds method calls and local variables. PC Register \u2014 keeps track of which instruction a thread is executing. Native Method Area \u2014 used when calling C/C++ code through JNI. 3. Object \u2014 The Root of Everything \u00b6 Everything that lives on the heap is an Object (or derived from it). Object is the universal superclass \u2014 the ancestor of all Java classes. It defines the methods that all Java entities inherit: toString() , equals() , hashCode() , etc. When you create an object: User user = new User ( \"Alice\" ); You\u2019re creating an instance in the heap, and the JVM knows which class definition it belongs to \u2014 that definition lives in Metaspace . 4. Class<?> \u2014 The Blueprint of a Type \u00b6 Every loaded class in Java has a corresponding Class<?> object in memory. This object lives in the Metaspace and acts like the blueprint for all instances of that type. You can access it like this: Class <?> clazz = User . class ; This clazz object contains: The class\u2019s name Methods Fields Constructors Annotations And the ClassLoader that loaded it This is the foundation of reflection \u2014 it lets you inspect and modify code at runtime . 5. ClassLoader \u2014 The Bridge Between Disk and Memory \u00b6 The ClassLoader is what loads class bytecode into memory and turns it into Class<?> objects. Hierarchy of loaders: Bootstrap \u2014 loads core JDK classes (like java.lang.* ) Platform \u2014 loads extension libraries Application \u2014 loads your app\u2019s classes from the classpath (Sometimes frameworks create custom loaders \u2014 like in Spring Boot or Tomcat) Think of ClassLoader as: The librarian that finds your .class file, reads it, and registers its \u201cblueprint\u201d in Metaspace. You can even get it: ClassLoader loader = User . class . getClassLoader (); 6. Reflection \u2014 Java Looking at Itself \u00b6 Reflection lets your code inspect and manipulate itself at runtime. Using the Class<?> object, you can: List all methods, fields, and constructors. Get or set field values dynamically. Call methods by name (even private ones, if you bypass access checks). Example: Class <?> clazz = User . class ; Method m = clazz . getMethod ( \"getName\" ); Object result = m . invoke ( new User ( \"Alice\" )); That line means: \u201cFind method getName in class User and call it.\u201d Reflection is powerful but also slower and riskier , because it bypasses compile-time checks. 7. JDK, JRE, and JVM \u2014 The Holy Trinity \u00b6 To run Java programs, you need these three players: Component What it is Contains JVM The virtual machine Executes bytecode JRE (Java Runtime Environment) JVM + core libraries Lets you run programs JDK (Java Development Kit) JRE + compiler + tools Lets you build programs So: If you only run apps \u2192 you need JRE. If you develop apps \u2192 you need JDK. JVM is what\u2019s actually executing inside both. 8. Spring \u2014 Reflection as a Superpower \u00b6 Spring is built on top of the reflection and classloading mechanisms. How it uses reflection: \u00b6 Dependency Injection (DI) \u2014 Finds constructors, fields, and methods annotated with @Autowired , and injects dependencies dynamically. Annotation Scanning \u2014 Uses reflection to detect annotations like @Component , @Service , etc. Proxy Creation (AOP) \u2014 Dynamically wraps beans with proxy classes at runtime. Configuration \u2014 Reads @Configuration and @Bean annotations to register beans in the ApplicationContext. When Spring starts, it: Scans your classpath Uses ClassLoaders to find .class files Builds a map of all annotated classes (via reflection) Creates bean instances and wires them together So Spring is basically a meta-program that analyzes and constructs your program using the very same JVM tools you\u2019ve now met. 9. Putting It All Together \u2014 The Flow \u00b6 source code (.java) \u2193 javac bytecode (.class) \u2193 ClassLoader Class<?> in Metaspace \u2193 Reflection Objects on Heap \u2193 Framework Magic Spring uses Reflection \u2192 Builds App Context \u2192 Injects Dependencies Everything connects: JVM runs the show Heap stores living instances Metaspace stores their blueprints ClassLoader loads those blueprints Reflection lets code see and shape those blueprints Spring automates that reflection to build entire systems dynamically Final Thought \u00b6 Java was designed for portability and safety , yet its runtime is flexible enough to rewrite its own behavior on the fly. That balance \u2014 rigid typing at compile-time, elastic introspection at runtime \u2014 is what allows frameworks like Spring to exist at all. \ud83e\udded Java Runtime & Reflection \u2014 Comprehensive Quick Starter \u00b6 A journey from the inner gears of the JVM to the elegant machinery of Spring , connecting how memory, class loading, and reflection form the foundation of modern Java. 1. JVM \u2014 The Living Machine Beneath Java \u00b6 When you run a Java program, you\u2019re not running it directly on your CPU. Your code first gets compiled into bytecode , an intermediate language designed not for any particular processor, but for a virtual one : the Java Virtual Machine, or JVM . The JVM is the living organism at the center of all Java execution. It is the software abstraction of a computer \u2014 complete with memory management, execution engine, garbage collector, and a few tricks that physical CPUs can\u2019t even dream of. It reads .class files, interprets or JIT-compiles them into native instructions, and handles all the lower-level chaos: memory allocation, stack frames, threading, and exception handling. Its most remarkable property is portability . You can compile your Java program once and run it anywhere a JVM exists \u2014 on Windows, Linux, macOS, Android, or even embedded devices. The physical hardware disappears; what remains is a consistent, predictable virtual world. 2. JVM Memory \u2014 The World Inside the Machine \u00b6 Like any living system, the JVM has organs \u2014 specialized memory areas that keep everything running. The Heap \u2014 The Space of Living Objects \u00b6 The heap is where every object you create with new lives. It\u2019s dynamic, expanding and contracting as objects are born and die. The garbage collector roams this space, reclaiming memory from objects that no longer have references. To keep things efficient, the heap is divided into regions: Young Generation , where newborn objects are allocated. Old Generation , where survivors of many GC cycles live longer lives. Metaspace \u2014 Where Blueprints Reside \u00b6 If the heap holds the living objects, Metaspace holds their blueprints . When the JVM loads a class, its structure \u2014 fields, methods, annotations \u2014 is stored in Metaspace. Unlike the old PermGen space, Metaspace grows dynamically, constrained only by system memory. Every class in Java has a single shared representation in Metaspace. All instances (the objects on the heap) refer back to that single blueprint. Stacks and Other Regions \u00b6 Each thread has its own stack , which holds local variables and method call frames. There\u2019s also the Program Counter (PC) register , keeping track of which bytecode instruction a thread is executing. And then there\u2019s the native method area , where code written in C/C++ and called via JNI resides. All these parts work together like organs in a body \u2014 the heap breathing objects in and out, the stack pulsing with method calls, and Metaspace serving as the collective memory of what \"things\" exist. 3. Object \u2014 The First Citizen of the Heap \u00b6 In Java, everything that exists in the heap \u2014 every String , every ArrayList , every User \u2014 ultimately descends from one ancestor: java.lang.Object . That single class is the root of the entire Java type system. It defines the fundamental behaviors shared by all entities \u2014 the ability to be compared ( equals ), described ( toString ), and hashed ( hashCode ). When you write: User user = new User ( \"Alice\" ); you\u2019re creating an instance , an individual thing in the heap that conforms to the blueprint of the User class stored in Metaspace. The JVM knows exactly which blueprint this object follows and which methods it can use, because of the internal pointer from the object\u2019s header to its class metadata. That connection between object instance and class blueprint is the bridge between the runtime world (heap) and the static world (code). 4. Class<?> \u2014 The Blueprint of Existence \u00b6 When Java loads a class, it creates a special object in Metaspace: an instance of java.lang.Class . Yes, the definition of a class is itself represented by an object. This is one of Java\u2019s most elegant ideas \u2014 everything, even types, is data . You can get hold of it like this: Class <?> clazz = User . class ; That clazz object carries every detail about the class: its name, modifiers, methods, fields, annotations, constructors, and which loader brought it into existence. This is why the type parameter looks odd \u2014 Class<?> . The question mark ( ? ) means \u201cI don\u2019t know what specific type this represents, but it\u2019s a class of something .\u201d Each loaded class has exactly one Class object representing it. All instances of that class refer back to the same Class object. That\u2019s how the JVM maintains order and consistency: a single canonical definition per loaded type. 5. ClassLoader \u2014 The Librarian of the JVM \u00b6 Where do those Class<?> blueprints come from? From the ClassLoader , Java\u2019s librarian. The ClassLoader is responsible for finding .class files, reading their bytecode, and turning them into live Class objects stored in Metaspace. There isn\u2019t just one \u2014 ClassLoaders form a hierarchy : Bootstrap Loader loads core Java classes from the JDK ( java.lang , java.util , etc.). Platform Loader loads JDK extensions and libraries. Application Loader loads your project\u2019s classes from the classpath. Frameworks often create custom classloaders \u2014 for example, Tomcat and Spring Boot both do this to isolate applications or support hot reloading. When a class is needed, the JVM asks the appropriate ClassLoader: \u201cDo you have this one?\u201d If not, it delegates to its parent. Only when the parent can\u2019t provide it does it load the class itself. This mechanism guarantees that system classes remain consistent while still allowing user code to define its own world. 6. Reflection \u2014 Java Examining Itself \u00b6 Reflection is Java\u2019s self-awareness. It\u2019s the ability of a running program to inspect and manipulate its own structure \u2014 to look at classes, methods, and fields, and even invoke them dynamically. This capability comes from those Class<?> objects sitting in Metaspace. Once you have a Class<?> , you can start exploring: Class <?> clazz = User . class ; Method m = clazz . getDeclaredMethod ( \"getName\" ); Object result = m . invoke ( new User ( \"Alice\" )); This is Java code calling methods by name , discovered at runtime, not compile time. It\u2019s slower and more dangerous \u2014 because you lose static type safety \u2014 but extraordinarily powerful. Reflection enables frameworks to perform meta-programming : code that writes or modifies other code dynamically. 7. JDK, JRE, and JVM \u2014 The Trinity of Execution \u00b6 At this point it\u2019s worth separating the pieces you install and run: The JVM is the core engine that executes bytecode. The JRE (Java Runtime Environment) packages the JVM with standard libraries and runtime support \u2014 enough to run Java applications. The JDK (Java Development Kit) includes everything in the JRE plus compilers ( javac ), debugging tools, and build utilities \u2014 enough to develop applications. So: Users of Java programs need the JRE . Developers of Java programs need the JDK . Both rely on the JVM , which is where the bytecode lives and breathes. They form a nested hierarchy: JDK = JRE + compiler + tools JRE = JVM + standard libraries 8. Spring \u2014 Reflection Turned Into Engineering \u00b6 Everything that Spring does \u2014 dependency injection, configuration, AOP \u2014 rests on reflection and classloading. When you start a Spring application, it performs a grand act of introspection : It scans the classpath , asking ClassLoaders to enumerate every .class file available. It uses reflection to inspect those classes for specific annotations: @Component , @Service , @Controller , @Configuration . It constructs an internal registry (the ApplicationContext ) that maps out all known classes and their dependencies. It instantiates those classes dynamically using reflection, often injecting one into another using constructor or field injection. It sometimes wraps them in proxies \u2014 dynamic subclasses or interfaces that intercept method calls to provide extra behavior (like transaction management or logging). Every piece of this process \u2014 scanning, loading, wiring \u2014 depends on the JVM\u2019s built-in meta-system. Spring is not magic; it\u2019s a disciplined orchestration of classloaders, metadata, and reflection. It turns static code into a living, configurable organism . 9. The Whole Flow \u2014 From Code to Context \u00b6 Here\u2019s the conceptual journey in one unbroken line: You write .java source files. javac compiles them into .class bytecode. ClassLoaders pull that bytecode into the JVM and store class metadata in Metaspace. The JVM uses those blueprints to create objects on the heap. Reflection allows runtime access and modification of those blueprints. Spring leverages reflection to wire up and manage those objects automatically. The entire stack \u2014 from low-level memory regions to high-level frameworks \u2014 is one continuous spectrum. The heap is the living matter. Metaspace is the genetic code. ClassLoaders are the reproduction system. Reflection is the consciousness. Spring is the civilization that emerges on top. 10. Why It Matters \u00b6 Understanding this chain transforms how you read errors, optimize performance, and design systems. When you see a ClassNotFoundException , you know it\u2019s a ClassLoader problem . When you hit OutOfMemoryError: Metaspace , you know it\u2019s a class metadata leak , not a heap issue. When you step into a Spring bean and see it\u2019s a proxy class, you can trace the reflection trail back to the original. At its best, Java is not just a language \u2014 it\u2019s a small self-contained universe. Its runtime introspection gives it a quality rarely found in compiled languages: the ability to evolve itself at runtime. That\u2019s what makes Spring, Hibernate, and every major framework possible.","title":"Java Runtime & Reflection"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#java-runtime-reflection-quick-starter","text":"A guided chain from JVM internals \u2192 runtime behavior \u2192 reflection \u2192 Spring magic .","title":"\u2699\ufe0f Java Runtime &amp; Reflection \u2014 Quick Starter"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#1-jvm-the-beating-heart-of-java","text":"The Java Virtual Machine (JVM) is the engine that runs your compiled Java code. It doesn\u2019t run .java source files directly. You write code, the compiler ( javac ) translates it into bytecode ( .class files) , and the JVM interprets or JIT-compiles that bytecode into real CPU instructions. Think of the JVM as: A simulated computer inside your computer . It handles memory, threads, exceptions, and cross-platform behavior. The JVM is platform-dependent , but Java bytecode is platform-independent \u2014 that\u2019s how Java stays \u201cwrite once, run anywhere\u201d.","title":"1. JVM \u2014 The Beating Heart of Java"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#2-jvm-memory-heap-and-metaspace","text":"Inside the JVM, memory is divided into several regions. The most important:","title":"2. JVM Memory \u2014 Heap and Metaspace"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#heap","text":"Where objects live . Created when you use new . Garbage Collected (GC) when no references remain. Divided into generations: Young (Eden + Survivor) and Old (Tenured) space.","title":"\ud83e\udde0 Heap"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#metaspace","text":"Where class metadata lives (replaced \u201cPermGen\u201d from Java 8+). Stores the structure of each loaded class (its methods, fields, annotations, etc.). Grows dynamically; not part of the heap.","title":"\ud83d\udcd8 Metaspace"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#others-for-completeness","text":"Stack \u2014 each thread gets its own, holds method calls and local variables. PC Register \u2014 keeps track of which instruction a thread is executing. Native Method Area \u2014 used when calling C/C++ code through JNI.","title":"\ud83e\udde9 Others (for completeness)"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#3-object-the-root-of-everything","text":"Everything that lives on the heap is an Object (or derived from it). Object is the universal superclass \u2014 the ancestor of all Java classes. It defines the methods that all Java entities inherit: toString() , equals() , hashCode() , etc. When you create an object: User user = new User ( \"Alice\" ); You\u2019re creating an instance in the heap, and the JVM knows which class definition it belongs to \u2014 that definition lives in Metaspace .","title":"3. Object \u2014 The Root of Everything"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#4-class-the-blueprint-of-a-type","text":"Every loaded class in Java has a corresponding Class<?> object in memory. This object lives in the Metaspace and acts like the blueprint for all instances of that type. You can access it like this: Class <?> clazz = User . class ; This clazz object contains: The class\u2019s name Methods Fields Constructors Annotations And the ClassLoader that loaded it This is the foundation of reflection \u2014 it lets you inspect and modify code at runtime .","title":"4. Class&lt;?&gt; \u2014 The Blueprint of a Type"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#5-classloader-the-bridge-between-disk-and-memory","text":"The ClassLoader is what loads class bytecode into memory and turns it into Class<?> objects. Hierarchy of loaders: Bootstrap \u2014 loads core JDK classes (like java.lang.* ) Platform \u2014 loads extension libraries Application \u2014 loads your app\u2019s classes from the classpath (Sometimes frameworks create custom loaders \u2014 like in Spring Boot or Tomcat) Think of ClassLoader as: The librarian that finds your .class file, reads it, and registers its \u201cblueprint\u201d in Metaspace. You can even get it: ClassLoader loader = User . class . getClassLoader ();","title":"5. ClassLoader \u2014 The Bridge Between Disk and Memory"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#6-reflection-java-looking-at-itself","text":"Reflection lets your code inspect and manipulate itself at runtime. Using the Class<?> object, you can: List all methods, fields, and constructors. Get or set field values dynamically. Call methods by name (even private ones, if you bypass access checks). Example: Class <?> clazz = User . class ; Method m = clazz . getMethod ( \"getName\" ); Object result = m . invoke ( new User ( \"Alice\" )); That line means: \u201cFind method getName in class User and call it.\u201d Reflection is powerful but also slower and riskier , because it bypasses compile-time checks.","title":"6. Reflection \u2014 Java Looking at Itself"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#7-jdk-jre-and-jvm-the-holy-trinity","text":"To run Java programs, you need these three players: Component What it is Contains JVM The virtual machine Executes bytecode JRE (Java Runtime Environment) JVM + core libraries Lets you run programs JDK (Java Development Kit) JRE + compiler + tools Lets you build programs So: If you only run apps \u2192 you need JRE. If you develop apps \u2192 you need JDK. JVM is what\u2019s actually executing inside both.","title":"7. JDK, JRE, and JVM \u2014 The Holy Trinity"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#8-spring-reflection-as-a-superpower","text":"Spring is built on top of the reflection and classloading mechanisms.","title":"8. Spring \u2014 Reflection as a Superpower"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#how-it-uses-reflection","text":"Dependency Injection (DI) \u2014 Finds constructors, fields, and methods annotated with @Autowired , and injects dependencies dynamically. Annotation Scanning \u2014 Uses reflection to detect annotations like @Component , @Service , etc. Proxy Creation (AOP) \u2014 Dynamically wraps beans with proxy classes at runtime. Configuration \u2014 Reads @Configuration and @Bean annotations to register beans in the ApplicationContext. When Spring starts, it: Scans your classpath Uses ClassLoaders to find .class files Builds a map of all annotated classes (via reflection) Creates bean instances and wires them together So Spring is basically a meta-program that analyzes and constructs your program using the very same JVM tools you\u2019ve now met.","title":"How it uses reflection:"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#9-putting-it-all-together-the-flow","text":"source code (.java) \u2193 javac bytecode (.class) \u2193 ClassLoader Class<?> in Metaspace \u2193 Reflection Objects on Heap \u2193 Framework Magic Spring uses Reflection \u2192 Builds App Context \u2192 Injects Dependencies Everything connects: JVM runs the show Heap stores living instances Metaspace stores their blueprints ClassLoader loads those blueprints Reflection lets code see and shape those blueprints Spring automates that reflection to build entire systems dynamically","title":"9. Putting It All Together \u2014 The Flow"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#final-thought","text":"Java was designed for portability and safety , yet its runtime is flexible enough to rewrite its own behavior on the fly. That balance \u2014 rigid typing at compile-time, elastic introspection at runtime \u2014 is what allows frameworks like Spring to exist at all.","title":"Final Thought"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#java-runtime-reflection-comprehensive-quick-starter","text":"A journey from the inner gears of the JVM to the elegant machinery of Spring , connecting how memory, class loading, and reflection form the foundation of modern Java.","title":"\ud83e\udded Java Runtime &amp; Reflection \u2014 Comprehensive Quick Starter"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#1-jvm-the-living-machine-beneath-java","text":"When you run a Java program, you\u2019re not running it directly on your CPU. Your code first gets compiled into bytecode , an intermediate language designed not for any particular processor, but for a virtual one : the Java Virtual Machine, or JVM . The JVM is the living organism at the center of all Java execution. It is the software abstraction of a computer \u2014 complete with memory management, execution engine, garbage collector, and a few tricks that physical CPUs can\u2019t even dream of. It reads .class files, interprets or JIT-compiles them into native instructions, and handles all the lower-level chaos: memory allocation, stack frames, threading, and exception handling. Its most remarkable property is portability . You can compile your Java program once and run it anywhere a JVM exists \u2014 on Windows, Linux, macOS, Android, or even embedded devices. The physical hardware disappears; what remains is a consistent, predictable virtual world.","title":"1. JVM \u2014 The Living Machine Beneath Java"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#2-jvm-memory-the-world-inside-the-machine","text":"Like any living system, the JVM has organs \u2014 specialized memory areas that keep everything running.","title":"2. JVM Memory \u2014 The World Inside the Machine"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#the-heap-the-space-of-living-objects","text":"The heap is where every object you create with new lives. It\u2019s dynamic, expanding and contracting as objects are born and die. The garbage collector roams this space, reclaiming memory from objects that no longer have references. To keep things efficient, the heap is divided into regions: Young Generation , where newborn objects are allocated. Old Generation , where survivors of many GC cycles live longer lives.","title":"The Heap \u2014 The Space of Living Objects"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#metaspace-where-blueprints-reside","text":"If the heap holds the living objects, Metaspace holds their blueprints . When the JVM loads a class, its structure \u2014 fields, methods, annotations \u2014 is stored in Metaspace. Unlike the old PermGen space, Metaspace grows dynamically, constrained only by system memory. Every class in Java has a single shared representation in Metaspace. All instances (the objects on the heap) refer back to that single blueprint.","title":"Metaspace \u2014 Where Blueprints Reside"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#stacks-and-other-regions","text":"Each thread has its own stack , which holds local variables and method call frames. There\u2019s also the Program Counter (PC) register , keeping track of which bytecode instruction a thread is executing. And then there\u2019s the native method area , where code written in C/C++ and called via JNI resides. All these parts work together like organs in a body \u2014 the heap breathing objects in and out, the stack pulsing with method calls, and Metaspace serving as the collective memory of what \"things\" exist.","title":"Stacks and Other Regions"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#3-object-the-first-citizen-of-the-heap","text":"In Java, everything that exists in the heap \u2014 every String , every ArrayList , every User \u2014 ultimately descends from one ancestor: java.lang.Object . That single class is the root of the entire Java type system. It defines the fundamental behaviors shared by all entities \u2014 the ability to be compared ( equals ), described ( toString ), and hashed ( hashCode ). When you write: User user = new User ( \"Alice\" ); you\u2019re creating an instance , an individual thing in the heap that conforms to the blueprint of the User class stored in Metaspace. The JVM knows exactly which blueprint this object follows and which methods it can use, because of the internal pointer from the object\u2019s header to its class metadata. That connection between object instance and class blueprint is the bridge between the runtime world (heap) and the static world (code).","title":"3. Object \u2014 The First Citizen of the Heap"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#4-class-the-blueprint-of-existence","text":"When Java loads a class, it creates a special object in Metaspace: an instance of java.lang.Class . Yes, the definition of a class is itself represented by an object. This is one of Java\u2019s most elegant ideas \u2014 everything, even types, is data . You can get hold of it like this: Class <?> clazz = User . class ; That clazz object carries every detail about the class: its name, modifiers, methods, fields, annotations, constructors, and which loader brought it into existence. This is why the type parameter looks odd \u2014 Class<?> . The question mark ( ? ) means \u201cI don\u2019t know what specific type this represents, but it\u2019s a class of something .\u201d Each loaded class has exactly one Class object representing it. All instances of that class refer back to the same Class object. That\u2019s how the JVM maintains order and consistency: a single canonical definition per loaded type.","title":"4. Class&lt;?&gt; \u2014 The Blueprint of Existence"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#5-classloader-the-librarian-of-the-jvm","text":"Where do those Class<?> blueprints come from? From the ClassLoader , Java\u2019s librarian. The ClassLoader is responsible for finding .class files, reading their bytecode, and turning them into live Class objects stored in Metaspace. There isn\u2019t just one \u2014 ClassLoaders form a hierarchy : Bootstrap Loader loads core Java classes from the JDK ( java.lang , java.util , etc.). Platform Loader loads JDK extensions and libraries. Application Loader loads your project\u2019s classes from the classpath. Frameworks often create custom classloaders \u2014 for example, Tomcat and Spring Boot both do this to isolate applications or support hot reloading. When a class is needed, the JVM asks the appropriate ClassLoader: \u201cDo you have this one?\u201d If not, it delegates to its parent. Only when the parent can\u2019t provide it does it load the class itself. This mechanism guarantees that system classes remain consistent while still allowing user code to define its own world.","title":"5. ClassLoader \u2014 The Librarian of the JVM"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#6-reflection-java-examining-itself","text":"Reflection is Java\u2019s self-awareness. It\u2019s the ability of a running program to inspect and manipulate its own structure \u2014 to look at classes, methods, and fields, and even invoke them dynamically. This capability comes from those Class<?> objects sitting in Metaspace. Once you have a Class<?> , you can start exploring: Class <?> clazz = User . class ; Method m = clazz . getDeclaredMethod ( \"getName\" ); Object result = m . invoke ( new User ( \"Alice\" )); This is Java code calling methods by name , discovered at runtime, not compile time. It\u2019s slower and more dangerous \u2014 because you lose static type safety \u2014 but extraordinarily powerful. Reflection enables frameworks to perform meta-programming : code that writes or modifies other code dynamically.","title":"6. Reflection \u2014 Java Examining Itself"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#7-jdk-jre-and-jvm-the-trinity-of-execution","text":"At this point it\u2019s worth separating the pieces you install and run: The JVM is the core engine that executes bytecode. The JRE (Java Runtime Environment) packages the JVM with standard libraries and runtime support \u2014 enough to run Java applications. The JDK (Java Development Kit) includes everything in the JRE plus compilers ( javac ), debugging tools, and build utilities \u2014 enough to develop applications. So: Users of Java programs need the JRE . Developers of Java programs need the JDK . Both rely on the JVM , which is where the bytecode lives and breathes. They form a nested hierarchy: JDK = JRE + compiler + tools JRE = JVM + standard libraries","title":"7. JDK, JRE, and JVM \u2014 The Trinity of Execution"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#8-spring-reflection-turned-into-engineering","text":"Everything that Spring does \u2014 dependency injection, configuration, AOP \u2014 rests on reflection and classloading. When you start a Spring application, it performs a grand act of introspection : It scans the classpath , asking ClassLoaders to enumerate every .class file available. It uses reflection to inspect those classes for specific annotations: @Component , @Service , @Controller , @Configuration . It constructs an internal registry (the ApplicationContext ) that maps out all known classes and their dependencies. It instantiates those classes dynamically using reflection, often injecting one into another using constructor or field injection. It sometimes wraps them in proxies \u2014 dynamic subclasses or interfaces that intercept method calls to provide extra behavior (like transaction management or logging). Every piece of this process \u2014 scanning, loading, wiring \u2014 depends on the JVM\u2019s built-in meta-system. Spring is not magic; it\u2019s a disciplined orchestration of classloaders, metadata, and reflection. It turns static code into a living, configurable organism .","title":"8. Spring \u2014 Reflection Turned Into Engineering"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#9-the-whole-flow-from-code-to-context","text":"Here\u2019s the conceptual journey in one unbroken line: You write .java source files. javac compiles them into .class bytecode. ClassLoaders pull that bytecode into the JVM and store class metadata in Metaspace. The JVM uses those blueprints to create objects on the heap. Reflection allows runtime access and modification of those blueprints. Spring leverages reflection to wire up and manage those objects automatically. The entire stack \u2014 from low-level memory regions to high-level frameworks \u2014 is one continuous spectrum. The heap is the living matter. Metaspace is the genetic code. ClassLoaders are the reproduction system. Reflection is the consciousness. Spring is the civilization that emerges on top.","title":"9. The Whole Flow \u2014 From Code to Context"},{"location":"concepts/languages/java/core/00-java-runtime-and-reflection/#10-why-it-matters","text":"Understanding this chain transforms how you read errors, optimize performance, and design systems. When you see a ClassNotFoundException , you know it\u2019s a ClassLoader problem . When you hit OutOfMemoryError: Metaspace , you know it\u2019s a class metadata leak , not a heap issue. When you step into a Spring bean and see it\u2019s a proxy class, you can trace the reflection trail back to the original. At its best, Java is not just a language \u2014 it\u2019s a small self-contained universe. Its runtime introspection gives it a quality rarely found in compiled languages: the ability to evolve itself at runtime. That\u2019s what makes Spring, Hibernate, and every major framework possible.","title":"10. Why It Matters"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/","text":"Understanding the difference between Object and Class<?> in Java \u00b6 \ud83e\udde9 The core distinction \u00b6 Concept What it represents Lives in Object A real instance in memory \u2014 data + state Heap Class<?> A blueprint description of what such objects look like Metaspace So: Object = the actual building Class<?> = the architectural drawing They are not the same thing \u2014 but every building knows which blueprint it came from. \ud83e\udde0 Step-by-step mental model \u00b6 Let\u2019s take a real example. User u = new User (); Behind the scenes, the JVM does something like this: Finds the Class<?> object for User in memory (in metaspace). This contains metadata: field names, method signatures, superclass, annotations, etc. Uses that metadata to allocate a new object on the heap. Returns a reference to that new instance \u2014 the User u you just created. So the runtime chain looks like: User.class \u2192 (blueprint in metaspace) \u2193 new User() \u2192 (object instance on heap) The JVM connects them internally: every Object secretly carries a pointer to its Class<?> (that\u2019s what makes obj.getClass() work!) \ud83e\udde0 The invisible bridge: getClass() \u00b6 User u = new User (); Class <?> c = u . getClass (); u is the instance ( Object ) c is the metadata ( Class<?> ) You\u2019ve just walked up the bridge between the heap (where data lives) and metaspace (where structure lives). Now you can inspect the blueprint of that living object \u2014 its class. \ud83e\udde9 3 layers of existence \u00b6 Here\u2019s how the JVM world is structured: Source code (.java) \u2193 compile Bytecode (.class) \u2193 load by ClassLoader Class<?> object (in metaspace) \u2190 blueprint \u2193 Object instance (on heap) \u2190 real thing Each layer depends on the one above it. .java = textual idea .class = bytecode instructions Class<?> = JVM\u2019s parsed description of that type Object = live thing built from that description \ud83e\udde9 How they interact \u00b6 Operation Who\u2019s involved Description new User() Class + Object Uses metadata to create a new instance obj.getClass() Object \u2192 Class Returns blueprint describing the instance Reflection ( clazz.getMethods() ) Class Reads metadata about possible actions Method call ( obj.login() ) Object Executes actual logic using instance data So the Class<?> tells you what an object can do , and the Object is what it\u2019s currently doing (state + behavior). \ud83e\udde9 Analogy \u2014 blueprint and building \u00b6 Concept Analogy Class<?> Blueprint of a house \u2014 defines rooms, layout, design Object A real house built from that blueprint getClass() Looking at your house\u2019s blueprint stored in city records Reflection Reading that blueprint to inspect details dynamically Each house (object) has a link back to the one blueprint ( Class<?> ) it came from, but the blueprint can describe many houses. \ud83e\udde0 Why people confuse them \u00b6 Because both are \u201cthings that exist at runtime.\u201d When you see User.class , it\u2019s easy to think, \u201cThat\u2019s the User object.\u201d But no \u2014 it\u2019s the description of what a User object should look like. Once you understand that difference, all reflection APIs, serialization frameworks, and even JVM memory diagrams suddenly make sense. \ud83e\udde9 Quick example to visualize both \u00b6 User u1 = new User (); User u2 = new User (); System . out . println ( u1 . getClass () == u2 . getClass ()); // true u1 and u2 are two objects \u2014 two houses. Both point to the same Class<?> object \u2014 one blueprint ( User.class ). There\u2019s only one Class<?> instance per type, shared by all objects of that type. \ud83e\udde9 In memory (simplified diagram) \u00b6 Metaspace (class metadata) \u2514\u2500\u2500 Class<?> User \u251c\u2500\u2500 fields: [id, name, email] \u251c\u2500\u2500 methods: [login(), logout()] \u2514\u2500\u2500 annotations: [@Entity] Heap (actual data) \u251c\u2500\u2500 User@1a2b \u2192 id=1, name=\"Alice\" \u2514\u2500\u2500 User@3c4d \u2192 id=2, name=\"Bob\" User@1a2b and User@3c4d are instances (Objects). They both link back to the same Class<?> User in metaspace. \ud83e\udde9 The hierarchy that connects them \u00b6 All of this still fits inside Java\u2019s single inheritance tree: Object \u2191 User But the metadata describing this inheritance lives inside the Class<?> object, not inside the instances themselves. \u2705 TL;DR Summary \u00b6 Concept What it represents Where it lives Relationship Object A real instance in memory Heap Has state and behavior Class<?> A description of a class Metaspace Blueprint of all instances Link obj.getClass() From heap \u2192 metaspace Returns the metadata Reverse clazz.newInstance() From metaspace \u2192 heap Creates a real object \ud83e\ude9e One-sentence anchor \u00b6 Every Object is a living instance built from a Class<?> blueprint \u2014 and every Class<?> is the JVM\u2019s memory record of how to create and understand such objects.","title":"Object vs Class<?> in Java"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#understanding-the-difference-between-object-and-class-in-java","text":"","title":"Understanding the difference between Object and Class&lt;?&gt; in Java"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#the-core-distinction","text":"Concept What it represents Lives in Object A real instance in memory \u2014 data + state Heap Class<?> A blueprint description of what such objects look like Metaspace So: Object = the actual building Class<?> = the architectural drawing They are not the same thing \u2014 but every building knows which blueprint it came from.","title":"\ud83e\udde9 The core distinction"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#step-by-step-mental-model","text":"Let\u2019s take a real example. User u = new User (); Behind the scenes, the JVM does something like this: Finds the Class<?> object for User in memory (in metaspace). This contains metadata: field names, method signatures, superclass, annotations, etc. Uses that metadata to allocate a new object on the heap. Returns a reference to that new instance \u2014 the User u you just created. So the runtime chain looks like: User.class \u2192 (blueprint in metaspace) \u2193 new User() \u2192 (object instance on heap) The JVM connects them internally: every Object secretly carries a pointer to its Class<?> (that\u2019s what makes obj.getClass() work!)","title":"\ud83e\udde0 Step-by-step mental model"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#the-invisible-bridge-getclass","text":"User u = new User (); Class <?> c = u . getClass (); u is the instance ( Object ) c is the metadata ( Class<?> ) You\u2019ve just walked up the bridge between the heap (where data lives) and metaspace (where structure lives). Now you can inspect the blueprint of that living object \u2014 its class.","title":"\ud83e\udde0 The invisible bridge: getClass()"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#3-layers-of-existence","text":"Here\u2019s how the JVM world is structured: Source code (.java) \u2193 compile Bytecode (.class) \u2193 load by ClassLoader Class<?> object (in metaspace) \u2190 blueprint \u2193 Object instance (on heap) \u2190 real thing Each layer depends on the one above it. .java = textual idea .class = bytecode instructions Class<?> = JVM\u2019s parsed description of that type Object = live thing built from that description","title":"\ud83e\udde9 3 layers of existence"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#how-they-interact","text":"Operation Who\u2019s involved Description new User() Class + Object Uses metadata to create a new instance obj.getClass() Object \u2192 Class Returns blueprint describing the instance Reflection ( clazz.getMethods() ) Class Reads metadata about possible actions Method call ( obj.login() ) Object Executes actual logic using instance data So the Class<?> tells you what an object can do , and the Object is what it\u2019s currently doing (state + behavior).","title":"\ud83e\udde9 How they interact"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#analogy-blueprint-and-building","text":"Concept Analogy Class<?> Blueprint of a house \u2014 defines rooms, layout, design Object A real house built from that blueprint getClass() Looking at your house\u2019s blueprint stored in city records Reflection Reading that blueprint to inspect details dynamically Each house (object) has a link back to the one blueprint ( Class<?> ) it came from, but the blueprint can describe many houses.","title":"\ud83e\udde9 Analogy \u2014 blueprint and building"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#why-people-confuse-them","text":"Because both are \u201cthings that exist at runtime.\u201d When you see User.class , it\u2019s easy to think, \u201cThat\u2019s the User object.\u201d But no \u2014 it\u2019s the description of what a User object should look like. Once you understand that difference, all reflection APIs, serialization frameworks, and even JVM memory diagrams suddenly make sense.","title":"\ud83e\udde0 Why people confuse them"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#quick-example-to-visualize-both","text":"User u1 = new User (); User u2 = new User (); System . out . println ( u1 . getClass () == u2 . getClass ()); // true u1 and u2 are two objects \u2014 two houses. Both point to the same Class<?> object \u2014 one blueprint ( User.class ). There\u2019s only one Class<?> instance per type, shared by all objects of that type.","title":"\ud83e\udde9 Quick example to visualize both"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#in-memory-simplified-diagram","text":"Metaspace (class metadata) \u2514\u2500\u2500 Class<?> User \u251c\u2500\u2500 fields: [id, name, email] \u251c\u2500\u2500 methods: [login(), logout()] \u2514\u2500\u2500 annotations: [@Entity] Heap (actual data) \u251c\u2500\u2500 User@1a2b \u2192 id=1, name=\"Alice\" \u2514\u2500\u2500 User@3c4d \u2192 id=2, name=\"Bob\" User@1a2b and User@3c4d are instances (Objects). They both link back to the same Class<?> User in metaspace.","title":"\ud83e\udde9 In memory (simplified diagram)"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#the-hierarchy-that-connects-them","text":"All of this still fits inside Java\u2019s single inheritance tree: Object \u2191 User But the metadata describing this inheritance lives inside the Class<?> object, not inside the instances themselves.","title":"\ud83e\udde9 The hierarchy that connects them"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#tldr-summary","text":"Concept What it represents Where it lives Relationship Object A real instance in memory Heap Has state and behavior Class<?> A description of a class Metaspace Blueprint of all instances Link obj.getClass() From heap \u2192 metaspace Returns the metadata Reverse clazz.newInstance() From metaspace \u2192 heap Creates a real object","title":"\u2705 TL;DR Summary"},{"location":"concepts/languages/java/core/10-object-class-classloader-metaspace/#one-sentence-anchor","text":"Every Object is a living instance built from a Class<?> blueprint \u2014 and every Class<?> is the JVM\u2019s memory record of how to create and understand such objects.","title":"\ud83e\ude9e One-sentence anchor"},{"location":"concepts/languages/java/core/20-class-in-java-docs/","text":"\ud83e\udde9 How to Read Class-Based APIs \u2014 Understanding .class in Java Docs \u00b6 \ud83e\udde0 Why this matters \u00b6 In every modern Java library \u2014 Spring, Jackson, Hibernate, JUnit, etc. \u2014 you\u2019ll find methods that take something like User.class or AppConfig.class . At first it looks mystical, as if .class means \u201csome low-level compiler magic.\u201d But once you understand reflection and metadata, you realize it\u2019s just this: .class = a handle to metadata about a type. It tells the library what kind of object to inspect, create, or map \u2014 not the object itself. \ud83e\udde9 The pattern \u00b6 When a method parameter looks like this: < T > T doSomething ( Class < T > type ) you can immediately read it as: \u201cThis method works with or about objects of type T . It needs metadata about that class \u2014 not an instance.\u201d That\u2019s the universal sign of a reflection-based API . \ud83e\uddf1 Step-by-step mental model \u00b6 Step Concept Explanation 1\ufe0f\u20e3 .class A literal handle to the Class<?> object of a type. 2\ufe0f\u20e3 Class<?> JVM\u2019s in-memory blueprint for that class \u2014 metadata container. 3\ufe0f\u20e3 Reflection The process of using that metadata to inspect or manipulate types at runtime. 4\ufe0f\u20e3 Library API Uses that metadata to automate tasks (creating beans, mapping JSON, loading entities). So .class is the entry point \u2014 not the magic itself. \ud83d\udd0d How to spot metadata-based methods in documentation \u00b6 Look for these signatures and hints : Keyword or pattern What it means Class<T> parameter The method needs type metadata . Class<?> parameter Works with any type (generic metadata). Type , ParameterizedType The method wants generic type info (e.g., List<User> ). getDeclared...() Reflective lookup of fields, methods, or constructors. getAnnotation() Reads metadata attached via annotations. newInstance() / invoke() Creates or calls reflectively at runtime. Whenever you see these, your brain should go: \u201cThis is a metadata-driven API \u2014 it\u2019s using reflection under the hood.\u201d \ud83e\udde9 Examples from real libraries \u00b6 \ud83d\udfe6 Jackson \u00b6 < T > T readValue ( String content , Class < T > valueType ) You give it User.class \u2192 Jackson reads field names, types, and annotations ( @JsonProperty ) to map JSON into a User instance using reflection. \u2705 User.class = \u201chere\u2019s the blueprint for what I want.\u201d \ud83d\udfe9 Spring \u00b6 new AnnotationConfigApplicationContext ( AppConfig . class ); You give Spring your configuration class \u2192 it inspects annotations like @Configuration and @Bean . Spring uses reflection to register and instantiate all your beans. \u2705 AppConfig.class = \u201chere\u2019s where my bean metadata lives.\u201d \ud83d\udfe7 Hibernate \u00b6 session . get ( User . class , id ); You give Hibernate the entity type \u2192 it finds your mapping ( @Entity , @Column ), constructs SQL, and reflectively builds a User . \u2705 User.class = \u201chere\u2019s which table mapping to use.\u201d \ud83d\udfea JUnit \u00b6 @RunWith ( SpringRunner . class ) public class PaymentServiceTests { ... } JUnit reads the class metadata ( @RunWith , @Test ) and uses reflection to find test methods and invoke them dynamically. \u2705 PaymentServiceTests.class = \u201chere\u2019s the test class blueprint \u2014 inspect and run it.\u201d \ud83d\udfe8 Core Java Reflection \u00b6 Class <?> c = Class . forName ( \"com.example.User\" ); Object o = c . getDeclaredConstructor (). newInstance (); Manual reflection \u2014 you load and create an instance of a class by name. Frameworks automate exactly this. \u2705 Class<?> = \u201cthe JVM\u2019s live description of a class.\u201d \ud83e\udde0 How to read docs confidently \u00b6 When you see something like this in documentation: registerBean ( Class <?> beanClass ) Ask yourself: \u201cIs this asking for an instance or for knowledge about a type?\u201d If it\u2019s a Class<?> , it\u2019s asking for knowledge \u2014 it wants to reflect on the class , not use an object of it . Once you make that mental swap, API docs stop being mystical and start being logical. \ud83e\udde9 Mini cheat phrases for doc reading \u00b6 Doc phrase What it secretly means \u201cRegisters a class\u201d Reads metadata about it and stores it in the container \u201cMaps JSON to a class\u201d Reflectively creates and fills an instance \u201cRuns all methods annotated with \u2026\u201d Scans the Class<?> for annotations \u201cLoads configuration from a class\u201d Reads annotations or @Bean methods \u201cInstantiates a class by name\u201d Calls constructor via reflection These are all reflection signals \u2014 the library is interpreting your code as data . \ud83e\udded Quick mental summary \u00b6 Symbol or term Think of it as Used for .class A handle to a type\u2019s metadata Giving frameworks the blueprint Class<?> Runtime description of a class The bridge between code and reflection Class.forName() Load by name dynamically Dynamic type discovery Reflection APIs Read, create, or modify code at runtime Core mechanism of frameworks Annotations Metadata attached to your code Clues for reflection \ud83e\udde9 One-sentence takeaway \u00b6 When docs show Class<?> or .class parameters, they\u2019re not asking for an object \u2014 they\u2019re asking for the blueprint , so the library can reflectively understand or create it at runtime.","title":"Understanding `.class` in Java Docs"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#how-to-read-class-based-apis-understanding-class-in-java-docs","text":"","title":"\ud83e\udde9 How to Read Class-Based APIs \u2014 Understanding .class in Java Docs"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#why-this-matters","text":"In every modern Java library \u2014 Spring, Jackson, Hibernate, JUnit, etc. \u2014 you\u2019ll find methods that take something like User.class or AppConfig.class . At first it looks mystical, as if .class means \u201csome low-level compiler magic.\u201d But once you understand reflection and metadata, you realize it\u2019s just this: .class = a handle to metadata about a type. It tells the library what kind of object to inspect, create, or map \u2014 not the object itself.","title":"\ud83e\udde0 Why this matters"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#the-pattern","text":"When a method parameter looks like this: < T > T doSomething ( Class < T > type ) you can immediately read it as: \u201cThis method works with or about objects of type T . It needs metadata about that class \u2014 not an instance.\u201d That\u2019s the universal sign of a reflection-based API .","title":"\ud83e\udde9 The pattern"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#step-by-step-mental-model","text":"Step Concept Explanation 1\ufe0f\u20e3 .class A literal handle to the Class<?> object of a type. 2\ufe0f\u20e3 Class<?> JVM\u2019s in-memory blueprint for that class \u2014 metadata container. 3\ufe0f\u20e3 Reflection The process of using that metadata to inspect or manipulate types at runtime. 4\ufe0f\u20e3 Library API Uses that metadata to automate tasks (creating beans, mapping JSON, loading entities). So .class is the entry point \u2014 not the magic itself.","title":"\ud83e\uddf1 Step-by-step mental model"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#how-to-spot-metadata-based-methods-in-documentation","text":"Look for these signatures and hints : Keyword or pattern What it means Class<T> parameter The method needs type metadata . Class<?> parameter Works with any type (generic metadata). Type , ParameterizedType The method wants generic type info (e.g., List<User> ). getDeclared...() Reflective lookup of fields, methods, or constructors. getAnnotation() Reads metadata attached via annotations. newInstance() / invoke() Creates or calls reflectively at runtime. Whenever you see these, your brain should go: \u201cThis is a metadata-driven API \u2014 it\u2019s using reflection under the hood.\u201d","title":"\ud83d\udd0d How to spot metadata-based methods in documentation"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#examples-from-real-libraries","text":"","title":"\ud83e\udde9 Examples from real libraries"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#jackson","text":"< T > T readValue ( String content , Class < T > valueType ) You give it User.class \u2192 Jackson reads field names, types, and annotations ( @JsonProperty ) to map JSON into a User instance using reflection. \u2705 User.class = \u201chere\u2019s the blueprint for what I want.\u201d","title":"\ud83d\udfe6 Jackson"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#spring","text":"new AnnotationConfigApplicationContext ( AppConfig . class ); You give Spring your configuration class \u2192 it inspects annotations like @Configuration and @Bean . Spring uses reflection to register and instantiate all your beans. \u2705 AppConfig.class = \u201chere\u2019s where my bean metadata lives.\u201d","title":"\ud83d\udfe9 Spring"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#hibernate","text":"session . get ( User . class , id ); You give Hibernate the entity type \u2192 it finds your mapping ( @Entity , @Column ), constructs SQL, and reflectively builds a User . \u2705 User.class = \u201chere\u2019s which table mapping to use.\u201d","title":"\ud83d\udfe7 Hibernate"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#junit","text":"@RunWith ( SpringRunner . class ) public class PaymentServiceTests { ... } JUnit reads the class metadata ( @RunWith , @Test ) and uses reflection to find test methods and invoke them dynamically. \u2705 PaymentServiceTests.class = \u201chere\u2019s the test class blueprint \u2014 inspect and run it.\u201d","title":"\ud83d\udfea JUnit"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#core-java-reflection","text":"Class <?> c = Class . forName ( \"com.example.User\" ); Object o = c . getDeclaredConstructor (). newInstance (); Manual reflection \u2014 you load and create an instance of a class by name. Frameworks automate exactly this. \u2705 Class<?> = \u201cthe JVM\u2019s live description of a class.\u201d","title":"\ud83d\udfe8 Core Java Reflection"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#how-to-read-docs-confidently","text":"When you see something like this in documentation: registerBean ( Class <?> beanClass ) Ask yourself: \u201cIs this asking for an instance or for knowledge about a type?\u201d If it\u2019s a Class<?> , it\u2019s asking for knowledge \u2014 it wants to reflect on the class , not use an object of it . Once you make that mental swap, API docs stop being mystical and start being logical.","title":"\ud83e\udde0 How to read docs confidently"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#mini-cheat-phrases-for-doc-reading","text":"Doc phrase What it secretly means \u201cRegisters a class\u201d Reads metadata about it and stores it in the container \u201cMaps JSON to a class\u201d Reflectively creates and fills an instance \u201cRuns all methods annotated with \u2026\u201d Scans the Class<?> for annotations \u201cLoads configuration from a class\u201d Reads annotations or @Bean methods \u201cInstantiates a class by name\u201d Calls constructor via reflection These are all reflection signals \u2014 the library is interpreting your code as data .","title":"\ud83e\udde9 Mini cheat phrases for doc reading"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#quick-mental-summary","text":"Symbol or term Think of it as Used for .class A handle to a type\u2019s metadata Giving frameworks the blueprint Class<?> Runtime description of a class The bridge between code and reflection Class.forName() Load by name dynamically Dynamic type discovery Reflection APIs Read, create, or modify code at runtime Core mechanism of frameworks Annotations Metadata attached to your code Clues for reflection","title":"\ud83e\udded Quick mental summary"},{"location":"concepts/languages/java/core/20-class-in-java-docs/#one-sentence-takeaway","text":"When docs show Class<?> or .class parameters, they\u2019re not asking for an object \u2014 they\u2019re asking for the blueprint , so the library can reflectively understand or create it at runtime.","title":"\ud83e\udde9 One-sentence takeaway"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/","text":"\ud83e\udde9 How Strings Fit into the JVM\u2019s Memory Model \u00b6 1\ufe0f\u20e3 Big Picture \u2014 The Three Key Memory Zones \u00b6 When the JVM runs, it divides its runtime memory roughly like this: +-----------------------------------------------+ | JVM Process Memory | | | | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | | Heap | | Metaspace | | | | (objects) | | (class info)| | | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 | | \u25b2 \u25b2 | | \u2502 \u2502 | | \u2502 \u2502 | | Object instances Class<?> blueprints | | | | +-----------------------------------------+ | | | Stack (per thread) | | | | \u2192 holds local vars, call frames, refs | | | +-----------------------------------------+ | +-----------------------------------------------+ Heap: where live objects (like new User() or new String() ) live. Metaspace: where class metadata ( Class<?> ) is stored. Stack: where temporary references and method calls are tracked per thread. So far so good. Now \u2014 where does the \u201cString pool\u201d live in all this? 2\ufe0f\u20e3 The String Pool \u2014 a Special Corner of the Heap \u00b6 When you write: String s1 = \"Hello\" ; String s2 = \"Hello\" ; you don\u2019t get two String objects. Both s1 and s2 point to the same one. That\u2019s because of the String pool \u2014 a cache of unique string literals maintained by the JVM inside the heap (specifically in a small internal structure sometimes called the interned string table ). \ud83e\udde0 Why it exists \u00b6 Strings are everywhere in code \u2014 class names, annotations, log messages, JSON keys. If every identical literal created a new object, memory would explode. The pool ensures that identical string literals share one object . \ud83d\udd27 How it works \u00b6 When the JVM loads a class from bytecode, it parses constant values (including string literals). For every \"Hello\" literal, it checks a hidden table in the heap. If \"Hello\" exists already \u2192 reuse the same object. If not \u2192 create it once and store it in that table. That table is called the string intern pool . \ud83e\udde9 Visual idea \u00b6 Heap \u251c\u2500\u2500 String Pool \u2502 \u251c\u2500\u2500 \"Hello\" \u2190 shared \u2502 \u2514\u2500\u2500 \"World\" \u2190 shared \u251c\u2500\u2500 Other Objects \u2502 \u251c\u2500\u2500 new User() \u2502 \u2514\u2500\u2500 new ArrayList() Both String a = \"Hello\" ; String b = \"Hello\" ; point to the same \"Hello\" inside the pool. 3\ufe0f\u20e3 How it connects to Objects and Classes \u00b6 Concept Description Where it lives String object an instance of java.lang.String Heap \"literal\" loaded and pooled at class loading Heap (string pool) String.class the blueprint of all String objects Metaspace ClassLoader loads java.lang.String at startup Bootstrap classloader String s = \"abc\"; references a pooled String Heap (shared entry) new String(\"abc\") explicitly makes a new object Heap (outside the pool) So, String behaves like any other Object , but it\u2019s interned \u2014 meaning the JVM manages a special table of \u201cknown identical values.\u201d 4\ufe0f\u20e3 The role of intern() \u00b6 You can manually play with the pool: String a = new String ( \"Hello\" ); String b = a . intern (); System . out . println ( a == b ); // false (a is new) System . out . println ( b == \"Hello\" ); // true (pooled) new String(\"Hello\") \u2192 creates a brand-new object on the heap, outside the pool. a.intern() \u2192 checks the pool: if \"Hello\" exists \u2192 return reference to that pooled one, otherwise add it and return it. So intern() bridges your runtime-created strings back into the shared pool. 5\ufe0f\u20e3 Historical context \u2014 PermGen vs Metaspace \u00b6 Before Java 8, the string pool lived in PermGen (an older memory area used for class metadata). This caused frequent OutOfMemoryError: PermGen space issues when too many strings were interned. In Java 8+, the pool was moved to the heap , and PermGen was replaced by Metaspace , which stores class metadata ( Class<?> objects). That\u2019s why today: Strings \u2192 Heap Class<?> \u2192 Metaspace Different worlds, but both part of the JVM runtime memory. 6\ufe0f\u20e3 Relation to Class Loaders \u00b6 When a class is loaded, all its string literals are loaded along with it. So the ClassLoader that loads your class also triggers the JVM to register its string constants into the pool. Example: public class Demo { private static final String GREETING = \"Hello\" ; } When Demo.class is loaded: The ClassLoader parses bytecode constants. Finds \"Hello\" \u2192 checks the string pool. Interns it (adds to the shared table if not already there). That\u2019s why string literals get pooled automatically at class load time. 7\ufe0f\u20e3 Putting it all together \u2014 unified model \u00b6 JVM MEMORY MAP +------------------------------------------------------------+ | JVM Memory | |------------------------------------------------------------| | Heap | | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | \u2502 Object Instances (new User(), new ArrayList(), ...) \u2502 | | \u2502 String Pool: \"Hello\", \"World\", \"abc\", ... (shared) \u2502 | | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 | | | | Metaspace | | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | \u2502 Class<?> objects for: User, String, ArrayList, etc. \u2502 | | \u2502 Each describes structure & behavior of its type. \u2502 | | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 | | | | Stack (per thread) | | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | \u2502 Method frames, locals, references to heap objects. \u2502 | | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 | +------------------------------------------------------------+ Arrows of connection: Every object on the heap knows its Class<?> in metaspace . Every string literal is shared through the string pool (inside the heap). Class loaders read class files and register both Class<?> metadata and string literals . \ud83e\udde9 TL;DR Summary \u00b6 Concept Description Memory Area Object Live instance with fields Heap Class<?> Metadata blueprint Metaspace ClassLoader Reads .class bytes, defines Class<?> Code area \u2192 Metaspace String literal Interned, shared value Heap (string pool) new String() Non-pooled string Heap (normal object) intern() Returns pooled version of a string Heap (shared table) \ud83e\ude9e One-sentence anchor \u00b6 The String pool is not a magical dimension \u2014 it\u2019s just a shared cache of String objects in the heap, built automatically when classes are loaded, while Class<?> lives separately in metaspace describing how strings and all other objects exist.","title":"String Pool & JVM Memory Model"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#how-strings-fit-into-the-jvms-memory-model","text":"","title":"\ud83e\udde9 How Strings Fit into the JVM\u2019s Memory Model"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#1-big-picture-the-three-key-memory-zones","text":"When the JVM runs, it divides its runtime memory roughly like this: +-----------------------------------------------+ | JVM Process Memory | | | | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | | Heap | | Metaspace | | | | (objects) | | (class info)| | | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 | | \u25b2 \u25b2 | | \u2502 \u2502 | | \u2502 \u2502 | | Object instances Class<?> blueprints | | | | +-----------------------------------------+ | | | Stack (per thread) | | | | \u2192 holds local vars, call frames, refs | | | +-----------------------------------------+ | +-----------------------------------------------+ Heap: where live objects (like new User() or new String() ) live. Metaspace: where class metadata ( Class<?> ) is stored. Stack: where temporary references and method calls are tracked per thread. So far so good. Now \u2014 where does the \u201cString pool\u201d live in all this?","title":"1\ufe0f\u20e3 Big Picture \u2014 The Three Key Memory Zones"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#2-the-string-pool-a-special-corner-of-the-heap","text":"When you write: String s1 = \"Hello\" ; String s2 = \"Hello\" ; you don\u2019t get two String objects. Both s1 and s2 point to the same one. That\u2019s because of the String pool \u2014 a cache of unique string literals maintained by the JVM inside the heap (specifically in a small internal structure sometimes called the interned string table ).","title":"2\ufe0f\u20e3 The String Pool \u2014 a Special Corner of the Heap"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#why-it-exists","text":"Strings are everywhere in code \u2014 class names, annotations, log messages, JSON keys. If every identical literal created a new object, memory would explode. The pool ensures that identical string literals share one object .","title":"\ud83e\udde0 Why it exists"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#how-it-works","text":"When the JVM loads a class from bytecode, it parses constant values (including string literals). For every \"Hello\" literal, it checks a hidden table in the heap. If \"Hello\" exists already \u2192 reuse the same object. If not \u2192 create it once and store it in that table. That table is called the string intern pool .","title":"\ud83d\udd27 How it works"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#visual-idea","text":"Heap \u251c\u2500\u2500 String Pool \u2502 \u251c\u2500\u2500 \"Hello\" \u2190 shared \u2502 \u2514\u2500\u2500 \"World\" \u2190 shared \u251c\u2500\u2500 Other Objects \u2502 \u251c\u2500\u2500 new User() \u2502 \u2514\u2500\u2500 new ArrayList() Both String a = \"Hello\" ; String b = \"Hello\" ; point to the same \"Hello\" inside the pool.","title":"\ud83e\udde9 Visual idea"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#3-how-it-connects-to-objects-and-classes","text":"Concept Description Where it lives String object an instance of java.lang.String Heap \"literal\" loaded and pooled at class loading Heap (string pool) String.class the blueprint of all String objects Metaspace ClassLoader loads java.lang.String at startup Bootstrap classloader String s = \"abc\"; references a pooled String Heap (shared entry) new String(\"abc\") explicitly makes a new object Heap (outside the pool) So, String behaves like any other Object , but it\u2019s interned \u2014 meaning the JVM manages a special table of \u201cknown identical values.\u201d","title":"3\ufe0f\u20e3 How it connects to Objects and Classes"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#4-the-role-of-intern","text":"You can manually play with the pool: String a = new String ( \"Hello\" ); String b = a . intern (); System . out . println ( a == b ); // false (a is new) System . out . println ( b == \"Hello\" ); // true (pooled) new String(\"Hello\") \u2192 creates a brand-new object on the heap, outside the pool. a.intern() \u2192 checks the pool: if \"Hello\" exists \u2192 return reference to that pooled one, otherwise add it and return it. So intern() bridges your runtime-created strings back into the shared pool.","title":"4\ufe0f\u20e3 The role of intern()"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#5-historical-context-permgen-vs-metaspace","text":"Before Java 8, the string pool lived in PermGen (an older memory area used for class metadata). This caused frequent OutOfMemoryError: PermGen space issues when too many strings were interned. In Java 8+, the pool was moved to the heap , and PermGen was replaced by Metaspace , which stores class metadata ( Class<?> objects). That\u2019s why today: Strings \u2192 Heap Class<?> \u2192 Metaspace Different worlds, but both part of the JVM runtime memory.","title":"5\ufe0f\u20e3 Historical context \u2014 PermGen vs Metaspace"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#6-relation-to-class-loaders","text":"When a class is loaded, all its string literals are loaded along with it. So the ClassLoader that loads your class also triggers the JVM to register its string constants into the pool. Example: public class Demo { private static final String GREETING = \"Hello\" ; } When Demo.class is loaded: The ClassLoader parses bytecode constants. Finds \"Hello\" \u2192 checks the string pool. Interns it (adds to the shared table if not already there). That\u2019s why string literals get pooled automatically at class load time.","title":"6\ufe0f\u20e3 Relation to Class Loaders"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#7-putting-it-all-together-unified-model","text":"JVM MEMORY MAP +------------------------------------------------------------+ | JVM Memory | |------------------------------------------------------------| | Heap | | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | \u2502 Object Instances (new User(), new ArrayList(), ...) \u2502 | | \u2502 String Pool: \"Hello\", \"World\", \"abc\", ... (shared) \u2502 | | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 | | | | Metaspace | | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | \u2502 Class<?> objects for: User, String, ArrayList, etc. \u2502 | | \u2502 Each describes structure & behavior of its type. \u2502 | | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 | | | | Stack (per thread) | | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | \u2502 Method frames, locals, references to heap objects. \u2502 | | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 | +------------------------------------------------------------+ Arrows of connection: Every object on the heap knows its Class<?> in metaspace . Every string literal is shared through the string pool (inside the heap). Class loaders read class files and register both Class<?> metadata and string literals .","title":"7\ufe0f\u20e3 Putting it all together \u2014 unified model"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#tldr-summary","text":"Concept Description Memory Area Object Live instance with fields Heap Class<?> Metadata blueprint Metaspace ClassLoader Reads .class bytes, defines Class<?> Code area \u2192 Metaspace String literal Interned, shared value Heap (string pool) new String() Non-pooled string Heap (normal object) intern() Returns pooled version of a string Heap (shared table)","title":"\ud83e\udde9 TL;DR Summary"},{"location":"concepts/languages/java/core/30-string-pool-and-memory/#one-sentence-anchor","text":"The String pool is not a magical dimension \u2014 it\u2019s just a shared cache of String objects in the heap, built automatically when classes are loaded, while Class<?> lives separately in metaspace describing how strings and all other objects exist.","title":"\ud83e\ude9e One-sentence anchor"},{"location":"concepts/languages/java/spring/_meta/blueprint/","text":"\ud83e\udde9 Spring Core Blueprint \u2014 From Reflection to IoC \u00b6 Purpose: This blueprint defines how Spring\u2019s core conceptual notes and cheatsheets fit together \u2014 from the raw JVM mechanics to the architecture of IoC and AOP. It serves as the scaffolding for your future Spring documentation. \ud83c\udf31 Context \u00b6 The Spring Framework sits on top of Java\u2019s reflective and classloading mechanisms. In your structure, the JVM-level notes live under java/core/ , while the Spring-specific layers live under frameworks/spring/core/ . So: cheatsheets/languages/java/core/ \u251c\u2500 00-java-runtime-and-reflection.md are Java foundations , not part of Spring itself \u2014 but everything in Spring\u2019s core builds on those concepts. \ud83e\udded Conceptual Flow \u2014 From Mechanism \u2192 Architecture \u2192 Abstraction \u00b6 frameworks/spring/core/ \u251c\u2500 reflection-autowired.md # micro-level: how reflection drives DI \u251c\u2500 bean-anatomy.md # entity-level: what a Spring bean is \u251c\u2500 context-lifecycle.md # system-level: how the container lives \u251c\u2500 dependency-injection-patterns.md # bridge: constructor/setter/field injection \u2514\u2500 ioc-container.md # macro-level: inversion of control philosophy Optional next tier: \u00b6 frameworks/spring/core/ \u2514\u2500 aop-concepts.md # crosscutting logic & proxy magic \ud83e\udde9 Conceptual Layers Explained \u00b6 Layer Focus Description Java Core (foundation) Class<?> , ClassLoader JVM mechanisms that enable reflection and dynamic loading. Reflection (micro) reflection-autowired.md How Spring uses reflection to discover, instantiate, and inject beans. Bean Anatomy (entity) bean-anatomy.md The structure and lifecycle of a Spring-managed object. Context Lifecycle (system) context-lifecycle.md How the ApplicationContext orchestrates creation, wiring, and shutdown. Dependency Injection Patterns (bridge) optional Explains constructor/setter/field injection styles and qualifiers. IoC Container (architecture) ioc-container.md The overarching philosophy: framework controls flow, not user code. AOP (extension) aop-concepts.md How proxies implement cross-cutting concerns (transactions, caching, logging). \ud83e\uddec Knowledge Flow Summary \u00b6 [JVM] \u2192 Class<?> \u2192 ClassLoader \u2193 [Spring Micro] \u2192 Reflection & @Autowired \u2193 [Spring Entity] \u2192 Bean Anatomy \u2193 [Spring System] \u2192 Context Lifecycle \u2193 [Bridge] \u2192 Dependency Injection Patterns \u2193 [Spring Architecture] \u2192 IoC Container \u2193 [Spring Extension] \u2192 AOP & Proxies \ud83e\uddf1 Guiding Principles \u00b6 Keep Java core and Spring core clearly separated \u2014 Java explains capability , Spring explains usage . Each cheatsheet should link both up and down the conceptual chain: e.g., bean-anatomy.md links down to reflection and up to context lifecycle. For every \u201chow\u201d cheatsheet, create at least one \u201cwhy\u201d note explaining the rationale (e.g., IoC explains why reflection and lifecycle exist). When Spring evolves (Micronaut, Quarkus, Jakarta EE), this blueprint will help you compare architectures cleanly. \ud83d\ude80 Future Expansion Ideas \u00b6 Area Next natural topic Spring Boot internals spring-boot-autoconfiguration.md AOP details aop-proxy-mechanics.md Context hierarchy applicationcontext-hierarchy.md Bean scopes & lifecycle interactions bean-scope-advanced.md Annotation processing vs reflection annotation-processing.md \ud83e\udde9 Core Takeaway \u00b6 This blueprint maps the intellectual backbone of Spring: Reflection gives it hands, Lifecycle gives it breath, IoC gives it mind. Together, they explain not just how Spring works , but why it exists.","title":"Core Blueprint"},{"location":"concepts/languages/java/spring/_meta/blueprint/#spring-core-blueprint-from-reflection-to-ioc","text":"Purpose: This blueprint defines how Spring\u2019s core conceptual notes and cheatsheets fit together \u2014 from the raw JVM mechanics to the architecture of IoC and AOP. It serves as the scaffolding for your future Spring documentation.","title":"\ud83e\udde9 Spring Core Blueprint \u2014 From Reflection to IoC"},{"location":"concepts/languages/java/spring/_meta/blueprint/#context","text":"The Spring Framework sits on top of Java\u2019s reflective and classloading mechanisms. In your structure, the JVM-level notes live under java/core/ , while the Spring-specific layers live under frameworks/spring/core/ . So: cheatsheets/languages/java/core/ \u251c\u2500 00-java-runtime-and-reflection.md are Java foundations , not part of Spring itself \u2014 but everything in Spring\u2019s core builds on those concepts.","title":"\ud83c\udf31 Context"},{"location":"concepts/languages/java/spring/_meta/blueprint/#conceptual-flow-from-mechanism-architecture-abstraction","text":"frameworks/spring/core/ \u251c\u2500 reflection-autowired.md # micro-level: how reflection drives DI \u251c\u2500 bean-anatomy.md # entity-level: what a Spring bean is \u251c\u2500 context-lifecycle.md # system-level: how the container lives \u251c\u2500 dependency-injection-patterns.md # bridge: constructor/setter/field injection \u2514\u2500 ioc-container.md # macro-level: inversion of control philosophy","title":"\ud83e\udded Conceptual Flow \u2014 From Mechanism \u2192 Architecture \u2192 Abstraction"},{"location":"concepts/languages/java/spring/_meta/blueprint/#optional-next-tier","text":"frameworks/spring/core/ \u2514\u2500 aop-concepts.md # crosscutting logic & proxy magic","title":"Optional next tier:"},{"location":"concepts/languages/java/spring/_meta/blueprint/#conceptual-layers-explained","text":"Layer Focus Description Java Core (foundation) Class<?> , ClassLoader JVM mechanisms that enable reflection and dynamic loading. Reflection (micro) reflection-autowired.md How Spring uses reflection to discover, instantiate, and inject beans. Bean Anatomy (entity) bean-anatomy.md The structure and lifecycle of a Spring-managed object. Context Lifecycle (system) context-lifecycle.md How the ApplicationContext orchestrates creation, wiring, and shutdown. Dependency Injection Patterns (bridge) optional Explains constructor/setter/field injection styles and qualifiers. IoC Container (architecture) ioc-container.md The overarching philosophy: framework controls flow, not user code. AOP (extension) aop-concepts.md How proxies implement cross-cutting concerns (transactions, caching, logging).","title":"\ud83e\udde9 Conceptual Layers Explained"},{"location":"concepts/languages/java/spring/_meta/blueprint/#knowledge-flow-summary","text":"[JVM] \u2192 Class<?> \u2192 ClassLoader \u2193 [Spring Micro] \u2192 Reflection & @Autowired \u2193 [Spring Entity] \u2192 Bean Anatomy \u2193 [Spring System] \u2192 Context Lifecycle \u2193 [Bridge] \u2192 Dependency Injection Patterns \u2193 [Spring Architecture] \u2192 IoC Container \u2193 [Spring Extension] \u2192 AOP & Proxies","title":"\ud83e\uddec Knowledge Flow Summary"},{"location":"concepts/languages/java/spring/_meta/blueprint/#guiding-principles","text":"Keep Java core and Spring core clearly separated \u2014 Java explains capability , Spring explains usage . Each cheatsheet should link both up and down the conceptual chain: e.g., bean-anatomy.md links down to reflection and up to context lifecycle. For every \u201chow\u201d cheatsheet, create at least one \u201cwhy\u201d note explaining the rationale (e.g., IoC explains why reflection and lifecycle exist). When Spring evolves (Micronaut, Quarkus, Jakarta EE), this blueprint will help you compare architectures cleanly.","title":"\ud83e\uddf1 Guiding Principles"},{"location":"concepts/languages/java/spring/_meta/blueprint/#future-expansion-ideas","text":"Area Next natural topic Spring Boot internals spring-boot-autoconfiguration.md AOP details aop-proxy-mechanics.md Context hierarchy applicationcontext-hierarchy.md Bean scopes & lifecycle interactions bean-scope-advanced.md Annotation processing vs reflection annotation-processing.md","title":"\ud83d\ude80 Future Expansion Ideas"},{"location":"concepts/languages/java/spring/_meta/blueprint/#core-takeaway","text":"This blueprint maps the intellectual backbone of Spring: Reflection gives it hands, Lifecycle gives it breath, IoC gives it mind. Together, they explain not just how Spring works , but why it exists.","title":"\ud83e\udde9 Core Takeaway"},{"location":"concepts/languages/java/spring/core/03-quickstart/","text":"\ud83c\udf3f Spring Core \u2014 A Gentle but Complete Story \u00b6 Purpose: This isn\u2019t a list of annotations. It\u2019s a story about how Java evolved from \u201cdo everything yourself\u201d to \u201clet the framework orchestrate the show.\u201d Spring sits in that shift \u2014 teaching code to manage itself. 1. The Old Days \u2014 Manual Wiring \u00b6 In plain Java, you were the conductor of a one-person orchestra. UserService user = new UserService (); PaymentService pay = new PaymentService ( user ); OrderService order = new OrderService ( pay ); You wrote new everywhere. You knew every connection by hand. That works until your system grows and suddenly: Changing one class breaks five others. You can\u2019t test one piece without booting everything. You have no central place that knows what depends on what . Developers started dreaming of a container \u2014 something that could build and connect objects automatically. That dream became Spring . 2. Reflection \u2014 Letting Code Look at Code \u00b6 Java has a secret mirror called reflection . It lets a program peek into its own classes while running: \u201cWhat fields does this class have?\u201d \u201cDoes it have an annotation called @Component ?\u201d \u201cCan I call this method without knowing its name at compile time?\u201d Spring uses that mirror to discover and build your objects. When you run your app, it quietly scans every class on your classpath. When it finds one marked like this: @Component public class PaymentService {} It says: Ah, that\u2019s mine to manage. Then it creates an instance reflectively \u2014 without you writing new PaymentService() . That\u2019s where the magic begins: the framework starts taking responsibility for creation . 3. Beans \u2014 Living Java Objects \u00b6 Spring calls these managed objects beans . They\u2019re still just Java objects, but with a difference \u2014 Spring controls their entire life . A bean is born when the container starts. It\u2019s injected with whatever it needs. It lives inside a structure called the ApplicationContext , and when the application shuts down, Spring cleans it up. You can think of the ApplicationContext as a living ecosystem of beans : ApplicationContext \u251c\u2500 auditService \u251c\u2500 paymentService \u2514\u2500 userService Each one can depend on the others \u2014 but they never create each other directly. They trust Spring to connect them. 4. Dependency Injection \u2014 Letting Someone Else Plug the Cables \u00b6 In normal Java, a class builds its own tools. With Spring, it simply says what it needs , and the container provides it. That pattern is called Dependency Injection (DI). Imagine a workshop: Without Spring: every worker buys their own hammer. With Spring: there\u2019s a tool manager handing out hammers as needed. In code: @Service public class PaymentService { private final AuditService audit ; public PaymentService ( AuditService audit ) { this . audit = audit ; } } You don\u2019t decide which AuditService to use. Spring does. At startup, it looks at your constructor and says: \u201cI have an AuditService bean \u2014 I\u2019ll plug it in.\u201d That\u2019s constructor injection \u2014 the cleanest and safest style. Spring can also inject dependencies through setters or directly into fields, but constructor injection makes dependencies explicit, like stating ingredients on a recipe. 5. Inversion of Control \u2014 The Big Flip \u00b6 Before Spring, you wrote code like this: PaymentService pay = new PaymentService ( new AuditService ()); You were in charge of when and how things were created. Spring flips that \u2014 hence the phrase Inversion of Control (IoC) . Now, you declare what your classes need, and the framework decides when to create, connect, and destroy them . You stopped being the factory. You became the designer \u2014 telling the system what components exist and how they should relate. Spring became the conductor of your orchestra. 6. The ApplicationContext \u2014 Spring\u2019s Brain \u00b6 The ApplicationContext is Spring\u2019s central nervous system. When you run a Spring Boot app with: SpringApplication . run ( App . class , args ); you\u2019re really saying: \u201cHey Spring, build my world.\u201d Here\u2019s roughly what happens: Spring creates the ApplicationContext. It scans your classpath for components ( @Component , @Service , @Repository \u2026). It builds a list of BeanDefinitions \u2014 recipes describing how to create each bean. It uses reflection to instantiate them. It injects dependencies. It calls initialization hooks ( @PostConstruct ). Finally, it announces: \u201cContext refreshed \u2014 everything\u2019s alive.\u201d From this point on, you can request any bean, and Spring will hand you a fully wired instance. 7. Bean Lifecycle \u2014 The Circle of (Application) Life \u00b6 Every bean in Spring goes through predictable stages: 1. Definition \u2192 Spring learns about the class 2. Instantiation \u2192 Object is created reflectively 3. Dependency Injection \u2192 Fields/constructors are filled 4. Initialization \u2192 @PostConstruct runs 5. Ready State \u2192 Bean is active and serving 6. Destruction \u2192 @PreDestroy runs at shutdown This is why your app can start, serve, and shut down gracefully. Spring takes care of object lifespans so you can focus on behavior. 8. Why This Architecture Matters \u00b6 This container-based system unlocks a few superpowers: Loose coupling \u2014 classes don\u2019t depend on each other directly. Configurable behavior \u2014 you can change how things work via annotations or properties. Automatic lifecycle management \u2014 no manual setup or cleanup. Testability \u2014 you can inject mocks for testing instead of real beans. Once you experience it, going back to plain new feels like riding a horse after owning a spaceship. 9. AOP \u2014 Teaching Beans New Tricks \u00b6 When Spring controls your objects, it can extend their behavior . That\u2019s where Aspect-Oriented Programming (AOP) comes in. Think of AOP as a transparent wrapper around your beans. When someone calls a method, Spring can sneak in extra logic before or after it \u2014 like logging, transactions, or caching \u2014 without changing the original class. @Service public class PaymentService { @Transactional public void pay () { ... } } When you call pay() , you\u2019re actually calling a proxy , not the raw object. That proxy: Opens a transaction, Calls your method, Commits or rolls back depending on the result. Same story for @Async , @Cacheable , or @Secured \u2014 all powered by this wrapping trick. That\u2019s how crosscutting concerns stay separate from business logic. 10. How Spring Pulls It Off \u00b6 Behind the scenes: Reflection lets Spring look at classes and create them dynamically. IoC gives Spring control over who creates what. AOP gives Spring control over how methods behave when called. Together, they form a vertical architecture: Reflection \u2192 builds beans \u2193 IoC \u2192 manages relationships and lifecycles \u2193 AOP \u2192 adds behavior at runtime Each layer adds a dimension: first existence, then orchestration, then influence. 11. The Philosophy in One Line \u00b6 Spring\u2019s goal is to let developers think about \u201cwhat should happen,\u201d not \u201chow to glue it all together.\u201d It doesn\u2019t replace Java \u2014 it elevates it, turning plain classes into cooperative citizens inside a managed world. 12. The Lifecycle of a Spring Application \u00b6 You press Run . Spring starts and scans your classes. It builds a map of all components. It reflectively creates and connects them. It wraps some in proxies for AOP. It publishes \u201cContext Refreshed\u201d \u2014 your app is alive. When you stop, it calls cleanup hooks and shuts down gracefully. That\u2019s the entire story \u2014 an ecosystem built from reflection, orchestration, and trust. 13. TL;DR Summary \u00b6 Concept What It Means Why It Matters Reflection Java looking at itself Lets Spring find and create your beans Bean A managed Java object Gives you lifecycle control Dependency Injection Framework provides dependencies Removes manual wiring Inversion of Control (IoC) Framework owns object creation Makes systems modular ApplicationContext Container managing beans Central brain of your app AOP / Proxies Logic woven around methods Adds features like transactions, caching \ud83e\ude9e Final Thought \u00b6 Spring isn\u2019t a library you call \u2014 it\u2019s an environment you live in. It doesn\u2019t just execute code; it hosts it. Once you understand that, every @Autowired , every @Transactional , every line of your app fits into one graceful rhythm: discover, build, wire, run, extend, and clean up.","title":"Quickstart to Spring Core"},{"location":"concepts/languages/java/spring/core/03-quickstart/#spring-core-a-gentle-but-complete-story","text":"Purpose: This isn\u2019t a list of annotations. It\u2019s a story about how Java evolved from \u201cdo everything yourself\u201d to \u201clet the framework orchestrate the show.\u201d Spring sits in that shift \u2014 teaching code to manage itself.","title":"\ud83c\udf3f Spring Core \u2014 A Gentle but Complete Story"},{"location":"concepts/languages/java/spring/core/03-quickstart/#1-the-old-days-manual-wiring","text":"In plain Java, you were the conductor of a one-person orchestra. UserService user = new UserService (); PaymentService pay = new PaymentService ( user ); OrderService order = new OrderService ( pay ); You wrote new everywhere. You knew every connection by hand. That works until your system grows and suddenly: Changing one class breaks five others. You can\u2019t test one piece without booting everything. You have no central place that knows what depends on what . Developers started dreaming of a container \u2014 something that could build and connect objects automatically. That dream became Spring .","title":"1. The Old Days \u2014 Manual Wiring"},{"location":"concepts/languages/java/spring/core/03-quickstart/#2-reflection-letting-code-look-at-code","text":"Java has a secret mirror called reflection . It lets a program peek into its own classes while running: \u201cWhat fields does this class have?\u201d \u201cDoes it have an annotation called @Component ?\u201d \u201cCan I call this method without knowing its name at compile time?\u201d Spring uses that mirror to discover and build your objects. When you run your app, it quietly scans every class on your classpath. When it finds one marked like this: @Component public class PaymentService {} It says: Ah, that\u2019s mine to manage. Then it creates an instance reflectively \u2014 without you writing new PaymentService() . That\u2019s where the magic begins: the framework starts taking responsibility for creation .","title":"2. Reflection \u2014 Letting Code Look at Code"},{"location":"concepts/languages/java/spring/core/03-quickstart/#3-beans-living-java-objects","text":"Spring calls these managed objects beans . They\u2019re still just Java objects, but with a difference \u2014 Spring controls their entire life . A bean is born when the container starts. It\u2019s injected with whatever it needs. It lives inside a structure called the ApplicationContext , and when the application shuts down, Spring cleans it up. You can think of the ApplicationContext as a living ecosystem of beans : ApplicationContext \u251c\u2500 auditService \u251c\u2500 paymentService \u2514\u2500 userService Each one can depend on the others \u2014 but they never create each other directly. They trust Spring to connect them.","title":"3. Beans \u2014 Living Java Objects"},{"location":"concepts/languages/java/spring/core/03-quickstart/#4-dependency-injection-letting-someone-else-plug-the-cables","text":"In normal Java, a class builds its own tools. With Spring, it simply says what it needs , and the container provides it. That pattern is called Dependency Injection (DI). Imagine a workshop: Without Spring: every worker buys their own hammer. With Spring: there\u2019s a tool manager handing out hammers as needed. In code: @Service public class PaymentService { private final AuditService audit ; public PaymentService ( AuditService audit ) { this . audit = audit ; } } You don\u2019t decide which AuditService to use. Spring does. At startup, it looks at your constructor and says: \u201cI have an AuditService bean \u2014 I\u2019ll plug it in.\u201d That\u2019s constructor injection \u2014 the cleanest and safest style. Spring can also inject dependencies through setters or directly into fields, but constructor injection makes dependencies explicit, like stating ingredients on a recipe.","title":"4. Dependency Injection \u2014 Letting Someone Else Plug the Cables"},{"location":"concepts/languages/java/spring/core/03-quickstart/#5-inversion-of-control-the-big-flip","text":"Before Spring, you wrote code like this: PaymentService pay = new PaymentService ( new AuditService ()); You were in charge of when and how things were created. Spring flips that \u2014 hence the phrase Inversion of Control (IoC) . Now, you declare what your classes need, and the framework decides when to create, connect, and destroy them . You stopped being the factory. You became the designer \u2014 telling the system what components exist and how they should relate. Spring became the conductor of your orchestra.","title":"5. Inversion of Control \u2014 The Big Flip"},{"location":"concepts/languages/java/spring/core/03-quickstart/#6-the-applicationcontext-springs-brain","text":"The ApplicationContext is Spring\u2019s central nervous system. When you run a Spring Boot app with: SpringApplication . run ( App . class , args ); you\u2019re really saying: \u201cHey Spring, build my world.\u201d Here\u2019s roughly what happens: Spring creates the ApplicationContext. It scans your classpath for components ( @Component , @Service , @Repository \u2026). It builds a list of BeanDefinitions \u2014 recipes describing how to create each bean. It uses reflection to instantiate them. It injects dependencies. It calls initialization hooks ( @PostConstruct ). Finally, it announces: \u201cContext refreshed \u2014 everything\u2019s alive.\u201d From this point on, you can request any bean, and Spring will hand you a fully wired instance.","title":"6. The ApplicationContext \u2014 Spring\u2019s Brain"},{"location":"concepts/languages/java/spring/core/03-quickstart/#7-bean-lifecycle-the-circle-of-application-life","text":"Every bean in Spring goes through predictable stages: 1. Definition \u2192 Spring learns about the class 2. Instantiation \u2192 Object is created reflectively 3. Dependency Injection \u2192 Fields/constructors are filled 4. Initialization \u2192 @PostConstruct runs 5. Ready State \u2192 Bean is active and serving 6. Destruction \u2192 @PreDestroy runs at shutdown This is why your app can start, serve, and shut down gracefully. Spring takes care of object lifespans so you can focus on behavior.","title":"7. Bean Lifecycle \u2014 The Circle of (Application) Life"},{"location":"concepts/languages/java/spring/core/03-quickstart/#8-why-this-architecture-matters","text":"This container-based system unlocks a few superpowers: Loose coupling \u2014 classes don\u2019t depend on each other directly. Configurable behavior \u2014 you can change how things work via annotations or properties. Automatic lifecycle management \u2014 no manual setup or cleanup. Testability \u2014 you can inject mocks for testing instead of real beans. Once you experience it, going back to plain new feels like riding a horse after owning a spaceship.","title":"8. Why This Architecture Matters"},{"location":"concepts/languages/java/spring/core/03-quickstart/#9-aop-teaching-beans-new-tricks","text":"When Spring controls your objects, it can extend their behavior . That\u2019s where Aspect-Oriented Programming (AOP) comes in. Think of AOP as a transparent wrapper around your beans. When someone calls a method, Spring can sneak in extra logic before or after it \u2014 like logging, transactions, or caching \u2014 without changing the original class. @Service public class PaymentService { @Transactional public void pay () { ... } } When you call pay() , you\u2019re actually calling a proxy , not the raw object. That proxy: Opens a transaction, Calls your method, Commits or rolls back depending on the result. Same story for @Async , @Cacheable , or @Secured \u2014 all powered by this wrapping trick. That\u2019s how crosscutting concerns stay separate from business logic.","title":"9. AOP \u2014 Teaching Beans New Tricks"},{"location":"concepts/languages/java/spring/core/03-quickstart/#10-how-spring-pulls-it-off","text":"Behind the scenes: Reflection lets Spring look at classes and create them dynamically. IoC gives Spring control over who creates what. AOP gives Spring control over how methods behave when called. Together, they form a vertical architecture: Reflection \u2192 builds beans \u2193 IoC \u2192 manages relationships and lifecycles \u2193 AOP \u2192 adds behavior at runtime Each layer adds a dimension: first existence, then orchestration, then influence.","title":"10. How Spring Pulls It Off"},{"location":"concepts/languages/java/spring/core/03-quickstart/#11-the-philosophy-in-one-line","text":"Spring\u2019s goal is to let developers think about \u201cwhat should happen,\u201d not \u201chow to glue it all together.\u201d It doesn\u2019t replace Java \u2014 it elevates it, turning plain classes into cooperative citizens inside a managed world.","title":"11. The Philosophy in One Line"},{"location":"concepts/languages/java/spring/core/03-quickstart/#12-the-lifecycle-of-a-spring-application","text":"You press Run . Spring starts and scans your classes. It builds a map of all components. It reflectively creates and connects them. It wraps some in proxies for AOP. It publishes \u201cContext Refreshed\u201d \u2014 your app is alive. When you stop, it calls cleanup hooks and shuts down gracefully. That\u2019s the entire story \u2014 an ecosystem built from reflection, orchestration, and trust.","title":"12. The Lifecycle of a Spring Application"},{"location":"concepts/languages/java/spring/core/03-quickstart/#13-tldr-summary","text":"Concept What It Means Why It Matters Reflection Java looking at itself Lets Spring find and create your beans Bean A managed Java object Gives you lifecycle control Dependency Injection Framework provides dependencies Removes manual wiring Inversion of Control (IoC) Framework owns object creation Makes systems modular ApplicationContext Container managing beans Central brain of your app AOP / Proxies Logic woven around methods Adds features like transactions, caching","title":"13. TL;DR Summary"},{"location":"concepts/languages/java/spring/core/03-quickstart/#final-thought","text":"Spring isn\u2019t a library you call \u2014 it\u2019s an environment you live in. It doesn\u2019t just execute code; it hosts it. Once you understand that, every @Autowired , every @Transactional , every line of your app fits into one graceful rhythm: discover, build, wire, run, extend, and clean up.","title":"\ud83e\ude9e Final Thought"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/","text":"\ud83c\udf31 Spring, Reflection & @Autowired \u2014 Cheatsheet \u00b6 Mental model \u00b6 Spring uses reflection to discover , instantiate , and connect your beans at runtime. It\u2019s not doing anything \u201cmystical\u201d \u2014 just a highly organized, optimized use of Java\u2019s reflection and classloader system. \ud83e\udded The Big Picture \u00b6 Classpath \u2192 ClassLoader \u2192 @Component scan \u2192 Reflection \u2192 Bean creation \u2192 @Autowired injection At startup, Spring Boot performs this sequence: Scans your classpath for annotated classes. Loads those .class definitions into memory via the JVM\u2019s ClassLoader. Creates Class<?> objects in metaspace. Uses reflection to: instantiate beans ( newInstance() ) read annotations ( @Component , @Autowired , @Configuration , etc.) set fields or call methods to wire dependencies \ud83e\ude9e Step-by-step breakdown \u00b6 1\ufe0f\u20e3 Classpath scanning \u00b6 Spring starts with @SpringBootApplication \u2192 triggers component scanning. @ComponentScan ( basePackages = \"com.example\" ) At runtime: Spring\u2019s scanner walks through your classpath entries (JARs, folders). It finds classes annotated with: @Component @Service @Repository @Controller It loads those .class files and keeps metadata in memory. No beans are created yet \u2014 only metadata is registered. 2\ufe0f\u20e3 Bean instantiation (reflection) \u00b6 Spring now instantiates each discovered bean reflectively. Class <?> beanClass = PaymentService . class ; Object instance = beanClass . getDeclaredConstructor (). newInstance (); Then it wraps it in a BeanDefinition \u2014 a metadata container that stores the class type, scope, and dependencies. This is done without you writing any new keyword . That\u2019s reflection in action. 3\ufe0f\u20e3 Dependency resolution ( @Autowired ) \u00b6 When Spring encounters a field like: @Service public class PaymentService { @Autowired private AuditService auditService ; } it uses reflection to perform field injection : Field f = PaymentService . class . getDeclaredField ( \"auditService\" ); f . setAccessible ( true ); f . set ( paymentServiceInstance , auditServiceInstance ); That\u2019s literally what happens behind the scenes. 4\ufe0f\u20e3 Other injection methods \u00b6 Type Example Reflection action Field injection @Autowired private Repo repo; Field.setAccessible(true); field.set(bean, value); Constructor injection @Autowired public Service(Repo repo) Read constructor metadata \u2192 invoke with arguments Setter injection @Autowired public void setRepo(Repo r) Call method reflectively with dependency All use reflection; only the injection point changes. 5\ufe0f\u20e3 @Configuration and @Bean \u00b6 When you define beans in config classes: @Configuration public class AppConfig { @Bean public UserService userService () { return new UserService (); } } Spring creates an instance of AppConfig reflectively, then uses reflection again to call the @Bean method and register its return value as another bean. \ud83e\udde9 Example \u2014 Full Reflection Cycle in Spring \u00b6 @Service public class PaymentService { @Autowired private AuditService audit ; } @Service public class AuditService {} At runtime: Spring scans \u2192 finds PaymentService and AuditService . For each, it loads the class via ClassLoader. Reflection creates bean instances. Finds @Autowired \u2192 retrieves the matching dependency. Uses Field.setAccessible(true) \u2192 injects the dependency. The fully-wired bean enters the ApplicationContext. After that, all beans behave like normal Java objects \u2014 reflection is no longer involved in normal execution. \ud83e\udde0 Where Class<?> fits in \u00b6 Spring keeps a Class<?> reference for every bean definition: BeanDefinition bd = ...; Class <?> type = bd . getBeanClass (); This allows it to: read annotations dynamically call constructors or methods reflectively create new instances via the Class<?> handle That\u2019s why Class<?> is the \u201centry ticket\u201d for all reflective operations in the Spring container. \u2699\ufe0f Internals peek \u2014 pseudo code \u00b6 for ( Class <?> clazz : scannedClasses ) { if ( clazz . isAnnotationPresent ( Component . class )) { Object bean = clazz . getDeclaredConstructor (). newInstance (); beans . put ( clazz . getSimpleName (), bean ); for ( Field field : clazz . getDeclaredFields ()) { if ( field . isAnnotationPresent ( Autowired . class )) { Object dependency = findMatchingBean ( field . getType ()); field . setAccessible ( true ); field . set ( bean , dependency ); } } } } Simplified, but this captures the essence of what Spring\u2019s IoC container does with reflection. \ud83e\udde9 ClassLoader in Spring Boot \u00b6 Spring Boot uses a custom classloader called LaunchedURLClassLoader to load nested JARs from inside your fat JAR ( app.jar ). That\u2019s how it can run with: java -jar app.jar without unpacking \u2014 the custom loader reads .class bytes directly from the JAR. \ud83d\udd0d Related annotations and reflection roles \u00b6 Annotation Purpose Reflection action @Component Marks class as Spring-managed bean Discovered via reflection scan @Autowired Marks dependency to inject Field or method reflection @Configuration Marks class providing @Bean methods Reflection to call config methods @Bean Defines bean factory method Reflection invocation @Value Injects property value Reads field or setter reflectively @PostConstruct Runs method after injection Reflective method call \ud83e\udde9 Common pitfalls \u00b6 Problem Root cause Fix NoSuchBeanDefinitionException No matching bean type found for @Autowired Check package scanning / qualifiers BeanCurrentlyInCreationException Circular dependency between beans Refactor to constructor or setter injection IllegalAccessException Private field without setAccessible(true) Spring handles this internally \u2014 but shows up in proxies if security manager blocks it ClassNotFoundException Bean class missing from classpath Add dependency or correct package name \u26a1 Performance tricks \u00b6 Spring caches every reflective lookup (constructor, field, annotation). It never scans the classpath on every request \u2014 only once at startup. Once the ApplicationContext is built, runtime overhead is negligible. You can confirm this in stack traces \u2014 reflection appears only during context bootstrap. \ud83e\udde9 Reflection in proxies (bonus) \u00b6 When you use @Transactional , @Async , or @Cacheable , Spring builds proxy objects around your beans using reflection and bytecode generation (via CGLIB or JDK proxies). Those proxies override methods dynamically to insert logic like transactions or logging \u2014 again, pure runtime reflection & bytecode magic. \ud83e\udded TL;DR Summary \u00b6 Concept Description Classpath scanning Finds annotated classes ClassLoader Loads .class bytes into JVM Reflection Creates and wires bean objects @Autowired Dependency injection using reflection ApplicationContext Registry of fully-wired beans Performance Reflection used only at startup; cached after \ud83e\udde9 One-sentence anchor \u00b6 Spring doesn\u2019t break Java\u2019s rules \u2014 it just uses reflection masterfully to discover , create , and connect your objects at runtime.","title":"Reflection & `@Autowired`"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#spring-reflection-autowired-cheatsheet","text":"","title":"\ud83c\udf31 Spring, Reflection &amp; @Autowired \u2014 Cheatsheet"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#mental-model","text":"Spring uses reflection to discover , instantiate , and connect your beans at runtime. It\u2019s not doing anything \u201cmystical\u201d \u2014 just a highly organized, optimized use of Java\u2019s reflection and classloader system.","title":"Mental model"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#the-big-picture","text":"Classpath \u2192 ClassLoader \u2192 @Component scan \u2192 Reflection \u2192 Bean creation \u2192 @Autowired injection At startup, Spring Boot performs this sequence: Scans your classpath for annotated classes. Loads those .class definitions into memory via the JVM\u2019s ClassLoader. Creates Class<?> objects in metaspace. Uses reflection to: instantiate beans ( newInstance() ) read annotations ( @Component , @Autowired , @Configuration , etc.) set fields or call methods to wire dependencies","title":"\ud83e\udded The Big Picture"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#step-by-step-breakdown","text":"","title":"\ud83e\ude9e Step-by-step breakdown"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#1-classpath-scanning","text":"Spring starts with @SpringBootApplication \u2192 triggers component scanning. @ComponentScan ( basePackages = \"com.example\" ) At runtime: Spring\u2019s scanner walks through your classpath entries (JARs, folders). It finds classes annotated with: @Component @Service @Repository @Controller It loads those .class files and keeps metadata in memory. No beans are created yet \u2014 only metadata is registered.","title":"1\ufe0f\u20e3 Classpath scanning"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#2-bean-instantiation-reflection","text":"Spring now instantiates each discovered bean reflectively. Class <?> beanClass = PaymentService . class ; Object instance = beanClass . getDeclaredConstructor (). newInstance (); Then it wraps it in a BeanDefinition \u2014 a metadata container that stores the class type, scope, and dependencies. This is done without you writing any new keyword . That\u2019s reflection in action.","title":"2\ufe0f\u20e3 Bean instantiation (reflection)"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#3-dependency-resolution-autowired","text":"When Spring encounters a field like: @Service public class PaymentService { @Autowired private AuditService auditService ; } it uses reflection to perform field injection : Field f = PaymentService . class . getDeclaredField ( \"auditService\" ); f . setAccessible ( true ); f . set ( paymentServiceInstance , auditServiceInstance ); That\u2019s literally what happens behind the scenes.","title":"3\ufe0f\u20e3 Dependency resolution (@Autowired)"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#4-other-injection-methods","text":"Type Example Reflection action Field injection @Autowired private Repo repo; Field.setAccessible(true); field.set(bean, value); Constructor injection @Autowired public Service(Repo repo) Read constructor metadata \u2192 invoke with arguments Setter injection @Autowired public void setRepo(Repo r) Call method reflectively with dependency All use reflection; only the injection point changes.","title":"4\ufe0f\u20e3 Other injection methods"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#5-configuration-and-bean","text":"When you define beans in config classes: @Configuration public class AppConfig { @Bean public UserService userService () { return new UserService (); } } Spring creates an instance of AppConfig reflectively, then uses reflection again to call the @Bean method and register its return value as another bean.","title":"5\ufe0f\u20e3 @Configuration and @Bean"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#example-full-reflection-cycle-in-spring","text":"@Service public class PaymentService { @Autowired private AuditService audit ; } @Service public class AuditService {} At runtime: Spring scans \u2192 finds PaymentService and AuditService . For each, it loads the class via ClassLoader. Reflection creates bean instances. Finds @Autowired \u2192 retrieves the matching dependency. Uses Field.setAccessible(true) \u2192 injects the dependency. The fully-wired bean enters the ApplicationContext. After that, all beans behave like normal Java objects \u2014 reflection is no longer involved in normal execution.","title":"\ud83e\udde9 Example \u2014 Full Reflection Cycle in Spring"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#where-class-fits-in","text":"Spring keeps a Class<?> reference for every bean definition: BeanDefinition bd = ...; Class <?> type = bd . getBeanClass (); This allows it to: read annotations dynamically call constructors or methods reflectively create new instances via the Class<?> handle That\u2019s why Class<?> is the \u201centry ticket\u201d for all reflective operations in the Spring container.","title":"\ud83e\udde0 Where Class&lt;?&gt; fits in"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#internals-peek-pseudo-code","text":"for ( Class <?> clazz : scannedClasses ) { if ( clazz . isAnnotationPresent ( Component . class )) { Object bean = clazz . getDeclaredConstructor (). newInstance (); beans . put ( clazz . getSimpleName (), bean ); for ( Field field : clazz . getDeclaredFields ()) { if ( field . isAnnotationPresent ( Autowired . class )) { Object dependency = findMatchingBean ( field . getType ()); field . setAccessible ( true ); field . set ( bean , dependency ); } } } } Simplified, but this captures the essence of what Spring\u2019s IoC container does with reflection.","title":"\u2699\ufe0f Internals peek \u2014 pseudo code"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#classloader-in-spring-boot","text":"Spring Boot uses a custom classloader called LaunchedURLClassLoader to load nested JARs from inside your fat JAR ( app.jar ). That\u2019s how it can run with: java -jar app.jar without unpacking \u2014 the custom loader reads .class bytes directly from the JAR.","title":"\ud83e\udde9 ClassLoader in Spring Boot"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#related-annotations-and-reflection-roles","text":"Annotation Purpose Reflection action @Component Marks class as Spring-managed bean Discovered via reflection scan @Autowired Marks dependency to inject Field or method reflection @Configuration Marks class providing @Bean methods Reflection to call config methods @Bean Defines bean factory method Reflection invocation @Value Injects property value Reads field or setter reflectively @PostConstruct Runs method after injection Reflective method call","title":"\ud83d\udd0d Related annotations and reflection roles"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#common-pitfalls","text":"Problem Root cause Fix NoSuchBeanDefinitionException No matching bean type found for @Autowired Check package scanning / qualifiers BeanCurrentlyInCreationException Circular dependency between beans Refactor to constructor or setter injection IllegalAccessException Private field without setAccessible(true) Spring handles this internally \u2014 but shows up in proxies if security manager blocks it ClassNotFoundException Bean class missing from classpath Add dependency or correct package name","title":"\ud83e\udde9 Common pitfalls"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#performance-tricks","text":"Spring caches every reflective lookup (constructor, field, annotation). It never scans the classpath on every request \u2014 only once at startup. Once the ApplicationContext is built, runtime overhead is negligible. You can confirm this in stack traces \u2014 reflection appears only during context bootstrap.","title":"\u26a1 Performance tricks"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#reflection-in-proxies-bonus","text":"When you use @Transactional , @Async , or @Cacheable , Spring builds proxy objects around your beans using reflection and bytecode generation (via CGLIB or JDK proxies). Those proxies override methods dynamically to insert logic like transactions or logging \u2014 again, pure runtime reflection & bytecode magic.","title":"\ud83e\udde9 Reflection in proxies (bonus)"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#tldr-summary","text":"Concept Description Classpath scanning Finds annotated classes ClassLoader Loads .class bytes into JVM Reflection Creates and wires bean objects @Autowired Dependency injection using reflection ApplicationContext Registry of fully-wired beans Performance Reflection used only at startup; cached after","title":"\ud83e\udded TL;DR Summary"},{"location":"concepts/languages/java/spring/core/05-reflection-and-autowired/#one-sentence-anchor","text":"Spring doesn\u2019t break Java\u2019s rules \u2014 it just uses reflection masterfully to discover , create , and connect your objects at runtime.","title":"\ud83e\udde9 One-sentence anchor"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/","text":"\ud83e\udde9 Spring Bean Anatomy \u2014 Definition, Scope, Proxy, and Lifecycle Hooks \u00b6 Essence: A Spring Bean is a managed Java object whose creation, wiring, lifecycle, and sometimes even identity are controlled by the Spring container \u2014 not by your code. It\u2019s a living object with metadata, behavior, and reflective wrapping. \ud83c\udf31 The Mental Model \u00b6 A bean in Spring is to the container what a cell is to an organism: it has a definition (DNA) , a lifecycle (birth \u2192 death) , and a membrane (proxy) that controls how it interacts with the outside world. \ud83e\uddec 1. Bean Definition \u2014 the DNA \u00b6 Before a bean exists, Spring builds a BeanDefinition \u2014 metadata describing how to create it. @Component \u2192 scanned @Bean \u2192 declared XML \u2192 defined Each definition contains: Field Description beanClass The Class<?> object of the bean scope \"singleton\" , \"prototype\" , \"request\" , etc. dependencies Other beans to inject initMethod , destroyMethod Lifecycle callbacks lazyInit Whether to delay creation until needed primary , qualifiers Conflict resolution hints The BeanDefinition lives in memory long before any object is created. \u2699\ufe0f 2. Instantiation \u2014 the Birth \u00b6 When the context is refreshed, Spring instantiates the bean via reflection : Object bean = beanClass . getDeclaredConstructor (). newInstance (); Then it resolves all declared dependencies ( @Autowired , constructor args, etc.). At this point: The object exists. Dependencies are injected. Lifecycle callbacks haven\u2019t yet run. This is the infant bean stage. \ud83e\udde9 3. Initialization \u2014 Becoming Alive \u00b6 Spring then applies post-processing and lifecycle interfaces : Mechanism Trigger Purpose @PostConstruct Annotation Custom setup logic InitializingBean.afterPropertiesSet() Interface Legacy init hook init-method XML config Alternative init BeanPostProcessor Global interceptors Modify/replace beans after creation For example, a post-processor might wrap a bean in a proxy to add behavior ( @Transactional , @Async , etc.). After initialization, the bean is fully active \u2014 ready to be used or injected elsewhere. \ud83e\ude9e 4. Proxies \u2014 The Membrane \u00b6 A proxy is a thin reflective wrapper around your bean. It intercepts method calls to add extra logic like transactions, security, or async execution. Two main types: \u00b6 Type Tool Used For JDK Dynamic Proxy Java\u2019s Proxy API Interfaces only CGLIB Proxy Bytecode subclass Concrete classes Example: @Transactional public class PaymentService { ... } Spring replaces it at runtime with something like: PaymentService$$EnhancerBySpringCGLIB$$abc123 When you call a method, the proxy runs code before and after your logic (start transaction \u2192 invoke target \u2192 commit/rollback). \ud83e\udded 5. Scopes \u2014 The Lifecycle Context \u00b6 A bean\u2019s scope defines how long it lives and where it\u2019s shared : Scope Description singleton One shared instance per context (default) prototype New instance every injection request One per HTTP request (web only) session One per HTTP session application One per servlet context websocket One per WebSocket session Example: @Scope ( \"prototype\" ) @Component public class TaskProcessor { ... } @Autowired of a prototype bean creates a fresh instance each time. \ud83e\udde9 6. Awareness Interfaces \u2014 Talking to the Container \u00b6 Some beans want to \u201cknow\u201d about their environment. Spring injects this information through special Aware interfaces : Interface What you get ApplicationContextAware Access to the context BeanNameAware The name assigned to your bean EnvironmentAware Config and property access ResourceLoaderAware File/resource utilities These aren\u2019t common for business logic, but essential for infrastructure beans (framework internals, logging, plugin systems). \ud83c\udf07 7. Destruction \u2014 Graceful Death \u00b6 At shutdown or when the context closes: Mechanism When @PreDestroy Before bean destruction DisposableBean.destroy() Legacy cleanup destroy-method XML config ContextClosedEvent Published globally Spring calls these hooks reflectively to release connections, threads, caches, etc. \ud83e\udde9 8. The Full Lifecycle Map \u00b6 1. Scan classes \u2192 build BeanDefinition 2. Instantiate \u2192 inject dependencies 3. Apply BeanPostProcessors 4. Call @PostConstruct / init-method 5. Bean ready for use 6. (Optionally) wrapped in proxy 7. Serve requests or logic 8. Context shutdown \u2192 call @PreDestroy \u26a1 Putting it Together \u2014 Reflection\u2019s Thread \u00b6 Reflection appears at every layer: Definition stage: reads annotations ( Class.isAnnotationPresent ) Instantiation stage: calls constructors Injection stage: sets fields or methods Initialization stage: invokes annotated methods Proxying stage: intercepts via dynamic subclasses Yet once the bean is active, reflection disappears \u2014 normal method calls dominate. \ud83e\udded TL;DR Summary \u00b6 Aspect Description Driven by Reflection? Definition Metadata blueprint \u2705 Instantiation Create object \u2705 Injection Wire dependencies \u2705 Post-processing Modify or proxy \u2705 Active state Business logic \u274c Destruction Cleanup hooks \u2705 \ud83e\ude9e Core takeaway \u00b6 A Spring Bean is not just an object \u2014 it\u2019s a meta-object , born from metadata, shaped by reflection, guarded by proxies, and governed by lifecycle rules. Once awakened, it becomes indistinguishable from plain Java \u2014 until the next context refresh.","title":"Bean Anatomy"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#spring-bean-anatomy-definition-scope-proxy-and-lifecycle-hooks","text":"Essence: A Spring Bean is a managed Java object whose creation, wiring, lifecycle, and sometimes even identity are controlled by the Spring container \u2014 not by your code. It\u2019s a living object with metadata, behavior, and reflective wrapping.","title":"\ud83e\udde9 Spring Bean Anatomy \u2014 Definition, Scope, Proxy, and Lifecycle Hooks"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#the-mental-model","text":"A bean in Spring is to the container what a cell is to an organism: it has a definition (DNA) , a lifecycle (birth \u2192 death) , and a membrane (proxy) that controls how it interacts with the outside world.","title":"\ud83c\udf31 The Mental Model"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#1-bean-definition-the-dna","text":"Before a bean exists, Spring builds a BeanDefinition \u2014 metadata describing how to create it. @Component \u2192 scanned @Bean \u2192 declared XML \u2192 defined Each definition contains: Field Description beanClass The Class<?> object of the bean scope \"singleton\" , \"prototype\" , \"request\" , etc. dependencies Other beans to inject initMethod , destroyMethod Lifecycle callbacks lazyInit Whether to delay creation until needed primary , qualifiers Conflict resolution hints The BeanDefinition lives in memory long before any object is created.","title":"\ud83e\uddec 1. Bean Definition \u2014 the DNA"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#2-instantiation-the-birth","text":"When the context is refreshed, Spring instantiates the bean via reflection : Object bean = beanClass . getDeclaredConstructor (). newInstance (); Then it resolves all declared dependencies ( @Autowired , constructor args, etc.). At this point: The object exists. Dependencies are injected. Lifecycle callbacks haven\u2019t yet run. This is the infant bean stage.","title":"\u2699\ufe0f 2. Instantiation \u2014 the Birth"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#3-initialization-becoming-alive","text":"Spring then applies post-processing and lifecycle interfaces : Mechanism Trigger Purpose @PostConstruct Annotation Custom setup logic InitializingBean.afterPropertiesSet() Interface Legacy init hook init-method XML config Alternative init BeanPostProcessor Global interceptors Modify/replace beans after creation For example, a post-processor might wrap a bean in a proxy to add behavior ( @Transactional , @Async , etc.). After initialization, the bean is fully active \u2014 ready to be used or injected elsewhere.","title":"\ud83e\udde9 3. Initialization \u2014 Becoming Alive"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#4-proxies-the-membrane","text":"A proxy is a thin reflective wrapper around your bean. It intercepts method calls to add extra logic like transactions, security, or async execution.","title":"\ud83e\ude9e 4. Proxies \u2014 The Membrane"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#two-main-types","text":"Type Tool Used For JDK Dynamic Proxy Java\u2019s Proxy API Interfaces only CGLIB Proxy Bytecode subclass Concrete classes Example: @Transactional public class PaymentService { ... } Spring replaces it at runtime with something like: PaymentService$$EnhancerBySpringCGLIB$$abc123 When you call a method, the proxy runs code before and after your logic (start transaction \u2192 invoke target \u2192 commit/rollback).","title":"Two main types:"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#5-scopes-the-lifecycle-context","text":"A bean\u2019s scope defines how long it lives and where it\u2019s shared : Scope Description singleton One shared instance per context (default) prototype New instance every injection request One per HTTP request (web only) session One per HTTP session application One per servlet context websocket One per WebSocket session Example: @Scope ( \"prototype\" ) @Component public class TaskProcessor { ... } @Autowired of a prototype bean creates a fresh instance each time.","title":"\ud83e\udded 5. Scopes \u2014 The Lifecycle Context"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#6-awareness-interfaces-talking-to-the-container","text":"Some beans want to \u201cknow\u201d about their environment. Spring injects this information through special Aware interfaces : Interface What you get ApplicationContextAware Access to the context BeanNameAware The name assigned to your bean EnvironmentAware Config and property access ResourceLoaderAware File/resource utilities These aren\u2019t common for business logic, but essential for infrastructure beans (framework internals, logging, plugin systems).","title":"\ud83e\udde9 6. Awareness Interfaces \u2014 Talking to the Container"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#7-destruction-graceful-death","text":"At shutdown or when the context closes: Mechanism When @PreDestroy Before bean destruction DisposableBean.destroy() Legacy cleanup destroy-method XML config ContextClosedEvent Published globally Spring calls these hooks reflectively to release connections, threads, caches, etc.","title":"\ud83c\udf07 7. Destruction \u2014 Graceful Death"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#8-the-full-lifecycle-map","text":"1. Scan classes \u2192 build BeanDefinition 2. Instantiate \u2192 inject dependencies 3. Apply BeanPostProcessors 4. Call @PostConstruct / init-method 5. Bean ready for use 6. (Optionally) wrapped in proxy 7. Serve requests or logic 8. Context shutdown \u2192 call @PreDestroy","title":"\ud83e\udde9 8. The Full Lifecycle Map"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#putting-it-together-reflections-thread","text":"Reflection appears at every layer: Definition stage: reads annotations ( Class.isAnnotationPresent ) Instantiation stage: calls constructors Injection stage: sets fields or methods Initialization stage: invokes annotated methods Proxying stage: intercepts via dynamic subclasses Yet once the bean is active, reflection disappears \u2014 normal method calls dominate.","title":"\u26a1 Putting it Together \u2014 Reflection\u2019s Thread"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#tldr-summary","text":"Aspect Description Driven by Reflection? Definition Metadata blueprint \u2705 Instantiation Create object \u2705 Injection Wire dependencies \u2705 Post-processing Modify or proxy \u2705 Active state Business logic \u274c Destruction Cleanup hooks \u2705","title":"\ud83e\udded TL;DR Summary"},{"location":"concepts/languages/java/spring/core/10-bean-anatomy/#core-takeaway","text":"A Spring Bean is not just an object \u2014 it\u2019s a meta-object , born from metadata, shaped by reflection, guarded by proxies, and governed by lifecycle rules. Once awakened, it becomes indistinguishable from plain Java \u2014 until the next context refresh.","title":"\ud83e\ude9e Core takeaway"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/","text":"\ud83c\udf3f Spring Context Lifecycle \u2014 From Startup to Shutdown \u00b6 Mental model \u00b6 Spring is like a living organism : the ApplicationContext is its brain, and your beans are the organs. At startup, Spring builds , injects , activates , and eventually disposes every bean in a predictable lifecycle \u2014 all orchestrated with reflection. \ud83e\udded High-level flow \u00b6 Spring Boot starts \u2192 creates ApplicationContext \u2192 scans classpath \u2192 registers beans \u2192 instantiates beans \u2192 injects dependencies \u2192 calls lifecycle callbacks \u2192 ready to serve At shutdown, Spring reverses the flow: \u201cCall destroy methods \u2192 close context \u2192 free resources.\u201d \ud83e\udde9 Key actors in the lifecycle \u00b6 Role Description ApplicationContext The central Spring container (brain). Manages bean creation, wiring, events, and lifecycle. BeanDefinition Metadata about each bean (class, scope, dependencies, lifecycle methods). BeanFactory Core interface that actually creates and manages beans (ApplicationContext extends it). BeanPostProcessor Hooks to modify beans after instantiation but before use. Environment Provides configuration properties. EventPublisher Broadcasts application events ( ContextRefreshedEvent , etc.). \u2699\ufe0f Step-by-step startup sequence \u00b6 1\ufe0f\u20e3 Bootstrapping \u00b6 Spring Boot\u2019s SpringApplication.run() : Creates an ApplicationContext (usually AnnotationConfigApplicationContext ). Prepares the Environment (properties, profiles). Starts component scanning. 2\ufe0f\u20e3 Scanning & registration \u00b6 Spring scans the classpath for @Component , @Service , @Repository , @Controller , and @Configuration . For each, it builds a BeanDefinition : Bean class ( Class<?> ) Scope ( singleton , prototype , etc.) Dependencies ( @Autowired , @Value ) Lifecycle callbacks ( @PostConstruct , @PreDestroy ) No beans are created yet \u2014 only registered in the context. 3\ufe0f\u20e3 Instantiation & dependency injection \u00b6 Spring goes through all registered beans. It creates instances reflectively using getDeclaredConstructor().newInstance() . Then performs dependency injection: Constructor injection: calls constructor with dependencies. Field injection: sets fields via reflection ( Field.setAccessible(true) ). Setter injection: invokes setter methods reflectively. After wiring, the bean is now constructed but not yet active . 4\ufe0f\u20e3 Post-processing \u00b6 Now, BeanPostProcessor s kick in \u2014 these are internal hooks that let Spring modify beans before and after initialization. For example: AutowiredAnnotationBeanPostProcessor \u2192 performs @Autowired injection. CommonAnnotationBeanPostProcessor \u2192 handles @PostConstruct and @PreDestroy . AopProxyCreator \u2192 wraps beans in proxies for @Transactional , @Async , etc. Custom post-processors can also modify beans dynamically. 5\ufe0f\u20e3 Initialization phase \u00b6 If a bean implements certain interfaces or annotations, Spring calls them in order: Mechanism Example Purpose InitializingBean.afterPropertiesSet() custom init logic Runs after dependency injection @PostConstruct annotated method Same purpose, modern style XML attribute init-method (legacy) Run after properties set At this point, the bean is fully initialized and enters the live context. 6\ufe0f\u20e3 Application ready phase \u00b6 When all beans are initialized: ApplicationContext publishes ContextRefreshedEvent . @EventListener and ApplicationListener beans react. Spring Boot runs CommandLineRunner and ApplicationRunner beans. The app begins serving requests (for web apps, the embedded server starts). \ud83e\udde9 Visual map \u00b6 1. Scan classes (@Component) 2. Register BeanDefinitions 3. Instantiate via reflection 4. Inject @Autowired dependencies 5. Call @PostConstruct / init-method 6. ContextRefreshedEvent fired 7. Beans fully active Shutdown: 1. Publish ContextClosedEvent 2. Call @PreDestroy / destroy-method 3. Clear caches & ClassLoaders 4. Exit JVM \u2699\ufe0f Shutdown & cleanup \u00b6 When the JVM shuts down or you call context.close() : Spring publishes ContextClosedEvent . Calls @PreDestroy methods and DisposableBean.destroy() . Destroys singletons and releases resources. Unloads classes if ClassLoaders are modularized (in app servers). \ud83e\udde9 Key lifecycle annotations and interfaces \u00b6 Type Example When called @PostConstruct public void init() After dependencies injected @PreDestroy public void cleanup() Before context shutdown InitializingBean afterPropertiesSet() After injection, before use DisposableBean destroy() On shutdown ApplicationContextAware setApplicationContext() Inject context reference @EventListener onApplicationEvent() On published events \ud83e\udde0 Reflection behind the scenes \u00b6 Reflection drives every lifecycle stage: Classpath scanning ( Class.forName ) Bean creation ( Class<?>.newInstance() ) Dependency wiring ( Field.setAccessible(true) ) Lifecycle methods ( Method.invoke ) Event publishing ( find annotated listener \u2192 invoke ) But once beans are ready, normal Java calls take over \u2014 reflection happens mostly during startup . \u26a1 Lifecycle timings (approximate) \u00b6 Phase Frequency Reflection heavy? Scanning Once \u2705 Yes Instantiation Once per bean \u2705 Yes Injection Once per bean \u2705 Yes Post-processing Once per bean \u2705 Moderate Ready state Continuous \u274c No Shutdown Once \u2705 Yes (for destroy methods) \ud83e\udde9 Simplified pseudo flow \u00b6 AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); for ( String name : ctx . getBeanDefinitionNames ()) { BeanDefinition def = ctx . getBeanFactory (). getBeanDefinition ( name ); Object bean = ctx . getBean ( name ); // triggers reflection creation/injection } ctx . close (); // triggers destroy phase \ud83e\udde9 Common pitfalls \u00b6 Symptom Likely cause Fix BeanCurrentlyInCreationException Circular dependencies Refactor to setter or constructor injection NullPointerException on injected field Bean not in component scan path Check @ComponentScan IllegalStateException: Context closed Accessing context after shutdown Manage lifecycle correctly @PostConstruct not called Method not public or wrong signature Must be public void with no args \ud83e\udde9 Useful debugging hooks \u00b6 @SpringBootApplication public class DebugApp implements CommandLineRunner { @Autowired ApplicationContext ctx ; public void run ( String ... args ) { Arrays . stream ( ctx . getBeanDefinitionNames ()) . forEach ( System . out :: println ); } } To trace lifecycle events: @Component public class EventsTracer implements ApplicationListener < ApplicationEvent > { public void onApplicationEvent ( ApplicationEvent e ) { System . out . println ( \"Event \u2192 \" + e . getClass (). getSimpleName ()); } } \ud83e\udde9 TL;DR Summary \u00b6 Stage Description Reflection role Scan Find classes via annotations Class.forName Register Store metadata none Instantiate Create objects Constructor.newInstance() Inject Wire dependencies Field.set() Initialize Run init methods Method.invoke() Active Ready for business none Shutdown Cleanup hooks Method.invoke() \ud83e\ude9e Core takeaway \u00b6 Spring\u2019s startup is a grand choreography of reflection \u2014 loading, wiring, and awakening beans into a self-managing ecosystem. Once ready, reflection steps offstage and your code runs as pure Java.","title":"Spring Context Lifecycle"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#spring-context-lifecycle-from-startup-to-shutdown","text":"","title":"\ud83c\udf3f Spring Context Lifecycle \u2014 From Startup to Shutdown"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#mental-model","text":"Spring is like a living organism : the ApplicationContext is its brain, and your beans are the organs. At startup, Spring builds , injects , activates , and eventually disposes every bean in a predictable lifecycle \u2014 all orchestrated with reflection.","title":"Mental model"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#high-level-flow","text":"Spring Boot starts \u2192 creates ApplicationContext \u2192 scans classpath \u2192 registers beans \u2192 instantiates beans \u2192 injects dependencies \u2192 calls lifecycle callbacks \u2192 ready to serve At shutdown, Spring reverses the flow: \u201cCall destroy methods \u2192 close context \u2192 free resources.\u201d","title":"\ud83e\udded High-level flow"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#key-actors-in-the-lifecycle","text":"Role Description ApplicationContext The central Spring container (brain). Manages bean creation, wiring, events, and lifecycle. BeanDefinition Metadata about each bean (class, scope, dependencies, lifecycle methods). BeanFactory Core interface that actually creates and manages beans (ApplicationContext extends it). BeanPostProcessor Hooks to modify beans after instantiation but before use. Environment Provides configuration properties. EventPublisher Broadcasts application events ( ContextRefreshedEvent , etc.).","title":"\ud83e\udde9 Key actors in the lifecycle"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#step-by-step-startup-sequence","text":"","title":"\u2699\ufe0f Step-by-step startup sequence"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#1-bootstrapping","text":"Spring Boot\u2019s SpringApplication.run() : Creates an ApplicationContext (usually AnnotationConfigApplicationContext ). Prepares the Environment (properties, profiles). Starts component scanning.","title":"1\ufe0f\u20e3 Bootstrapping"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#2-scanning-registration","text":"Spring scans the classpath for @Component , @Service , @Repository , @Controller , and @Configuration . For each, it builds a BeanDefinition : Bean class ( Class<?> ) Scope ( singleton , prototype , etc.) Dependencies ( @Autowired , @Value ) Lifecycle callbacks ( @PostConstruct , @PreDestroy ) No beans are created yet \u2014 only registered in the context.","title":"2\ufe0f\u20e3 Scanning &amp; registration"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#3-instantiation-dependency-injection","text":"Spring goes through all registered beans. It creates instances reflectively using getDeclaredConstructor().newInstance() . Then performs dependency injection: Constructor injection: calls constructor with dependencies. Field injection: sets fields via reflection ( Field.setAccessible(true) ). Setter injection: invokes setter methods reflectively. After wiring, the bean is now constructed but not yet active .","title":"3\ufe0f\u20e3 Instantiation &amp; dependency injection"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#4-post-processing","text":"Now, BeanPostProcessor s kick in \u2014 these are internal hooks that let Spring modify beans before and after initialization. For example: AutowiredAnnotationBeanPostProcessor \u2192 performs @Autowired injection. CommonAnnotationBeanPostProcessor \u2192 handles @PostConstruct and @PreDestroy . AopProxyCreator \u2192 wraps beans in proxies for @Transactional , @Async , etc. Custom post-processors can also modify beans dynamically.","title":"4\ufe0f\u20e3 Post-processing"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#5-initialization-phase","text":"If a bean implements certain interfaces or annotations, Spring calls them in order: Mechanism Example Purpose InitializingBean.afterPropertiesSet() custom init logic Runs after dependency injection @PostConstruct annotated method Same purpose, modern style XML attribute init-method (legacy) Run after properties set At this point, the bean is fully initialized and enters the live context.","title":"5\ufe0f\u20e3 Initialization phase"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#6-application-ready-phase","text":"When all beans are initialized: ApplicationContext publishes ContextRefreshedEvent . @EventListener and ApplicationListener beans react. Spring Boot runs CommandLineRunner and ApplicationRunner beans. The app begins serving requests (for web apps, the embedded server starts).","title":"6\ufe0f\u20e3 Application ready phase"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#visual-map","text":"1. Scan classes (@Component) 2. Register BeanDefinitions 3. Instantiate via reflection 4. Inject @Autowired dependencies 5. Call @PostConstruct / init-method 6. ContextRefreshedEvent fired 7. Beans fully active Shutdown: 1. Publish ContextClosedEvent 2. Call @PreDestroy / destroy-method 3. Clear caches & ClassLoaders 4. Exit JVM","title":"\ud83e\udde9 Visual map"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#shutdown-cleanup","text":"When the JVM shuts down or you call context.close() : Spring publishes ContextClosedEvent . Calls @PreDestroy methods and DisposableBean.destroy() . Destroys singletons and releases resources. Unloads classes if ClassLoaders are modularized (in app servers).","title":"\u2699\ufe0f Shutdown &amp; cleanup"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#key-lifecycle-annotations-and-interfaces","text":"Type Example When called @PostConstruct public void init() After dependencies injected @PreDestroy public void cleanup() Before context shutdown InitializingBean afterPropertiesSet() After injection, before use DisposableBean destroy() On shutdown ApplicationContextAware setApplicationContext() Inject context reference @EventListener onApplicationEvent() On published events","title":"\ud83e\udde9 Key lifecycle annotations and interfaces"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#reflection-behind-the-scenes","text":"Reflection drives every lifecycle stage: Classpath scanning ( Class.forName ) Bean creation ( Class<?>.newInstance() ) Dependency wiring ( Field.setAccessible(true) ) Lifecycle methods ( Method.invoke ) Event publishing ( find annotated listener \u2192 invoke ) But once beans are ready, normal Java calls take over \u2014 reflection happens mostly during startup .","title":"\ud83e\udde0 Reflection behind the scenes"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#lifecycle-timings-approximate","text":"Phase Frequency Reflection heavy? Scanning Once \u2705 Yes Instantiation Once per bean \u2705 Yes Injection Once per bean \u2705 Yes Post-processing Once per bean \u2705 Moderate Ready state Continuous \u274c No Shutdown Once \u2705 Yes (for destroy methods)","title":"\u26a1 Lifecycle timings (approximate)"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#simplified-pseudo-flow","text":"AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); for ( String name : ctx . getBeanDefinitionNames ()) { BeanDefinition def = ctx . getBeanFactory (). getBeanDefinition ( name ); Object bean = ctx . getBean ( name ); // triggers reflection creation/injection } ctx . close (); // triggers destroy phase","title":"\ud83e\udde9 Simplified pseudo flow"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#common-pitfalls","text":"Symptom Likely cause Fix BeanCurrentlyInCreationException Circular dependencies Refactor to setter or constructor injection NullPointerException on injected field Bean not in component scan path Check @ComponentScan IllegalStateException: Context closed Accessing context after shutdown Manage lifecycle correctly @PostConstruct not called Method not public or wrong signature Must be public void with no args","title":"\ud83e\udde9 Common pitfalls"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#useful-debugging-hooks","text":"@SpringBootApplication public class DebugApp implements CommandLineRunner { @Autowired ApplicationContext ctx ; public void run ( String ... args ) { Arrays . stream ( ctx . getBeanDefinitionNames ()) . forEach ( System . out :: println ); } } To trace lifecycle events: @Component public class EventsTracer implements ApplicationListener < ApplicationEvent > { public void onApplicationEvent ( ApplicationEvent e ) { System . out . println ( \"Event \u2192 \" + e . getClass (). getSimpleName ()); } }","title":"\ud83e\udde9 Useful debugging hooks"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#tldr-summary","text":"Stage Description Reflection role Scan Find classes via annotations Class.forName Register Store metadata none Instantiate Create objects Constructor.newInstance() Inject Wire dependencies Field.set() Initialize Run init methods Method.invoke() Active Ready for business none Shutdown Cleanup hooks Method.invoke()","title":"\ud83e\udde9 TL;DR Summary"},{"location":"concepts/languages/java/spring/core/15-context-lifecycle/#core-takeaway","text":"Spring\u2019s startup is a grand choreography of reflection \u2014 loading, wiring, and awakening beans into a self-managing ecosystem. Once ready, reflection steps offstage and your code runs as pure Java.","title":"\ud83e\ude9e Core takeaway"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/","text":"\ud83e\udde9 Dependency Injection Patterns \u2014 Constructor, Setter, and Field Injection \u00b6 Essence: Dependency Injection (DI) is how Spring supplies an object\u2019s collaborators from the outside \u2014 instead of the object creating them. It\u2019s the hands-on implementation of Inversion of Control (IoC). You don\u2019t \u201cnew\u201d dependencies \u2014 the container does , using reflection and metadata. \ud83e\udded Mental Model \u00b6 Traditional Java: public class PaymentService { private final AuditService audit = new AuditService (); } You control everything \u2014 creation, wiring, lifecycle. This is tight coupling . Spring-style DI: @Service public class PaymentService { private final AuditService audit ; public PaymentService ( AuditService audit ) { this . audit = audit ; } } Now Spring decides what instance of AuditService to inject. That\u2019s IoC in practice \u2014 you lose control of creation, gain flexibility and testability. \ud83e\uddec 1. Constructor Injection \u2014 Strong, Immutable, Recommended \u00b6 Dependencies are passed through the constructor. The bean is fully initialized at creation time \u2014 no mutable state afterward. @Service public class PaymentService { private final AuditService audit ; private final NotificationService notifier ; @Autowired public PaymentService ( AuditService audit , NotificationService notifier ) { this . audit = audit ; this . notifier = notifier ; } } \u2705 Pros \u00b6 Enforces immutability \u2014 all dependencies known upfront. Easy to test (just call constructor). Prevents circular dependencies (Spring detects them early). Works cleanly with final fields. \u26a0\ufe0f Cons \u00b6 Slightly verbose for many parameters. If there\u2019s a circular dependency, you must refactor (Spring can\u2019t resolve it automatically). \ud83e\udde0 Under the hood \u00b6 Spring reads constructor metadata using reflection. Chooses the \u201cprimary\u201d constructor (or one annotated with @Autowired ). Instantiates dependencies recursively, then calls the constructor reflectively. \ud83e\udde9 2. Setter Injection \u2014 Flexible, Mutable, Legacy-friendly \u00b6 Dependencies are provided after the object is created, through setter methods. @Service public class PaymentService { private AuditService audit ; @Autowired public void setAuditService ( AuditService audit ) { this . audit = audit ; } } \u2705 Pros \u00b6 Useful for optional dependencies (you can omit some setters). Plays nicely with legacy beans that have no constructor injection. Can rewire or modify dependency after creation (in rare cases). \u26a0\ufe0f Cons \u00b6 Mutable \u2192 less safe. Object might exist in half-initialized state if not all setters are called. Harder to enforce required dependencies. \ud83e\udde0 Reflection flow \u00b6 Spring creates instance via no-arg constructor. Finds all methods annotated with @Autowired . Invokes them reflectively with matching beans. \ud83e\ude9e 3. Field Injection \u2014 Shortcut, but Dangerous in Core Code \u00b6 Dependencies are injected directly into private fields using reflection. It\u2019s concise, but hides dependencies and complicates testing. @Service public class PaymentService { @Autowired private AuditService audit ; } \u2705 Pros \u00b6 Minimal boilerplate. Handy for prototypes, quick demos, or tests. \u26a0\ufe0f Cons \u00b6 Hidden dependencies \u2014 constructor doesn\u2019t reveal requirements. Harder to write unit tests (can\u2019t mock easily without reflection tools). No immutability guarantees. Can fail silently if @Autowired(required = false) is used carelessly. \ud83e\udde0 Reflection flow \u00b6 Spring sets field accessibility with setAccessible(true) and assigns value directly: field . set ( beanInstance , dependencyInstance ); * No constructor or setter involved. \ud83e\udde9 4. Qualifiers & Ambiguity Resolution \u00b6 When multiple beans of the same type exist, Spring must decide which one to inject. That\u2019s where qualifiers come in. @Service ( \"emailNotifier\" ) public class EmailNotificationService implements Notifier {} @Service ( \"smsNotifier\" ) public class SmsNotificationService implements Notifier {} @Service public class PaymentService { private final Notifier notifier ; public PaymentService ( @Qualifier ( \"emailNotifier\" ) Notifier notifier ) { this . notifier = notifier ; } } Other options: @Primary \u2014 marks default bean for a type. @Qualifier \u2014 explicitly selects one. @Profile \u2014 activates beans per environment profile. \u2699\ufe0f 5. Optional and Lazy Injection \u00b6 Technique Description @Autowired(required = false) Allows optional dependency; null if absent. Optional<T> Preferred over required=false , more explicit. @Lazy Injects a proxy; bean created only when first used. @Autowired @Lazy private ExpensiveService heavy ; At runtime, Spring injects a proxy , not the real bean. The target is created only when heavy is first called. \ud83e\udde9 6. When to Use Which \u00b6 Pattern Ideal Use Case Notes Constructor Mandatory dependencies; core business beans Clean, testable, immutable Setter Optional dependencies; legacy beans Useful when partial config is allowed Field Quick wiring; small demos or tests Avoid in production core logic \ud83e\udde0 7. How Reflection Powers All DI \u00b6 Regardless of style, Spring always: Retrieves the target Class<?> . Scans for @Autowired , @Qualifier , etc. Resolves bean dependencies recursively. Uses reflection to call: Constructor \u2192 newInstance(args) Setter \u2192 method.invoke(bean, dep) Field \u2192 field.set(bean, dep) That\u2019s how the DI patterns are unified internally \u2014 they\u2019re just different reflection entry points . \ud83e\udded 8. Common Pitfalls \u00b6 Symptom Root Cause Fix NoSuchBeanDefinitionException Dependency type not found Add or scan the missing bean BeanCurrentlyInCreationException Circular constructor injection Refactor one side to setter injection NullPointerException on injected field Bean not in component scan path Adjust @ComponentScan or configuration Conflicting beans Multiple candidates Add @Qualifier or @Primary \ud83e\udde9 9. Conceptual Summary \u00b6 Layer What happens Reflection role BeanDefinition Dependencies recorded Reads annotations Instantiation Bean created Calls constructor Injection Dependencies wired Sets fields/methods Initialization Post-construct logic Invokes annotated methods \ud83e\ude9e TL;DR \u00b6 All DI patterns are just different \u201cdoors\u201d through which Spring enters your class. Constructor injection is the front door \u2014 safest and most explicit. Setter is the side door \u2014 flexible, but open to misuse. Field is the window \u2014 quick, but risky if overused. \ud83e\udde9 Core Takeaway \u00b6 Dependency Injection is how Spring performs Inversion of Control . It\u2019s not magic \u2014 just reflection, metadata, and a disciplined refusal to use new .","title":"Dependency Injection Patterns"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#dependency-injection-patterns-constructor-setter-and-field-injection","text":"Essence: Dependency Injection (DI) is how Spring supplies an object\u2019s collaborators from the outside \u2014 instead of the object creating them. It\u2019s the hands-on implementation of Inversion of Control (IoC). You don\u2019t \u201cnew\u201d dependencies \u2014 the container does , using reflection and metadata.","title":"\ud83e\udde9 Dependency Injection Patterns \u2014 Constructor, Setter, and Field Injection"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#mental-model","text":"Traditional Java: public class PaymentService { private final AuditService audit = new AuditService (); } You control everything \u2014 creation, wiring, lifecycle. This is tight coupling . Spring-style DI: @Service public class PaymentService { private final AuditService audit ; public PaymentService ( AuditService audit ) { this . audit = audit ; } } Now Spring decides what instance of AuditService to inject. That\u2019s IoC in practice \u2014 you lose control of creation, gain flexibility and testability.","title":"\ud83e\udded Mental Model"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#1-constructor-injection-strong-immutable-recommended","text":"Dependencies are passed through the constructor. The bean is fully initialized at creation time \u2014 no mutable state afterward. @Service public class PaymentService { private final AuditService audit ; private final NotificationService notifier ; @Autowired public PaymentService ( AuditService audit , NotificationService notifier ) { this . audit = audit ; this . notifier = notifier ; } }","title":"\ud83e\uddec 1. Constructor Injection \u2014 Strong, Immutable, Recommended"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#pros","text":"Enforces immutability \u2014 all dependencies known upfront. Easy to test (just call constructor). Prevents circular dependencies (Spring detects them early). Works cleanly with final fields.","title":"\u2705 Pros"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#cons","text":"Slightly verbose for many parameters. If there\u2019s a circular dependency, you must refactor (Spring can\u2019t resolve it automatically).","title":"\u26a0\ufe0f Cons"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#under-the-hood","text":"Spring reads constructor metadata using reflection. Chooses the \u201cprimary\u201d constructor (or one annotated with @Autowired ). Instantiates dependencies recursively, then calls the constructor reflectively.","title":"\ud83e\udde0 Under the hood"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#2-setter-injection-flexible-mutable-legacy-friendly","text":"Dependencies are provided after the object is created, through setter methods. @Service public class PaymentService { private AuditService audit ; @Autowired public void setAuditService ( AuditService audit ) { this . audit = audit ; } }","title":"\ud83e\udde9 2. Setter Injection \u2014 Flexible, Mutable, Legacy-friendly"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#pros_1","text":"Useful for optional dependencies (you can omit some setters). Plays nicely with legacy beans that have no constructor injection. Can rewire or modify dependency after creation (in rare cases).","title":"\u2705 Pros"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#cons_1","text":"Mutable \u2192 less safe. Object might exist in half-initialized state if not all setters are called. Harder to enforce required dependencies.","title":"\u26a0\ufe0f Cons"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#reflection-flow","text":"Spring creates instance via no-arg constructor. Finds all methods annotated with @Autowired . Invokes them reflectively with matching beans.","title":"\ud83e\udde0 Reflection flow"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#3-field-injection-shortcut-but-dangerous-in-core-code","text":"Dependencies are injected directly into private fields using reflection. It\u2019s concise, but hides dependencies and complicates testing. @Service public class PaymentService { @Autowired private AuditService audit ; }","title":"\ud83e\ude9e 3. Field Injection \u2014 Shortcut, but Dangerous in Core Code"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#pros_2","text":"Minimal boilerplate. Handy for prototypes, quick demos, or tests.","title":"\u2705 Pros"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#cons_2","text":"Hidden dependencies \u2014 constructor doesn\u2019t reveal requirements. Harder to write unit tests (can\u2019t mock easily without reflection tools). No immutability guarantees. Can fail silently if @Autowired(required = false) is used carelessly.","title":"\u26a0\ufe0f Cons"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#reflection-flow_1","text":"Spring sets field accessibility with setAccessible(true) and assigns value directly: field . set ( beanInstance , dependencyInstance ); * No constructor or setter involved.","title":"\ud83e\udde0 Reflection flow"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#4-qualifiers-ambiguity-resolution","text":"When multiple beans of the same type exist, Spring must decide which one to inject. That\u2019s where qualifiers come in. @Service ( \"emailNotifier\" ) public class EmailNotificationService implements Notifier {} @Service ( \"smsNotifier\" ) public class SmsNotificationService implements Notifier {} @Service public class PaymentService { private final Notifier notifier ; public PaymentService ( @Qualifier ( \"emailNotifier\" ) Notifier notifier ) { this . notifier = notifier ; } } Other options: @Primary \u2014 marks default bean for a type. @Qualifier \u2014 explicitly selects one. @Profile \u2014 activates beans per environment profile.","title":"\ud83e\udde9 4. Qualifiers &amp; Ambiguity Resolution"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#5-optional-and-lazy-injection","text":"Technique Description @Autowired(required = false) Allows optional dependency; null if absent. Optional<T> Preferred over required=false , more explicit. @Lazy Injects a proxy; bean created only when first used. @Autowired @Lazy private ExpensiveService heavy ; At runtime, Spring injects a proxy , not the real bean. The target is created only when heavy is first called.","title":"\u2699\ufe0f 5. Optional and Lazy Injection"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#6-when-to-use-which","text":"Pattern Ideal Use Case Notes Constructor Mandatory dependencies; core business beans Clean, testable, immutable Setter Optional dependencies; legacy beans Useful when partial config is allowed Field Quick wiring; small demos or tests Avoid in production core logic","title":"\ud83e\udde9 6. When to Use Which"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#7-how-reflection-powers-all-di","text":"Regardless of style, Spring always: Retrieves the target Class<?> . Scans for @Autowired , @Qualifier , etc. Resolves bean dependencies recursively. Uses reflection to call: Constructor \u2192 newInstance(args) Setter \u2192 method.invoke(bean, dep) Field \u2192 field.set(bean, dep) That\u2019s how the DI patterns are unified internally \u2014 they\u2019re just different reflection entry points .","title":"\ud83e\udde0 7. How Reflection Powers All DI"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#8-common-pitfalls","text":"Symptom Root Cause Fix NoSuchBeanDefinitionException Dependency type not found Add or scan the missing bean BeanCurrentlyInCreationException Circular constructor injection Refactor one side to setter injection NullPointerException on injected field Bean not in component scan path Adjust @ComponentScan or configuration Conflicting beans Multiple candidates Add @Qualifier or @Primary","title":"\ud83e\udded 8. Common Pitfalls"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#9-conceptual-summary","text":"Layer What happens Reflection role BeanDefinition Dependencies recorded Reads annotations Instantiation Bean created Calls constructor Injection Dependencies wired Sets fields/methods Initialization Post-construct logic Invokes annotated methods","title":"\ud83e\udde9 9. Conceptual Summary"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#tldr","text":"All DI patterns are just different \u201cdoors\u201d through which Spring enters your class. Constructor injection is the front door \u2014 safest and most explicit. Setter is the side door \u2014 flexible, but open to misuse. Field is the window \u2014 quick, but risky if overused.","title":"\ud83e\ude9e TL;DR"},{"location":"concepts/languages/java/spring/core/20-dependency-injection-patterns/#core-takeaway","text":"Dependency Injection is how Spring performs Inversion of Control . It\u2019s not magic \u2014 just reflection, metadata, and a disciplined refusal to use new .","title":"\ud83e\udde9 Core Takeaway"},{"location":"concepts/languages/java/spring/core/25-ioc-container/","text":"\ud83e\udde0 Spring IoC Container \u2014 The Philosophy Behind the Framework \u00b6 Essence: Inversion of Control (IoC) means your code stops controlling object creation and wiring \u2014 the framework does it for you. Spring\u2019s IoC container is the conductor that builds, connects, and manages every bean, allowing you to focus on behavior, not plumbing. \ud83e\udde9 1. Mental Model \u2014 From \u201cYou control\u201d to \u201cFramework controls\u201d \u00b6 Traditional Java code: UserService userService = new UserService (); PaymentService paymentService = new PaymentService ( userService ); You create and wire everything manually \u2014 your code controls the flow . In Spring: @Service public class PaymentService { private final UserService userService ; public PaymentService ( UserService userService ) { this . userService = userService ; } } You no longer instantiate UserService . Spring\u2019s container discovers , creates , and injects it for you. Your control is inverted \u2014 you declare what you need, not how to get it. \ud83c\udf31 2. The Core Idea \u00b6 IoC = Objects don\u2019t build their dependencies. They receive them. It\u2019s like a play: Your beans are the actors. The Spring container is the stage manager \u2014 providing props, calling actors on stage, cleaning up after the show. You no longer micromanage lifecycles. The container does. \ud83e\uddec 3. The Container \u2014 The Heart of Spring \u00b6 The IoC container is any implementation of BeanFactory or its richer cousin ApplicationContext . Key responsibilities: \u00b6 Manage bean lifecycles \u2014 creation \u2192 injection \u2192 initialization \u2192 destruction. Resolve dependencies \u2014 match required types and qualifiers. Provide configuration context \u2014 environment, profiles, resources. Handle events and listeners. The two main levels: \u00b6 Container Description BeanFactory Core container; provides basic DI. ApplicationContext Extends BeanFactory with events, messages, and auto-configuration. \u2699\ufe0f 4. How IoC Works in Practice \u00b6 At startup, Spring follows this flow: 1. Load configuration sources (annotations, XML, etc.) 2. Build BeanDefinitions (metadata about each bean) 3. Instantiate beans via reflection 4. Inject dependencies (constructor, setter, or field) 5. Apply post-processors and lifecycle hooks 6. Serve fully-wired beans on request You can retrieve beans manually: ApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); PaymentService payment = ctx . getBean ( PaymentService . class ); \u2026but in practice, the container injects them automatically wherever needed. \ud83e\udded 5. IoC vs DI \u2014 The Relationship \u00b6 Concept Description IoC (Inversion of Control) The architectural principle \u2014 you hand over control to the container. DI (Dependency Injection) The implementation pattern \u2014 how the container supplies dependencies. So: IoC is the \u201cwhy\u201d; DI is the \u201chow.\u201d IoC without DI is just delegation. DI without IoC is just parameter passing. Spring unites them both elegantly. \ud83e\udde9 6. From Configuration to Reality \u00b6 Spring can define beans in several ways \u2014 all end up in the IoC container. Annotation-based (modern) \u00b6 @Configuration @ComponentScan public class AppConfig {} XML-based (legacy) \u00b6 <beans> <bean id= \"paymentService\" class= \"com.app.PaymentService\" /> </beans> Programmatic (manual) \u00b6 GenericApplicationContext ctx = new GenericApplicationContext (); ctx . registerBean ( PaymentService . class ); ctx . refresh (); All roads lead to a BeanDefinition \u2014 Spring\u2019s internal record of what to create, how, and when. \ud83e\udde9 7. The Role of Reflection and Metadata \u00b6 Spring\u2019s IoC container is metadata-driven . It reads: Annotations like @Component , @Autowired , @Configuration , @Bean XML bean definitions Programmatic registrations Then, using reflection: Loads class definitions ( ClassLoader ) Instantiates via constructors Injects fields and methods Invokes lifecycle callbacks So IoC isn\u2019t runtime \u201cmagic\u201d \u2014 it\u2019s a systematic use of reflection guided by metadata . \ud83e\ude9e 8. Benefits of IoC \u00b6 Benefit Explanation Decoupling Classes depend on interfaces, not implementations. Configurability Behavior changes via configuration, not code edits. Testability Dependencies can be replaced with mocks easily. Lifecycle management Framework ensures proper startup/shutdown. Extensibility Post-processors, events, and custom scopes are plug-ins, not hardcoded logic. \u26a1 9. Example \u2014 IoC in Action \u00b6 @Service public class OrderService { private final PaymentService payment ; private final InventoryService inventory ; @Autowired public OrderService ( PaymentService payment , InventoryService inventory ) { this . payment = payment ; this . inventory = inventory ; } public void placeOrder () { inventory . reserve (); payment . process (); } } At runtime: Spring finds all @Service classes. Builds metadata for each. Reflectively creates PaymentService and InventoryService . Reflectively calls new OrderService(payment, inventory) . Registers it in the context. All three beans are now managed \u2014 reused, cached, and cleaned up automatically. \ud83e\udde9 10. How IoC Enables Spring Ecosystem \u00b6 Once IoC exists, everything else in Spring \u201cplugs in\u201d: AOP uses proxies around beans. Spring Boot auto-registers beans dynamically. Spring MVC injects controllers, services, and repositories automatically. Spring Data builds repositories at runtime from interfaces. IoC turns your codebase into a self-assembling system . \ud83e\uddf1 11. Debugging & Understanding the Container \u00b6 If you want to see the IoC container at work: @SpringBootApplication public class DebugApp implements CommandLineRunner { @Autowired ApplicationContext ctx ; public void run ( String ... args ) { Arrays . stream ( ctx . getBeanDefinitionNames ()) . forEach ( System . out :: println ); } } Or listen to lifecycle events: @Component public class ContextEvents implements ApplicationListener < ApplicationEvent > { public void onApplicationEvent ( ApplicationEvent event ) { System . out . println ( \"\u2192 \" + event . getClass (). getSimpleName ()); } } This reveals every bean and event during startup \u2014 the container\u2019s heartbeat. \ud83e\uddec 12. Common Misconceptions \u00b6 Myth Reality \u201cIoC just means using @Autowired .\u201d @Autowired is DI \u2014 IoC is the architecture enabling it. \u201cSpring creates everything magically.\u201d It\u2019s deterministic reflection + metadata + lifecycle hooks. \u201cIoC is only for frameworks.\u201d The principle exists in many systems \u2014 even event loops invert control. \u201cManual new is bad.\u201d Not always \u2014 small, independent objects can still be created manually outside the container. \ud83e\ude9e TL;DR Summary \u00b6 Concept Description Analogy IoC Framework controls creation and flow You hand the steering wheel to the framework DI Container supplies dependencies Framework passes actors their props ApplicationContext Central brain managing beans The stage where everything performs BeanDefinition Metadata blueprint for beans DNA of each bean Reflection Mechanism enabling IoC The microscope Spring uses to see your classes \ud83e\udde9 Core Takeaway \u00b6 Inversion of Control is the soul of Spring. Reflection and dependency injection are its hands, lifecycle is its pulse, and the ApplicationContext is its brain. You write what should happen \u2014 the container decides when and how.","title":"IoC Container"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#spring-ioc-container-the-philosophy-behind-the-framework","text":"Essence: Inversion of Control (IoC) means your code stops controlling object creation and wiring \u2014 the framework does it for you. Spring\u2019s IoC container is the conductor that builds, connects, and manages every bean, allowing you to focus on behavior, not plumbing.","title":"\ud83e\udde0 Spring IoC Container \u2014 The Philosophy Behind the Framework"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#1-mental-model-from-you-control-to-framework-controls","text":"Traditional Java code: UserService userService = new UserService (); PaymentService paymentService = new PaymentService ( userService ); You create and wire everything manually \u2014 your code controls the flow . In Spring: @Service public class PaymentService { private final UserService userService ; public PaymentService ( UserService userService ) { this . userService = userService ; } } You no longer instantiate UserService . Spring\u2019s container discovers , creates , and injects it for you. Your control is inverted \u2014 you declare what you need, not how to get it.","title":"\ud83e\udde9 1. Mental Model \u2014 From \u201cYou control\u201d to \u201cFramework controls\u201d"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#2-the-core-idea","text":"IoC = Objects don\u2019t build their dependencies. They receive them. It\u2019s like a play: Your beans are the actors. The Spring container is the stage manager \u2014 providing props, calling actors on stage, cleaning up after the show. You no longer micromanage lifecycles. The container does.","title":"\ud83c\udf31 2. The Core Idea"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#3-the-container-the-heart-of-spring","text":"The IoC container is any implementation of BeanFactory or its richer cousin ApplicationContext .","title":"\ud83e\uddec 3. The Container \u2014 The Heart of Spring"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#key-responsibilities","text":"Manage bean lifecycles \u2014 creation \u2192 injection \u2192 initialization \u2192 destruction. Resolve dependencies \u2014 match required types and qualifiers. Provide configuration context \u2014 environment, profiles, resources. Handle events and listeners.","title":"Key responsibilities:"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#the-two-main-levels","text":"Container Description BeanFactory Core container; provides basic DI. ApplicationContext Extends BeanFactory with events, messages, and auto-configuration.","title":"The two main levels:"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#4-how-ioc-works-in-practice","text":"At startup, Spring follows this flow: 1. Load configuration sources (annotations, XML, etc.) 2. Build BeanDefinitions (metadata about each bean) 3. Instantiate beans via reflection 4. Inject dependencies (constructor, setter, or field) 5. Apply post-processors and lifecycle hooks 6. Serve fully-wired beans on request You can retrieve beans manually: ApplicationContext ctx = new AnnotationConfigApplicationContext ( AppConfig . class ); PaymentService payment = ctx . getBean ( PaymentService . class ); \u2026but in practice, the container injects them automatically wherever needed.","title":"\u2699\ufe0f 4. How IoC Works in Practice"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#5-ioc-vs-di-the-relationship","text":"Concept Description IoC (Inversion of Control) The architectural principle \u2014 you hand over control to the container. DI (Dependency Injection) The implementation pattern \u2014 how the container supplies dependencies. So: IoC is the \u201cwhy\u201d; DI is the \u201chow.\u201d IoC without DI is just delegation. DI without IoC is just parameter passing. Spring unites them both elegantly.","title":"\ud83e\udded 5. IoC vs DI \u2014 The Relationship"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#6-from-configuration-to-reality","text":"Spring can define beans in several ways \u2014 all end up in the IoC container.","title":"\ud83e\udde9 6. From Configuration to Reality"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#annotation-based-modern","text":"@Configuration @ComponentScan public class AppConfig {}","title":"Annotation-based (modern)"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#xml-based-legacy","text":"<beans> <bean id= \"paymentService\" class= \"com.app.PaymentService\" /> </beans>","title":"XML-based (legacy)"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#programmatic-manual","text":"GenericApplicationContext ctx = new GenericApplicationContext (); ctx . registerBean ( PaymentService . class ); ctx . refresh (); All roads lead to a BeanDefinition \u2014 Spring\u2019s internal record of what to create, how, and when.","title":"Programmatic (manual)"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#7-the-role-of-reflection-and-metadata","text":"Spring\u2019s IoC container is metadata-driven . It reads: Annotations like @Component , @Autowired , @Configuration , @Bean XML bean definitions Programmatic registrations Then, using reflection: Loads class definitions ( ClassLoader ) Instantiates via constructors Injects fields and methods Invokes lifecycle callbacks So IoC isn\u2019t runtime \u201cmagic\u201d \u2014 it\u2019s a systematic use of reflection guided by metadata .","title":"\ud83e\udde9 7. The Role of Reflection and Metadata"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#8-benefits-of-ioc","text":"Benefit Explanation Decoupling Classes depend on interfaces, not implementations. Configurability Behavior changes via configuration, not code edits. Testability Dependencies can be replaced with mocks easily. Lifecycle management Framework ensures proper startup/shutdown. Extensibility Post-processors, events, and custom scopes are plug-ins, not hardcoded logic.","title":"\ud83e\ude9e 8. Benefits of IoC"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#9-example-ioc-in-action","text":"@Service public class OrderService { private final PaymentService payment ; private final InventoryService inventory ; @Autowired public OrderService ( PaymentService payment , InventoryService inventory ) { this . payment = payment ; this . inventory = inventory ; } public void placeOrder () { inventory . reserve (); payment . process (); } } At runtime: Spring finds all @Service classes. Builds metadata for each. Reflectively creates PaymentService and InventoryService . Reflectively calls new OrderService(payment, inventory) . Registers it in the context. All three beans are now managed \u2014 reused, cached, and cleaned up automatically.","title":"\u26a1 9. Example \u2014 IoC in Action"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#10-how-ioc-enables-spring-ecosystem","text":"Once IoC exists, everything else in Spring \u201cplugs in\u201d: AOP uses proxies around beans. Spring Boot auto-registers beans dynamically. Spring MVC injects controllers, services, and repositories automatically. Spring Data builds repositories at runtime from interfaces. IoC turns your codebase into a self-assembling system .","title":"\ud83e\udde9 10. How IoC Enables Spring Ecosystem"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#11-debugging-understanding-the-container","text":"If you want to see the IoC container at work: @SpringBootApplication public class DebugApp implements CommandLineRunner { @Autowired ApplicationContext ctx ; public void run ( String ... args ) { Arrays . stream ( ctx . getBeanDefinitionNames ()) . forEach ( System . out :: println ); } } Or listen to lifecycle events: @Component public class ContextEvents implements ApplicationListener < ApplicationEvent > { public void onApplicationEvent ( ApplicationEvent event ) { System . out . println ( \"\u2192 \" + event . getClass (). getSimpleName ()); } } This reveals every bean and event during startup \u2014 the container\u2019s heartbeat.","title":"\ud83e\uddf1 11. Debugging &amp; Understanding the Container"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#12-common-misconceptions","text":"Myth Reality \u201cIoC just means using @Autowired .\u201d @Autowired is DI \u2014 IoC is the architecture enabling it. \u201cSpring creates everything magically.\u201d It\u2019s deterministic reflection + metadata + lifecycle hooks. \u201cIoC is only for frameworks.\u201d The principle exists in many systems \u2014 even event loops invert control. \u201cManual new is bad.\u201d Not always \u2014 small, independent objects can still be created manually outside the container.","title":"\ud83e\uddec 12. Common Misconceptions"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#tldr-summary","text":"Concept Description Analogy IoC Framework controls creation and flow You hand the steering wheel to the framework DI Container supplies dependencies Framework passes actors their props ApplicationContext Central brain managing beans The stage where everything performs BeanDefinition Metadata blueprint for beans DNA of each bean Reflection Mechanism enabling IoC The microscope Spring uses to see your classes","title":"\ud83e\ude9e TL;DR Summary"},{"location":"concepts/languages/java/spring/core/25-ioc-container/#core-takeaway","text":"Inversion of Control is the soul of Spring. Reflection and dependency injection are its hands, lifecycle is its pulse, and the ApplicationContext is its brain. You write what should happen \u2014 the container decides when and how.","title":"\ud83e\udde9 Core Takeaway"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/","text":"\ud83d\udd78\ufe0f Spring AOP \u2014 Crosscutting Logic & Proxy Magic \u00b6 Essence: Aspect-Oriented Programming (AOP) in Spring allows you to inject behavior around existing methods \u2014 without modifying their source code. It\u2019s how features like @Transactional , @Cacheable , or @Async work: Spring wraps your beans in proxies that intercept method calls and run extra logic before or after them. \ud83e\udde9 1. The Core Idea \u2014 Code that Crosses Boundaries \u00b6 Some logic doesn\u2019t belong to any one class \u2014 logging, security, transactions, caching, metrics. These are called crosscutting concerns . Without AOP: public class PaymentService { public void pay () { System . out . println ( \"Start transaction\" ); // business logic System . out . println ( \"Commit transaction\" ); } } With AOP: @Transactional public void pay () { // pure business logic } The container now weaves transaction management around your method automatically. \ud83e\udde0 2. Mental Model \u2014 Wrapping, Not Editing \u00b6 Think of AOP like a transparent shell wrapped around your bean: client \u2192 [Proxy wrapper] \u2192 [Your actual bean] The proxy: Intercepts the call. Runs extra logic before and/or after your method. Optionally changes arguments or return values. Delegates to your original bean. You keep writing pure business code; Spring handles the \u201cboring glue.\u201d \ud83e\udde9 3. AOP in Spring \u2014 How It\u2019s Implemented \u00b6 Spring AOP is proxy-based . It doesn\u2019t rewrite your bytecode (like AspectJ can). Instead, it dynamically builds a wrapper object at runtime. Two proxy types: \u00b6 Proxy Type Mechanism Used For JDK Dynamic Proxy java.lang.reflect.Proxy Beans that implement interfaces CGLIB Proxy Bytecode subclass (Enhancer) Concrete classes without interfaces Spring chooses automatically \u2014 JDK for interfaces, CGLIB for classes. Example of generated class: PaymentService$$EnhancerBySpringCGLIB$$123abc \u2699\ufe0f 4. AOP Terminology (Decoded Simply) \u00b6 Term Meaning Analogy Aspect A module of crosscutting logic A reusable lens applied to methods Advice The actual code run before/after/around a method The \u201cwhat\u201d in the lens Join Point A point in program execution (method call) The place where you can attach logic Pointcut A rule defining which join points to intercept The targeting scope Weaving The act of applying aspects to beans Putting the lens on Proxy The runtime wrapper performing interception The lens mount \ud83e\udde9 5. Example \u2014 Custom Aspect in Action \u00b6 @Aspect @Component public class LoggingAspect { @Before ( \"execution(* com.app.service.*.*(..))\" ) public void logStart ( JoinPoint jp ) { System . out . println ( \"\u25b6 \" + jp . getSignature ()); } @AfterReturning ( pointcut = \"execution(* com.app.service.*.*(..))\" , returning = \"result\" ) public void logEnd ( JoinPoint jp , Object result ) { System . out . println ( \"\u2714 \" + jp . getSignature () + \" returned \" + result ); } } When you call any method in com.app.service , Spring injects your LoggingAspect logic before and after the target method. \ud83e\udde9 6. The Lifecycle of an AOP Call \u00b6 Client \u2192 Proxy bean \u2193 Before advice (e.g., open transaction) \u2193 Target method invocation (your bean logic) \u2193 After/AfterReturning advice (e.g., commit) \u2193 Return result to caller This flow is executed inside the proxy , invisible to your code. \ud83e\udde9 7. Built-in AOP Use Cases in Spring \u00b6 Annotation Description Implemented Via @Transactional Begin/commit/rollback database transactions Proxy wrapping via TransactionInterceptor @Async Run method on separate thread Proxy executes in TaskExecutor @Cacheable Cache method results Proxy checks cache before invoking @Secured / @PreAuthorize Security access checks Proxy consults Spring Security interceptors @Retryable Automatic retry on failure Proxy repeats method calls Every one of these works by the same pattern: intercept \u2192 decide \u2192 invoke . \ud83e\uddec 8. Under the Hood \u2014 Reflection & IoC Working Together \u00b6 During context initialization, Spring detects @Aspect beans. Registers them via AnnotationAwareAspectJAutoProxyCreator . For every target bean: It checks if any aspect applies (based on pointcuts). If yes \u2014 creates a proxy bean wrapping the original. The proxy delegates all lifecycle management back to IoC. IoC builds the object graph; AOP wraps it. \ud83e\udded 9. Weaving Types \u2014 When It Happens \u00b6 Weaving Type When Used By Compile-time At .class generation AspectJ (not Spring) Load-time During class loading AspectJ LTW Runtime (proxy) During Spring context initialization Spring AOP Spring\u2019s choice of runtime weaving is deliberate \u2014 lightweight, portable, and configuration-free. \ud83e\udde9 10. Example of Proxy Structure (Simplified) \u00b6 Imagine you have: public interface PaymentService { void process (); } Spring creates something conceptually like: class PaymentServiceProxy implements PaymentService { private final PaymentService target ; private final TransactionManager txManager ; public void process () { txManager . begin (); try { target . process (); txManager . commit (); } catch ( Exception e ) { txManager . rollback (); throw e ; } } } This is what @Transactional really means. You get structured behavior \u2014 without changing the target code. \u26a1 11. Advantages of AOP \u00b6 Benefit Description Separation of concerns Business logic is clean, infrastructure logic lives elsewhere. Reusability Same aspect can apply to many beans. Consistency Uniform handling of crosscutting tasks. Non-intrusive No inheritance or modification needed. Testability You can mock target beans without touching proxy logic. \u26a0\ufe0f 12. Common Pitfalls \u00b6 Issue Cause Fix Proxy doesn\u2019t trigger Calling method internally within same class AOP only applies to external calls through proxy Final methods/classes ignored CGLIB can\u2019t override final methods Avoid final on proxied classes/methods Lost annotations on proxies Proxy class doesn\u2019t inherit all metadata Use @Target(ElementType.METHOD) carefully Debug confusion Stack traces show proxy names Use AopUtils.getTargetClass(bean) for clarity \ud83e\udde9 13. AOP and Performance \u00b6 Proxy creation happens only once at startup . Invocation overhead is minimal \u2014 roughly the cost of an extra method call. The real cost comes from your advice logic (e.g., logging, transactions). AOP is designed for coarse-grained interception \u2014 not per-loop micro-optimizations. \ud83e\uddec 14. AOP in the Big Picture \u00b6 [Reflection] \u2192 enables DI \u2193 [IoC Container] \u2192 controls object lifecycle \u2193 [AOP Proxies] \u2192 control method execution Reflection gives Spring access . IoC gives it authority . AOP gives it influence . Together they form a layered architecture: Reflection \u2192 IoC \u2192 AOP \u2192 Frameworks (Boot, Data, MVC, Security, etc.) \ud83e\udded TL;DR Summary \u00b6 Concept Description Mechanism Aspect Encapsulated crosscutting logic @Aspect Advice Before/after/around logic Annotated methods Pointcut Defines where advice applies execution(...) expressions Proxy Wrapper intercepting calls JDK or CGLIB Weaving Applying aspects to beans Runtime proxying \ud83d\udd17 Related \u00b6 IoC Container \u2014 how beans are created and managed Bean Anatomy \u2014 lifecycle of managed beans Reflection & @Autowired \u2014 how dependencies are injected Spring Context Lifecycle \u2014 orchestration of startup and shutdown \ud83e\ude9e Core Takeaway \u00b6 AOP is how Spring teaches beans to behave differently \u2014 without knowing it. IoC controls who lives and when . AOP controls what they do when you call them . Both rely on reflection, but serve different layers of abstraction \u2014 one structural, one behavioral.","title":"Aspect-Oriented Programming (AOP)"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#spring-aop-crosscutting-logic-proxy-magic","text":"Essence: Aspect-Oriented Programming (AOP) in Spring allows you to inject behavior around existing methods \u2014 without modifying their source code. It\u2019s how features like @Transactional , @Cacheable , or @Async work: Spring wraps your beans in proxies that intercept method calls and run extra logic before or after them.","title":"\ud83d\udd78\ufe0f Spring AOP \u2014 Crosscutting Logic &amp; Proxy Magic"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#1-the-core-idea-code-that-crosses-boundaries","text":"Some logic doesn\u2019t belong to any one class \u2014 logging, security, transactions, caching, metrics. These are called crosscutting concerns . Without AOP: public class PaymentService { public void pay () { System . out . println ( \"Start transaction\" ); // business logic System . out . println ( \"Commit transaction\" ); } } With AOP: @Transactional public void pay () { // pure business logic } The container now weaves transaction management around your method automatically.","title":"\ud83e\udde9 1. The Core Idea \u2014 Code that Crosses Boundaries"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#2-mental-model-wrapping-not-editing","text":"Think of AOP like a transparent shell wrapped around your bean: client \u2192 [Proxy wrapper] \u2192 [Your actual bean] The proxy: Intercepts the call. Runs extra logic before and/or after your method. Optionally changes arguments or return values. Delegates to your original bean. You keep writing pure business code; Spring handles the \u201cboring glue.\u201d","title":"\ud83e\udde0 2. Mental Model \u2014 Wrapping, Not Editing"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#3-aop-in-spring-how-its-implemented","text":"Spring AOP is proxy-based . It doesn\u2019t rewrite your bytecode (like AspectJ can). Instead, it dynamically builds a wrapper object at runtime.","title":"\ud83e\udde9 3. AOP in Spring \u2014 How It\u2019s Implemented"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#two-proxy-types","text":"Proxy Type Mechanism Used For JDK Dynamic Proxy java.lang.reflect.Proxy Beans that implement interfaces CGLIB Proxy Bytecode subclass (Enhancer) Concrete classes without interfaces Spring chooses automatically \u2014 JDK for interfaces, CGLIB for classes. Example of generated class: PaymentService$$EnhancerBySpringCGLIB$$123abc","title":"Two proxy types:"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#4-aop-terminology-decoded-simply","text":"Term Meaning Analogy Aspect A module of crosscutting logic A reusable lens applied to methods Advice The actual code run before/after/around a method The \u201cwhat\u201d in the lens Join Point A point in program execution (method call) The place where you can attach logic Pointcut A rule defining which join points to intercept The targeting scope Weaving The act of applying aspects to beans Putting the lens on Proxy The runtime wrapper performing interception The lens mount","title":"\u2699\ufe0f 4. AOP Terminology (Decoded Simply)"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#5-example-custom-aspect-in-action","text":"@Aspect @Component public class LoggingAspect { @Before ( \"execution(* com.app.service.*.*(..))\" ) public void logStart ( JoinPoint jp ) { System . out . println ( \"\u25b6 \" + jp . getSignature ()); } @AfterReturning ( pointcut = \"execution(* com.app.service.*.*(..))\" , returning = \"result\" ) public void logEnd ( JoinPoint jp , Object result ) { System . out . println ( \"\u2714 \" + jp . getSignature () + \" returned \" + result ); } } When you call any method in com.app.service , Spring injects your LoggingAspect logic before and after the target method.","title":"\ud83e\udde9 5. Example \u2014 Custom Aspect in Action"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#6-the-lifecycle-of-an-aop-call","text":"Client \u2192 Proxy bean \u2193 Before advice (e.g., open transaction) \u2193 Target method invocation (your bean logic) \u2193 After/AfterReturning advice (e.g., commit) \u2193 Return result to caller This flow is executed inside the proxy , invisible to your code.","title":"\ud83e\udde9 6. The Lifecycle of an AOP Call"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#7-built-in-aop-use-cases-in-spring","text":"Annotation Description Implemented Via @Transactional Begin/commit/rollback database transactions Proxy wrapping via TransactionInterceptor @Async Run method on separate thread Proxy executes in TaskExecutor @Cacheable Cache method results Proxy checks cache before invoking @Secured / @PreAuthorize Security access checks Proxy consults Spring Security interceptors @Retryable Automatic retry on failure Proxy repeats method calls Every one of these works by the same pattern: intercept \u2192 decide \u2192 invoke .","title":"\ud83e\udde9 7. Built-in AOP Use Cases in Spring"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#8-under-the-hood-reflection-ioc-working-together","text":"During context initialization, Spring detects @Aspect beans. Registers them via AnnotationAwareAspectJAutoProxyCreator . For every target bean: It checks if any aspect applies (based on pointcuts). If yes \u2014 creates a proxy bean wrapping the original. The proxy delegates all lifecycle management back to IoC. IoC builds the object graph; AOP wraps it.","title":"\ud83e\uddec 8. Under the Hood \u2014 Reflection &amp; IoC Working Together"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#9-weaving-types-when-it-happens","text":"Weaving Type When Used By Compile-time At .class generation AspectJ (not Spring) Load-time During class loading AspectJ LTW Runtime (proxy) During Spring context initialization Spring AOP Spring\u2019s choice of runtime weaving is deliberate \u2014 lightweight, portable, and configuration-free.","title":"\ud83e\udded 9. Weaving Types \u2014 When It Happens"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#10-example-of-proxy-structure-simplified","text":"Imagine you have: public interface PaymentService { void process (); } Spring creates something conceptually like: class PaymentServiceProxy implements PaymentService { private final PaymentService target ; private final TransactionManager txManager ; public void process () { txManager . begin (); try { target . process (); txManager . commit (); } catch ( Exception e ) { txManager . rollback (); throw e ; } } } This is what @Transactional really means. You get structured behavior \u2014 without changing the target code.","title":"\ud83e\udde9 10. Example of Proxy Structure (Simplified)"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#11-advantages-of-aop","text":"Benefit Description Separation of concerns Business logic is clean, infrastructure logic lives elsewhere. Reusability Same aspect can apply to many beans. Consistency Uniform handling of crosscutting tasks. Non-intrusive No inheritance or modification needed. Testability You can mock target beans without touching proxy logic.","title":"\u26a1 11. Advantages of AOP"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#12-common-pitfalls","text":"Issue Cause Fix Proxy doesn\u2019t trigger Calling method internally within same class AOP only applies to external calls through proxy Final methods/classes ignored CGLIB can\u2019t override final methods Avoid final on proxied classes/methods Lost annotations on proxies Proxy class doesn\u2019t inherit all metadata Use @Target(ElementType.METHOD) carefully Debug confusion Stack traces show proxy names Use AopUtils.getTargetClass(bean) for clarity","title":"\u26a0\ufe0f 12. Common Pitfalls"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#13-aop-and-performance","text":"Proxy creation happens only once at startup . Invocation overhead is minimal \u2014 roughly the cost of an extra method call. The real cost comes from your advice logic (e.g., logging, transactions). AOP is designed for coarse-grained interception \u2014 not per-loop micro-optimizations.","title":"\ud83e\udde9 13. AOP and Performance"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#14-aop-in-the-big-picture","text":"[Reflection] \u2192 enables DI \u2193 [IoC Container] \u2192 controls object lifecycle \u2193 [AOP Proxies] \u2192 control method execution Reflection gives Spring access . IoC gives it authority . AOP gives it influence . Together they form a layered architecture: Reflection \u2192 IoC \u2192 AOP \u2192 Frameworks (Boot, Data, MVC, Security, etc.)","title":"\ud83e\uddec 14. AOP in the Big Picture"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#tldr-summary","text":"Concept Description Mechanism Aspect Encapsulated crosscutting logic @Aspect Advice Before/after/around logic Annotated methods Pointcut Defines where advice applies execution(...) expressions Proxy Wrapper intercepting calls JDK or CGLIB Weaving Applying aspects to beans Runtime proxying","title":"\ud83e\udded TL;DR Summary"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#related","text":"IoC Container \u2014 how beans are created and managed Bean Anatomy \u2014 lifecycle of managed beans Reflection & @Autowired \u2014 how dependencies are injected Spring Context Lifecycle \u2014 orchestration of startup and shutdown","title":"\ud83d\udd17 Related"},{"location":"concepts/languages/java/spring/core/30-aop-concepts/#core-takeaway","text":"AOP is how Spring teaches beans to behave differently \u2014 without knowing it. IoC controls who lives and when . AOP controls what they do when you call them . Both rely on reflection, but serve different layers of abstraction \u2014 one structural, one behavioral.","title":"\ud83e\ude9e Core Takeaway"},{"location":"concepts/networking/http/10-index/","text":"\ud83c\udf0d Web & HTTP \u2014 Starter Guide \u00b6 \ud83e\udde9 Purpose \u00b6 This folder collects everything you need to truly understand how the web communicates and remembers \u2014 from raw HTTP to modern authentication. Each file stands alone, but reading them in order reveals the full story of how the web evolved from stateless requests to secure, identity-aware systems . \ufe0f\u20e3 Read Order \u00b6 Step File Theme Why it comes here 1. HTTP Basics HTTP fundamentals The physics of the web: requests, responses, headers, and why HTTP is stateless by design. 2. HTTP State Evolution How state was invented Explains why cookies and tokens exist at all \u2014 the journey from \u201cforgetful HTTP\u201d to \u201cauthenticated APIs.\u201d 3. Cookies Browser-native state Deep dive into cookies: how servers create them, how browsers send them, and how they keep classic sessions alive. 4. Tokens Stateless authentication Modern replacement for sessions \u2014 how APIs and mobile apps use tokens (JWT, OAuth2) to prove identity without server memory. \ud83d\udd04 Conceptual Flow \u00b6 HTTP (stateless) \u2193 Need for continuity (state) \u2193 Cookies (server remembers) \u2193 Tokens (client proves) This mirrors the real evolution of the web: from simple document delivery \u2192 to remembering users \u2192 to trustless, scalable identity systems. \ud83e\udde0 Reading Tips \u00b6 Move slow. Each file adds a layer of understanding \u2014 don\u2019t rush. Visualize the requests. Think like both the browser and the server; it makes \u201cstate\u201d click instantly. Focus on concepts before frameworks. Spring, Node, or Python are just different dialects of the same logic. Experiment with curl . Seeing headers in action (like Set-Cookie or Authorization ) cements the idea better than any paragraph. \ud83d\uddfa\ufe0f After Finishing \u00b6 You\u2019ll be able to: Explain what \u201cstateless\u201d actually means Understand cookies vs sessions vs tokens Recognize why tokens dominate modern systems Map all of this to frameworks like Spring Boot , Express , or FastAPI Next natural steps: oauth-oidc.md \u2192 how delegated auth works (Google, GitHub login) spring-security-jwt.md \u2192 how Spring implements modern token auth auth-ops-checklist.md \u2192 production hygiene: rotation, revocation, key management \ud83e\udde9 In One Sentence \u00b6 Start with HTTP \u2014 how messages work , end with tokens \u2014 how identity travels . Everything between those two explains how the web learned to remember you safely .","title":"Starter"},{"location":"concepts/networking/http/10-index/#web-http-starter-guide","text":"","title":"\ud83c\udf0d Web &amp; HTTP \u2014 Starter Guide"},{"location":"concepts/networking/http/10-index/#purpose","text":"This folder collects everything you need to truly understand how the web communicates and remembers \u2014 from raw HTTP to modern authentication. Each file stands alone, but reading them in order reveals the full story of how the web evolved from stateless requests to secure, identity-aware systems .","title":"\ud83e\udde9 Purpose"},{"location":"concepts/networking/http/10-index/#read-order","text":"Step File Theme Why it comes here 1. HTTP Basics HTTP fundamentals The physics of the web: requests, responses, headers, and why HTTP is stateless by design. 2. HTTP State Evolution How state was invented Explains why cookies and tokens exist at all \u2014 the journey from \u201cforgetful HTTP\u201d to \u201cauthenticated APIs.\u201d 3. Cookies Browser-native state Deep dive into cookies: how servers create them, how browsers send them, and how they keep classic sessions alive. 4. Tokens Stateless authentication Modern replacement for sessions \u2014 how APIs and mobile apps use tokens (JWT, OAuth2) to prove identity without server memory.","title":"\ufe0f\u20e3 Read Order"},{"location":"concepts/networking/http/10-index/#conceptual-flow","text":"HTTP (stateless) \u2193 Need for continuity (state) \u2193 Cookies (server remembers) \u2193 Tokens (client proves) This mirrors the real evolution of the web: from simple document delivery \u2192 to remembering users \u2192 to trustless, scalable identity systems.","title":"\ud83d\udd04 Conceptual Flow"},{"location":"concepts/networking/http/10-index/#reading-tips","text":"Move slow. Each file adds a layer of understanding \u2014 don\u2019t rush. Visualize the requests. Think like both the browser and the server; it makes \u201cstate\u201d click instantly. Focus on concepts before frameworks. Spring, Node, or Python are just different dialects of the same logic. Experiment with curl . Seeing headers in action (like Set-Cookie or Authorization ) cements the idea better than any paragraph.","title":"\ud83e\udde0 Reading Tips"},{"location":"concepts/networking/http/10-index/#after-finishing","text":"You\u2019ll be able to: Explain what \u201cstateless\u201d actually means Understand cookies vs sessions vs tokens Recognize why tokens dominate modern systems Map all of this to frameworks like Spring Boot , Express , or FastAPI Next natural steps: oauth-oidc.md \u2192 how delegated auth works (Google, GitHub login) spring-security-jwt.md \u2192 how Spring implements modern token auth auth-ops-checklist.md \u2192 production hygiene: rotation, revocation, key management","title":"\ud83d\uddfa\ufe0f After Finishing"},{"location":"concepts/networking/http/10-index/#in-one-sentence","text":"Start with HTTP \u2014 how messages work , end with tokens \u2014 how identity travels . Everything between those two explains how the web learned to remember you safely .","title":"\ud83e\udde9 In One Sentence"},{"location":"concepts/networking/http/20-http-foundations/","text":"\ud83c\udf10 HTTP Foundations \u00b6 \ud83e\udde9 Essence \u00b6 HTTP is not magic \u2014 it\u2019s a polite conversation between two machines. One asks, one replies. No memory, no emotion, no hidden channel. Every modern API, website, and cloud service still speaks this simple language. 1. The Core Idea \u2014 Messages Over Time \u00b6 The web began as a document retrieval system . Tim Berners-Lee\u2019s goal wasn\u2019t persistent user sessions or apps; it was linking knowledge . HTTP\u2019s design follows that simplicity: Request \u2192 Response \u2192 Done. There\u2019s no shared memory between messages. Each request contains everything the server needs to know \u2014 method, target, headers, optional body. Once the server responds, it forgets you completely. This stateless design made HTTP scalable and robust , but also forgetful \u2014 leading to cookies, tokens, and the whole modern identity stack later on. 2. Anatomy of a Message \u00b6 Both requests and responses share the same skeleton: Start line Headers (blank line) Body (optional) Example \u00b6 GET /books/42 HTTP/1.1 Host: example.com Accept: application/json and the server replies: HTTP/1.1 200 OK Content-Type: application/json {\"title\": \"Dune\"} This minimal structure made HTTP human-readable, debuggable with plain text, and easy to extend (new headers, new methods, new versions). 3. Why Statelessness Was a Feature \u00b6 In the early web, servers handled thousands of independent readers \u2014 scientists browsing papers, not users logging in. Keeping per-user memory would have been: expensive (RAM was scarce) complex (no shared standard for sessions) fragile (every crash loses state) So HTTP\u2019s creators embraced the idea that each request is self-contained . The client must re-introduce itself every time. The brilliance: a server could scale horizontally because any node could answer any request. The downside: the web had no concept of \u201cyou.\u201d 4. From Documents to Applications \u00b6 When the web grew from pages to dynamic apps, statelessness became a challenge. Users wanted continuity \u2014 shopping carts, logins, personalized feeds. That need gave birth to state mechanisms : Cookies \u2014 server remembers you. Tokens \u2014 client proves who it is. But those are patches atop the same protocol. HTTP itself never changed its basic rule: no hidden memory between requests . 5. The Layered Model \u00b6 HTTP sits on top of TCP/IP (and now QUIC for HTTP/3). It doesn\u2019t care how bytes move \u2014 only what the bytes mean. Layer Example Responsibility Application HTTP, FTP, SMTP Meaning of data Transport TCP, UDP, QUIC Reliable delivery Network IP Routing packets Link Ethernet, Wi-Fi Physical transfer This separation made HTTP portable: you can tunnel it through satellites, fiber, or even carrier pigeons if you can keep the packets in order. 6. Versions as Evolution, Not Revolution \u00b6 HTTP/1.1 \u2013 text-based, persistent connections, simple. HTTP/2 \u2013 binary framing, multiplexed streams, header compression. HTTP/3 \u2013 runs on QUIC (UDP), faster handshakes, better resilience. The semantics \u2014 methods, status codes, headers \u2014 remain the same. Only the transport efficiency improves. 7. The Philosophy of Simplicity \u00b6 HTTP\u2019s genius lies in what it doesn\u2019t do: It doesn\u2019t store sessions. It doesn\u2019t dictate data format. It doesn\u2019t maintain connections beyond the request. Because of that minimalism, every higher-level technology \u2014 REST, GraphQL, gRPC, WebSockets \u2014 either builds on HTTP or intentionally bends its rules. 8. Mental Model \u00b6 Client \u2192 Request \u2192 Server \u2193 Response Client speaks intention; server returns representation. Everything else \u2014 authentication, caching, security \u2014 is built by adding layers around this simple loop. \ud83e\udded Takeaway \u00b6 HTTP isn\u2019t just a protocol \u2014 it\u2019s a philosophy: Keep communication explicit, simple, and stateless. Understanding this foundation turns every header, status code, and REST design choice from \u201csyntax\u201d into logic .","title":"HTTP Foundations"},{"location":"concepts/networking/http/20-http-foundations/#http-foundations","text":"","title":"\ud83c\udf10 HTTP Foundations"},{"location":"concepts/networking/http/20-http-foundations/#essence","text":"HTTP is not magic \u2014 it\u2019s a polite conversation between two machines. One asks, one replies. No memory, no emotion, no hidden channel. Every modern API, website, and cloud service still speaks this simple language.","title":"\ud83e\udde9 Essence"},{"location":"concepts/networking/http/20-http-foundations/#1-the-core-idea-messages-over-time","text":"The web began as a document retrieval system . Tim Berners-Lee\u2019s goal wasn\u2019t persistent user sessions or apps; it was linking knowledge . HTTP\u2019s design follows that simplicity: Request \u2192 Response \u2192 Done. There\u2019s no shared memory between messages. Each request contains everything the server needs to know \u2014 method, target, headers, optional body. Once the server responds, it forgets you completely. This stateless design made HTTP scalable and robust , but also forgetful \u2014 leading to cookies, tokens, and the whole modern identity stack later on.","title":"1. The Core Idea \u2014 Messages Over Time"},{"location":"concepts/networking/http/20-http-foundations/#2-anatomy-of-a-message","text":"Both requests and responses share the same skeleton: Start line Headers (blank line) Body (optional)","title":"2. Anatomy of a Message"},{"location":"concepts/networking/http/20-http-foundations/#example","text":"GET /books/42 HTTP/1.1 Host: example.com Accept: application/json and the server replies: HTTP/1.1 200 OK Content-Type: application/json {\"title\": \"Dune\"} This minimal structure made HTTP human-readable, debuggable with plain text, and easy to extend (new headers, new methods, new versions).","title":"Example"},{"location":"concepts/networking/http/20-http-foundations/#3-why-statelessness-was-a-feature","text":"In the early web, servers handled thousands of independent readers \u2014 scientists browsing papers, not users logging in. Keeping per-user memory would have been: expensive (RAM was scarce) complex (no shared standard for sessions) fragile (every crash loses state) So HTTP\u2019s creators embraced the idea that each request is self-contained . The client must re-introduce itself every time. The brilliance: a server could scale horizontally because any node could answer any request. The downside: the web had no concept of \u201cyou.\u201d","title":"3. Why Statelessness Was a Feature"},{"location":"concepts/networking/http/20-http-foundations/#4-from-documents-to-applications","text":"When the web grew from pages to dynamic apps, statelessness became a challenge. Users wanted continuity \u2014 shopping carts, logins, personalized feeds. That need gave birth to state mechanisms : Cookies \u2014 server remembers you. Tokens \u2014 client proves who it is. But those are patches atop the same protocol. HTTP itself never changed its basic rule: no hidden memory between requests .","title":"4. From Documents to Applications"},{"location":"concepts/networking/http/20-http-foundations/#5-the-layered-model","text":"HTTP sits on top of TCP/IP (and now QUIC for HTTP/3). It doesn\u2019t care how bytes move \u2014 only what the bytes mean. Layer Example Responsibility Application HTTP, FTP, SMTP Meaning of data Transport TCP, UDP, QUIC Reliable delivery Network IP Routing packets Link Ethernet, Wi-Fi Physical transfer This separation made HTTP portable: you can tunnel it through satellites, fiber, or even carrier pigeons if you can keep the packets in order.","title":"5. The Layered Model"},{"location":"concepts/networking/http/20-http-foundations/#6-versions-as-evolution-not-revolution","text":"HTTP/1.1 \u2013 text-based, persistent connections, simple. HTTP/2 \u2013 binary framing, multiplexed streams, header compression. HTTP/3 \u2013 runs on QUIC (UDP), faster handshakes, better resilience. The semantics \u2014 methods, status codes, headers \u2014 remain the same. Only the transport efficiency improves.","title":"6. Versions as Evolution, Not Revolution"},{"location":"concepts/networking/http/20-http-foundations/#7-the-philosophy-of-simplicity","text":"HTTP\u2019s genius lies in what it doesn\u2019t do: It doesn\u2019t store sessions. It doesn\u2019t dictate data format. It doesn\u2019t maintain connections beyond the request. Because of that minimalism, every higher-level technology \u2014 REST, GraphQL, gRPC, WebSockets \u2014 either builds on HTTP or intentionally bends its rules.","title":"7. The Philosophy of Simplicity"},{"location":"concepts/networking/http/20-http-foundations/#8-mental-model","text":"Client \u2192 Request \u2192 Server \u2193 Response Client speaks intention; server returns representation. Everything else \u2014 authentication, caching, security \u2014 is built by adding layers around this simple loop.","title":"8. Mental Model"},{"location":"concepts/networking/http/20-http-foundations/#takeaway","text":"HTTP isn\u2019t just a protocol \u2014 it\u2019s a philosophy: Keep communication explicit, simple, and stateless. Understanding this foundation turns every header, status code, and REST design choice from \u201csyntax\u201d into logic .","title":"\ud83e\udded Takeaway"},{"location":"concepts/networking/http/30-state-evolution/","text":"\ud83c\udf10 Web State Evolution (told through Spring\u2019s lens) \u00b6 How the web learned to remember \u2014 and how that memory evolved from cookies to tokens, from servers to clients. See also: HTTP State Reference 1) Why Web State Exists \u00b6 HTTP was designed to be stateless \u2014 every request is a blank slate. Without extra mechanisms, the server can\u2019t tell whether two requests come from the same user. To make web experiences persistent \u2014 logins, carts, dashboards \u2014 we need a state bridge between requests. That bridge has changed over time, but the problem never did. 2) Cookies \u2014 The Original Memory Hack \u00b6 A cookie is a tiny key\u2013value pair that a server asks the browser to keep and send back with future requests. Server \u2192 Set-Cookie: sessionId=abc123 Browser \u2192 Cookie: sessionId=abc123 Cookies make HTTP feel stateful, but they\u2019re just labels , not memory. The actual data lives on the server , keyed by that label: sessionId=abc123 \u2192 user=Edgaras, cart=3 items Think of it as a coat-check system: You (the browser) keep the ticket. The server keeps your coat (the session data). When you return, you hand in the ticket; the server finds your coat. If either side forgets (cookie cleared or session expired), you start fresh. 3) Why the Client Can\u2019t Be Trusted \u00b6 Cookies are stored client-side, so they can be read, changed, or deleted. That\u2019s why cookies must be protected with strict attributes: Attribute Protects Against Description HttpOnly JavaScript access JS can\u2019t read or modify it Secure Network sniffing Only sent via HTTPS SameSite CSRF attacks Controls cross-site sending Servers must never trust cookie data blindly \u2014 it\u2019s a reference, not proof. 4) The Stateful Model \u2014 Server Remembers You \u00b6 Example: Spring MVC \u00b6 Old-school web applications used server-side sessions . POST /login \u2192 Set-Cookie: JSESSIONID=xyz123 Spring stores that session internally: xyz123 \u2192 userId=42, username=\"edgaras\" Next request: GET /profile Cookie: JSESSIONID=xyz123 Spring restores your identity automatically via HttpSession . Code sketch: session . setAttribute ( \"user\" , user ); User user = ( User ) session . getAttribute ( \"user\" ); This model is stateful \u2014 the server remembers each user\u2019s state in memory or a shared store (like Redis). 5) The Stateless Model \u2014 Client Proves Itself \u00b6 Modern REST APIs abandoned server memory. Instead of \u201cthe server remembers you,\u201d we now do \u201cyou prove who you are each time.\u201d Example: Spring Boot (REST API) \u00b6 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6... The token (e.g., JWT) is: Signed by the server Self-contained (includes user info, expiration, roles) Verifiable without server memory No lookup tables. No HttpSession . Every request is independent and verifiable. This makes scaling simple \u2014 any server can validate the token. 6) Why This Change Happened \u00b6 The shift wasn\u2019t stylistic \u2014 it was infrastructural. Old model (sessions): Works for single servers. Breaks in load-balanced or cloud environments (session stickiness issues). New model (tokens): Works with multiple instances. Stateless and cache-friendly. Portable across APIs, apps, and devices. Tokens are ideal for distributed , multi-client systems. Cookies still shine in browser-native , single-origin web apps. 7) Hybrid World \u2014 Cookies Meet Tokens \u00b6 Many modern systems combine both ideas: Browser clients: store JWT in an HttpOnly cookie for security Mobile / API clients: store JWT manually and send via Authorization header Same token, different transport. Cookies are now often just the delivery vehicle for tokens. 8) Cross-Language Equivalents \u00b6 \ud83e\udde9 Java / Spring \u00b6 Old: HttpSession + JSESSIONID New: JWT / OAuth2 in Authorization header Advanced: WebFlux (reactive, stateless) \u2699\ufe0f Node.js / Express \u00b6 Old: express-session + connect-redis New: jsonwebtoken + stateless JWT validation Middleware-driven auth; typically one-liners \ud83d\udc0d Python \u00b6 Django (classic) : sessionid cookie \u2192 DB-backed session Flask : flask-session (stateful) or flask-jwt-extended (stateless) FastAPI : modern, JWT-first design \u26a1 JavaScript Frontends \u00b6 React / Vue / Angular store tokens in localStorage or cookies Send them as Authorization: Bearer ... Tokens make frontends independent from backend state Each ecosystem faces the same choice: Do we store memory on the server (stateful) or carry proof on the client (stateless)? 9) Concept Table \u2014 The Evolution in One View \u00b6 Era Approach Who Remembers You Stored Where Still Used? Example 1990s\u20132010s Sessions + Cookies Server Memory / DB \u2705 Yes Django, Spring MVC 2010s\u20132020s Tokens (JWT/OAuth2) Client Header / localStorage \u2705 Yes Spring Boot, FastAPI 2020s\u2192 Hybrid Cookies + Tokens Both Cookie-wrapped JWT \u2705 Growing SPAs, Cloud-native apps 10) Core Insight \u00b6 Cookies gave the web its first memory, but tokens gave it freedom \u2014 freedom to scale, to move between servers, to talk to any device. Spring just reflects that same journey: From JSESSIONID \u2192 to JWT \u2192 to OAuth2/OpenID Connect . The evolution wasn\u2019t just technical \u2014 it was philosophical: moving from the server knows you to you can prove who you are. 11) Practical Developer Takeaways \u00b6 Understand cookies and sessions conceptually \u2014 they\u2019re still vital for browsers. Build your APIs statelessly \u2014 each request should carry its own proof (token). Use Spring Security + JWT/OAuth2 as your modern baseline. Learn cross-language equivalents \u2014 they all rhyme with Spring\u2019s concepts. For scale: state belongs at the edge (client) , not in memory on the server. 12) In a Sentence \u00b6 Cookies made the web personal. Tokens made it planetary.","title":"State (Evolution)"},{"location":"concepts/networking/http/30-state-evolution/#web-state-evolution-told-through-springs-lens","text":"How the web learned to remember \u2014 and how that memory evolved from cookies to tokens, from servers to clients. See also: HTTP State Reference","title":"\ud83c\udf10 Web State Evolution (told through Spring\u2019s lens)"},{"location":"concepts/networking/http/30-state-evolution/#1-why-web-state-exists","text":"HTTP was designed to be stateless \u2014 every request is a blank slate. Without extra mechanisms, the server can\u2019t tell whether two requests come from the same user. To make web experiences persistent \u2014 logins, carts, dashboards \u2014 we need a state bridge between requests. That bridge has changed over time, but the problem never did.","title":"1) Why Web State Exists"},{"location":"concepts/networking/http/30-state-evolution/#2-cookies-the-original-memory-hack","text":"A cookie is a tiny key\u2013value pair that a server asks the browser to keep and send back with future requests. Server \u2192 Set-Cookie: sessionId=abc123 Browser \u2192 Cookie: sessionId=abc123 Cookies make HTTP feel stateful, but they\u2019re just labels , not memory. The actual data lives on the server , keyed by that label: sessionId=abc123 \u2192 user=Edgaras, cart=3 items Think of it as a coat-check system: You (the browser) keep the ticket. The server keeps your coat (the session data). When you return, you hand in the ticket; the server finds your coat. If either side forgets (cookie cleared or session expired), you start fresh.","title":"2) Cookies \u2014 The Original Memory Hack"},{"location":"concepts/networking/http/30-state-evolution/#3-why-the-client-cant-be-trusted","text":"Cookies are stored client-side, so they can be read, changed, or deleted. That\u2019s why cookies must be protected with strict attributes: Attribute Protects Against Description HttpOnly JavaScript access JS can\u2019t read or modify it Secure Network sniffing Only sent via HTTPS SameSite CSRF attacks Controls cross-site sending Servers must never trust cookie data blindly \u2014 it\u2019s a reference, not proof.","title":"3) Why the Client Can\u2019t Be Trusted"},{"location":"concepts/networking/http/30-state-evolution/#4-the-stateful-model-server-remembers-you","text":"","title":"4) The Stateful Model \u2014 Server Remembers You"},{"location":"concepts/networking/http/30-state-evolution/#example-spring-mvc","text":"Old-school web applications used server-side sessions . POST /login \u2192 Set-Cookie: JSESSIONID=xyz123 Spring stores that session internally: xyz123 \u2192 userId=42, username=\"edgaras\" Next request: GET /profile Cookie: JSESSIONID=xyz123 Spring restores your identity automatically via HttpSession . Code sketch: session . setAttribute ( \"user\" , user ); User user = ( User ) session . getAttribute ( \"user\" ); This model is stateful \u2014 the server remembers each user\u2019s state in memory or a shared store (like Redis).","title":"Example: Spring MVC"},{"location":"concepts/networking/http/30-state-evolution/#5-the-stateless-model-client-proves-itself","text":"Modern REST APIs abandoned server memory. Instead of \u201cthe server remembers you,\u201d we now do \u201cyou prove who you are each time.\u201d","title":"5) The Stateless Model \u2014 Client Proves Itself"},{"location":"concepts/networking/http/30-state-evolution/#example-spring-boot-rest-api","text":"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6... The token (e.g., JWT) is: Signed by the server Self-contained (includes user info, expiration, roles) Verifiable without server memory No lookup tables. No HttpSession . Every request is independent and verifiable. This makes scaling simple \u2014 any server can validate the token.","title":"Example: Spring Boot (REST API)"},{"location":"concepts/networking/http/30-state-evolution/#6-why-this-change-happened","text":"The shift wasn\u2019t stylistic \u2014 it was infrastructural. Old model (sessions): Works for single servers. Breaks in load-balanced or cloud environments (session stickiness issues). New model (tokens): Works with multiple instances. Stateless and cache-friendly. Portable across APIs, apps, and devices. Tokens are ideal for distributed , multi-client systems. Cookies still shine in browser-native , single-origin web apps.","title":"6) Why This Change Happened"},{"location":"concepts/networking/http/30-state-evolution/#7-hybrid-world-cookies-meet-tokens","text":"Many modern systems combine both ideas: Browser clients: store JWT in an HttpOnly cookie for security Mobile / API clients: store JWT manually and send via Authorization header Same token, different transport. Cookies are now often just the delivery vehicle for tokens.","title":"7) Hybrid World \u2014 Cookies Meet Tokens"},{"location":"concepts/networking/http/30-state-evolution/#8-cross-language-equivalents","text":"","title":"8) Cross-Language Equivalents"},{"location":"concepts/networking/http/30-state-evolution/#java-spring","text":"Old: HttpSession + JSESSIONID New: JWT / OAuth2 in Authorization header Advanced: WebFlux (reactive, stateless)","title":"\ud83e\udde9 Java / Spring"},{"location":"concepts/networking/http/30-state-evolution/#nodejs-express","text":"Old: express-session + connect-redis New: jsonwebtoken + stateless JWT validation Middleware-driven auth; typically one-liners","title":"\u2699\ufe0f Node.js / Express"},{"location":"concepts/networking/http/30-state-evolution/#python","text":"Django (classic) : sessionid cookie \u2192 DB-backed session Flask : flask-session (stateful) or flask-jwt-extended (stateless) FastAPI : modern, JWT-first design","title":"\ud83d\udc0d Python"},{"location":"concepts/networking/http/30-state-evolution/#javascript-frontends","text":"React / Vue / Angular store tokens in localStorage or cookies Send them as Authorization: Bearer ... Tokens make frontends independent from backend state Each ecosystem faces the same choice: Do we store memory on the server (stateful) or carry proof on the client (stateless)?","title":"\u26a1 JavaScript Frontends"},{"location":"concepts/networking/http/30-state-evolution/#9-concept-table-the-evolution-in-one-view","text":"Era Approach Who Remembers You Stored Where Still Used? Example 1990s\u20132010s Sessions + Cookies Server Memory / DB \u2705 Yes Django, Spring MVC 2010s\u20132020s Tokens (JWT/OAuth2) Client Header / localStorage \u2705 Yes Spring Boot, FastAPI 2020s\u2192 Hybrid Cookies + Tokens Both Cookie-wrapped JWT \u2705 Growing SPAs, Cloud-native apps","title":"9) Concept Table \u2014 The Evolution in One View"},{"location":"concepts/networking/http/30-state-evolution/#10-core-insight","text":"Cookies gave the web its first memory, but tokens gave it freedom \u2014 freedom to scale, to move between servers, to talk to any device. Spring just reflects that same journey: From JSESSIONID \u2192 to JWT \u2192 to OAuth2/OpenID Connect . The evolution wasn\u2019t just technical \u2014 it was philosophical: moving from the server knows you to you can prove who you are.","title":"10) Core Insight"},{"location":"concepts/networking/http/30-state-evolution/#11-practical-developer-takeaways","text":"Understand cookies and sessions conceptually \u2014 they\u2019re still vital for browsers. Build your APIs statelessly \u2014 each request should carry its own proof (token). Use Spring Security + JWT/OAuth2 as your modern baseline. Learn cross-language equivalents \u2014 they all rhyme with Spring\u2019s concepts. For scale: state belongs at the edge (client) , not in memory on the server.","title":"11) Practical Developer Takeaways"},{"location":"concepts/networking/http/30-state-evolution/#12-in-a-sentence","text":"Cookies made the web personal. Tokens made it planetary.","title":"12) In a Sentence"},{"location":"concepts/networking/http/40-cookies/","text":"\ud83c\udf6a HTTP Cookies \u2014 Quick Refresher \u00b6 Tiny text packets that let the web remember. 1) What a Cookie Is \u00b6 A cookie is a small key\u2013value pair that the server tells the browser to store. The browser automatically sends it back with every request to the same origin. Cookies exist because HTTP is stateless \u2014 servers forget who you are between requests. Cookies give the illusion of continuity. Server \u2192 Set-Cookie: sessionId=abc123; Secure; HttpOnly Browser \u2192 Cookie: sessionId=abc123 They\u2019re the oldest and most universal state mechanism in HTTP. 2) Anatomy of a Cookie \u00b6 Each cookie line looks like this: Set-Cookie: key=value; Attribute1; Attribute2=... Example \u00b6 Set-Cookie: theme=dark; Path=/; Max-Age=3600; SameSite=Lax The browser then includes it: Cookie: theme=dark 3) Where Cookies Live \u00b6 In browsers: limited (~20 per domain, 4 KB each). By origin: tied to domain + path + scheme (HTTP/HTTPS). Automatically sent: for same-origin requests, no client code needed. 4) Common Attributes and Their Meaning \u00b6 Attribute Purpose Typical Value / Example Domain Which host(s) can receive it Domain=example.com Path Restrict to subpath Path=/api Expires Absolute expiry time Expires=Wed, 16 Oct 2025 07:00:00 GMT Max-Age Relative expiry in seconds Max-Age=3600 Secure Send only via HTTPS Secure HttpOnly Hide from JavaScript HttpOnly SameSite Limit cross-site sending Strict , Lax , None 5) Lifecycle \u00b6 Server sets the cookie via Set-Cookie header. Browser stores it until it expires or user clears it. Browser sends it back in future requests matching domain/path/scheme. Server reads it from Cookie: header. To delete: Set-Cookie: sessionId=deleted; Max-Age=0 6) Session vs Persistent Cookies \u00b6 Type Description Lifetime Session cookie No Expires / Max-Age ; stored in memory Removed when browser closes Persistent cookie Has expiration Survives browser restarts Session cookies \u2192 logins Persistent cookies \u2192 \u201cremember me\u201d 7) Security Essentials \u00b6 \u2705 Always use: \u00b6 Set-Cookie: sessionId=abc123; Secure; HttpOnly; SameSite=Strict Key points \u00b6 Secure : no plaintext transmission. HttpOnly : prevents JS theft (XSS). SameSite : defends against CSRF. Don\u2019t store sensitive data directly inside cookies. Avoid overly broad domains ( Domain=.example.com shares across subdomains). 8) SameSite Explained Clearly \u00b6 Mode Behavior Use Case Strict Sent only from same site Most secure (auth cookies) Lax Sent on top-level navigations Default for browsers None Sent everywhere, even cross-site Must combine with Secure ; used for third-party integrations Example: Set-Cookie: auth=abc123; SameSite=None; Secure 9) Cookies in APIs and SPAs \u00b6 Browsers attach cookies automatically only for same-origin requests. When making cross-origin API calls, you must explicitly enable credential sharing. Client (JavaScript) \u00b6 fetch ( \"https://api.example.com/data\" , { credentials : \"include\" }); Server (API) \u00b6 Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: https://app.example.com This handshake enables cookie-based auth across origins. 9.5) Modern Alternatives \u00b6 While cookies remain the native way browsers persist state , modern systems often use other approaches \u2014 especially for APIs and mobile apps. Session Tokens \u00b6 Instead of storing a session ID in a cookie, the server issues a token (like a signed string) that the client stores manually (e.g., in localStorage ) and sends in headers such as: Authorization: Bearer <token> JWT (JSON Web Token) \u00b6 A self-contained, signed token that carries claims \u2014 user ID, roles, expiration. Used for stateless authentication \u2014 the server doesn\u2019t need to remember anything. But with power comes danger: once issued, it\u2019s valid until expiry, so revocation is harder . Server-Side Sessions \u00b6 The classic approach \u2014 store session data on the server , and just send a session ID via cookie. Simpler to invalidate, but less scalable in distributed systems. In short: Cookies are the browser-native state glue. Tokens are the API-native evolution. You\u2019ll often see both working together \u2014 cookies wrapping tokens for web clients, tokens alone for APIs and mobile apps. 10) Cookie Storage Alternatives \u00b6 LocalStorage / SessionStorage \u2014 manually managed by JS, not auto-sent. Cookies \u2014 automatic, integrated with HTTP. Use HttpOnly cookies for secrets; use storage APIs for preferences. 11) Practical Example \u2014 Login Flow \u00b6 POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure; SameSite=Strict GET /dashboard \u2192 Cookie: sessionId=abc123 Browser sends the cookie automatically; server validates the session. Logout: Set-Cookie: sessionId=; Max-Age=0 12) Debugging & Inspection \u00b6 Using cURL \u00b6 # Show cookies in response curl -I -c cookies.txt https://example.com # Send stored cookies curl -b cookies.txt https://example.com/profile In Browser \u00b6 Open DevTools \u2192 Application \u2192 Cookies to view, edit, or delete. 13) Java & Spring Example \u00b6 Setting \u00b6 ResponseCookie cookie = ResponseCookie . from ( \"sessionId\" , \"abc123\" ) . httpOnly ( true ) . secure ( true ) . sameSite ( \"Strict\" ) . path ( \"/\" ) . maxAge ( Duration . ofHours ( 1 )) . build (); return ResponseEntity . ok () . header ( HttpHeaders . SET_COOKIE , cookie . toString ()) . body ( \"ok\" ); Reading \u00b6 @CookieValue ( \"sessionId\" ) String sessionId 14) Quick Reference Table \u00b6 Purpose Header Example Set new cookie Set-Cookie Set-Cookie: user=edgaras; Max-Age=600 Send existing cookie Cookie Cookie: user=edgaras Delete cookie Set-Cookie Set-Cookie: user=; Max-Age=0 15) Mental Checklist \u00b6 Always add Secure; HttpOnly; SameSite . Keep cookies small. Avoid sensitive info inside. Delete or expire aggressively. Treat them as credentials , not just data. 16) In a Sentence \u00b6 Cookies are the quiet workhorses of the web \u2014 small, loyal, and dumb. They make a stateless protocol feel personal, but trust them only when you\u2019ve set the rules.","title":"Cookies"},{"location":"concepts/networking/http/40-cookies/#http-cookies-quick-refresher","text":"Tiny text packets that let the web remember.","title":"\ud83c\udf6a HTTP Cookies \u2014 Quick Refresher"},{"location":"concepts/networking/http/40-cookies/#1-what-a-cookie-is","text":"A cookie is a small key\u2013value pair that the server tells the browser to store. The browser automatically sends it back with every request to the same origin. Cookies exist because HTTP is stateless \u2014 servers forget who you are between requests. Cookies give the illusion of continuity. Server \u2192 Set-Cookie: sessionId=abc123; Secure; HttpOnly Browser \u2192 Cookie: sessionId=abc123 They\u2019re the oldest and most universal state mechanism in HTTP.","title":"1) What a Cookie Is"},{"location":"concepts/networking/http/40-cookies/#2-anatomy-of-a-cookie","text":"Each cookie line looks like this: Set-Cookie: key=value; Attribute1; Attribute2=...","title":"2) Anatomy of a Cookie"},{"location":"concepts/networking/http/40-cookies/#example","text":"Set-Cookie: theme=dark; Path=/; Max-Age=3600; SameSite=Lax The browser then includes it: Cookie: theme=dark","title":"Example"},{"location":"concepts/networking/http/40-cookies/#3-where-cookies-live","text":"In browsers: limited (~20 per domain, 4 KB each). By origin: tied to domain + path + scheme (HTTP/HTTPS). Automatically sent: for same-origin requests, no client code needed.","title":"3) Where Cookies Live"},{"location":"concepts/networking/http/40-cookies/#4-common-attributes-and-their-meaning","text":"Attribute Purpose Typical Value / Example Domain Which host(s) can receive it Domain=example.com Path Restrict to subpath Path=/api Expires Absolute expiry time Expires=Wed, 16 Oct 2025 07:00:00 GMT Max-Age Relative expiry in seconds Max-Age=3600 Secure Send only via HTTPS Secure HttpOnly Hide from JavaScript HttpOnly SameSite Limit cross-site sending Strict , Lax , None","title":"4) Common Attributes and Their Meaning"},{"location":"concepts/networking/http/40-cookies/#5-lifecycle","text":"Server sets the cookie via Set-Cookie header. Browser stores it until it expires or user clears it. Browser sends it back in future requests matching domain/path/scheme. Server reads it from Cookie: header. To delete: Set-Cookie: sessionId=deleted; Max-Age=0","title":"5) Lifecycle"},{"location":"concepts/networking/http/40-cookies/#6-session-vs-persistent-cookies","text":"Type Description Lifetime Session cookie No Expires / Max-Age ; stored in memory Removed when browser closes Persistent cookie Has expiration Survives browser restarts Session cookies \u2192 logins Persistent cookies \u2192 \u201cremember me\u201d","title":"6) Session vs Persistent Cookies"},{"location":"concepts/networking/http/40-cookies/#7-security-essentials","text":"","title":"7) Security Essentials"},{"location":"concepts/networking/http/40-cookies/#always-use","text":"Set-Cookie: sessionId=abc123; Secure; HttpOnly; SameSite=Strict","title":"\u2705 Always use:"},{"location":"concepts/networking/http/40-cookies/#key-points","text":"Secure : no plaintext transmission. HttpOnly : prevents JS theft (XSS). SameSite : defends against CSRF. Don\u2019t store sensitive data directly inside cookies. Avoid overly broad domains ( Domain=.example.com shares across subdomains).","title":"Key points"},{"location":"concepts/networking/http/40-cookies/#8-samesite-explained-clearly","text":"Mode Behavior Use Case Strict Sent only from same site Most secure (auth cookies) Lax Sent on top-level navigations Default for browsers None Sent everywhere, even cross-site Must combine with Secure ; used for third-party integrations Example: Set-Cookie: auth=abc123; SameSite=None; Secure","title":"8) SameSite Explained Clearly"},{"location":"concepts/networking/http/40-cookies/#9-cookies-in-apis-and-spas","text":"Browsers attach cookies automatically only for same-origin requests. When making cross-origin API calls, you must explicitly enable credential sharing.","title":"9) Cookies in APIs and SPAs"},{"location":"concepts/networking/http/40-cookies/#client-javascript","text":"fetch ( \"https://api.example.com/data\" , { credentials : \"include\" });","title":"Client (JavaScript)"},{"location":"concepts/networking/http/40-cookies/#server-api","text":"Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: https://app.example.com This handshake enables cookie-based auth across origins.","title":"Server (API)"},{"location":"concepts/networking/http/40-cookies/#95-modern-alternatives","text":"While cookies remain the native way browsers persist state , modern systems often use other approaches \u2014 especially for APIs and mobile apps.","title":"9.5) Modern Alternatives"},{"location":"concepts/networking/http/40-cookies/#session-tokens","text":"Instead of storing a session ID in a cookie, the server issues a token (like a signed string) that the client stores manually (e.g., in localStorage ) and sends in headers such as: Authorization: Bearer <token>","title":"Session Tokens"},{"location":"concepts/networking/http/40-cookies/#jwt-json-web-token","text":"A self-contained, signed token that carries claims \u2014 user ID, roles, expiration. Used for stateless authentication \u2014 the server doesn\u2019t need to remember anything. But with power comes danger: once issued, it\u2019s valid until expiry, so revocation is harder .","title":"JWT (JSON Web Token)"},{"location":"concepts/networking/http/40-cookies/#server-side-sessions","text":"The classic approach \u2014 store session data on the server , and just send a session ID via cookie. Simpler to invalidate, but less scalable in distributed systems. In short: Cookies are the browser-native state glue. Tokens are the API-native evolution. You\u2019ll often see both working together \u2014 cookies wrapping tokens for web clients, tokens alone for APIs and mobile apps.","title":"Server-Side Sessions"},{"location":"concepts/networking/http/40-cookies/#10-cookie-storage-alternatives","text":"LocalStorage / SessionStorage \u2014 manually managed by JS, not auto-sent. Cookies \u2014 automatic, integrated with HTTP. Use HttpOnly cookies for secrets; use storage APIs for preferences.","title":"10) Cookie Storage Alternatives"},{"location":"concepts/networking/http/40-cookies/#11-practical-example-login-flow","text":"POST /login \u2192 Set-Cookie: sessionId=abc123; HttpOnly; Secure; SameSite=Strict GET /dashboard \u2192 Cookie: sessionId=abc123 Browser sends the cookie automatically; server validates the session. Logout: Set-Cookie: sessionId=; Max-Age=0","title":"11) Practical Example \u2014 Login Flow"},{"location":"concepts/networking/http/40-cookies/#12-debugging-inspection","text":"","title":"12) Debugging &amp; Inspection"},{"location":"concepts/networking/http/40-cookies/#using-curl","text":"# Show cookies in response curl -I -c cookies.txt https://example.com # Send stored cookies curl -b cookies.txt https://example.com/profile","title":"Using cURL"},{"location":"concepts/networking/http/40-cookies/#in-browser","text":"Open DevTools \u2192 Application \u2192 Cookies to view, edit, or delete.","title":"In Browser"},{"location":"concepts/networking/http/40-cookies/#13-java-spring-example","text":"","title":"13) Java &amp; Spring Example"},{"location":"concepts/networking/http/40-cookies/#setting","text":"ResponseCookie cookie = ResponseCookie . from ( \"sessionId\" , \"abc123\" ) . httpOnly ( true ) . secure ( true ) . sameSite ( \"Strict\" ) . path ( \"/\" ) . maxAge ( Duration . ofHours ( 1 )) . build (); return ResponseEntity . ok () . header ( HttpHeaders . SET_COOKIE , cookie . toString ()) . body ( \"ok\" );","title":"Setting"},{"location":"concepts/networking/http/40-cookies/#reading","text":"@CookieValue ( \"sessionId\" ) String sessionId","title":"Reading"},{"location":"concepts/networking/http/40-cookies/#14-quick-reference-table","text":"Purpose Header Example Set new cookie Set-Cookie Set-Cookie: user=edgaras; Max-Age=600 Send existing cookie Cookie Cookie: user=edgaras Delete cookie Set-Cookie Set-Cookie: user=; Max-Age=0","title":"14) Quick Reference Table"},{"location":"concepts/networking/http/40-cookies/#15-mental-checklist","text":"Always add Secure; HttpOnly; SameSite . Keep cookies small. Avoid sensitive info inside. Delete or expire aggressively. Treat them as credentials , not just data.","title":"15) Mental Checklist"},{"location":"concepts/networking/http/40-cookies/#16-in-a-sentence","text":"Cookies are the quiet workhorses of the web \u2014 small, loyal, and dumb. They make a stateless protocol feel personal, but trust them only when you\u2019ve set the rules.","title":"16) In a Sentence"},{"location":"concepts/networking/http/50-tokens/","text":"\ud83e\udde0 Understanding Tokens and Statelessness \u00b6 What a Token Really Is \u00b6 A token is proof of identity and permission , not history. It tells the server who you are and what you\u2019re allowed to do \u2014 nothing more. When you send a request with a token: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6... the server verifies it and uses the claims inside to decide whether you\u2019re authorized. The server doesn\u2019t \u201cremember\u201d you \u2014 it just trusts the math behind the token\u2019s signature. What \u201cStateless\u201d Really Means \u00b6 In old, stateful models (cookies + sessions), the server remembered everything: sessionId=abc123 \u2192 user=Edgaras, cart=3 items, lastPage=/checkout Each request depended on the previous one. That\u2019s stateful \u2014 continuity stored in memory on the server. In a stateless model (tokens): Each request is independent. The server doesn\u2019t hold user memory between requests. If it needs context (cart, settings, history), it queries the database . So \u201cstateless\u201d \u2260 \u201cno persistence.\u201d It means \u201cno in-memory conversation\u201d \u2014 every request brings everything needed to complete itself. What\u2019s Inside a Token \u00b6 Tokens carry only essential data (claims): { \"sub\" : \"42\" , // who you are \"role\" : \"USER\" , // what you can do \"scope\" : \"read:books\" , \"exp\" : 1739678400 // when it expires } The server reads this info, verifies the signature, and makes decisions \u2014 without ever having to recall your previous state. How the Server Sees It \u00b6 Each request is a self-contained event: Receive the token. Verify its signature (check it\u2019s not forged). Validate expiry and audience. Use claims to authorize actions. Fetch any needed data from persistent storage. After responding, it forgets \u2014 no ongoing memory, no session list. Permissions vs. History \u00b6 Tokens don\u2019t store your personal history. They store your authority \u2014 your access rights. Think of it like an access badge : The badge shows your name, department, and which doors you can open. The guard doesn\u2019t know what meetings you had yesterday. If your permissions change, you get a new badge. That\u2019s how modern auth works. Where \u201cState\u201d Actually Lives \u00b6 All lasting data (orders, messages, progress, preferences) is stored in the database , linked to your user ID. When you send a token, the server uses that ID to look up your data as needed. So the real state lives in persistent storage \u2014 not in the session or the token. Core Summary \u00b6 Concept Meaning Token Digital proof of identity and permission Stateless Each request stands alone \u2014 no server memory between them State Stored in the database, not in RAM Cookies Used for stateful sessions (server remembers you) Tokens Used for stateless APIs (you prove yourself each time) Analogy \u00b6 Model Analogy Who Keeps Memory Cookies / Sessions You get a coat-check ticket; the server keeps your coat Server Tokens You carry a signed passport; the server just checks its seal Client In a Sentence \u00b6 Cookies make the web remember you. Tokens make the web verify you. \u2753 Key Q&A \u00b6 1\ufe0f\u20e3 What the token actually does \u00b6 A token doesn\u2019t carry your personal history . It carries proof of identity and permission \u2014 that\u2019s it. When you send it, the server checks: \u201cIs this token valid, and what does it allow this user to do?\u201d It\u2019s like flashing an ID badge to get into a building: The guard (server) doesn\u2019t remember your previous visits. The badge (token) simply proves you\u2019re allowed to be there, maybe with access to certain floors (permissions). So yes \u2014 a token just proves who you are and what you can do . 2\ufe0f\u20e3 What happens to \u201cstate\u201d \u00b6 That\u2019s the stateless part: the server does not keep per-user memory between requests. In a stateful model (like old cookie sessions): The server had a table: sessionId=abc123 \u2192 user=Edgaras, cart=3 items, lastPage=/checkout It used that for context in later requests. In a stateless model (tokens): The server doesn\u2019t keep that table. Each request stands alone: the server authenticates, authorizes, and processes it from scratch using info inside (or derived from) the token. If the server needs extra data \u2014 for example, your shopping cart \u2014 it looks it up from the database , not from memory tied to a session. That\u2019s what \u201cstateless\u201d really means: No in-memory user context between requests. Every request carries all it needs. 3\ufe0f\u20e3 What\u2019s inside the token, then? \u00b6 Usually minimal facts: { \"sub\" : \"42\" , \"role\" : \"USER\" , \"scope\" : \"read:books\" , \"exp\" : 1739678400 } sub \u2192 who you are role / scope \u2192 what you can do exp \u2192 when this proof expires So the token doesn\u2019t tell your story , it tells your authority . 4\ufe0f\u20e3 How the server uses it \u00b6 When you send a request with your token: Server verifies its signature \u2192 confirms it wasn\u2019t forged. Checks expiration . Reads claims ( sub , role , scope ). Uses that info to decide: Can this user access /api/orders/42 ? Is this admin-only? What data should they see? Then the app logic handles whatever you asked \u2014 e.g., reading your orders \u2014 using the user ID from the token to query the database. 5\ufe0f\u20e3 Does the server need history? \u00b6 Not usually. In modern designs, state lives in the database , not the session. If it needs to remember your past actions \u2014 orders, cart, last login \u2014 that\u2019s persisted in the DB keyed by your user ID, not kept in RAM between requests. So \u201cstateless\u201d doesn\u2019t mean \u201cno persistence.\u201d It means \u201cno transient memory that ties one HTTP request to the next.\u201d 6\ufe0f\u20e3 Permissions \u2014 what the token \u201cgrants\u201d \u00b6 When an auth system issues a token, it embeds what that token allows . Those are your scopes or roles . Examples: \"scope\" : \"read:orders write:profile\" That\u2019s like saying: \u201cThis badge lets you read orders and update your profile, but not delete users.\u201d The backend checks these scopes to enforce access control. If you later change a user\u2019s permissions, future tokens will reflect that \u2014 but old tokens will keep old scopes until they expire. 7\ufe0f\u20e3 So in summary: \u00b6 Token = identity + permissions , not history. Server = verifier , not rememberer. State (like data or progress) lives in the database , not the session. Stateless means each request can stand alone \u2014 validated and processed without prior context. Scopes/roles inside the token define what you can touch.","title":"Tokens"},{"location":"concepts/networking/http/50-tokens/#understanding-tokens-and-statelessness","text":"","title":"\ud83e\udde0 Understanding Tokens and Statelessness"},{"location":"concepts/networking/http/50-tokens/#what-a-token-really-is","text":"A token is proof of identity and permission , not history. It tells the server who you are and what you\u2019re allowed to do \u2014 nothing more. When you send a request with a token: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6... the server verifies it and uses the claims inside to decide whether you\u2019re authorized. The server doesn\u2019t \u201cremember\u201d you \u2014 it just trusts the math behind the token\u2019s signature.","title":"What a Token Really Is"},{"location":"concepts/networking/http/50-tokens/#what-stateless-really-means","text":"In old, stateful models (cookies + sessions), the server remembered everything: sessionId=abc123 \u2192 user=Edgaras, cart=3 items, lastPage=/checkout Each request depended on the previous one. That\u2019s stateful \u2014 continuity stored in memory on the server. In a stateless model (tokens): Each request is independent. The server doesn\u2019t hold user memory between requests. If it needs context (cart, settings, history), it queries the database . So \u201cstateless\u201d \u2260 \u201cno persistence.\u201d It means \u201cno in-memory conversation\u201d \u2014 every request brings everything needed to complete itself.","title":"What \u201cStateless\u201d Really Means"},{"location":"concepts/networking/http/50-tokens/#whats-inside-a-token","text":"Tokens carry only essential data (claims): { \"sub\" : \"42\" , // who you are \"role\" : \"USER\" , // what you can do \"scope\" : \"read:books\" , \"exp\" : 1739678400 // when it expires } The server reads this info, verifies the signature, and makes decisions \u2014 without ever having to recall your previous state.","title":"What\u2019s Inside a Token"},{"location":"concepts/networking/http/50-tokens/#how-the-server-sees-it","text":"Each request is a self-contained event: Receive the token. Verify its signature (check it\u2019s not forged). Validate expiry and audience. Use claims to authorize actions. Fetch any needed data from persistent storage. After responding, it forgets \u2014 no ongoing memory, no session list.","title":"How the Server Sees It"},{"location":"concepts/networking/http/50-tokens/#permissions-vs-history","text":"Tokens don\u2019t store your personal history. They store your authority \u2014 your access rights. Think of it like an access badge : The badge shows your name, department, and which doors you can open. The guard doesn\u2019t know what meetings you had yesterday. If your permissions change, you get a new badge. That\u2019s how modern auth works.","title":"Permissions vs. History"},{"location":"concepts/networking/http/50-tokens/#where-state-actually-lives","text":"All lasting data (orders, messages, progress, preferences) is stored in the database , linked to your user ID. When you send a token, the server uses that ID to look up your data as needed. So the real state lives in persistent storage \u2014 not in the session or the token.","title":"Where \u201cState\u201d Actually Lives"},{"location":"concepts/networking/http/50-tokens/#core-summary","text":"Concept Meaning Token Digital proof of identity and permission Stateless Each request stands alone \u2014 no server memory between them State Stored in the database, not in RAM Cookies Used for stateful sessions (server remembers you) Tokens Used for stateless APIs (you prove yourself each time)","title":"Core Summary"},{"location":"concepts/networking/http/50-tokens/#analogy","text":"Model Analogy Who Keeps Memory Cookies / Sessions You get a coat-check ticket; the server keeps your coat Server Tokens You carry a signed passport; the server just checks its seal Client","title":"Analogy"},{"location":"concepts/networking/http/50-tokens/#in-a-sentence","text":"Cookies make the web remember you. Tokens make the web verify you.","title":"In a Sentence"},{"location":"concepts/networking/http/50-tokens/#key-qa","text":"","title":"\u2753 Key Q&amp;A"},{"location":"concepts/networking/http/50-tokens/#1-what-the-token-actually-does","text":"A token doesn\u2019t carry your personal history . It carries proof of identity and permission \u2014 that\u2019s it. When you send it, the server checks: \u201cIs this token valid, and what does it allow this user to do?\u201d It\u2019s like flashing an ID badge to get into a building: The guard (server) doesn\u2019t remember your previous visits. The badge (token) simply proves you\u2019re allowed to be there, maybe with access to certain floors (permissions). So yes \u2014 a token just proves who you are and what you can do .","title":"1\ufe0f\u20e3 What the token actually does"},{"location":"concepts/networking/http/50-tokens/#2-what-happens-to-state","text":"That\u2019s the stateless part: the server does not keep per-user memory between requests. In a stateful model (like old cookie sessions): The server had a table: sessionId=abc123 \u2192 user=Edgaras, cart=3 items, lastPage=/checkout It used that for context in later requests. In a stateless model (tokens): The server doesn\u2019t keep that table. Each request stands alone: the server authenticates, authorizes, and processes it from scratch using info inside (or derived from) the token. If the server needs extra data \u2014 for example, your shopping cart \u2014 it looks it up from the database , not from memory tied to a session. That\u2019s what \u201cstateless\u201d really means: No in-memory user context between requests. Every request carries all it needs.","title":"2\ufe0f\u20e3 What happens to \u201cstate\u201d"},{"location":"concepts/networking/http/50-tokens/#3-whats-inside-the-token-then","text":"Usually minimal facts: { \"sub\" : \"42\" , \"role\" : \"USER\" , \"scope\" : \"read:books\" , \"exp\" : 1739678400 } sub \u2192 who you are role / scope \u2192 what you can do exp \u2192 when this proof expires So the token doesn\u2019t tell your story , it tells your authority .","title":"3\ufe0f\u20e3 What\u2019s inside the token, then?"},{"location":"concepts/networking/http/50-tokens/#4-how-the-server-uses-it","text":"When you send a request with your token: Server verifies its signature \u2192 confirms it wasn\u2019t forged. Checks expiration . Reads claims ( sub , role , scope ). Uses that info to decide: Can this user access /api/orders/42 ? Is this admin-only? What data should they see? Then the app logic handles whatever you asked \u2014 e.g., reading your orders \u2014 using the user ID from the token to query the database.","title":"4\ufe0f\u20e3 How the server uses it"},{"location":"concepts/networking/http/50-tokens/#5-does-the-server-need-history","text":"Not usually. In modern designs, state lives in the database , not the session. If it needs to remember your past actions \u2014 orders, cart, last login \u2014 that\u2019s persisted in the DB keyed by your user ID, not kept in RAM between requests. So \u201cstateless\u201d doesn\u2019t mean \u201cno persistence.\u201d It means \u201cno transient memory that ties one HTTP request to the next.\u201d","title":"5\ufe0f\u20e3 Does the server need history?"},{"location":"concepts/networking/http/50-tokens/#6-permissions-what-the-token-grants","text":"When an auth system issues a token, it embeds what that token allows . Those are your scopes or roles . Examples: \"scope\" : \"read:orders write:profile\" That\u2019s like saying: \u201cThis badge lets you read orders and update your profile, but not delete users.\u201d The backend checks these scopes to enforce access control. If you later change a user\u2019s permissions, future tokens will reflect that \u2014 but old tokens will keep old scopes until they expire.","title":"6\ufe0f\u20e3 Permissions \u2014 what the token \u201cgrants\u201d"},{"location":"concepts/networking/http/50-tokens/#7-so-in-summary","text":"Token = identity + permissions , not history. Server = verifier , not rememberer. State (like data or progress) lives in the database , not the session. Stateless means each request can stand alone \u2014 validated and processed without prior context. Scopes/roles inside the token define what you can touch.","title":"7\ufe0f\u20e3 So in summary:"},{"location":"learning/backend/spring-roadmap/","text":"\ud83e\udded SPRING ROADMAP \u2014 2025 Backend Path \u00b6 LEVEL 1: Solid Ground \u2014 Core Spring Boot Developer \u00b6 This is your foundation \u2014 everything else rests on it. Core Goals: Understand how a Spring Boot app is structured Build simple REST APIs returning JSON Handle dependency injection, profiles, and configuration Focus Topics: @SpringBootApplication , @RestController , @Service , @Repository application.yml vs application.properties @Value , @ConfigurationProperties JSON serialization ( Jackson ) HTTP status codes and responses Mini project idea: A \u201cBook Tracker\u201d REST API \u2014 CRUD endpoints for books + authors. LEVEL 2: Persistence & Data Layer Mastery \u00b6 Real backends talk to databases. Learn to do it cleanly. Focus Topics: Spring Data JPA + Hibernate Entity relationships ( @OneToMany , @ManyToOne , etc.) Pagination, sorting, and query methods Transactions ( @Transactional ) Database migrations with Flyway or Liquibase Mini project idea: Extend the Book Tracker with persistent storage (PostgreSQL), add audit fields (createdAt, updatedAt). LEVEL 3: Authentication & Security \u00b6 This is where you step into real API work. Focus Topics: Spring Security basics ( Authentication , Authorization ) JWT authentication (stateless) Role-based access control (RBAC) Password hashing (BCrypt) CORS and secure API design Mini project idea: Add login/register endpoints to your API with JWT-based authentication. Users can view their own books only. LEVEL 4: Architecture & Robustness \u00b6 At this stage, you shift from \u201cit works\u201d \u2192 \u201cit scales and survives.\u201d Focus Topics: Exception handling ( @ControllerAdvice , @ExceptionHandler ) Validation ( @Valid , @NotBlank , etc.) Logging (SLF4J, Logback) Profiles for environments (dev, prod) Testing (JUnit 5 + MockMvc) Configuration management (Spring Profiles, Environment) Mini project idea: Introduce custom exceptions and global error handling to your existing app. LEVEL 5: Modern Edge \u2014 APIs, Tokens & Integration \u00b6 This is where you start to meet real-world distributed systems . Focus Topics: OAuth2 / OpenID Connect (login with Google, GitHub, etc.) Token refresh & revocation REST best practices (HATEOAS, pagination links) Consuming 3rd-party APIs ( RestTemplate , WebClient ) API versioning, rate limiting Mini project idea: Create an API gateway or a public-facing API that integrates with another service (like OpenWeather API) while authenticating via JWT. LEVEL 6: DevOps-Aware Developer \u00b6 You don\u2019t need to be a DevOps engineer \u2014 but you must deploy confidently . Focus Topics: Dockerize your Spring app Environment variables and configuration CI/CD pipelines (GitHub Actions, GitLab CI) Basic cloud deployment (Render, Railway, AWS EC2, or GCP) Metrics & health checks ( /actuator ) Mini project idea: Dockerize your Book Tracker, deploy it on a free-tier cloud with a PostgreSQL database. LEVEL 7: Professional Edge \u2014 Going Beyond \u00b6 Now you\u2019re playing in the upper tier \u2014 not \u201ca Java developer,\u201d but a backend engineer . Optional but valuable expansions: Spring WebFlux (Reactive) \u2014 async, event-driven APIs Spring Cloud \u2014 microservices, discovery, config server, circuit breakers Kotlin + Spring Boot \u2014 cleaner syntax, rising popularity in Europe Redis \u2014 caching and session storage GraphQL with Spring \u2014 alternative to REST Testing excellence \u2014 Testcontainers, integration tests, contract testing \ud83e\udde9 Complementary Non-Spring Skills \u00b6 To make you complete in the eyes of recruiters and teams: Git + GitHub fluency (branches, pull requests, merges) Docker basics SQL proficiency (joins, indexes, normalization) API documentation (OpenAPI/Swagger) Basic cloud understanding (how to deploy, monitor, scale) System design mindset (how components talk to each other) \ud83d\udee0 Recommended Stack to Master Together \u00b6 Here\u2019s the most employable combination right now in Europe: Java 17+ Spring Boot 3.x Spring Security + JWT/OAuth2 Spring Data JPA + PostgreSQL Lombok + MapStruct (productivity) Maven or Gradle Docker Git + CI/CD \ud83e\udde0 Strategy \u00b6 First, solidify Spring Boot + REST + JPA + Security \u2014 these four are the \u201ccore muscle.\u201d Then branch into either: Reactive & Microservices (if you love architecture challenges) Cloud & Deployment (if you love full ownership) Kotlin + APIs (if you want cleaner syntax and a European edge \u2014 Kotlin\u2019s huge in Nordics & Baltics)","title":"\ud83e\udded SPRING ROADMAP \u2014 2025 Backend Path"},{"location":"learning/backend/spring-roadmap/#spring-roadmap-2025-backend-path","text":"","title":"\ud83e\udded SPRING ROADMAP \u2014 2025 Backend Path"},{"location":"learning/backend/spring-roadmap/#level-1-solid-ground-core-spring-boot-developer","text":"This is your foundation \u2014 everything else rests on it. Core Goals: Understand how a Spring Boot app is structured Build simple REST APIs returning JSON Handle dependency injection, profiles, and configuration Focus Topics: @SpringBootApplication , @RestController , @Service , @Repository application.yml vs application.properties @Value , @ConfigurationProperties JSON serialization ( Jackson ) HTTP status codes and responses Mini project idea: A \u201cBook Tracker\u201d REST API \u2014 CRUD endpoints for books + authors.","title":"LEVEL 1: Solid Ground \u2014 Core Spring Boot Developer"},{"location":"learning/backend/spring-roadmap/#level-2-persistence-data-layer-mastery","text":"Real backends talk to databases. Learn to do it cleanly. Focus Topics: Spring Data JPA + Hibernate Entity relationships ( @OneToMany , @ManyToOne , etc.) Pagination, sorting, and query methods Transactions ( @Transactional ) Database migrations with Flyway or Liquibase Mini project idea: Extend the Book Tracker with persistent storage (PostgreSQL), add audit fields (createdAt, updatedAt).","title":"LEVEL 2: Persistence &amp; Data Layer Mastery"},{"location":"learning/backend/spring-roadmap/#level-3-authentication-security","text":"This is where you step into real API work. Focus Topics: Spring Security basics ( Authentication , Authorization ) JWT authentication (stateless) Role-based access control (RBAC) Password hashing (BCrypt) CORS and secure API design Mini project idea: Add login/register endpoints to your API with JWT-based authentication. Users can view their own books only.","title":"LEVEL 3: Authentication &amp; Security"},{"location":"learning/backend/spring-roadmap/#level-4-architecture-robustness","text":"At this stage, you shift from \u201cit works\u201d \u2192 \u201cit scales and survives.\u201d Focus Topics: Exception handling ( @ControllerAdvice , @ExceptionHandler ) Validation ( @Valid , @NotBlank , etc.) Logging (SLF4J, Logback) Profiles for environments (dev, prod) Testing (JUnit 5 + MockMvc) Configuration management (Spring Profiles, Environment) Mini project idea: Introduce custom exceptions and global error handling to your existing app.","title":"LEVEL 4: Architecture &amp; Robustness"},{"location":"learning/backend/spring-roadmap/#level-5-modern-edge-apis-tokens-integration","text":"This is where you start to meet real-world distributed systems . Focus Topics: OAuth2 / OpenID Connect (login with Google, GitHub, etc.) Token refresh & revocation REST best practices (HATEOAS, pagination links) Consuming 3rd-party APIs ( RestTemplate , WebClient ) API versioning, rate limiting Mini project idea: Create an API gateway or a public-facing API that integrates with another service (like OpenWeather API) while authenticating via JWT.","title":"LEVEL 5: Modern Edge \u2014 APIs, Tokens &amp; Integration"},{"location":"learning/backend/spring-roadmap/#level-6-devops-aware-developer","text":"You don\u2019t need to be a DevOps engineer \u2014 but you must deploy confidently . Focus Topics: Dockerize your Spring app Environment variables and configuration CI/CD pipelines (GitHub Actions, GitLab CI) Basic cloud deployment (Render, Railway, AWS EC2, or GCP) Metrics & health checks ( /actuator ) Mini project idea: Dockerize your Book Tracker, deploy it on a free-tier cloud with a PostgreSQL database.","title":"LEVEL 6: DevOps-Aware Developer"},{"location":"learning/backend/spring-roadmap/#level-7-professional-edge-going-beyond","text":"Now you\u2019re playing in the upper tier \u2014 not \u201ca Java developer,\u201d but a backend engineer . Optional but valuable expansions: Spring WebFlux (Reactive) \u2014 async, event-driven APIs Spring Cloud \u2014 microservices, discovery, config server, circuit breakers Kotlin + Spring Boot \u2014 cleaner syntax, rising popularity in Europe Redis \u2014 caching and session storage GraphQL with Spring \u2014 alternative to REST Testing excellence \u2014 Testcontainers, integration tests, contract testing","title":"LEVEL 7: Professional Edge \u2014 Going Beyond"},{"location":"learning/backend/spring-roadmap/#complementary-non-spring-skills","text":"To make you complete in the eyes of recruiters and teams: Git + GitHub fluency (branches, pull requests, merges) Docker basics SQL proficiency (joins, indexes, normalization) API documentation (OpenAPI/Swagger) Basic cloud understanding (how to deploy, monitor, scale) System design mindset (how components talk to each other)","title":"\ud83e\udde9 Complementary Non-Spring Skills"},{"location":"learning/backend/spring-roadmap/#recommended-stack-to-master-together","text":"Here\u2019s the most employable combination right now in Europe: Java 17+ Spring Boot 3.x Spring Security + JWT/OAuth2 Spring Data JPA + PostgreSQL Lombok + MapStruct (productivity) Maven or Gradle Docker Git + CI/CD","title":"\ud83d\udee0 Recommended Stack to Master Together"},{"location":"learning/backend/spring-roadmap/#strategy","text":"First, solidify Spring Boot + REST + JPA + Security \u2014 these four are the \u201ccore muscle.\u201d Then branch into either: Reactive & Microservices (if you love architecture challenges) Cloud & Deployment (if you love full ownership) Kotlin + APIs (if you want cleaner syntax and a European edge \u2014 Kotlin\u2019s huge in Nordics & Baltics)","title":"\ud83e\udde0 Strategy"}]}